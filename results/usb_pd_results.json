[
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "pre.1",
    "title": "Page 1 (preface)",
    "full_path": "pre.1 Page 1",
    "page": 1,
    "level": 2,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus\nPower Delivery Specification\nRevision: 3.2\nVersion: 1.1\nRelease Date: 2024-10\nPage 2 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Revision History\nRevision Version Comments Issue Date"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.0",
    "title": "1.0 Initial release Revision 1.0 5 July, 2012",
    "full_path": "1.0 1.0 Initial release Revision 1.0 5 July, 2012",
    "page": 2,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.0",
    "title": "1.1 Including errata through 31-October-2012 31 October 2012",
    "full_path": "1.0 1.1 Including errata through 31-October-2012 31 October 2012",
    "page": 2,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.0",
    "title": "1.2 Including errata through 26-June-2013 26 June, 2013",
    "full_path": "1.0 1.2 Including errata through 26-June-2013 26 June, 2013",
    "page": 2,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.0",
    "title": "1.3 Including errata through 11-March-2014 11 March 2014",
    "full_path": "1.0 1.3 Including errata through 11-March-2014 11 March 2014",
    "page": 2,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "1.0 Initial release Revision 2.0 11 August 2014",
    "full_path": "2.0 1.0 Initial release Revision 2.0 11 August 2014",
    "page": 2,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "1.1 Including errata through 7-May 2015 7 May 2015",
    "full_path": "2.0 1.1 Including errata through 7-May 2015 7 May 2015",
    "page": 2,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "1.2 Including errata through 25-March-2016 25 March 2016",
    "full_path": "2.0 1.2 Including errata through 25-March-2016 25 March 2016",
    "page": 2,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "1.3 Including errata through 11-January-2017 11 January 2017",
    "full_path": "2.0 1.3 Including errata through 11-January-2017 11 January 2017",
    "page": 2,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.0",
    "title": "1.0 Initial release Revision 3.0 11 December 2015",
    "full_path": "3.0 1.0 Initial release Revision 3.0 11 December 2015",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.0",
    "title": "1.0a Including errata through 25-March-2016 25 March 2016",
    "full_path": "3.0 1.0a Including errata through 25-March-2016 25 March 2016",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.0",
    "title": "1.1 Including errata through 12-January-2017 12 January 2017",
    "full_path": "3.0 1.1 Including errata through 12-January-2017 12 January 2017",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.0",
    "title": "1.2 Including errata through 21-June-2018 21 June 2018",
    "full_path": "3.0 1.2 Including errata through 21-June-2018 21 June 2018",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.0",
    "title": "2.0 Including errata through 29-August-2019 29 August 2019",
    "full_path": "3.0 2.0 Including errata through 29-August-2019 29 August 2019",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.0 Including errata through May 2021 May 2021",
    "full_path": "3.1 1.0 Including errata through May 2021 May 2021",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.1 Including errata through July 2021",
    "full_path": "3.1 1.1 Including errata through July 2021",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nEPR Clarifications\nDefine AMS starting pointJuly 2021"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.2 Including errata through October 2021",
    "full_path": "3.1 1.2 Including errata through October 2021",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nClarify use of Retries\nBattery Capabilities\nFRS timing problem\nPPS power rule clarifications\nPeak current support for EPR AVS APDOOctober 2021"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.3 This version incorporates the following ECNs:",
    "full_path": "3.1 1.3 This version incorporates the following ECNs:",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "Robust EPR Source Operation\nEPR Source Caps Editorial\nSRC PPS behavior in low current request\nEnter USBJanuary 2022"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.4 Editorial changes",
    "full_path": "3.1 1.4 Editorial changes",
    "page": 2,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nCapabilities Mismatch Update\nChunking Timing Issue\nOT MitigationApril 2022\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 33.1 1.5 Editorial changes\nThis version incorporates the following ECNs:\nTimer Description Corrections\nChange Source_Info Requirements\nAMS UpdateJuly 2022"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.6 Editorial changes",
    "full_path": "3.1 1.6 Editorial changes",
    "page": 3,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nUSB4® V2 Updates\nData Reset Issues\nIncrease tSenderResponse\nPPS Power Limit Bit Update\nSupport for Asymmetric Mode\nTimer Description Corrections RevisitedOctober 2022"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.7 Editorial Changes",
    "full_path": "3.1 1.7 Editorial Changes",
    "page": 3,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nData Reset Invalid Reject Handling\nSource request\nSource Transition\nEPR EntryJanuary 2023"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.8 Editorial Changes",
    "full_path": "3.1 1.8 Editorial Changes",
    "page": 3,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "This version incorporates the following ECNs:\nSlew rate exemption for Power Role Swap.\nEUDO cable speed clarification.\nUpdate to PPS Requirements.\nDeprecate Interruptibility.\nSection 7.3 restructure and update.April 2023"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.1",
    "title": "1.9 Editorial Changes July 2023Revision Version Comments Issue Date",
    "full_path": "3.1 1.9 Editorial Changes July 2023Revision Version Comments Issue Date",
    "page": 3,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "Page 4 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-103.2 1.0 This version incorporates the following ECNs:\nVDM-use Conditions.\ntTypeCSinkWaitCap.\ntFirstSourceCap Clarification\nHard Reset Clarification.\nUnrecognized Country Code\nEPR Entry Process-1\nSPR AVS Definition\nEPR Power Rules ClarificationsOctober 2023"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3.2",
    "title": "1.1 This version incorporates the following ECNs:",
    "full_path": "3.2 1.1 This version incorporates the following ECNs:",
    "page": 4,
    "level": 2,
    "parent_id": "3",
    "tags": [],
    "content": "Power Transition time from EPR to PR_Swap\nCapabilities Mismatch Update\nDeprecate GotoMin and GiveBack Features and Update\nPower Reserve\nEPR Entry requirements Clarification\nEPRMDO and Entry Clarification.\nRemove 10.2.4 power sharing between ports\nSource PDP rating field clarifications\nSource Power Rules update.\nSource_Info Message Clarifications.\nCorrection to BMC description.\nEPR Source cap clarification.\nDelaying of V CONN Swap.\nEPR_Request in SPR Mode.\nGeneric transition diagram.\nRemoving the usage of Ping message\nSink Standby\nSource Info SupportOctober 2024Revision Version Comments Issue Date\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5LIMITED COPYRIGHT LICENSE\nTHE USB 3.0 PROMOTERS GRANT A CONDITIONAL COPYRIGHT LICENSE UNDER THE COPYRIGHTS EMBODIED\nIN THE USB POWER DELVERY SPECIFICATION TO USE AND REPRODUCE THE SPECIFICATION FOR THE SOLE\nPURPOSE OF, AND SOLELY TO THE EXTENT NECESSARY FOR, EVALUATING WHETHER TO IMPLEMENT THE\nSPECIFICATION IN PRODUCTS THAT WOULD COMPLY WITH THE SPECIFICATION. WITHOUT LIMITING THE\nFOREGOING, USE THE OF SPECIFICATION FOR THE PURPOSE OF FILING OR MODIFYING ANY PATENT\nAPPLICATION TO TARGET THE SPECIFICATION OR USB COMPLIANT PRODUCTS IS NOT AUTHORIZED. EXCEPT\nFOR THIS EXPRESS COPYRIGHT LICENSE, NO OTHER RIGHTS OR LICENSES ARE GRANTED, INCLUDING\nWITHOUT LIMITATION ANY PATENT LICENSES. IN ORDER TO OBTAIN ANY ADDITIONALY INTELLECTUAL\nPROPERTY LICENSES OR LICENSING COMMITMENTS ASSOCIATED WITH THE SPECIFICATION A PARTY MUST\nEXECUTE THE USB 3.0 ADOPTERS AGREEMENT. NOTE: BY USING THE SPECIFICATION, YOU ACCEPT THESE\nLICENSE TERMS ON YOUR OWN BEHALF AND, IN THE CASE WHERE YOU ARE DOING THIS AS AN EMPLOYEE, ON\nBEHALF OF YOUR EMPLOYER.\nINTELLECTUAL PROPERTY DISCLAIMER\nTHIS SPECIFICATION IS PROVIDED TO YOU \"AS IS\" WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY\nWARRANTY OF MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE. THE\nAUTHORS OF THIS SPECIFICATION DISCLAIM ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF\nANY PROPRIETARY RIGHTS, RELATING TO USE OR IMPLEMENTATION OF INFORMATION IN THIS\nSPECIFICATION. THE PROVISION OF THIS SPECIFICATION TO YOU DOES NOT PROVIDE YOU WITH ANY LICENSE,\nEXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS.\nUSB Type-C® and USB4® are trademarks of the Universal Serial Bus Implementers Forum (USB-IF).\nUSB Type-C®, USB-C® and USB4® are trademarks of the Universal Serial Bus Implementers Forum (USB-IF).\nDisplayPort™ is a trademark of VESA. Thunderbolt™ is a trademark of Intel Corporation. All product names are\ntrademarks, registered trademarks, or service marks of their respective owners.\nYou may only use the Thunderbolt™ trademark or logo in conjunction with products designed to this specification\nthat complete proper certification and executing a Thunderbolt™ trademark license - see http://usb.org/\ncompliance for further information.\nAll product names are trademarks, registered trademarks, or service marks of their respective owners.\nCopyright © 2010- 2024, USB 3.0 Promoter Group: Apple Inc., Hewlett-Packard Inc., Intel Corporation, Microsoft\nCorporation, Renesas, STMicroelectronics, and Texas Instruments.\nAll rights reserved.\nPlease send comments via electronic mail to techsup@usb.org .\nFor industry information, refer to the USB Implementers Forum web page at http://www.usb.org .\nPage 6 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Editors\nContributorsBob Dunstan\nRichard Petrie\nCharles Wang ACON, Advanced-Connectek, Inc. Zaki Moussaoui Apple\nConrad Choy ACON, Advanced-Connectek, Inc. Jeff Liu ASMedia Technology Inc.\nDennis Chuang ACON, Advanced-Connectek, Inc. Kuo Lung Li ASMedia Technology Inc.\nSteve Sedio ACON, Advanced-Connectek, Inc. Ming-Wei Hsu ASMedia Technology Inc.\nSunney Yang ACON, Advanced-Connectek, Inc. PS Tseng ASMedia Technology Inc.\nVicky Chuang ACON, Advanced-Connectek, Inc. Sam Tzeng ASMedia Technology Inc.\nJoseph Scanlon Advanced Micro Devices Thomas Hsu ASMedia Technology Inc.\nSujan Thomas Advanced Micro Devices Weikao Chang ASMedia Technology Inc.\nCaspar Lin Allion Labs, Inc. Yang Cheng ASMedia Technology Inc.\nCasper Lee Allion Labs, Inc. Aaron Hou Bizlink Technology Inc.\nDanny Shih Allion Labs, Inc. Shawn Meng Bizlink Technology Inc.\nHoward Chang Allion Labs, Inc. Bernard Shyu Bizlink Technology, Inc.\nGreg Stewart Analogix Semiconductor, Inc. Eric Wu Bizlink Technology, Inc.\nMehran Badii Analogix Semiconductor, Inc. Morphy Hsieh Bizlink Technology, Inc.\nAlexei Kosut Apple Sean O'Neal Bizlink Technology, Inc.\nBill Cornelius Apple Tiffany Hsiao Bizlink Technology, Inc.\nCarlos Colderon Apple Weichung Ooi Bizlink Technology, Inc.\nChris Uiterwijk Apple Rahul Bhushan Broadcom Corp.\nColin Whitby-Strevens Apple Asila nahas Cadence Design Systems, Inc.\nCorey Axelowitz Apple Claire Ying Cadence Design Systems, Inc.\nCorey Lange Apple Jie min Cadence Design Systems, Inc.\nDave Conroy Apple Mark Summers Cadence Design Systems, Inc.\nDavid Sekowski Apple Michal Staworko Cadence Design Systems, Inc.\nGirault Jones Apple Sathish Kumar Ganesan Cadence Design Systems, Inc.\nJames Orr Apple Alessandro Ingrassia Canova Tech\nJason Chung Apple Andrea Colognese Canova Tech\nJay Kim Apple Antonio Orzelli Canova Tech\nJeff Wilcox Apple Davide Ghedin Canova Tech\nJennifer Tsai Apple Matteo Casalin Canova Tech\nKarl Bowers Apple Michael Marioli Canova Tech\nKeith Porthouse Apple Nicola Scantamburlo Canova Tech\nKevin Hsiue Apple Paolo Pilla Canova Tech\nMatt Mora Apple Ray Huang Canyon Semiconductor\nPaul Baker Apple Yi-Feng Lin Canyon Semiconductor\nReese Schreiber Apple YuHung Lin Canyon Semiconductor\nRicardo Janezic Pregitzer Apple David Tsai Chrontel, Inc.\nRuchi Chaturvedi Apple Anshul Gulati Cypress Semiconductor\nSameer Kelkar Apple Anup Nayak Cypress Semiconductor\nSasha Tietz Apple Benjamin Kropf Cypress Semiconductor\nScott Jackson Apple Dhanraj Rajput Cypress Semiconductor\nSree Raman Apple Ganesh Subramaniam Cypress Semiconductor\nWilliam Ferry Apple Jagadeesan Raj Cypress Semiconductor\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7Junjie cui Cypress Semiconductor Chien-Cheng Kuo eEver Technology, Inc.\nManu Kumar Cypress Semiconductor Shyanjia Chen eEver Technology, Inc.\nMuthu M Cypress Semiconductor Abel Astley Ellisys\nNicholas Bodnaruk Cypress Semiconductor Chuck Trefts Ellisys\nPradeep Bajpai Cypress Semiconductor Emmanuel Durin Ellisys\nRajaram R Cypress Semiconductor Mario Pasquali Ellisys\nRama Vakkantula Cypress Semiconductor Tim Wei Ellisys\nRushil Kadakia Cypress Semiconductor Chien-Cheng Kuo Etron Technology, Inc.\nSimon Nguyen Cypress Semiconductor Jack Yang Etron Technology, Inc.\nSteven Wong Cypress Semiconductor Richard Crisp Etron Technology, Inc.\nSubu Sankaran Cypress Semiconductor Shyanjia Chen Etron Technology, Inc.\nSumeet Gupta Cypress Semiconductor TsungTa Lu Etron Technology, Inc.\nTejender Sheoran Cypress Semiconductor Christian Klein Fairchild Semiconductor\nVenkat Mandagulathar Cypress Semiconductor Oscar Freitas Fairchild Semiconductor\nXiaofeng Shen Cypress Semiconductor Souhib Harb Fairchild Semiconductor\nZeng Wei Cypress Semiconductor Amanda Ying Feature Integration Technology Inc.\nAdie Tan Dell Inc. Jacky Chan Feature Integration Technology Inc.\nAdolfo Montero Dell Inc. Kenny Hsieh Feature Integration Technology Inc.\nBruce Montag Dell Inc. KungAn Lin Feature Integration Technology Inc.\nGary Verdun Dell Inc. Paul Yang Feature Integration Technology Inc.\nKen Nicholas Dell Inc. Su Jaden Feature Integration Technology Inc.\nMarcin Nowak Dell Inc. Yu-Lin Chu Feature Integration Technology Inc.\nMerle Wood Dell Inc. Yulin Lan Feature Integration Technology Inc.\nMohammed Hijazi Dell Inc. AJ Yang Foxconn / Hon Hai\nSiddhartha Reddy Dell Inc. Bob Hall Foxconn / Hon Hai\nTerry Matula Dell Inc. Chihyin Kan Foxconn / Hon Hai\nJay Hu Derun Semiconductor Fred Fons Foxconn / Hon Hai\nShelly Liu Derun Semiconductor Jie Zheng Foxconn / Hon Hai\nBindhu Vasu Dialog Semiconductor (UK) Ltd Patrick Casher Foxconn / Hon Hai\nChanchal Gupta Dialog Semiconductor (UK) Ltd Shruti Deore Foxconn / Hon Hai\nDipti Baheti Dialog Semiconductor (UK) Ltd Steve Sedio Foxconn / Hon Hai\nDuc Doan Dialog Semiconductor (UK) Ltd Terry Little Foxconn / Hon Hai\nHolger Petersen Dialog Semiconductor (UK) Ltd Bob McVay Fresco Logic Inc.\nJianming Yao Dialog Semiconductor (UK) Ltd Christopher Meyers Fresco Logic Inc.\nJohn Shi Dialog Semiconductor (UK) Ltd Dian Kurniawan Fresco Logic Inc.\nKE Hong Dialog Semiconductor (UK) Ltd Tom Burton Fresco Logic Inc.\nKevin Mori Dialog Semiconductor (UK) Ltd Abraham Levkoy Google Inc.\nLarry Ping Dialog Semiconductor (UK) Ltd Adam Rodriguez Google Inc.\nMengfei Liu Dialog Semiconductor (UK) Ltd Alec Berg Google Inc.\nScott Brown Dialog Semiconductor (UK) Ltd Bartosz Szpila Google Inc.\nYimin Chen Dialog Semiconductor (UK) Ltd Benson Leung Google Inc.\nYong Li Dialog Semiconductor (UK) Ltd Chao Fei Google Inc.\nJustin Lee Diodes Incorporated Dave Bernard Google Inc.\nDan Ellis DisplayLink (UK) Ltd. David Schneider Google Inc.\nJason Young DisplayLink (UK) Ltd. Diana Zigterman Google Inc.\nKevin Jacobs DisplayLink (UK) Ltd. Eric Herrmann Google Inc.\nPaulo Alcobia DisplayLink (UK) Ltd. George-Daniel Matei Google Inc.\nPeter Burgers DisplayLink (UK) Ltd. Jameson Thies Google Inc.\nRichard Petrie DisplayLink (UK) Ltd. Jim Guerin Google Inc.\nPage 8 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Juan Fantin Google Inc. Lee Leppo HP Inc.\nKen Wu Google Inc. Rahul Lakdawala HP Inc.\nKyle Tso Google Inc. Robin Castell HP Inc.\nMark Hayter Google Inc. Roger Benson HP Inc.\nNathan Kolluru Google Inc. Steve Chen HP Inc.\nNithya Jagannathan Google Inc. Bai Sean Huawei Technologies Co., Ltd.\nSrikanth Lakshmikanthan Google Inc. Chunjiang Zhao Huawei Technologies Co., Ltd.\nTodd Broch Google Inc. JianQuan Wu Huawei Technologies Co., Ltd.\nToshak Singhal Google Inc. Li Zongjian Huawei Technologies Co., Ltd.\nVincent Palatin Google Inc. Liansheng Zheng Huawei Technologies Co., Ltd.\nXuelin Wu Google Inc. Lihua Duan Huawei Technologies Co., Ltd.\nZhenxue Xu Google Inc. Min Chen Huawei Technologies Co., Ltd.\nAlan Kinningham Granite River Labs Wang Feng Huawei Technologies Co., Ltd.\nAnand Murugan Granite River Labs Wei Haihong Huawei Technologies Co., Ltd.\nBalamurugan Manialagan Granite River Labs Zhenning Shi Huawei Technologies Co., Ltd.\nMedipalli Sowmya Granite River Labs James Xie Hynetek Semiconductor Co., Ltd\nMike Engbretson Granite River Labs Yingyang Ou Hynetek Semiconductor Co., Ltd\nMike Wu Granite River Labs Robert Heaton Indie Semiconductor\nMukesh Tatiya Granite River Labs Vincent Wang Indie Semiconductor\nNaresh Botsa Granite River Labs Benjamin Kropf Infineon Technologies\nPoornaKumar M. Granite River Labs Sie Boo Chiang Infineon Technologies\nPrajwal Rathod Granite River Labs Tue Fatt David Wee Infineon Technologies\nRajaraman V Granite River Labs Wee Tar Richard Ng Infineon Technologies\nSaai Ghoutham Revathi\nSelvamGranite River Labs Wolfgang Furtner Infineon Technologies\nSivan Perumal Granite River Labs Aruni Nelson Intel Corporation\nSivaram Murugesan Granite River Labs Bob Dunstan Intel Corporation\nTim Lin Granite River Labs Brad Saunders Intel Corporation\nVijay S. Granite River Labs Chee Lim Nge Intel Corporation\nVijayakumar P Granite River Labs Christine Krause Intel Corporation\nVishal Kakade Granite River Labs Chuen Ming Tan Intel Corporation\nYogeshwaran Venkatesan Granite River Labs Dan Froelich Intel Corporation\nJerry QinGuangDong OPPO Mobile\nTelecommunications Corp., Ltd.David Harriman Intel Corporation\nAlan Berkema Hewlett Packard David Hines Intel Corporation\nLee Atkinson Hewlett Packard David Thompson Intel Corporation\nRahul Lakdawala Hewlett Packard Guobin Liu Intel Corporation\nRobin Castell Hewlett Packard Harry Skinner Intel Corporation\nRon Schooley Hewlett Packard Henrik Leegaard Intel Corporation\nSteve Chen Hewlett Packard Jenn Chuan Cheng Intel Corporation\nSuketa Partiwala Hewlett Packard Jervis Lin Intel Corporation\nVaibhav Malik Hewlett Packard John Howard Intel Corporation\nWalter Fry Hewlett Packard Karthi Vadivelu Intel Corporation\nHideyuki HAYAFUJI Hosiden Corporation Leo Heiland Intel Corporation\nKeiji Mine Hosiden Corporation Maarit Harkonen Intel Corporation\nMasaki Yamaoka Hosiden Corporation Nge Chee Lim Intel Corporation\nTakashi Muto Hosiden Corporation Paul Durley Intel Corporation\nYasunori Nishikawa Hosiden Corporation Rahman Ismail Intel Corporation\nAlan Berkema HP Inc. Rajaram Regupathy Intel Corporation\nKenneth Chan HP Inc. Ronald Swartz Intel Corporation\nLee Atkinson HP Inc. Sarah Sharp Intel Corporation\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9Steve McGowan Intel Corporation Eric Wen Luxshare-ICT\nTim McKee Intel Corporation James Kirk Luxshare-ICT\nToby Opferman Intel Corporation James Stevens Luxshare-ICT\nUma Medepalli Intel Corporation Josue Castillo Luxshare-ICT\nVenkataramani\nGopalakrishnanIntel Corporation Pat Young Luxshare-ICT\nZiv Kabiry Intel Corporation Scott Shuey Luxshare-ICT\nJia Wei Intersil Corporation Stone Lin Luxshare-ICT\nWeijie Huang iST - Integrated Service\nTechnology Inc.Chikara Kakizawa Maxim Integrated Products\nAl Hsiao ITE Tech. Inc. Jacob Scott Maxim Integrated Products\nGreg Song ITE Tech. Inc. Ken Helfrich Maxim Integrated Products\nRichard Guo ITE Tech. Inc. Michael Miskho Maxim Integrated Products\nVictor Lin ITE Tech. Inc. Chris Yokum MCCI Corporation\nY.C. Chou ITE Tech. Inc. Geert Knapen MCCI Corporation\nKenta MinejimaJapan Aviation Electronics\nIndustry Ltd. (JAE)Terry Moore MCCI Corporation\nMark SaubertJapan Aviation Electronics\nIndustry Ltd. (JAE)Velmurugan Selvaraj MCCI Corporation\nToshio ShimoyamaJapan Aviation Electronics\nIndustry Ltd. (JAE)Tung-Sheng Lin MediaTek Inc.\nBrian Fetz Keysight Technologies Inc. Satoru Kumashiro MegaChips Corporation\nJit Lim Keysight Technologies Inc. Brian Marley Microchip Technology Inc.\nKoji Asakawa Kinetic Technologies Inc. Dave Perchlik Microchip Technology Inc.\nBabu Mailachalam Lattice Semiconductor Corp Don Perkins Microchip Technology Inc.\nGianluca Mariani Lattice Semiconductor Corp Fernando Gonzalez Microchip Technology Inc.\nJoel Coplen Lattice Semiconductor Corp John Sisto Microchip Technology Inc.\nThomas Watza Lattice Semiconductor Corp Josh Averyt Microchip Technology Inc.\nVesa Lauri Lattice Semiconductor Corp Kiet Tran Microchip Technology Inc.\nBruce Chuang Leadtrend Mark Bohm Microchip Technology Inc.\nEilian Liu Leadtrend Matthew Kalibat Microchip Technology Inc.\nChetan Kopalle LeCroy Corporation Mick Davis Microchip Technology Inc.\nDaniel H Jacobs LeCroy Corporation Prasanna Vengateshan Microchip Technology Inc.\nJake Jacobs LeCroy Corporation Rich Wahler Microchip Technology Inc.\nKimberley McKay LeCroy Corporation Richard Petrie Microchip Technology Inc.\nMike Engbretson LeCroy Corporation Ronald Kunin Microchip Technology Inc.\nMike Micheletti LeCroy Corporation Shannon Cash Microchip Technology Inc.\nRoy Chestnut LeCroy Corporation Thomas Farkas Microchip Technology Inc.\nTyler Joe LeCroy CorporationVenkataraman\nKrishnamoorthyMicrochip Technology Inc.\nPhil Jakes Lenovo Andrew Yang Microsoft Corporation\nDo Kyun Kim LG electronics Anthony Chen Microsoft Corporation\nWon-Jong Choi LG electronics Arvind Murching Microsoft Corporation\nWon-Jong Choi LG Electronics Ltd. Dave Perchlik Microsoft Corporation\nAaron Melgar Lion Semiconductor David Voth Microsoft Corporation\nChris Zhou Lion Semiconductor Geoff Shew Microsoft Corporation\nSehyung Jeon Lion Semiconductor Jayson Kastens Microsoft Corporation\nWonyoung Kim Lion Semiconductor Kai Inha Microsoft Corporation\nYongho Kim Lion Semiconductor Marwan Kadado Microsoft Corporation\nDave Thompson LSI Corporation Michelle Bergeron Microsoft Corporation\nAlan Kinningham Luxshare-ICT Nathan Sherman Microsoft Corporation\nAlan Liu Luxshare-ICT Rahul Ramadas Microsoft Corporation\nScott Brenden Intel Corporation Randy Aull Microsoft Corporation\nSridharan Ranganathan Intel Corporation Shiu Ng Microsoft Corporation\nDaniel Chen Luxshare-ICT Tieyong Yin Microsoft Corporation\nPage 10 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Timo Toivola Microsoft Corporation Hung-Chih Chiu Power Forest Technology Corporation\nToby Nixon Microsoft Corporation Jay Tu Power Forest Technology Corporation\nVahid Vassey Microsoft Corporation Adel Lahham Power Integrations\nVivek Gupta Microsoft Corporation Aditya Kulkarni Power Integrations\nYang You Microsoft Corporation Akshay Nayaknur Power Integrations\nAdib Al Abaji Molex LLC Amruta Patra Power Integrations\nAaron Xu Monolithic Power Systems Inc. K R Rahul Raj Power Integrations\nBo Zhou Monolithic Power Systems Inc. Kaushik Raam Power Integrations\nChristian Sporck Monolithic Power Systems Inc. Rahul Joshi Power Integrations\nDi Han Monolithic Power Systems Inc. Ricardo Pregiteer Power Integrations\nZhihong Yu Monolithic Power Systems Inc. Shruti Anand Power Integrations\nDan Wagner Motorola Mobility Inc. Amit gupta Qualcomm, Inc\nBen Crowe MQP Electronics Ltd. George Paparrizos Qualcomm, Inc\nPat Crowe MQP Electronics Ltd. Giovanni Garcea Qualcomm, Inc\nSten Carlsen MQP Electronics Ltd. Jack Pham Qualcomm, Inc\nKenji Oguma NEC Corporation James Goel Qualcomm, Inc\nChinJui Lin Nexperia B.V. Joshua Warner Qualcomm, Inc\nMax Guan Nexperia B.V. Karyn Vuong Qualcomm, Inc\nStefan Seider Nexperia B.V. Lalan Mishra Qualcomm, Inc\nFrank Borngr äbe\nr Nokia Corporation Nicholas Cadieux Qualcomm, Inc\nKai Inha Nokia Corporation Vamsi Samavedam Qualcomm, Inc\nPekka Leinonen Nokia Corporation Vatsal Patel Qualcomm, Inc\nRichard Petrie Nokia Corporation Chris Sporck Qualcomm, Inc.\nSten Carlsen Nokia Corporation Craig Aiken Qualcomm, Inc.\nAbhijeet Kulkarni NXP Semiconductors Narendra Mehta Qualcomm, Inc.\nAhmad Yazdi NXP Semiconductors Terry Remple Qualcomm, Inc.\nBart Vertenten NXP Semiconductors Will Kun Qualcomm, Inc.\nDennis Ha NXP Semiconductors Yoram Rimoni Qualcomm, Inc.\nDong Nguyen NXP Semiconductors Fan-Hau Hsu Realtek Semiconductor Corp.\nGuru Prasad NXP Semiconductors Tsung-Peng Chuang Realtek Semiconductor Corp.\nKen Jaramillo NXP Semiconductors Atsushi Mitamura Renesas Electronics Corp.\nKrishnan TN NXP Semiconductors Bob Dunstan Renesas Electronics Corp.\nMichael Joehren NXP Semiconductors Brian Allen Renesas Electronics Corp.\nRobert de Nie NXP Semiconductors Dan Aoki Renesas Electronics Corp.\nRod Whitby NXP Semiconductors Fengshuan Zhou Renesas Electronics Corp.\nVijendra Kuroodi NXP Semiconductors Hajime Nozaki Renesas Electronics Corp.\nWinston Langeslag NXP Semiconductors John Carpenter Renesas Electronics Corp.\nRobert Heaton Obsidian Technology Kiichi Muto Renesas Electronics Corp.\nAndrew Yoo ON Semiconductor Masami Katagiri Renesas Electronics Corp.\nBrady Maasen ON Semiconductor Nobuo Furuya Renesas Electronics Corp.\nBryan McCoy ON Semiconductor Patrick Yu Renesas Electronics Corp.\nChristian Klein ON Semiconductor Peter Teng Renesas Electronics Corp.\nCor Voorwinden ON Semiconductor Philip Leung Renesas Electronics Corp.\nEdward Berrios ON Semiconductor Steve Roux Renesas Electronics Corp.\nMichael Smith ON Semiconductor Tetsu Sato Renesas Electronics Corp.\nOscar Freitas ON Semiconductor Toshifumi Yamaoka Renesas Electronics Corp.\nTom Duffy ON Semiconductor Yimin Chen Renesas Electronics Corp.\nBrian Collins Parade Technologies Inc. Chunan Kuo Richtek Technology Corporation\nCraig Wiley Parade Technologies Inc. Heinz Wei Richtek Technology Corporation\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 11Max Huang Richtek Technology Corporation Shannon Cash SMSC\nTZUHSIEN CHUANG Richtek Technology Corporation Mark Bohm SMSC\nTatsuya Irisawa Ricoh Company Ltd. Tim Knowlton SMSC\nAkihiro Ono Rohm Co. Ltd. William Chiechi SMSC\nChris Lin Rohm Co. Ltd. Shigenori Tagami Sony Corporation\nHidenori Nishimoto Rohm Co. Ltd. Shinichi Hirata Sony Corporation\nKris Bahar Rohm Co. Ltd. Amanda Hosler Specwerkz\nManabu Miyata Rohm Co. Ltd. Bob Dunstan Specwerkz\nRuben Balbuena Rohm Co. Ltd. Brad Saunders Specwerkz\nTakashi Sato Rohm Co. Ltd. Diane Lenox Specwerkz\nVijendra Kuroodi Rohm Co. Ltd. Michael Munn StarTech.com Ltd.\nYusuke Kondo Rohm Co. Ltd. Fabien Friess ST-Ericsson\nKazuomi Nagai ROHM Co., Ltd. Giuseppe Platania ST-Ericsson\nMatti Kulmala Salcomp Plc Jean-Francois Gatto ST-Ericsson\nToni Lehimo Salcomp Plc Milan Stamenkovic ST-Ericsson\nEdward Lee Samsung Electronics Co. Ltd. Nicolas Florenchie ST-Ericsson\nTong Kim Samsung Electronics Co. Ltd. Patrizia Milazzo ST-Ericsson\nAmit Bouzaglo Scosche Industries Christophe Cochard STMicroelectronics\nAlvin Cox Seagate Technology LLC Christophe Lorin STMicroelectronics\nEmmanuel Lemay Seagate Technology LLC Filippo Bonaccorso STMicroelectronics\nJohn Hein Seagate Technology LLC Jessy Guilbot STMicroelectronics\nMarc Noblitt Seagate Technology LLC Joel Huloux STMicroelectronics\nMichael Morgan Seagate Technology LLC John Bloomfield STMicroelectronics\nRonald Rueckert Seagate Technology LLC Massimo Panzica STMicroelectronics\nTony Priborsky Seagate Technology LLC Meriem Mersel STMicroelectronics\nChin Chang Semtech Corporation Nathalie Ballot STMicroelectronics\nTom Farkas Semtech Corporation Pascal Legrand STMicroelectronics\nAnkit Garg Siemens Industry Software Inc. Patrizia Milazzo STMicroelectronics\nNing Dai Silergy Corp. Richard O’Connor STMicroelectronics\nWanfeng Zhang Silergy Corp. Morten Christiansen Synopsys, Inc.\nKafai Leung Silicon Laboratories, Inc. Nivin George Synopsys, Inc.\nKok Hong Soh Silicon Laboratories, Inc. Prishkit Abrol Synopsys, Inc.\nSorin Badiu Silicon Laboratories, Inc. Zongyao Wen Synopsys, Inc.\nSteven Ghang Silicon Laboratories, Inc. Joan Marrinan Tektronix\nAbhishek SardeshpandeSiliConch Systems Private\nLimitedKimberley McKay Teledyne-LeCroy\nAniket MathadSiliConch Systems Private\nLimitedMatthew Dunn Teledyne-LeCroy\nChandana NSiliConch Systems Private\nLimitedTony Minchell Teledyne-LeCroy\nJaswanth AmmineniSiliConch Systems Private\nLimitedAnand Dabak Texas Instruments\nJinisha PatelSiliConch Systems Private\nLimitedAnnamalai Kasthuri Texas Instruments\nKaustubh KumarSiliConch Systems Private\nLimitedBIJU Erayamkot\nPanayamthattaTexas Instruments\nNitishSiliConch Systems Private\nLimitedBill Waters Texas Instruments\nPavitra BalasubramanianSiliConch Systems Private\nLimitedBing Lu Texas Instruments\nRakesh PolasaSiliConch Systems Private\nLimitedDeric Waters Texas Instruments\nSatish Anand VerkilaSiliConch Systems Private\nLimitedGrant Ley Texas Instruments\nShubham PaliwalSiliConch Systems Private\nLimitedGregory Watkins Texas Instruments\nVishnu PusuluriSiliConch Systems Private\nLimitedIngolf Frank Texas Instruments\nJohn Sisto SMSC Ivo Huber Texas Instruments\nKen Gay SMSC Javed Ahmad Texas Instruments\nRichard Wahler SMSC Jean Picard Texas Instruments\nPage 12 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10John Perry Texas Instruments\nKasthuri Annamalai Texas Instruments\nMartin Patoka Texas Instruments\nMike Campbell Texas Instruments\nScott Jackson Texas Instruments\nShafiuddin Mohammed Texas Instruments\nSrinath Hosur Texas Instruments\nSteven Tom Texas Instruments\nYoon Lee Texas Instruments\nTim Wilhelm The Silanna Group Pty. Ltd.\nTod Wolf The Silanna Group Pty. Ltd.\nChris Yokum Total Phase\nDylan Su UL LLC\nEric Wall UL LLC\nJason Smith UL LLC\nTerry Kao UL LLC\nSteven Chen Unigraf OY\nTopi Lampiranta Unigraf OY\nBrad Cox Ventev Mobile\nColin Vose Ventev Mobile\nDydron Lin VIA Technologies, Inc.\nFong-Jim Wang VIA Technologies, Inc.\nJay Tseng VIA Technologies, Inc.\nRex Chang VIA Technologies, Inc.\nTerrance Shih VIA Technologies, Inc.\nHo Wen Tsai Weltrend Semiconductor\nHung Chiang Weltrend Semiconductor\nJeng Cheng Liu Weltrend Semiconductor\nPriscilla Lee Weltrend Semiconductor\nWayne Lo Weltrend Semiconductor\nCharles NeumannWestern Digital Technologies,\nInc.\nCurtis StevensWestern Digital Technologies,\nInc.\nJohn MaroneyWestern Digital Technologies,\nInc.\nJoe O'Brien Wilder Technologies\nWill Miller Wilder Technologies\nCanfeng Chen Xiaomi Communications Co., Ltd.\nJuejia Zhou Xiaomi Communications Co., Ltd.\nXiaoxing Yang Xiaomi Communications Co., Ltd.\nLiu QiongZhuhai Smartware Technology\nCo., Ltd.\nLong ZhangZhuhai Smartware Technology\nCo., Ltd.\nYuanchao LiangZhuhai Smartware Technology\nCo., Ltd.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 13Table Of Contents\nRevision History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nLIMITED COPYRIGHT LICENSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nINTELLECTUAL PROPERTY DISCLAIMER . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nEditors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nContributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nTable Of Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13\nList of Figures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19\nList of Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .27"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "full_path": "1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "page": 13,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.1",
    "title": "Overview............................................................................................................................................ 34",
    "full_path": "1.1 Overview............................................................................................................................................ 34",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.2",
    "title": "Purpose .............................................................................................................................................. 35",
    "full_path": "1.2 Purpose .............................................................................................................................................. 35",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.2.1",
    "title": "Scope .............................................................................................................................................................................. 36",
    "full_path": "1.2.1 Scope .............................................................................................................................................................................. 36",
    "page": 13,
    "level": 3,
    "parent_id": "1.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.3",
    "title": "Section Overview ........................................................................................................................... 36",
    "full_path": "1.3 Section Overview ........................................................................................................................... 36",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4",
    "title": "Conventions...................................................................................................................................... 37",
    "full_path": "1.4 Conventions...................................................................................................................................... 37",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4.1",
    "title": "Precedence .................................................................................................................................................................. 37",
    "full_path": "1.4.1 Precedence .................................................................................................................................................................. 37",
    "page": 13,
    "level": 3,
    "parent_id": "1.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4.2",
    "title": "Keywords ..................................................................................................................................................................... 37",
    "full_path": "1.4.2 Keywords ..................................................................................................................................................................... 37",
    "page": 13,
    "level": 3,
    "parent_id": "1.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4.3",
    "title": "Numbering .................................................................................................................................................................. 38",
    "full_path": "1.4.3 Numbering .................................................................................................................................................................. 38",
    "page": 13,
    "level": 3,
    "parent_id": "1.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.5",
    "title": "Related Documents ....................................................................................................................... 39",
    "full_path": "1.5 Related Documents ....................................................................................................................... 39",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.6",
    "title": "Terms and Abbreviations........................................................................................................... 40",
    "full_path": "1.6 Terms and Abbreviations........................................................................................................... 40",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.7",
    "title": "Parameter Values........................................................................................................................... 52",
    "full_path": "1.7 Parameter Values........................................................................................................................... 52",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.8",
    "title": "Changes from Revision 3.0......................................................................................................... 52",
    "full_path": "1.8 Changes from Revision 3.0......................................................................................................... 52",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.9",
    "title": "Compatibility with Revision 2.0 .............................................................................................. 52",
    "full_path": "1.9 Compatibility with Revision 2.0 .............................................................................................. 52",
    "page": 13,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "full_path": "2 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "page": 13,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1",
    "title": "Introduction ..................................................................................................................................... 53",
    "full_path": "2.1 Introduction ..................................................................................................................................... 53",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.1",
    "title": "Power Delivery Source Operational Contracts ............................................................................................ 53",
    "full_path": "2.1.1 Power Delivery Source Operational Contracts ............................................................................................ 53",
    "page": 13,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.2",
    "title": "Power Delivery Contract Negotiation ............................................................................................................. 53",
    "full_path": "2.1.2 Power Delivery Contract Negotiation ............................................................................................................. 53",
    "page": 13,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.3",
    "title": "Other Uses for Power Delivery ........................................................................................................................... 54",
    "full_path": "2.1.3 Other Uses for Power Delivery ........................................................................................................................... 54",
    "page": 13,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.2",
    "title": "Compatibility with Revision 2.0 .............................................................................................. 54",
    "full_path": "2.2 Compatibility with Revision 2.0 .............................................................................................. 54",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.3",
    "title": "USB Power Delivery Capable Devices ................................................................................... 55",
    "full_path": "2.3 USB Power Delivery Capable Devices ................................................................................... 55",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4",
    "title": "SOP* Communication ................................................................................................................... 57",
    "full_path": "2.4 SOP* Communication ................................................................................................................... 57",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.1",
    "title": "Introduction ................................................................................................................................................................ 57",
    "full_path": "2.4.1 Introduction ................................................................................................................................................................ 57",
    "page": 13,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.2",
    "title": "SOP* Collision Avoidance ...................................................................................................................................... 57",
    "full_path": "2.4.2 SOP* Collision Avoidance ...................................................................................................................................... 57",
    "page": 13,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.3",
    "title": "SOP Communication ............................................................................................................................................... 57",
    "full_path": "2.4.3 SOP Communication ............................................................................................................................................... 57",
    "page": 13,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.4",
    "title": "SOP'/SOP'' Communication with Cable Plugs .............................................................................................. 57",
    "full_path": "2.4.4 SOP'/SOP'' Communication with Cable Plugs .............................................................................................. 57",
    "page": 13,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.5",
    "title": "Operational Overview.................................................................................................................. 59",
    "full_path": "2.5 Operational Overview.................................................................................................................. 59",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.5.1",
    "title": "Source Operation ...................................................................................................................................................... 59",
    "full_path": "2.5.1 Source Operation ...................................................................................................................................................... 59",
    "page": 13,
    "level": 3,
    "parent_id": "2.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.5.2",
    "title": "Sink Operation ........................................................................................................................................................... 62",
    "full_path": "2.5.2 Sink Operation ........................................................................................................................................................... 62",
    "page": 13,
    "level": 3,
    "parent_id": "2.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.5.3",
    "title": "Cable Plugs .................................................................................................................................................................. 65",
    "full_path": "2.5.3 Cable Plugs .................................................................................................................................................................. 65",
    "page": 13,
    "level": 3,
    "parent_id": "2.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6",
    "title": "Architectural Overview ............................................................................................................... 66",
    "full_path": "2.6 Architectural Overview ............................................................................................................... 66",
    "page": 13,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.1",
    "title": "Policy ............................................................................................................................................................................. 69",
    "full_path": "2.6.1 Policy ............................................................................................................................................................................. 69",
    "page": 13,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.2",
    "title": "Message Formation and Transmission ........................................................................................................... 70",
    "full_path": "2.6.2 Message Formation and Transmission ........................................................................................................... 70",
    "page": 13,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.3",
    "title": "Collision Avoidance ................................................................................................................................................. 70",
    "full_path": "2.6.3 Collision Avoidance ................................................................................................................................................. 70",
    "page": 13,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4",
    "title": "Power supply ............................................................................................................................................................. 71",
    "full_path": "2.6.4 Power supply ............................................................................................................................................................. 71",
    "page": 13,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.5",
    "title": "DFP/UFP ...................................................................................................................................................................... 71",
    "full_path": "2.6.5 DFP/UFP ...................................................................................................................................................................... 71",
    "page": 13,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": "Page 14 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-102.6.6 Cable and Connectors ............................................................................................................................................. 72"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.7",
    "title": "Interactions between Non-PD, BC, and PD devices ................................................................................... 72",
    "full_path": "2.6.7 Interactions between Non-PD, BC, and PD devices ................................................................................... 72",
    "page": 14,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.8",
    "title": "Power Rules ................................................................................................................................................................ 72",
    "full_path": "2.6.8 Power Rules ................................................................................................................................................................ 72",
    "page": 14,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.7",
    "title": "Extended Power Range (EPR) Operation............................................................................ 73",
    "full_path": "2.7 Extended Power Range (EPR) Operation............................................................................ 73",
    "page": 14,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8",
    "title": "Charging Models............................................................................................................................. 75",
    "full_path": "2.8 Charging Models............................................................................................................................. 75",
    "page": 14,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8.1",
    "title": "Fixed Supply Charging Models ........................................................................................................................... 75",
    "full_path": "2.8.1 Fixed Supply Charging Models ........................................................................................................................... 75",
    "page": 14,
    "level": 3,
    "parent_id": "2.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8.2",
    "title": "Programmable Power Supply (PPS) Charging Models ............................................................................ 75",
    "full_path": "2.8.2 Programmable Power Supply (PPS) Charging Models ............................................................................ 75",
    "page": 14,
    "level": 3,
    "parent_id": "2.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8.3",
    "title": "Adjustable Voltage Supply (AVS) Charging Models .................................................................................. 76",
    "full_path": "2.8.3 Adjustable Voltage Supply (AVS) Charging Models .................................................................................. 76",
    "page": 14,
    "level": 3,
    "parent_id": "2.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "full_path": "3 USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "page": 14,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "full_path": "4 Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "page": 14,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.1",
    "title": "Interoperability with other USB Specifications ................................................................ 78",
    "full_path": "4.1 Interoperability with other USB Specifications ................................................................ 78",
    "page": 14,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.2",
    "title": "Dead Battery Detection / Unpowered Port Detection................................................... 78",
    "full_path": "4.2 Dead Battery Detection / Unpowered Port Detection................................................... 78",
    "page": 14,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.3",
    "title": "Cable IR Ground Drop (IR Drop) ............................................................................................. 78",
    "full_path": "4.3 Cable IR Ground Drop (IR Drop) ............................................................................................. 78",
    "page": 14,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.4",
    "title": "Cable Type Detection.................................................................................................................... 78",
    "full_path": "4.4 Cable Type Detection.................................................................................................................... 78",
    "page": 14,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "full_path": "5 Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "page": 14,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.1",
    "title": "Physical Layer Overview ............................................................................................................ 79",
    "full_path": "5.1 Physical Layer Overview ............................................................................................................ 79",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.2",
    "title": "Physical Layer Functions............................................................................................................ 79",
    "full_path": "5.2 Physical Layer Functions............................................................................................................ 79",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.3",
    "title": "Symbol Encoding............................................................................................................................ 80",
    "full_path": "5.3 Symbol Encoding............................................................................................................................ 80",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.4",
    "title": "Ordered Sets..................................................................................................................................... 81",
    "full_path": "5.4 Ordered Sets..................................................................................................................................... 81",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.5",
    "title": "Transmitted Bit Ordering........................................................................................................... 83",
    "full_path": "5.5 Transmitted Bit Ordering........................................................................................................... 83",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6",
    "title": "Packet Format ................................................................................................................................. 84",
    "full_path": "5.6 Packet Format ................................................................................................................................. 84",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1",
    "title": "Packet Framing ......................................................................................................................................................... 84",
    "full_path": "5.6.1 Packet Framing ......................................................................................................................................................... 84",
    "page": 14,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.2",
    "title": "CRC ................................................................................................................................................................................. 86",
    "full_path": "5.6.2 CRC ................................................................................................................................................................................. 86",
    "page": 14,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.3",
    "title": "Packet Detection Errors ........................................................................................................................................ 89",
    "full_path": "5.6.3 Packet Detection Errors ........................................................................................................................................ 89",
    "page": 14,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.4",
    "title": "Hard Reset ................................................................................................................................................................... 89",
    "full_path": "5.6.4 Hard Reset ................................................................................................................................................................... 89",
    "page": 14,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.5",
    "title": "Cable Reset .................................................................................................................................................................. 90",
    "full_path": "5.6.5 Cable Reset .................................................................................................................................................................. 90",
    "page": 14,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.7",
    "title": "Collision Avoidance....................................................................................................................... 91",
    "full_path": "5.7 Collision Avoidance....................................................................................................................... 91",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8",
    "title": "Bi-phase Mark Coding (BMC) Signaling Scheme .............................................................. 92",
    "full_path": "5.8 Bi-phase Mark Coding (BMC) Signaling Scheme .............................................................. 92",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.1",
    "title": "Encoding and signaling .......................................................................................................................................... 92",
    "full_path": "5.8.1 Encoding and signaling .......................................................................................................................................... 92",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.2",
    "title": "Transmit and Receive Masks ............................................................................................................................... 96",
    "full_path": "5.8.2 Transmit and Receive Masks ............................................................................................................................... 96",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.3",
    "title": "Transmitter Load Model .....................................................................................................................................103",
    "full_path": "5.8.3 Transmitter Load Model .....................................................................................................................................103",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.4",
    "title": "BMC Common specifications .............................................................................................................................105",
    "full_path": "5.8.4 BMC Common specifications .............................................................................................................................105",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.5",
    "title": "BMC Transmitter Specifications ......................................................................................................................106",
    "full_path": "5.8.5 BMC Transmitter Specifications ......................................................................................................................106",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.6",
    "title": "BMC Receiver Specifications .............................................................................................................................110",
    "full_path": "5.8.6 BMC Receiver Specifications .............................................................................................................................110",
    "page": 14,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.9",
    "title": "Built in Self-Test (BIST)............................................................................................................ 113",
    "full_path": "5.9 Built in Self-Test (BIST)............................................................................................................ 113",
    "page": 14,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.9.1",
    "title": "BIST Carrier Mode .................................................................................................................................................113",
    "full_path": "5.9.1 BIST Carrier Mode .................................................................................................................................................113",
    "page": 14,
    "level": 3,
    "parent_id": "5.9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.9.2",
    "title": "BIST Test Data Mode .............................................................................................................................................113",
    "full_path": "5.9.2 BIST Test Data Mode .............................................................................................................................................113",
    "page": 14,
    "level": 3,
    "parent_id": "5.9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "full_path": "6 Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "page": 14,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.1",
    "title": "Overview......................................................................................................................................... 114",
    "full_path": "6.1 Overview......................................................................................................................................... 114",
    "page": 14,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2",
    "title": "Messages......................................................................................................................................... 115",
    "full_path": "6.2 Messages......................................................................................................................................... 115",
    "page": 14,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1",
    "title": "Message Construction ..........................................................................................................................................115",
    "full_path": "6.2.1 Message Construction ..........................................................................................................................................115",
    "page": 14,
    "level": 3,
    "parent_id": "6.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3",
    "title": "Control Message .......................................................................................................................... 128",
    "full_path": "6.3 Control Message .......................................................................................................................... 128",
    "page": 14,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.1",
    "title": "GoodCRC Message ..................................................................................................................................................129",
    "full_path": "6.3.1 GoodCRC Message ..................................................................................................................................................129",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.2",
    "title": "GotoMin Message (Deprecated) .......................................................................................................................129",
    "full_path": "6.3.2 GotoMin Message (Deprecated) .......................................................................................................................129",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.3",
    "title": "Accept Message .......................................................................................................................................................129",
    "full_path": "6.3.3 Accept Message .......................................................................................................................................................129",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.4",
    "title": "Reject Message ........................................................................................................................................................129",
    "full_path": "6.3.4 Reject Message ........................................................................................................................................................129",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.5",
    "title": "Ping Message ............................................................................................................................................................130",
    "full_path": "6.3.5 Ping Message ............................................................................................................................................................130",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.6",
    "title": "PS_RDY Message .....................................................................................................................................................130",
    "full_path": "6.3.6 PS_RDY Message .....................................................................................................................................................130",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.7",
    "title": "Get_Source_Cap Message ....................................................................................................................................131",
    "full_path": "6.3.7 Get_Source_Cap Message ....................................................................................................................................131",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.8",
    "title": "Get_Sink_Cap Message ..........................................................................................................................................131",
    "full_path": "6.3.8 Get_Sink_Cap Message ..........................................................................................................................................131",
    "page": 14,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 156.3.9 DR_Swap Message ..................................................................................................................................................131"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.10",
    "title": "PR_Swap Message ..................................................................................................................................................131",
    "full_path": "6.3.10 PR_Swap Message ..................................................................................................................................................131",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.11",
    "title": "V CONN _Swap Message ...........................................................................................................................................132",
    "full_path": "6.3.11 V CONN _Swap Message ...........................................................................................................................................132",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12",
    "title": "Wait Message ...........................................................................................................................................................133",
    "full_path": "6.3.12 Wait Message ...........................................................................................................................................................133",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.13",
    "title": "Soft Reset Message ................................................................................................................................................134",
    "full_path": "6.3.13 Soft Reset Message ................................................................................................................................................134",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.14",
    "title": "Data_Reset Message ..............................................................................................................................................135",
    "full_path": "6.3.14 Data_Reset Message ..............................................................................................................................................135",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.15",
    "title": "Data_Reset_Complete Message .........................................................................................................................135",
    "full_path": "6.3.15 Data_Reset_Complete Message .........................................................................................................................135",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.16",
    "title": "Not_Supported Message ......................................................................................................................................135",
    "full_path": "6.3.16 Not_Supported Message ......................................................................................................................................135",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.17",
    "title": "Get_Source_Cap_Extended Message ...............................................................................................................136",
    "full_path": "6.3.17 Get_Source_Cap_Extended Message ...............................................................................................................136",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.18",
    "title": "Get_Status Message ................................................................................................................................................136",
    "full_path": "6.3.18 Get_Status Message ................................................................................................................................................136",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.19",
    "title": "FR_Swap Message ..................................................................................................................................................136",
    "full_path": "6.3.19 FR_Swap Message ..................................................................................................................................................136",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.20",
    "title": "Get_PPS_Status .........................................................................................................................................................137",
    "full_path": "6.3.20 Get_PPS_Status .........................................................................................................................................................137",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.21",
    "title": "Get_Country_Codes ................................................................................................................................................137",
    "full_path": "6.3.21 Get_Country_Codes ................................................................................................................................................137",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.22",
    "title": "Get_Sink_Cap_Extended Message ....................................................................................................................137",
    "full_path": "6.3.22 Get_Sink_Cap_Extended Message ....................................................................................................................137",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.23",
    "title": "Get_Source_Info Message ....................................................................................................................................137",
    "full_path": "6.3.23 Get_Source_Info Message ....................................................................................................................................137",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.24",
    "title": "Get_Revision Message ..........................................................................................................................................137",
    "full_path": "6.3.24 Get_Revision Message ..........................................................................................................................................137",
    "page": 15,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4",
    "title": "Data Message ................................................................................................................................ 138",
    "full_path": "6.4 Data Message ................................................................................................................................ 138",
    "page": 15,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1",
    "title": "Capabilities Message .............................................................................................................................................139",
    "full_path": "6.4.1 Capabilities Message .............................................................................................................................................139",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2",
    "title": "Request Message ....................................................................................................................................................155",
    "full_path": "6.4.2 Request Message ....................................................................................................................................................155",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3",
    "title": "BIST Message ...........................................................................................................................................................159",
    "full_path": "6.4.3 BIST Message ...........................................................................................................................................................159",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4",
    "title": "Vendor Defined Message .....................................................................................................................................162",
    "full_path": "6.4.4 Vendor Defined Message .....................................................................................................................................162",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5",
    "title": "Battery_Status Message .......................................................................................................................................196",
    "full_path": "6.4.5 Battery_Status Message .......................................................................................................................................196",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6",
    "title": "Alert Message ...........................................................................................................................................................198",
    "full_path": "6.4.6 Alert Message ...........................................................................................................................................................198",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.7",
    "title": "Get_Country_Info Message .................................................................................................................................201",
    "full_path": "6.4.7 Get_Country_Info Message .................................................................................................................................201",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8",
    "title": "Enter_USB Message ...............................................................................................................................................202",
    "full_path": "6.4.8 Enter_USB Message ...............................................................................................................................................202",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.9",
    "title": "EPR_Request Message ..........................................................................................................................................205",
    "full_path": "6.4.9 EPR_Request Message ..........................................................................................................................................205",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10",
    "title": "EPR_Mode Message ...............................................................................................................................................206",
    "full_path": "6.4.10 EPR_Mode Message ...............................................................................................................................................206",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.11",
    "title": "Source_Info Message .............................................................................................................................................212",
    "full_path": "6.4.11 Source_Info Message .............................................................................................................................................212",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.12",
    "title": "Revision Message ...................................................................................................................................................214",
    "full_path": "6.4.12 Revision Message ...................................................................................................................................................214",
    "page": 15,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5",
    "title": "Extended Message ...................................................................................................................... 215",
    "full_path": "6.5 Extended Message ...................................................................................................................... 215",
    "page": 15,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1",
    "title": "Source_Capabilities_Extended Message .......................................................................................................216",
    "full_path": "6.5.1 Source_Capabilities_Extended Message .......................................................................................................216",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2",
    "title": "Status Message ........................................................................................................................................................221",
    "full_path": "6.5.2 Status Message ........................................................................................................................................................221",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.3",
    "title": "Get_Battery_Cap Message ...................................................................................................................................227",
    "full_path": "6.5.3 Get_Battery_Cap Message ...................................................................................................................................227",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.4",
    "title": "Get_Battery_Status Message ..............................................................................................................................227",
    "full_path": "6.5.4 Get_Battery_Status Message ..............................................................................................................................227",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5",
    "title": "Battery_Capabilities Message ...........................................................................................................................228",
    "full_path": "6.5.5 Battery_Capabilities Message ...........................................................................................................................228",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.6",
    "title": "Get_Manufacturer_Info Message ......................................................................................................................230",
    "full_path": "6.5.6 Get_Manufacturer_Info Message ......................................................................................................................230",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.7",
    "title": "Manufacturer_Info Message ..............................................................................................................................231",
    "full_path": "6.5.7 Manufacturer_Info Message ..............................................................................................................................231",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.8",
    "title": "Security Messages ..................................................................................................................................................233",
    "full_path": "6.5.8 Security Messages ..................................................................................................................................................233",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.9",
    "title": "Firmware Update Messages ..............................................................................................................................234",
    "full_path": "6.5.9 Firmware Update Messages ..............................................................................................................................234",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.10",
    "title": "PPS_Status Message ...............................................................................................................................................235",
    "full_path": "6.5.10 PPS_Status Message ...............................................................................................................................................235",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.11",
    "title": "Country_Codes Message ......................................................................................................................................237",
    "full_path": "6.5.11 Country_Codes Message ......................................................................................................................................237",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.12",
    "title": "Country_Info Message ..........................................................................................................................................238",
    "full_path": "6.5.12 Country_Info Message ..........................................................................................................................................238",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13",
    "title": "Sink_Capabilities_Extended Message ............................................................................................................239",
    "full_path": "6.5.13 Sink_Capabilities_Extended Message ............................................................................................................239",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.14",
    "title": "Extended_Control Message ................................................................................................................................244",
    "full_path": "6.5.14 Extended_Control Message ................................................................................................................................244",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.15",
    "title": "EPR Capabilities Message ...................................................................................................................................245",
    "full_path": "6.5.15 EPR Capabilities Message ...................................................................................................................................245",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.16",
    "title": "Vendor_Defined_Extended Message ..............................................................................................................247",
    "full_path": "6.5.16 Vendor_Defined_Extended Message ..............................................................................................................247",
    "page": 15,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6",
    "title": "Timers.............................................................................................................................................. 249",
    "full_path": "6.6 Timers.............................................................................................................................................. 249",
    "page": 15,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.1",
    "title": "CRCReceiveTimer ...................................................................................................................................................249",
    "full_path": "6.6.1 CRCReceiveTimer ...................................................................................................................................................249",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.2",
    "title": "SenderResponseTimer .........................................................................................................................................249",
    "full_path": "6.6.2 SenderResponseTimer .........................................................................................................................................249",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.3",
    "title": "Capability Timers ...................................................................................................................................................249",
    "full_path": "6.6.3 Capability Timers ...................................................................................................................................................249",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4",
    "title": "Wait Timers and Times ........................................................................................................................................251",
    "full_path": "6.6.4 Wait Timers and Times ........................................................................................................................................251",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5",
    "title": "Power Supply Timers ...........................................................................................................................................251",
    "full_path": "6.6.5 Power Supply Timers ...........................................................................................................................................251",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.6",
    "title": "NoResponseTimer .................................................................................................................................................253",
    "full_path": "6.6.6 NoResponseTimer .................................................................................................................................................253",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.7",
    "title": "BIST Timers ..............................................................................................................................................................253",
    "full_path": "6.6.7 BIST Timers ..............................................................................................................................................................253",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.8",
    "title": "Power Role Swap Timers ....................................................................................................................................254",
    "full_path": "6.6.8 Power Role Swap Timers ....................................................................................................................................254",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.9",
    "title": "Soft Reset Timers ...................................................................................................................................................254",
    "full_path": "6.6.9 Soft Reset Timers ...................................................................................................................................................254",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.10",
    "title": "Data Reset Timers .................................................................................................................................................254",
    "full_path": "6.6.10 Data Reset Timers .................................................................................................................................................254",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11",
    "title": "Hard Reset Timers .................................................................................................................................................255",
    "full_path": "6.6.11 Hard Reset Timers .................................................................................................................................................255",
    "page": 15,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "Page 16 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.6.12 Structured VDM Timers .......................................................................................................................................255"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.13",
    "title": "V CONN Timers ...........................................................................................................................................................257",
    "full_path": "6.6.13 V CONN Timers ...........................................................................................................................................................257",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.14",
    "title": "tCableMessage .........................................................................................................................................................257",
    "full_path": "6.6.14 tCableMessage .........................................................................................................................................................257",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.15",
    "title": "DiscoverIdentityTimer .........................................................................................................................................257",
    "full_path": "6.6.15 DiscoverIdentityTimer .........................................................................................................................................257",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.16",
    "title": "Collision Avoidance Timers ...............................................................................................................................257",
    "full_path": "6.6.16 Collision Avoidance Timers ...............................................................................................................................257",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.17",
    "title": "Fast Role Swap Timers .........................................................................................................................................258",
    "full_path": "6.6.17 Fast Role Swap Timers .........................................................................................................................................258",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.18",
    "title": "Chunking Timers ...................................................................................................................................................258",
    "full_path": "6.6.18 Chunking Timers ...................................................................................................................................................258",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.19",
    "title": "Programmable Power Supply Timers ...........................................................................................................259",
    "full_path": "6.6.19 Programmable Power Supply Timers ...........................................................................................................259",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.20",
    "title": "tEnterUSB ..................................................................................................................................................................260",
    "full_path": "6.6.20 tEnterUSB ..................................................................................................................................................................260",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21",
    "title": "EPR Timers ................................................................................................................................................................260",
    "full_path": "6.6.21 EPR Timers ................................................................................................................................................................260",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.22",
    "title": "Time Values and Timers ......................................................................................................................................262",
    "full_path": "6.6.22 Time Values and Timers ......................................................................................................................................262",
    "page": 16,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7",
    "title": "Counters.......................................................................................................................................... 265",
    "full_path": "6.7 Counters.......................................................................................................................................... 265",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.1",
    "title": "MessageID Counter ................................................................................................................................................265",
    "full_path": "6.7.1 MessageID Counter ................................................................................................................................................265",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.2",
    "title": "Retry Counter ...........................................................................................................................................................265",
    "full_path": "6.7.2 Retry Counter ...........................................................................................................................................................265",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.3",
    "title": "Hard Reset Counter ...............................................................................................................................................266",
    "full_path": "6.7.3 Hard Reset Counter ...............................................................................................................................................266",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.4",
    "title": "Capabilities Counter ..............................................................................................................................................266",
    "full_path": "6.7.4 Capabilities Counter ..............................................................................................................................................266",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.5",
    "title": "Discover Identity Counter ..................................................................................................................................266",
    "full_path": "6.7.5 Discover Identity Counter ..................................................................................................................................266",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.6",
    "title": "VDMBusyCounter ...................................................................................................................................................266",
    "full_path": "6.7.6 VDMBusyCounter ...................................................................................................................................................266",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.7",
    "title": "Counter Values and Counters ...........................................................................................................................267",
    "full_path": "6.7.7 Counter Values and Counters ...........................................................................................................................267",
    "page": 16,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8",
    "title": "Reset ................................................................................................................................................. 268",
    "full_path": "6.8 Reset ................................................................................................................................................. 268",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.1",
    "title": "Soft Reset and Protocol Error ...........................................................................................................................268",
    "full_path": "6.8.1 Soft Reset and Protocol Error ...........................................................................................................................268",
    "page": 16,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.2",
    "title": "Data Reset ..................................................................................................................................................................270",
    "full_path": "6.8.2 Data Reset ..................................................................................................................................................................270",
    "page": 16,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.3",
    "title": "Hard Reset .................................................................................................................................................................270",
    "full_path": "6.8.3 Hard Reset .................................................................................................................................................................270",
    "page": 16,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.4",
    "title": "Cable Reset ................................................................................................................................................................271",
    "full_path": "6.8.4 Cable Reset ................................................................................................................................................................271",
    "page": 16,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.9",
    "title": "Accept, Reject and Wait............................................................................................................ 272",
    "full_path": "6.9 Accept, Reject and Wait............................................................................................................ 272",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.10",
    "title": "Collision Avoidance.................................................................................................................... 273",
    "full_path": "6.10 Collision Avoidance.................................................................................................................... 273",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.11",
    "title": "Message Discarding.................................................................................................................... 274",
    "full_path": "6.11 Message Discarding.................................................................................................................... 274",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12",
    "title": "State behavior............................................................................................................................... 275",
    "full_path": "6.12 State behavior............................................................................................................................... 275",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.1",
    "title": "Introduction to state diagrams used in Chapter 6 ...................................................................................275",
    "full_path": "6.12.1 Introduction to state diagrams used in Chapter 6 ...................................................................................275",
    "page": 16,
    "level": 3,
    "parent_id": "6.12",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2",
    "title": "State Operation .......................................................................................................................................................276",
    "full_path": "6.12.2 State Operation .......................................................................................................................................................276",
    "page": 16,
    "level": 3,
    "parent_id": "6.12",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.3",
    "title": "List of Protocol Layer States ..............................................................................................................................298",
    "full_path": "6.12.3 List of Protocol Layer States ..............................................................................................................................298",
    "page": 16,
    "level": 3,
    "parent_id": "6.12",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13",
    "title": "Message Applicability ............................................................................................................... 300",
    "full_path": "6.13 Message Applicability ............................................................................................................... 300",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.1",
    "title": "Applicability of Control Messages ...................................................................................................................301",
    "full_path": "6.13.1 Applicability of Control Messages ...................................................................................................................301",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.2",
    "title": "Applicability of Data Messages .........................................................................................................................303",
    "full_path": "6.13.2 Applicability of Data Messages .........................................................................................................................303",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.3",
    "title": "Applicability of Extended Messages ...............................................................................................................305",
    "full_path": "6.13.3 Applicability of Extended Messages ...............................................................................................................305",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.4",
    "title": "Applicability of Extended Control Messages ..............................................................................................308",
    "full_path": "6.13.4 Applicability of Extended Control Messages ..............................................................................................308",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.5",
    "title": "Applicability of Structured VDM Commands .............................................................................................309",
    "full_path": "6.13.5 Applicability of Structured VDM Commands .............................................................................................309",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.6",
    "title": "Applicability of Reset Signaling ........................................................................................................................310",
    "full_path": "6.13.6 Applicability of Reset Signaling ........................................................................................................................310",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.7",
    "title": "Applicability of Fast Role Swap Request ......................................................................................................310",
    "full_path": "6.13.7 Applicability of Fast Role Swap Request ......................................................................................................310",
    "page": 16,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.14",
    "title": "Value Parameters........................................................................................................................ 311",
    "full_path": "6.14 Value Parameters........................................................................................................................ 311",
    "page": 16,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "full_path": "7 Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "page": 16,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1",
    "title": "Source Requirements................................................................................................................ 312",
    "full_path": "7.1 Source Requirements................................................................................................................ 312",
    "page": 16,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.1",
    "title": "Behavioral Aspects ................................................................................................................................................312",
    "full_path": "7.1.1 Behavioral Aspects ................................................................................................................................................312",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.2",
    "title": "Source Bulk Capacitance .....................................................................................................................................312",
    "full_path": "7.1.2 Source Bulk Capacitance .....................................................................................................................................312",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.3",
    "title": "Types of Sources ....................................................................................................................................................312",
    "full_path": "7.1.3 Types of Sources ....................................................................................................................................................312",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4",
    "title": "Source Transitions .................................................................................................................................................313",
    "full_path": "7.1.4 Source Transitions .................................................................................................................................................313",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.5",
    "title": "Response to Hard Resets ....................................................................................................................................322",
    "full_path": "7.1.5 Response to Hard Resets ....................................................................................................................................322",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.6",
    "title": "Changing the Output Power Capability ........................................................................................................323",
    "full_path": "7.1.6 Changing the Output Power Capability ........................................................................................................323",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7",
    "title": "Robust Source Operation ....................................................................................................................................323",
    "full_path": "7.1.7 Robust Source Operation ....................................................................................................................................323",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.8",
    "title": "Output Voltage Tolerance and Range ............................................................................................................325",
    "full_path": "7.1.8 Output Voltage Tolerance and Range ............................................................................................................325",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.9",
    "title": "Charging and Discharging the Bulk Capacitance on V BUS .....................................................................328",
    "full_path": "7.1.9 Charging and Discharging the Bulk Capacitance on V BUS .....................................................................328",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.10",
    "title": "Swap Standby for Sources ..................................................................................................................................328",
    "full_path": "7.1.10 Swap Standby for Sources ..................................................................................................................................328",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.11",
    "title": "Source Peak Current Operation .......................................................................................................................328",
    "full_path": "7.1.11 Source Peak Current Operation .......................................................................................................................328",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12",
    "title": "Source Capabilities Extended Parameters .................................................................................................329",
    "full_path": "7.1.12 Source Capabilities Extended Parameters .................................................................................................329",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.13",
    "title": "Fast Role Swap .........................................................................................................................................................331",
    "full_path": "7.1.13 Fast Role Swap .........................................................................................................................................................331",
    "page": 16,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 177.1.14 Non-application of V BUS Slew Rate Limits ...................................................................................................332"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.15",
    "title": "V CONN Power Cycle ................................................................................................................................................333",
    "full_path": "7.1.15 V CONN Power Cycle ................................................................................................................................................333",
    "page": 17,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2",
    "title": "Sink Requirements ..................................................................................................................... 335",
    "full_path": "7.2 Sink Requirements ..................................................................................................................... 335",
    "page": 17,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.1",
    "title": "Behavioral Aspects ................................................................................................................................................335",
    "full_path": "7.2.1 Behavioral Aspects ................................................................................................................................................335",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.2",
    "title": "Sink Bulk Capacitance ..........................................................................................................................................335",
    "full_path": "7.2.2 Sink Bulk Capacitance ..........................................................................................................................................335",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.3",
    "title": "Sink Standby .............................................................................................................................................................335",
    "full_path": "7.2.3 Sink Standby .............................................................................................................................................................335",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.4",
    "title": "Suspend Power Consumption ...........................................................................................................................336",
    "full_path": "7.2.4 Suspend Power Consumption ...........................................................................................................................336",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.5",
    "title": "Zero Negotiated Current .....................................................................................................................................336",
    "full_path": "7.2.5 Zero Negotiated Current .....................................................................................................................................336",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.6",
    "title": "Transient Load Behavior ....................................................................................................................................336",
    "full_path": "7.2.6 Transient Load Behavior ....................................................................................................................................336",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.7",
    "title": "Swap Standby for Sinks .......................................................................................................................................336",
    "full_path": "7.2.7 Swap Standby for Sinks .......................................................................................................................................336",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.8",
    "title": "Sink Peak Current Operation ............................................................................................................................336",
    "full_path": "7.2.8 Sink Peak Current Operation ............................................................................................................................336",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.9",
    "title": "Robust Sink Operation .........................................................................................................................................337",
    "full_path": "7.2.9 Robust Sink Operation .........................................................................................................................................337",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.10",
    "title": "Fast Role Swap .........................................................................................................................................................338",
    "full_path": "7.2.10 Fast Role Swap .........................................................................................................................................................338",
    "page": 17,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3",
    "title": "Transitions..................................................................................................................................... 339",
    "full_path": "7.3 Transitions..................................................................................................................................... 339",
    "page": 17,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1",
    "title": "Transitions caused by a Request Message ..................................................................................................340",
    "full_path": "7.3.1 Transitions caused by a Request Message ..................................................................................................340",
    "page": 17,
    "level": 3,
    "parent_id": "7.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.2",
    "title": "Transitions Caused by Power Role Swap ....................................................................................................388",
    "full_path": "7.3.2 Transitions Caused by Power Role Swap ....................................................................................................388",
    "page": 17,
    "level": 3,
    "parent_id": "7.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.3",
    "title": "Transitions Caused by Hard Reset ..................................................................................................................396",
    "full_path": "7.3.3 Transitions Caused by Hard Reset ..................................................................................................................396",
    "page": 17,
    "level": 3,
    "parent_id": "7.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.4",
    "title": "Transitions Caused by Fast Role Swap .........................................................................................................400",
    "full_path": "7.3.4 Transitions Caused by Fast Role Swap .........................................................................................................400",
    "page": 17,
    "level": 3,
    "parent_id": "7.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.4",
    "title": "Electrical Parameters................................................................................................................ 404",
    "full_path": "7.4 Electrical Parameters................................................................................................................ 404",
    "page": 17,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.4.1",
    "title": "Source Electrical Parameters ............................................................................................................................404",
    "full_path": "7.4.1 Source Electrical Parameters ............................................................................................................................404",
    "page": 17,
    "level": 3,
    "parent_id": "7.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.4.2",
    "title": "Sink Electrical Parameters .................................................................................................................................413",
    "full_path": "7.4.2 Sink Electrical Parameters .................................................................................................................................413",
    "page": 17,
    "level": 3,
    "parent_id": "7.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.4.3",
    "title": "Common Electrical Parameters .......................................................................................................................415",
    "full_path": "7.4.3 Common Electrical Parameters .......................................................................................................................415",
    "page": 17,
    "level": 3,
    "parent_id": "7.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Device Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416",
    "full_path": "8 Device Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416",
    "page": 17,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.1",
    "title": "Overview......................................................................................................................................... 416",
    "full_path": "8.1 Overview......................................................................................................................................... 416",
    "page": 17,
    "level": 2,
    "parent_id": "8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2",
    "title": "Device Policy Manager.............................................................................................................. 417",
    "full_path": "8.2 Device Policy Manager.............................................................................................................. 417",
    "page": 17,
    "level": 2,
    "parent_id": "8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.1",
    "title": "Capabilities ................................................................................................................................................................418",
    "full_path": "8.2.1 Capabilities ................................................................................................................................................................418",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.2",
    "title": "System Policy ...........................................................................................................................................................418",
    "full_path": "8.2.2 System Policy ...........................................................................................................................................................418",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.3",
    "title": "Control of Source/Sink ........................................................................................................................................419",
    "full_path": "8.2.3 Control of Source/Sink ........................................................................................................................................419",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4",
    "title": "Cable Detection .......................................................................................................................................................419",
    "full_path": "8.2.4 Cable Detection .......................................................................................................................................................419",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.5",
    "title": "Managing Power Requirements .......................................................................................................................420",
    "full_path": "8.2.5 Managing Power Requirements .......................................................................................................................420",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.6",
    "title": "Use of \"Unconstrained Power\" bit with Batteries and AC supplies ..................................................421",
    "full_path": "8.2.6 Use of \"Unconstrained Power\" bit with Batteries and AC supplies ..................................................421",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7",
    "title": "Interface to the Policy Engine ...........................................................................................................................423",
    "full_path": "8.2.7 Interface to the Policy Engine ...........................................................................................................................423",
    "page": 17,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3",
    "title": "Policy Engine................................................................................................................................. 424",
    "full_path": "8.3 Policy Engine................................................................................................................................. 424",
    "page": 17,
    "level": 2,
    "parent_id": "8",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.1",
    "title": "Introduction ..............................................................................................................................................................424",
    "full_path": "8.3.1 Introduction ..............................................................................................................................................................424",
    "page": 17,
    "level": 3,
    "parent_id": "8.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2",
    "title": "Atomic Message Sequence Diagrams ............................................................................................................425",
    "full_path": "8.3.2 Atomic Message Sequence Diagrams ............................................................................................................425",
    "page": 17,
    "level": 3,
    "parent_id": "8.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3",
    "title": "State Diagrams .........................................................................................................................................................822",
    "full_path": "8.3.3 State Diagrams .........................................................................................................................................................822",
    "page": 17,
    "level": 3,
    "parent_id": "8.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "full_path": "9 States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "page": 17,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1",
    "title": "Overview......................................................................................................................................... 975",
    "full_path": "9.1 Overview......................................................................................................................................... 975",
    "page": 17,
    "level": 2,
    "parent_id": "9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1.1",
    "title": "PDUSB Device and Hub Requirements .........................................................................................................979",
    "full_path": "9.1.1 PDUSB Device and Hub Requirements .........................................................................................................979",
    "page": 17,
    "level": 3,
    "parent_id": "9.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1.2",
    "title": "Mapping to USB Device States ..........................................................................................................................980",
    "full_path": "9.1.2 Mapping to USB Device States ..........................................................................................................................980",
    "page": 17,
    "level": 3,
    "parent_id": "9.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1.3",
    "title": "PD Software Stack ..................................................................................................................................................983",
    "full_path": "9.1.3 PD Software Stack ..................................................................................................................................................983",
    "page": 17,
    "level": 3,
    "parent_id": "9.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1.4",
    "title": "PDUSB Device Enumeration ..............................................................................................................................984",
    "full_path": "9.1.4 PDUSB Device Enumeration ..............................................................................................................................984",
    "page": 17,
    "level": 3,
    "parent_id": "9.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.2",
    "title": "PD Specific Descriptors ............................................................................................................ 985",
    "full_path": "9.2 PD Specific Descriptors ............................................................................................................ 985",
    "page": 17,
    "level": 2,
    "parent_id": "9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.2.1",
    "title": "USB Power Delivery Capability Descriptor .................................................................................................986",
    "full_path": "9.2.1 USB Power Delivery Capability Descriptor .................................................................................................986",
    "page": 17,
    "level": 3,
    "parent_id": "9.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.2.2",
    "title": "Battery Info Capability Descriptor ..................................................................................................................987",
    "full_path": "9.2.2 Battery Info Capability Descriptor ..................................................................................................................987",
    "page": 17,
    "level": 3,
    "parent_id": "9.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.2.3",
    "title": "PD Consumer Port Capability Descriptor ....................................................................................................988",
    "full_path": "9.2.3 PD Consumer Port Capability Descriptor ....................................................................................................988",
    "page": 17,
    "level": 3,
    "parent_id": "9.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.2.4",
    "title": "PD Provider Port Capability Descriptor .......................................................................................................989",
    "full_path": "9.2.4 PD Provider Port Capability Descriptor .......................................................................................................989",
    "page": 17,
    "level": 3,
    "parent_id": "9.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.3",
    "title": "PD Specific Requests and Events.......................................................................................... 990",
    "full_path": "9.3 PD Specific Requests and Events.......................................................................................... 990",
    "page": 17,
    "level": 2,
    "parent_id": "9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.3.1",
    "title": "PD Specific Requests .............................................................................................................................................990",
    "full_path": "9.3.1 PD Specific Requests .............................................................................................................................................990",
    "page": 17,
    "level": 3,
    "parent_id": "9.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.4",
    "title": "PDUSB Hub and PDUSB Peripheral Device Requests.................................................. 991",
    "full_path": "9.4 PDUSB Hub and PDUSB Peripheral Device Requests.................................................. 991",
    "page": 17,
    "level": 2,
    "parent_id": "9",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.4.1",
    "title": "GetBatteryStatus .....................................................................................................................................................991",
    "full_path": "9.4.1 GetBatteryStatus .....................................................................................................................................................991",
    "page": 17,
    "level": 3,
    "parent_id": "9.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.4.2",
    "title": "SetPDFeature ...........................................................................................................................................................992",
    "full_path": "9.4.2 SetPDFeature ...........................................................................................................................................................992",
    "page": 17,
    "level": 3,
    "parent_id": "9.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Power Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995",
    "full_path": "10 Power Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995",
    "page": 17,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 18 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010.1 Introduction .................................................................................................................................. 995"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2",
    "title": "Source Power Rules ................................................................................................................... 995",
    "full_path": "10.2 Source Power Rules ................................................................................................................... 995",
    "page": 18,
    "level": 2,
    "parent_id": "10",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.1",
    "title": "Source Power Rule Considerations ................................................................................................................996",
    "full_path": "10.2.1 Source Power Rule Considerations ................................................................................................................996",
    "page": 18,
    "level": 3,
    "parent_id": "10.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.2",
    "title": "Normative Voltages and Currents ...................................................................................................................997",
    "full_path": "10.2.2 Normative Voltages and Currents ...................................................................................................................997",
    "page": 18,
    "level": 3,
    "parent_id": "10.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.3",
    "title": "Optional Voltages/Currents ............................................................................................................................1005",
    "full_path": "10.2.3 Optional Voltages/Currents ............................................................................................................................1005",
    "page": 18,
    "level": 3,
    "parent_id": "10.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.3",
    "title": "Sink Power Rules ...................................................................................................................... 1013",
    "full_path": "10.3 Sink Power Rules ...................................................................................................................... 1013",
    "page": 18,
    "level": 2,
    "parent_id": "10",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.3.1",
    "title": "Sink Power Rule Considerations ..................................................................................................................1013",
    "full_path": "10.3.1 Sink Power Rule Considerations ..................................................................................................................1013",
    "page": 18,
    "level": 3,
    "parent_id": "10.3",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.3.2",
    "title": "Normative Sink Rules ........................................................................................................................................1013",
    "full_path": "10.3.2 Normative Sink Rules ........................................................................................................................................1013",
    "page": 18,
    "level": 3,
    "parent_id": "10.3",
    "tags": [],
    "content": "A CRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nA.1 C code example .......................................................................................................................... 1015\nB Message Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC VDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nC.1 Discover Identity Example.................................................................................................... 1017\nC.1.1 Discover Identity Command request ..........................................................................................................1017\nC.1.2 Discover Identity Command response - Active Cable. ........................................................................1018\nC.1.3 Discover Identity Command response - Hub. .........................................................................................1020\nC.2 Discover SVIDs Example ........................................................................................................ 1021\nC.2.1 Discover SVIDs Command request ..............................................................................................................1021\nC.2.2 Discover SVIDs Command response ...........................................................................................................1022\nC.3 Discover Modes Example....................................................................................................... 1023\nC.3.1 Discover Modes Command request .............................................................................................................1023\nC.3.2 Discover Modes Command response .........................................................................................................1024\nC.4 Enter Mode Example ............................................................................................................... 1025\nC.4.1 Enter Mode Command request .....................................................................................................................1025\nC.4.2 Enter Mode Command response ..................................................................................................................1026\nC.4.3 Enter Mode Command request with additional VDO. .........................................................................1027\nC.5 Exit Mode Example................................................................................................................... 1028\nC.5.1 Exit Mode Command request .........................................................................................................................1028\nC.5.2 Exit Mode Command response ......................................................................................................................1029\nC.6 Attention Example.................................................................................................................... 1030\nC.6.1 Attention Command request ..........................................................................................................................1030\nC.6.2 Attention Command request with additional VDO. ..............................................................................1031\nD BMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nD.1 Finite Difference Scheme....................................................................................................... 1032\nD.1.1 Sample Circuitry ..................................................................................................................................................1032\nD.1.2 Theory ......................................................................................................................................................................1032\nD.1.3 Data Recovery .......................................................................................................................................................1034\nD.1.4 Noise Zone and Detection Zone ....................................................................................................................1035\nD.2 Subtraction Scheme ................................................................................................................. 1036\nD.2.1 Sample Circuitry ..................................................................................................................................................1036\nD.2.2 Output of Each Circuit Block ..........................................................................................................................1036\nD.2.3 Subtractor Output at Power Source and Power Sink ..........................................................................1036\nD.2.4 Noise Zone and Detection Zone ....................................................................................................................1037\nE FRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nE.1 Overview....................................................................................................................................... 1038\nE.2 FRS Initial Setup ........................................................................................................................ 1041\nE.3 FRS Process ................................................................................................................................. 1044\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 19List of Figures"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "full_path": "1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "full_path": "2 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Figure 2.1 Logical Structure of USB Power Delivery Capable Devices.............................................................. 55\nFigure 2.2 Example SOP' Communication between V CONN Source and Cable Plug(s) ............................... 58\nFigure 2.3 USB Power Delivery Communications Stack.......................................................................................... 67\nFigure 2.4 USB Power Delivery Communication Over USB ................................................................................... 68\nFigure 2.5 High Level Architecture View ....................................................................................................................... 69\nFigure 2.6 Example of a Normal EPR Mode Operational Flow ............................................................................. 74"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "full_path": "3 USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "full_path": "4 Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "full_path": "5 Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Figure 5.1 Interpretation of ordered sets...................................................................................................................... 81\nFigure 5.2 Transmit Order for Various Sizes of Data................................................................................................ 83\nFigure 5.3 USB Power Delivery Packet Format........................................................................................................... 84\nFigure 5.4 CRC-32 Generation ............................................................................................................................................ 88\nFigure 5.5 Line format of Hard Reset............................................................................................................................... 89\nFigure 5.6 Line format of Cable Reset.............................................................................................................................. 90\nFigure 5.7 BMC Example ....................................................................................................................................................... 92\nFigure 5.8 BMC Transmitter Block Diagram................................................................................................................. 92\nFigure 5.9 BMC Receiver Block Diagram........................................................................................................................ 93\nFigure 5.10 BMC Encoded Start of Preamble.................................................................................................................. 93\nFigure 5.11 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low\nLast Transition..................................................................................................................................................... 94\nFigure 5.12 Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-Low\nLast Transition..................................................................................................................................................... 94\nFigure 5.13 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High\nLast Transition..................................................................................................................................................... 95\nFigure 5.14 Transmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last\nTransition .............................................................................................................................................................. 95\nFigure 5.15 BMC Tx 'ONE' Mask ........................................................................................................................................... 96\nFigure 5.16 BMC Tx 'ZERO' Mask......................................................................................................................................... 97\nFigure 5.17 BMC Rx 'ONE' Mask when Sourcing Power............................................................................................. 99\nFigure 5.18 BMC Rx 'ZERO' Mask when Sourcing Power ........................................................................................100\nFigure 5.19 BMC Rx 'ONE' Mask when Power neutral..............................................................................................100\nFigure 5.20 BMC Rx 'ZERO' Mask when Power neutral ...........................................................................................101\nFigure 5.21 BMC Rx 'ONE' Mask when Sinking Power .............................................................................................101\nFigure 5.22 BMC Rx 'ZERO' Mask when Sinking Power...........................................................................................102\nFigure 5.23 Transmitter Load Model for BMC Tx from a Source .........................................................................103\nFigure 5.24 Transmitter Load Model for BMC Tx from a Sink ..............................................................................103\nFigure 5.25 Transmitter diagram illustrating zDriver..............................................................................................107\nFigure 5.26 Inter-Frame Gap Timings..............................................................................................................................108\nFigure 5.27 Example Multi-Drop Configuration showing two DRPs ..................................................................111\nFigure 5.28 Example Multi-Drop Configuration showing a DFP and UFP........................................................111\nFigure 5.29 Test Frame...........................................................................................................................................................113"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "full_path": "6 Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "page": 19,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Figure 6.1 USB Power Delivery Packet Format for a Control Message...........................................................115\nFigure 6.2 USB Power Delivery Packet Format including Data Message Payload .....................................116\nFigure 6.3 USB Power Delivery Packet Format including an Extended Message Header and Payload\n116\nPage 20 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.4 Example Security_Request sequence Unchunked (Chunked bit = 0) ........................................123\nFigure 6.5 Example byte transmission for Security_Request Message of Data Size 7 (Chunked bit is\nset to zero)...........................................................................................................................................................123\nFigure 6.6 Example byte transmission for Security_Response Message of Data Size 30 (Chunked bit\nis set to zero) ......................................................................................................................................................124\nFigure 6.7 Example Security_Request sequence Chunked (Chunked bit = 1)..............................................125\nFigure 6.8 Example Security_Request Message of Data Size 7 (Chunked bit set to 1) .............................126\nFigure 6.9 Example Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)126\nFigure 6.10 Example byte transmission for a Security_Response Message Chunk request (Chunked bit\nis set to 1).............................................................................................................................................................127\nFigure 6.11 Example Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)127\nFigure 6.12 SPR Capabilities Message Construction..................................................................................................152\nFigure 6.13 Example Capabilities Message with 2 Power Data Objects............................................................152\nFigure 6.14 BIST Message .....................................................................................................................................................159\nFigure 6.15 Vendor Defined Message...............................................................................................................................162\nFigure 6.16 Discover Identity Command response....................................................................................................169\nFigure 6.17 Discover Identity Command response for a DRD...............................................................................169\nFigure 6.18 Example Discover SVIDs response with 3 SVIDs................................................................................186\nFigure 6.19 Example Discover SVIDs response with 4 SVIDs................................................................................187\nFigure 6.20 Example Discover SVIDs response with 12 SVIDs followed by an empty response...........187\nFigure 6.21 Example Discover Modes response for a given SVID with 3 Modes ..........................................188\nFigure 6.22 Successful Enter Mode sequence...............................................................................................................189\nFigure 6.23 Unsuccessful Enter Mode sequence due to NAK.................................................................................190\nFigure 6.24 Exit Mode sequence.........................................................................................................................................191\nFigure 6.25 Attention Command request/response sequence .............................................................................192\nFigure 6.26 Command request/response sequence..................................................................................................193\nFigure 6.27 Enter/Exit Mode Process ..............................................................................................................................195\nFigure 6.28 Battery_Status Message .................................................................................................................................196\nFigure 6.29 Alert Message.....................................................................................................................................................198\nFigure 6.30 Get_Country_Info Message ...........................................................................................................................201\nFigure 6.31 Enter_USB Message .........................................................................................................................................203\nFigure 6.32 EPR_Request Message ....................................................................................................................................205\nFigure 6.33 EPR Mode DO Message...................................................................................................................................206\nFigure 6.34 Illustration of process to enter EPR Mode.............................................................................................208\nFigure 6.35 Source_Info Message.......................................................................................................................................212\nFigure 6.36 Revision Message Data Object ....................................................................................................................214\nFigure 6.37 Source_Capabilities_Extended Message .................................................................................................216\nFigure 6.38 SOP Status Message.........................................................................................................................................221\nFigure 6.39 SOP'/SOP'' Status Message...........................................................................................................................226\nFigure 6.40 Get_Battery_Cap Message .............................................................................................................................227\nFigure 6.41 Get_Battery_Status Message ........................................................................................................................227\nFigure 6.42 Battery_Capabilities Message......................................................................................................................228\nFigure 6.43 Get_Manufacturer_Info Message................................................................................................................230\nFigure 6.44 Manufacturer_Info Message.........................................................................................................................231\nFigure 6.45 Security_Request Message............................................................................................................................233\nFigure 6.46 Security_Response Message ........................................................................................................................233\nFigure 6.47 Firmware_Update_Request Message .......................................................................................................234\nFigure 6.48 Firmware_Update_Response Message ....................................................................................................234\nFigure 6.49 PPS_Status Message.........................................................................................................................................235\nFigure 6.50 Country_Codes Message ................................................................................................................................237\nFigure 6.51 Country_Info Message ....................................................................................................................................238\nFigure 6.52 Sink_Capabilities_Extended Message.......................................................................................................239\nFigure 6.53 Extended_Control Message ..........................................................................................................................244\nFigure 6.54 Mapping SPR Capabilities to EPR Capabilities.....................................................................................245\nFigure 6.55 EPR_Source_Capabilities message with no EPR PDOs .....................................................................246\nFigure 6.56 Vendor_Defined_Extended Message ........................................................................................................247\nFigure 6.57 Outline of States ................................................................................................................................................275\nFigure 6.58 References to states.........................................................................................................................................275\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 21Figure 6.59 Chunking architecture Showing Message and Control Flow.........................................................277\nFigure 6.60 Chunked Rx State Diagram...........................................................................................................................278\nFigure 6.61 Chunked Tx State Diagram...........................................................................................................................281\nFigure 6.62 Chunked Message Router State Diagram...............................................................................................284\nFigure 6.63 Common Protocol Layer Message Transmission State Diagram.................................................286\nFigure 6.64 Source Protocol Layer Message Transmission State Diagram......................................................289\nFigure 6.65 Sink Protocol Layer Message Transmission State Diagram...........................................................291\nFigure 6.66 Protocol layer Message reception.............................................................................................................293\nFigure 6.67 Hard/Cable Reset .............................................................................................................................................295"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "full_path": "7 Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "page": 21,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Figure 7.1 Placement of Source Bulk Capacitance ...................................................................................................312\nFigure 7.2 Transition Envelope for Positive Voltage Transitions .....................................................................313\nFigure 7.3 Transition Envelope for Negative Voltage Transitions....................................................................314\nFigure 7.4 PPS Positive Voltage Transitions...............................................................................................................315\nFigure 7.5 PPS Negative Voltage Transitions............................................................................................................316\nFigure 7.6 SPR PPS Programmable Voltage and Current Limit..........................................................................318\nFigure 7.7 SPR PPS Constant Power...............................................................................................................................319\nFigure 7.8 AVS Positive Voltage Transitions ..............................................................................................................321\nFigure 7.9 AVS Negative Voltage Transitions.............................................................................................................321\nFigure 7.10 Source V BUS and V CONN Response to Hard Reset................................................................................323\nFigure 7.11 Application of vSrcNew and vSrcValid limits after tSrcReady......................................................325\nFigure 7.12 Expected AVS/PPS Ripple Relative to an LSB......................................................................................326\nFigure 7.13 Allowed DNL errors and tolerance of Voltage and Current in AVS/PPS mode .....................327\nFigure 7.14 Source Peak Current Overload ...................................................................................................................329\nFigure 7.15 Holdup Time Measurement .........................................................................................................................330\nFigure 7.16 V BUS Power during Fast Role Swap ..........................................................................................................331\nFigure 7.17 V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) >\nvSafe5V(min)......................................................................................................................................................332\nFigure 7.18 V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) <\nvSafe5V(min)......................................................................................................................................................332\nFigure 7.19 Data Reset UFP V CONN Power Cycle .........................................................................................................333\nFigure 7.20 Data Reset DFP V CONN Power Cycle .........................................................................................................334\nFigure 7.21 Placement of Sink Bulk Capacitance ........................................................................................................335\nFigure 7.22 Transition Diagram for Increasing the Voltage...................................................................................342\nFigure 7.23 Transition Diagram for Increasing the Voltage and Current.........................................................345\nFigure 7.24 Transition Diagram for Increasing the Voltage and Decreasing the Current.........................348\nFigure 7.25 Transition Diagram for Decreasing the Voltage and Increasing the Current.........................351\nFigure 7.26 Transition Diagram for Decreasing the Voltage..................................................................................354\nFigure 7.27 Transition Diagram for Decreasing the Voltage and the Current................................................357\nFigure 7.28 Transition Diagram for no change in Current or Voltage ...............................................................360\nFigure 7.29 Transition Diagram for Increasing the Current ..................................................................................362\nFigure 7.30 Transition Diagram for Decreasing the Current .................................................................................365\nFigure 7.31 Transition Diagram for Increasing the Programmable Power Supply Voltage.....................368\nFigure 7.32 Transition Diagram for Decreasing the Programmable Power Supply Voltage ...................371\nFigure 7.33 Transition Diagram for increasing the Current in PPS mode........................................................374\nFigure 7.34 Transition Diagram for decreasing the Current in PPS mode.......................................................377\nFigure 7.35 Transition Diagram for no change in Current or Voltage in PPS mode ....................................380\nFigure 7.36 Transition Diagram for Increasing the Adjustable Power Supply Voltage..............................382\nFigure 7.37 Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage ..........................385\nFigure 7.38 Transition Diagram for no change in Current or Voltage in AVS mode....................................387\nFigure 7.39 Transition Diagram for a Sink Requested Power Role Swap ........................................................389\nFigure 7.40 Transition Diagram for a Source Requested Power Role Swap ...................................................393\nFigure 7.41 Transition Diagram for a Source Initiated Hard Reset.....................................................................397\nFigure 7.42 Transition Diagram for a Sink Initiated Hard Reset..........................................................................399\nFigure 7.43 Transition Diagram for Fast Role Swap..................................................................................................401\nPage 22 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108 Device Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\nFigure 8.1 Example of daisy chained displays ...........................................................................................................422\nFigure 8.2 Basic Message Exchange (Successful) .....................................................................................................426\nFigure 8.3 Basic Message flow indicating possible errors....................................................................................427\nFigure 8.4 Basic Message Flow with Bad followed by a Retry............................................................................428\nFigure 8.5 Successful Fixed, Variable or Battery SPR Power Negotiation.....................................................448\nFigure 8.6 Rejected Fixed, Variable or Battery SPR Power Negotiation.........................................................452\nFigure 8.7 Wait response to Fixed, Variable or Battery SPR Power Negotiation .......................................455\nFigure 8.8 SPR PPS Keep Alive..........................................................................................................................................458\nFigure 8.9 SPR Sink Makes Request (Accept) ............................................................................................................461\nFigure 8.10 SPR Sink Makes Request (Reject)..............................................................................................................464\nFigure 8.11 SPR Sink Makes Request (Wait).................................................................................................................467\nFigure 8.12 Entering EPR Mode (Success).....................................................................................................................470\nFigure 8.13 Entering EPR Mode (Failure due to non-EPR cable).........................................................................473\nFigure 8.14 Entering EPR Mode (Failure of V CONN Swap).......................................................................................476\nFigure 8.15 Successful Fixed EPR Power Negotiation ..............................................................................................480\nFigure 8.16 Rejected Fixed EPR Power Negotiation..................................................................................................484\nFigure 8.17 Wait response to Fixed EPR Power Negotiation.................................................................................487\nFigure 8.18 EPR Keep Alive ..................................................................................................................................................490\nFigure 8.19 Exiting EPR Mode (Sink Initiated) ............................................................................................................493\nFigure 8.20 Exiting EPR Mode (Source Initiated) .......................................................................................................496\nFigure 8.21 EPR Sink Makes Request (Accept) ............................................................................................................499\nFigure 8.22 EPR Sink Makes Request (Reject) .............................................................................................................502\nFigure 8.23 EPR Sink Makes Request (Wait) ................................................................................................................505\nFigure 8.24 Unsupported message....................................................................................................................................508\nFigure 8.25 Soft Reset .............................................................................................................................................................511\nFigure 8.26 DFP Initiated Data Reset where the DFP is the V CONN Source......................................................514\nFigure 8.27 DFP Receives Data Reset where the DFP is the V CONN Source .....................................................517\nFigure 8.28 DFP Initiated Data Reset where the UFP is the V CONN Source......................................................520\nFigure 8.29 DFP Receives a Data Reset where the UFP is the V CONN Source ..................................................524\nFigure 8.30 Source initiated Hard Reset .........................................................................................................................528\nFigure 8.31 Sink Initiated Hard Reset ..............................................................................................................................531\nFigure 8.32 Source initiated reset - Sink long reset ...................................................................................................534\nFigure 8.33 Successful Power Role Swap Sequence Initiated by the Source ..................................................538\nFigure 8.34 Rejected Power Role Swap Sequence Initiated by the Source......................................................542\nFigure 8.35 Power Role Swap Sequence with wait Initiated by the Source ....................................................545\nFigure 8.36 Successful Power Role Swap Sequence Initiated by the Sink .......................................................549\nFigure 8.37 Rejected Power Role Swap Sequence Initiated by the Sink...........................................................553\nFigure 8.38 Power Role Swap Sequence with wait Initiated by the Sink .........................................................556\nFigure 8.39 Successful Fast Role Swap Sequence .......................................................................................................560\nFigure 8.40 Data Role Swap, UFP operating as Sink initiates ................................................................................564\nFigure 8.41 Rejected Data Role Swap, UFP operating as Sink initiates.............................................................567\nFigure 8.42 Data Role Swap with Wait, UFP operating as Sink initiates...........................................................570\nFigure 8.43 Data Role Swap, UFP operating as Source initiates...........................................................................573\nFigure 8.44 Rejected Data Role Swap, UFP operating as Source initiates........................................................576\nFigure 8.45 Data Role Swap with Wait, UFP operating as Source initiates .....................................................579\nFigure 8.46 Data Role Swap, DFP operating as Source initiates...........................................................................582\nFigure 8.47 Rejected Data Role Swap, DFP operating as Source initiates........................................................585\nFigure 8.48 Data Role Swap with Wait, DFP operating as Source initiates .....................................................588\nFigure 8.49 Data Role Swap, DFP operating as Sink initiates................................................................................591\nFigure 8.50 Rejected Data Role Swap, DFP operating as Sink initiates .............................................................594\nFigure 8.51 Data Role Swap with Wait, DFP operating as Sink initiates...........................................................597\nFigure 8.52 Successful VCONN Source Swap, initiated by V CONN Source .........................................................600\nFigure 8.53 Rejected VCONN Source Swap, initiated by V CONN Source.............................................................603\nFigure 8.54 V CONN Source Swap with Wait, initiated by V CONN Source.............................................................606\nFigure 8.55 V CONN Source Swap, initiated by non-V CONN Source.........................................................................609\nFigure 8.56 Rejected V CONN Source Swap, initiated by non-V CONN Source......................................................612\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 23Figure 8.57 V CONN Source Swap with Wait....................................................................................................................615\nFigure 8.58 Source Alert to Sink.........................................................................................................................................618\nFigure 8.59 Sink Alert to Source.........................................................................................................................................620\nFigure 8.60 Sink Gets Source Status..................................................................................................................................622\nFigure 8.61 Source Gets Sink Status..................................................................................................................................625\nFigure 8.62 V CONN Source Gets Cable Plug Status.......................................................................................................628\nFigure 8.63 Sink Gets Source PPS Status.........................................................................................................................631\nFigure 8.64 Sink Gets Source's Capabilities...................................................................................................................634\nFigure 8.65 Dual-Role Source Gets Dual-Role Sink's Capabilities as a Source ...............................................637\nFigure 8.66 Source Gets Sink's Capabilities...................................................................................................................640\nFigure 8.67 Dual-Role Sink Gets Dual-Role Source's Capabilities as a Sink ....................................................643\nFigure 8.68 Sink Gets Source's EPR Capabilities .........................................................................................................646\nFigure 8.69 Dual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source...................................649\nFigure 8.70 Source Gets Sink's EPR Capabilities .........................................................................................................652\nFigure 8.71 Dual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink ........................................655\nFigure 8.72 Sink Gets Source's Extended Capabilities ..............................................................................................658\nFigure 8.73 Dual-Role Source Gets Dual-Role Sink's Extended Capabilities...................................................661\nFigure 8.74 Source Gets Sink's Extended Capabilities ..............................................................................................664\nFigure 8.75 Dual-Role Sink Gets Dual-Role Source's Extended Capabilities...................................................667\nFigure 8.76 Sink Gets Source's Battery Capabilities ..................................................................................................670\nFigure 8.77 Source Gets Sink's Battery Capabilities ..................................................................................................673\nFigure 8.78 Sink Gets Source's Battery Status..............................................................................................................676\nFigure 8.79 Source Gets Sink's Battery Status..............................................................................................................679\nFigure 8.80 Source Gets Sink's Port Manufacturer Information ..........................................................................682\nFigure 8.81 Sink Gets Source's Port Manufacturer Information ..........................................................................685\nFigure 8.82 Source Gets Sink's Battery Manufacturer Information....................................................................688\nFigure 8.83 Sink Gets Source's Battery Manufacturer Information....................................................................691\nFigure 8.84 V CONN Source Gets Cable Plug's Manufacturer Information..........................................................694\nFigure 8.85 Source Gets Sink's Country Codes.............................................................................................................697\nFigure 8.86 Sink Gets Source's Country Codes.............................................................................................................700\nFigure 8.87 V CONN Source Gets Cable Plug's Country Codes..................................................................................703\nFigure 8.88 Source Gets Sink's Country Information ................................................................................................706\nFigure 8.89 Sink Gets Source's Country Information ................................................................................................709\nFigure 8.90 V CONN Source Gets Cable Plug's Country Information .....................................................................712\nFigure 8.91 Source Gets Sink's Revision Information ...............................................................................................715\nFigure 8.92 Sink Gets Source's Revision Information ...............................................................................................718\nFigure 8.93 V CONN Source Gets Cable Plug's Revision Information ....................................................................721\nFigure 8.94 Sink Gets Source's Information ..................................................................................................................724\nFigure 8.95 Dual-Role Source Gets Dual-Role Sink's Information as a Source...............................................727\nFigure 8.96 Source requests security exchange with Sink......................................................................................730\nFigure 8.97 Sink requests security exchange with Source......................................................................................733\nFigure 8.98 V CONN Source requests security exchange with Cable Plug...........................................................736\nFigure 8.99 Source requests firmware update exchange with Sink ...................................................................739\nFigure 8.100 Sink requests firmware update exchange with Source ...................................................................742\nFigure 8.101 V CONN Source requests firmware update exchange with Cable Plug.........................................745\nFigure 8.102 Initiator to Responder Discover Identity (ACK) .................................................................................748\nFigure 8.103 Initiator to Responder Discover Identity (NAK).................................................................................751\nFigure 8.104 Initiator to Responder Discover Identity (BUSY)...............................................................................754\nFigure 8.105 Initiator to Responder Discover SVIDs (ACK) .....................................................................................757\nFigure 8.106 Initiator to Responder Discover SVIDs (NAK).....................................................................................760\nFigure 8.107 Initiator to Responder Discover SVIDs (BUSY)...................................................................................763\nFigure 8.108 Initiator to Responder Discover Modes (ACK)....................................................................................766\nFigure 8.109 Initiator to Responder Discover Modes (NAK) ...................................................................................769\nFigure 8.110 Initiator to Responder Discover Modes (BUSY)..................................................................................772\nFigure 8.111 DFP to UFP Enter Mode .................................................................................................................................775\nFigure 8.112 DFP to UFP Exit Mode.....................................................................................................................................778\nFigure 8.113 DFP to Cable Plug Enter Mode ....................................................................................................................781\nFigure 8.114 DFP to Cable Plug Exit Mode .......................................................................................................................784\nPage 24 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.115 Initiator to Responder Attention...............................................................................................................787\nFigure 8.116 BIST Carrier Mode Test .................................................................................................................................789\nFigure 8.117 BIST Test Data Test .........................................................................................................................................792\nFigure 8.118 BIST Share Capacity Mode Test..................................................................................................................795\nFigure 8.119 UFP Entering USB4 Mode (Accept)...........................................................................................................798\nFigure 8.120 UFP Entering USB4 Mode (Reject)............................................................................................................801\nFigure 8.121 UFP Entering USB4 Mode (Wait)...............................................................................................................804\nFigure 8.122 Cable Plug Entering USB4 Mode (Accept) .............................................................................................807\nFigure 8.123 Cable Plug Entering USB4 Mode (Reject)...............................................................................................810\nFigure 8.124 Cable Plug Entering USB4 Mode (Wait)..................................................................................................813\nFigure 8.125 Unstructured VDM Message Sequence ...................................................................................................816\nFigure 8.126 VDEM Message Sequence..............................................................................................................................819\nFigure 8.127 Outline of States ................................................................................................................................................822\nFigure 8.128 References to states.........................................................................................................................................823\nFigure 8.129 Example of state reference with conditions .........................................................................................823\nFigure 8.130 Example of state reference with the same entry and exit ..............................................................823\nFigure 8.131 SenderResponseTimer Policy Engine State Diagram .......................................................................825\nFigure 8.132 Source Port State Diagram ...........................................................................................................................827\nFigure 8.133 Sink Port State Diagram.................................................................................................................................835\nFigure 8.134 SOP Source Port Soft Reset and Protocol Error State Diagram....................................................841\nFigure 8.135 Sink Port Soft Reset and Protocol Error Diagram ..............................................................................843\nFigure 8.136 DFP Data_Reset Message State Diagram ................................................................................................845\nFigure 8.137 UFP Data_Reset Message State Diagram ................................................................................................847\nFigure 8.138 Source Port Not Supported Message State Diagram.........................................................................850\nFigure 8.139 Sink Port Not Supported Message State Diagram ..............................................................................852\nFigure 8.140 Source Port Source Alert State Diagram.................................................................................................854\nFigure 8.141 Sink Port Source Alert State Diagram......................................................................................................855\nFigure 8.142 Sink Port Sink Alert State Diagram...........................................................................................................856\nFigure 8.143 Source Port Sink Alert State Diagram......................................................................................................857\nFigure 8.144 Sink Port Get Source Capabilities Extended State Diagram...........................................................858\nFigure 8.145 Source Give Source Capabilities Extended State Diagram..............................................................859\nFigure 8.146 Source Port Get Sink Capabilities Extended State Diagram...........................................................860\nFigure 8.147 Sink Give Sink Capabilities Extended State Diagram........................................................................861\nFigure 8.148 Sink Port Get Source Information State Diagram...............................................................................862\nFigure 8.149 Source Give Source Information State Diagram..................................................................................863\nFigure 8.150 Get Status State Diagram...............................................................................................................................864\nFigure 8.151 Give Status State Diagram.............................................................................................................................865\nFigure 8.152 Sink Port Get Source PPS Status State Diagram ..................................................................................866\nFigure 8.153 Source Give Source PPS Status State Diagram.....................................................................................867\nFigure 8.154 Get Battery Capabilities State Diagram...................................................................................................868\nFigure 8.155 Give Battery Capabilities State Diagram ................................................................................................869\nFigure 8.156 Get Battery Status State Diagram ..............................................................................................................870\nFigure 8.157 Give Battery Status State Diagram............................................................................................................871\nFigure 8.158 Get Manufacturer Information State Diagram.....................................................................................872\nFigure 8.159 Give Manufacturer Information State Diagram...................................................................................873\nFigure 8.160 Get Country Codes State Diagram .............................................................................................................874\nFigure 8.161 Give Country Codes State Diagram...........................................................................................................875\nFigure 8.162 Get Country Information State Diagram.................................................................................................876\nFigure 8.163 Give Country Information State Diagram ..............................................................................................877\nFigure 8.164 Get Revision State Diagram..........................................................................................................................878\nFigure 8.165 Give Revision State Diagram .......................................................................................................................879\nFigure 8.166 DFP Enter_USB Message State Diagram .................................................................................................880\nFigure 8.167 UFP Enter_USB Message State Diagram .................................................................................................881\nFigure 8.168 Send security request State Diagram.......................................................................................................882\nFigure 8.169 Send security response State Diagram....................................................................................................883\nFigure 8.170 Security response received State Diagram............................................................................................884\nFigure 8.171 Send firmware update request State Diagram ....................................................................................885\nFigure 8.172 Send firmware update response State Diagram .................................................................................886\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 25Figure 8.173 Firmware update response received State Diagram.........................................................................887\nFigure 8.174 DFP to UFP Data Role Swap State Diagram...........................................................................................888\nFigure 8.175 UFP to DFP Data Role Swap State Diagram...........................................................................................891\nFigure 8.176 Dual-Role Port in Source to Sink Power Role Swap State Diagram............................................894\nFigure 8.177 Dual-role Port in Sink to Source Power Role Swap State Diagram.............................................898\nFigure 8.178 Dual-Role Port in Source to Sink Fast Role Swap State Diagram.................................................902\nFigure 8.179 Dual-role Port in Sink to Source Fast Role Swap State Diagram..................................................906\nFigure 8.180 Dual-Role (Source) Get Source Capabilities diagram .......................................................................909\nFigure 8.181 Dual-Role (Source) Give Sink Capabilities diagram ..........................................................................910\nFigure 8.182 Dual-Role (Sink) Get Sink Capabilities State Diagram......................................................................911\nFigure 8.183 Dual-Role (Sink) Give Source Capabilities State Diagram ..............................................................912\nFigure 8.184 Dual-Role (Source) Get Source Capabilities Extended State Diagram ......................................913\nFigure 8.185 Dual-Role (Sink) Give Source Capabilities Extended diagram......................................................914\nFigure 8.186 Dual-Role (Sink) Get Sink Capabilities Extended State Diagram.................................................915\nFigure 8.187 Dual-Role (Source) Give Sink Capabilities Extended diagram......................................................916\nFigure 8.188 Dual-Role (Source) Get Source Information State Diagram ..........................................................917\nFigure 8.189 Dual-Role (Source) Give Source Information diagram ....................................................................918\nFigure 8.190 V CONN Swap State Diagram ..........................................................................................................................919\nFigure 8.191 Initiator to Port VDM Discover Identity State Diagram...................................................................922\nFigure 8.192 Initiator VDM Discover SVIDs State Diagram ......................................................................................924\nFigure 8.193 Initiator VDM Discover Modes State Diagram.....................................................................................926\nFigure 8.194 Initiator VDM Attention State Diagram ..................................................................................................928\nFigure 8.195 Responder Structured VDM Discover Identity State Diagram .....................................................929\nFigure 8.196 Responder Structured VDM Discover SVIDs State Diagram..........................................................930\nFigure 8.197 Responder Structured VDM Discover Modes State Diagram ........................................................931\nFigure 8.198 Receiving a Structured VDM Attention State Diagram ....................................................................932\nFigure 8.199 DFP VDM Mode Entry State Diagram ......................................................................................................933\nFigure 8.200 DFP VDM Mode Exit State Diagram..........................................................................................................935\nFigure 8.201 UFP Structured VDM Enter Mode State Diagram ...............................................................................937\nFigure 8.202 UFP Structured VDM Exit Mode State Diagram...................................................................................939\nFigure 8.203 Cable Ready State Diagram ..........................................................................................................................941\nFigure 8.204 Cable Plug Soft Reset State Diagram ........................................................................................................942\nFigure 8.205 Cable Plug Hard Reset State Diagram......................................................................................................943\nFigure 8.206 DFP/V CONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram.........944\nFigure 8.207 UFP/V CONN Source Soft Reset of a Cable Plug or VPD State Diagram .......................................946\nFigure 8.208 Source Startup Structured VDM Discover Identity State Diagram .............................................947\nFigure 8.209 Cable Plug Structured VDM Enter Mode State Diagram..................................................................949\nFigure 8.210 Cable Plug Structured VDM Exit Mode State Diagram .....................................................................951\nFigure 8.211 Source EPR Mode Entry State Diagram ..................................................................................................953\nFigure 8.212 Sink EPR Mode Entry State Diagram........................................................................................................956\nFigure 8.213 Source EPR Mode Exit State Diagram......................................................................................................958\nFigure 8.214 Sink EPR Mode Exit State Diagram...........................................................................................................959\nFigure 8.215 BIST Carrier Mode State Diagram .............................................................................................................960\nFigure 8.216 BIST Test Data Mode State Diagram ........................................................................................................962\nFigure 8.217 BIST Shared Capacity Test Mode State Diagram ................................................................................964"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "full_path": "9 States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "page": 25,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Figure 9.1 Example PD Topology ....................................................................................................................................976\nFigure 9.2 Mapping of PD Topology to USB ................................................................................................................977\nFigure 9.3 Use of SPM in the PD System.......................................................................................................................978\nFigure 9.4 USB Attached to USB Powered State Transition.................................................................................980\nFigure 9.5 Any USB State to USB Attached State Transition (When operating as a Consumer)..........981\nFigure 9.6 Any USB State to USB Attached State Transition (When operating as a Provider).............981\nFigure 9.7 Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)..982\nFigure 9.8 Software stack on a PD aware OS..............................................................................................................983\nFigure 9.9 Enumeration of a PDUSB Device................................................................................................................984\nPage 26 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010 Power Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995\nFigure 10.1 SPR Source Power Rule Illustration for Fixed Supply PDOs.......................................................1000\nFigure 10.2 SPR Source Power Rule Example For Fixed Supply PDOs...........................................................1001\nFigure 10.3 Valid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\n1003\nFigure 10.4 Valid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\n1003\nFigure 10.5 Valid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤\n100W...................................................................................................................................................................1004\nFigure 10.6 Valid EPR AVS Operating Region............................................................................................................1011\nFigure 10.7 EPR Source Power Rule Illustration for Fixed PDOs......................................................................1012\nA CRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nB Message Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC VDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nD BMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nFigure D.1 Circuit Block of BMC Finite Difference Receiver..............................................................................1032\nFigure D.2 BMC AC and DC noise from V BUS at Power Sink...............................................................................1033\nFigure D.3 Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise.............1033\nFigure D.4 Scaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with\nUSB 2.0 Noise ..................................................................................................................................................1034\nFigure D.5 BMC Signal and Finite Difference Output with Various Time Steps........................................1034\nFigure D.6 Output of Finite Difference in dash line and Edge Detector in solid line ..............................1035\nFigure D.7 Noise Zone and Detect Zone of BMC Receiver ..................................................................................1035\nFigure D.8 Circuit Block of BMC Subtraction Receiver........................................................................................1036\nFigure D.9 (a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output..............................1036\nFigure D.10 Output of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at\nPower Source (b) at Power Sink.............................................................................................................1037\nE FRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nFigure E.1 Example FRS Capable System ..................................................................................................................1038\nFigure E.2 Slow V BUS Discharge ....................................................................................................................................1039\nFigure E.3 Fast V BUS Discharge......................................................................................................................................1040\nFigure E.4 Slow V BUS discharge after FR_Swap message is sent.....................................................................1044\nFigure E.5 V BUS discharges quickly before FR_Swap message is sent after adapter disconnected.1046\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 27List of Tables\nRevision History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nLIMITED COPYRIGHT LICENSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nINTELLECTUAL PROPERTY DISCLAIMER . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nEditors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nContributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nTable Of Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13\nList of Figures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19\nList of Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .27"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "full_path": "1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 1.1 Section Overview.................................................................................................................................................... 36\nTable 1.2 Keywords ................................................................................................................................................................... 37\nTable 1.3 Document References........................................................................................................................................... 39\nTable 1.4 Terms and Abbreviations.................................................................................................................................... 40"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "full_path": "2 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 2.1 Fixed Supply Power Ranges............................................................................................................................... 75\nTable 2.2 PPS Voltage Power Ranges................................................................................................................................. 75\nTable 2.3 AVS Voltage Power Ranges ................................................................................................................................ 76"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "full_path": "3 USB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "full_path": "4 Electrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "full_path": "5 Physical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 5.1 4b5b Symbol Encoding ........................................................................................................................................ 80\nTable 5.2 Ordered Sets ............................................................................................................................................................. 81\nTable 5.3 Validation of Ordered Sets.................................................................................................................................. 82\nTable 5.4 Data Size ..................................................................................................................................................................... 83\nTable 5.5 SOP Ordered Set...................................................................................................................................................... 84\nTable 5.6 SOP’ Ordered Set..................................................................................................................................................... 85\nTable 5.7 SOP’’ Ordered Set.................................................................................................................................................... 85\nTable 5.8 SOP’_Debug Ordered Set...................................................................................................................................... 86\nTable 5.9 SOP’’_Debug Ordered Set..................................................................................................................................... 86\nTable 5.10 CRC-32 Mapping ..................................................................................................................................................... 88\nTable 5.11 Hard Reset Ordered Set ....................................................................................................................................... 89\nTable 5.12 Cable Reset Ordered Set ...................................................................................................................................... 90\nTable 5.13 Rp values used for Collision Avoidance......................................................................................................... 91\nTable 5.14 BMC Tx Mask Definition, X Values................................................................................................................... 97\nTable 5.15 BMC Tx Mask Definition, Y Values................................................................................................................... 98\nTable 5.16 BMC Rx Mask Definition ....................................................................................................................................102\nTable 5.17 BMC Common Normative Requirements ...................................................................................................105\nTable 5.18 BMC Transmitter Normative Requirements.............................................................................................106\nTable 5.19 BMC Receiver Normative Requirements....................................................................................................110"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "full_path": "6 Protocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "page": 27,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.1 Message Header ....................................................................................................................................................116\nTable 6.2 Revision Interoperability during an Explicit Contract .........................................................................119\nTable 6.3 Extended Message Header................................................................................................................................120\nTable 6.4 Use of Unchunked Message Supported bit ................................................................................................122\nTable 6.5 Control Message Types ......................................................................................................................................128\nPage 28 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 6.6 Data Message Types ............................................................................................................................................138\nTable 6.7 Power Data Object................................................................................................................................................139\nTable 6.8 Augmented Power Data Object.......................................................................................................................140\nTable 6.9 Fixed Supply PDO – Source ..............................................................................................................................141\nTable 6.10 Fixed Power Source Peak Current Capability ..........................................................................................143\nTable 6.11 Variable Supply (non-Battery) PDO – Source ..........................................................................................143\nTable 6.12 Battery Supply PDO – Source ..........................................................................................................................144\nTable 6.13 SPR Programmable Power Supply APDO – Source................................................................................145\nTable 6.14 SPR Adjustable Voltage Supply APDO – Source.......................................................................................146\nTable 6.15 EPR Adjustable Voltage Supply APDO – Source ......................................................................................146\nTable 6.16 EPR AVS Power Source Peak Current Capability....................................................................................147\nTable 6.17 Fixed Supply PDO – Sink....................................................................................................................................148\nTable 6.18 Variable Supply (non-Battery) PDO – Sink................................................................................................149\nTable 6.19 Battery Supply PDO – Sink................................................................................................................................150\nTable 6.20 SPR Programmable Power Supply APDO – Sink .....................................................................................150\nTable 6.21 SPR Adjustable Voltage Supply APDO – Sink............................................................................................151\nTable 6.22 EPR Adjustable Voltage Supply APDO – Sink ...........................................................................................151\nTable 6.23 Fixed and Variable Request Data Object ....................................................................................................155\nTable 6.24 Battery Request Data Object............................................................................................................................156\nTable 6.25 PPS Request Data Object ...................................................................................................................................156\nTable 6.26 AVS Request Data Object...................................................................................................................................156\nTable 6.27 BIST Data Object ...................................................................................................................................................160\nTable 6.28 Unstructured VDM Header...............................................................................................................................163\nTable 6.29 Structured VDM Header ....................................................................................................................................164\nTable 6.30 Structured VDM Commands ............................................................................................................................165\nTable 6.31 SVID Values .............................................................................................................................................................165\nTable 6.32 Commands and Responses...............................................................................................................................167\nTable 6.33 ID Header VDO.......................................................................................................................................................169\nTable 6.34 Product Types (UFP)...........................................................................................................................................170\nTable 6.35 Product Types (Cable Plug/VPD) ..................................................................................................................171\nTable 6.36 Product Types (DFP)...........................................................................................................................................171\nTable 6.37 Cert Stat VDO..........................................................................................................................................................172\nTable 6.38 Product VDO ...........................................................................................................................................................172\nTable 6.39 UFP VDO ...................................................................................................................................................................172\nTable 6.40 DFP VDO ...................................................................................................................................................................175\nTable 6.41 Passive Cable VDO................................................................................................................................................176\nTable 6.42 Active Cable VDO1................................................................................................................................................179\nTable 6.43 Active Cable VDO2................................................................................................................................................180\nTable 6.44 VPD VDO...................................................................................................................................................................184\nTable 6.45 Discover SVIDs Responder VDO.....................................................................................................................186\nTable 6.46 Battery Status Data Object (BSDO) ...............................................................................................................196\nTable 6.47 Alert Data Object (ADO).....................................................................................................................................198\nTable 6.48 Country Code Data Object (CCDO) ................................................................................................................201\nTable 6.49 Enter_USB Data Object (EUDO) ......................................................................................................................203\nTable 6.50 EPR Mode Data Object (EPRMDO) ................................................................................................................206\nTable 6.51 Source_Info Data Object (SIDO)......................................................................................................................212\nTable 6.52 Revision Message Data Object (RMDO) ......................................................................................................214\nTable 6.53 Extended Message Types ..................................................................................................................................215\nTable 6.54 Source Capabilities Extended Data Block (SCEDB) ...............................................................................216\nTable 6.55 SOP Status Data Block (SDB) ...........................................................................................................................221\nTable 6.56 “SOP’/SOP’’ Status Data Block (SPDB)”......................................................................................................226\nTable 6.57 Get Battery Cap Data Block (GBCDB)...........................................................................................................227\nTable 6.58 Get Battery Status Data Block (GBSDB)......................................................................................................227\nTable 6.59 Battery Capability Data Block (BCDB)”......................................................................................................228\nTable 6.60 Get Manufacturer Info Data Block (GMIDB) .............................................................................................230\nTable 6.61 Manufacturer Info Data Block (MIDB) ........................................................................................................231\nTable 6.62 PPS Status Data Block (PPSSDB)...................................................................................................................235\nTable 6.63 Country Codes Data Block (CCDB) ................................................................................................................237\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 29Table 6.64 Country Info Data Block (CIDB) .....................................................................................................................238\nTable 6.65 Sink Capabilities Extended Data Block (SKEDB) ...................................................................................239\nTable 6.66 Extended Control Data Block (ECDB)..........................................................................................................244\nTable 6.67 Extended Control Message Types .................................................................................................................244\nTable 6.68 Time Values.............................................................................................................................................................262\nTable 6.69 Timers........................................................................................................................................................................264\nTable 6.70 Counter Parameters ............................................................................................................................................267\nTable 6.71 Counters ...................................................................................................................................................................267\nTable 6.72 Response to an incoming Message (except VDM)..................................................................................269\nTable 6.73 Response to an incoming VDM .......................................................................................................................269\nTable 6.74 Message Discarding .............................................................................................................................................274\nTable 6.75 Protocol Layer States ..........................................................................................................................................298\nTable 6.76 Message Applicability Abbreviations...........................................................................................................300\nTable 6.77 Applicability of Control Messages .................................................................................................................301\nTable 6.78 Applicability of Data Messages .......................................................................................................................303\nTable 6.79 Applicability of Extended Messages.............................................................................................................305\nTable 6.80 Applicability of Extended Control Messages ............................................................................................308\nTable 6.81 Applicability of Structured VDM Commands............................................................................................309\nTable 6.82 Applicability of Reset Signaling......................................................................................................................310\nTable 6.83 Applicability of Fast Role Swap Request ....................................................................................................310\nTable 6.84 Value Parameters .................................................................................................................................................311"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "full_path": "7 Power Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312",
    "page": 29,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 7.1 Sequence Description for Increasing the Voltage...................................................................................343\nTable 7.2 Sequence Diagram for Increasing the Voltage and Current...............................................................346\nTable 7.3 Sequence Description for Increasing the Voltage and Decreasing the Current ........................349\nTable 7.4 Sequence Description for Decreasing the Voltage and Increasing the Current ........................352\nTable 7.5 Sequence Description for Decreasing the Voltage .................................................................................355\nTable 7.6 Sequence Description for Decreasing the Voltage and the Current ...............................................358\nTable 7.7 Sequence Description for no change in Current or Voltage...............................................................360\nTable 7.8 Sequence Description for Increasing the Current..................................................................................363\nTable 7.9 Sequence Description for Decreasing the Current.................................................................................366\nTable 7.10 Sequence Description for Increasing the Programmable Power Supply Voltage ....................369\nTable 7.11 Sequence Description for Decreasing the Programmable Power Supply Voltage ...................372\nTable 7.12 Sequence Description for increasing the Current in PPS mode .......................................................375\nTable 7.13 Sequence Description for decreasing the Current in PPS mode ......................................................378\nTable 7.14 Sequence Description for no change in Current or Voltage in PPS mode....................................380\nTable 7.15 Sequence Description for Increasing the Adjustable Voltage Supply Voltage ...........................383\nTable 7.16 Sequence Description for Decreasing the Adjustable Voltage Supply Voltage..........................386\nTable 7.17 Sequence Description for no change in Current or Voltage in AVS mode ...................................387\nTable 7.18 Sequence Description for a Sink Requested Power Role Swap........................................................390\nTable 7.19 Sequence Description for a Source Requested Power Role Swap...................................................394\nTable 7.20 Sequence Description for a Source Initiated Hard Reset ....................................................................397\nTable 7.21 Sequence Description for a Sink Initiated Hard Reset .........................................................................399\nTable 7.22 Sequence Description for Fast Role Swap .................................................................................................402\nTable 7.23 Source Electrical Parameters ..........................................................................................................................404\nTable 7.24 Sink Electrical Parameters ...............................................................................................................................413\nTable 7.25 Common Source/Sink Electrical Parameters...........................................................................................415"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Device Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416",
    "full_path": "8 Device Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416",
    "page": 29,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 8.1 Basic Message Flow .............................................................................................................................................426\nTable 8.2 Potential issues in Basic Message Flow ......................................................................................................427\nTable 8.3 Basic Message Flow with CRC failure ..........................................................................................................429\nTable 8.4 Atomic Message Sequences..............................................................................................................................430\nTable 8.5 AMS: Power Negotiation (SPR) ......................................................................................................................431\nTable 8.6 AMS: Power Negotiation (EPR) ......................................................................................................................432\nTable 8.7 AMS: Unsupported Message ............................................................................................................................434\nPage 30 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.8 AMS: Soft Reset......................................................................................................................................................434\nTable 8.9 AMS: Data Reset ....................................................................................................................................................434\nTable 8.10 AMS: Power Role Swap ......................................................................................................................................435\nTable 8.11 AMS: Fast Role Swap ...........................................................................................................................................435\nTable 8.12 AMS: Data Role Swap ..........................................................................................................................................436\nTable 8.13 AMS: V CONN Swap .................................................................................................................................................437\nTable 8.14 AMS: Alert ................................................................................................................................................................437\nTable 8.15 AMS: Status..............................................................................................................................................................438\nTable 8.16 AMS: Source/Sink Capabilities (SPR) ..........................................................................................................438\nTable 8.17 AMS: Source/Sink Capabilities (EPR)..........................................................................................................439\nTable 8.18 AMS: Extended Capabilities .............................................................................................................................440\nTable 8.19 AMS: Battery Capabilities..................................................................................................................................440\nTable 8.20 AMS: Manufacturer Information....................................................................................................................441\nTable 8.21 AMS: Country Codes............................................................................................................................................441\nTable 8.22 AMS: Country Information ...............................................................................................................................441\nTable 8.23 AMS: Revision Information ..............................................................................................................................442\nTable 8.24 AMS: Source Information ..................................................................................................................................442\nTable 8.25 AMS: Security .........................................................................................................................................................442\nTable 8.26 AMS: Firmware Update......................................................................................................................................443\nTable 8.27 AMS: Structured VDM.........................................................................................................................................444\nTable 8.28 AMS: Built-In Self-Test (BIST).........................................................................................................................445\nTable 8.29 AMS: Enter USB .....................................................................................................................................................445\nTable 8.30 AMS: Unstructured VDM ...................................................................................................................................445\nTable 8.31 AMS: Hard Reset ...................................................................................................................................................446\nTable 8.32 Steps for a successful Power Negotiation ..................................................................................................449\nTable 8.33 Steps for a rejected Power Negotiation ......................................................................................................453\nTable 8.34 Steps for a Wait response to a Power Negotiation.................................................................................456\nTable 8.35 Steps for SPR PPS Keep Alive ..........................................................................................................................459\nTable 8.36 Steps for SPR Sink Makes Request (Accept) .............................................................................................462\nTable 8.37 Steps for SPR Sink Makes Request (Reject) ..............................................................................................465\nTable 8.38 Steps for SPR Sink Makes Request (Wait) .................................................................................................468\nTable 8.39 Steps for Entering EPR Mode (Success)......................................................................................................471\nTable 8.40 Steps for Entering EPR Mode (Failure due to non-EPR cable) .........................................................474\nTable 8.41 Steps for Entering EPR Mode (Failure of V CONN Swap) .......................................................................477\nTable 8.42 Steps for a successful EPR Power Negotiation ........................................................................................481\nTable 8.43 Steps for a Rejected EPR Power Negotiation............................................................................................485\nTable 8.44 Steps for a Wait response to an EPR Power Negotiation ....................................................................488\nTable 8.45 Steps for EPR Keep Alive...................................................................................................................................491\nTable 8.46 Steps for Exiting EPR Mode (Sink Initiated) .............................................................................................494\nTable 8.47 Steps for Exiting EPR Mode (Source Initiated)........................................................................................497\nTable 8.48 Steps for EPR Sink Makes Request (Accept).............................................................................................500\nTable 8.49 Steps for EPR Sink Makes Request (Reject)..............................................................................................503\nTable 8.50 Steps for SPR Sink Makes Request (Wait) .................................................................................................506\nTable 8.51 Steps for an Unsupported Message ..............................................................................................................509\nTable 8.52 Steps for a Soft Reset...........................................................................................................................................512\nTable 8.53 Steps for a DFP Initiated Data Reset where the DFP is the V CONN Source...................................515\nTable 8.54 Steps for a DFP Receiving a Data Reset where the DFP is the V CONN Source ..............................518\nTable 8.55 Steps for a DFP Initiated Data Reset where the UFP is the V CONN Source ...................................521\nTable 8.56 Steps for a DFP Receiving a Data Reset where the UFP is the V CONN Source .............................525\nTable 8.57 Steps for Source initiated Hard Reset..........................................................................................................529\nTable 8.58 Steps for Sink initiated Hard Reset ...............................................................................................................532\nTable 8.59 Steps for Source initiated Hard Reset - Sink long reset .......................................................................535\nTable 8.60 Steps for a Successful Source Initiated Power Role Swap Sequence .............................................539\nTable 8.61 Steps for a Rejected Source Initiated Power Role Swap Sequence.................................................543\nTable 8.62 Steps for a Source Initiated Power Role Swap with Wait Sequence...............................................546\nTable 8.63 Steps for a Successful Sink Initiated Power Role Swap Sequence...................................................550\nTable 8.64 Steps for a Rejected Sink Initiated Power Role Swap Sequence ......................................................554\nTable 8.65 Steps for a Sink Initiated Power Role Swap with Wait Sequence....................................................557\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 31Table 8.66 Steps for a Successful Fast Role Swap Sequence ....................................................................................561\nTable 8.67 Steps for Data Role Swap, UFP operating as Sink initiates.................................................................565\nTable 8.68 Steps for Rejected Data Role Swap, UFP operating as Sink initiates..............................................568\nTable 8.69 Steps for Data Role Swap with Wait, UFP operating as Sink initiates ...........................................571\nTable 8.70 Steps for Data Role Swap, UFP operating as Source initiates............................................................574\nTable 8.71 Steps for Rejected Data Role Swap, UFP operating as Source initiates.........................................577\nTable 8.72 Steps for Data Role Swap with Wait, UFP operating as Source initiates ......................................580\nTable 8.73 Steps for Data Role Swap, DFP operating as Source initiates............................................................583\nTable 8.74 Steps for Rejected Data Role Swap, DFP operating as Source initiates ........................................586\nTable 8.75 Steps for Data Role Swap with Wait, DFP operating as Source initiates ......................................589\nTable 8.76 Steps for Data Role Swap, DFP operating as Sink initiates.................................................................592\nTable 8.77 Steps for Rejected Data Role Swap, DFP operating as Sink initiates..............................................595\nTable 8.78 Steps for Data Role Swap with Wait, DFP operating as Sink initiates ...........................................598\nTable 8.79 Steps for Source to Sink V CONN Source Swap ...........................................................................................601\nTable 8.80 Steps for Rejected V CONN Source Swap .......................................................................................................604\nTable 8.81 Steps for V CONN Source Swap with Wait.....................................................................................................607\nTable 8.82 Steps for V CONN Source Swap, Initiated by non-V CONN Source .........................................................610\nTable 8.83 Steps for Rejected V CONN Source Swap, Initiated by non-V CONN Source......................................613\nTable 8.84 Steps for V CONN Source Swap with Wait.....................................................................................................616\nTable 8.85 Steps for Source Alert to Sink..........................................................................................................................619\nTable 8.86 Steps for Sink Alert to Source..........................................................................................................................621\nTable 8.87 Steps for a Sink getting Source Status Sequence.....................................................................................623\nTable 8.88 Steps for a Source getting Sink Status Sequence.....................................................................................626\nTable 8.89 Steps for a V CONN Source getting Cable Plug Status Sequence..........................................................629\nTable 8.90 Steps for a Sink getting Source PPS status Sequence............................................................................632\nTable 8.91 Steps for a Sink getting Source Capabilities Sequence.........................................................................635\nTable 8.92 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence...638\nTable 8.93 Steps for a Source getting Sink Capabilities Sequence.........................................................................641\nTable 8.94 Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence ...........644\nTable 8.95 Steps for a Sink getting EPR Source Capabilities Sequence ...............................................................647\nTable 8.96 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Se -\nquence .......................................................................................................................................................................650\nTable 8.97 Steps for a Source getting Sink EPR Capabilities Sequence ...............................................................653\nTable 8.98 Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\n656\nTable 8.99 Steps for a Sink getting Source Extended Capabilities Sequence ....................................................659\nTable 8.100 Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence.........662\nTable 8.101 Steps for a Source getting Sink Extended Capabilities Sequence ....................................................665\nTable 8.102 Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence.........668\nTable 8.103 Steps for a Sink getting Source Battery capabilities Sequence .........................................................671\nTable 8.104 Steps for a Source getting Sink Battery capabilities Sequence .........................................................674\nTable 8.105 Steps for a Sink getting Source Battery status Sequence ....................................................................677\nTable 8.106 Steps for a Source getting Sink Battery status Sequence ....................................................................680\nTable 8.107 Steps for a Source getting Sink's Port Manufacturer Information Sequence .............................683\nTable 8.108 Steps for a Source getting Sink's Port Manufacturer Information Sequence .............................686\nTable 8.109 Steps for a Source getting Sink's Battery Manufacturer Information Sequence.......................689\nTable 8.110 Steps for a Source getting Sink's Battery Manufacturer Information Sequence.......................692\nTable 8.111 Steps for a V CONN Source getting Sink's Port Manufacturer Information Sequence ...............695\nTable 8.112 Steps for a Source getting Country Codes Sequence .............................................................................698\nTable 8.113 Steps for a Source getting Sink's Country Codes Sequence................................................................701\nTable 8.114 Steps for a V CONN Source getting Sink's Country Codes Sequence..................................................704\nTable 8.115 Steps for a Source getting Country Information Sequence ................................................................707\nTable 8.116 Steps for a Source getting Sink's Country Information Sequence ...................................................710\nTable 8.117 Steps for a V CONN Source getting Sink's Country Information Sequence.....................................713\nTable 8.118 Steps for a Source getting Revision Information Sequence ...............................................................716\nTable 8.119 Steps for a Source getting Sink's Revision Information Sequence..................................................719\nTable 8.120 Steps for a V CONN Source getting Sink's Revision Information Sequence....................................722\nTable 8.121 Steps for a Sink getting Source Information Sequence ........................................................................725\nPage 32 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.122 Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence .728\nTable 8.123 Steps for a Source requesting a security exchange with a Sink Sequence...................................731\nTable 8.124 Steps for a Sink requesting a security exchange with a Source Sequence...................................734\nTable 8.125 Steps for a V CONN Source requesting a security exchange with a Cable Plug Sequence........737\nTable 8.126 Steps for a Source requesting a firmware update exchange with a Sink Sequence.................740\nTable 8.127 Steps for a Sink requesting a firmware update exchange with a Source Sequence.................743\nTable 8.128 Steps for a V CONN Source requesting a firmware update exchange with a Cable Plug Se -\nquence .......................................................................................................................................................................746\nTable 8.129 Steps for Initiator to UFP Discover Identity (ACK) ................................................................................749\nTable 8.130 Steps for Initiator to UFP Discover Identity (NAK) ...............................................................................752\nTable 8.131 Steps for Initiator to UFP Discover Identity (BUSY)..............................................................................755\nTable 8.132 Steps for DFP to UFP Discover SVIDs (ACK).............................................................................................758\nTable 8.133 Steps for DFP to UFP Discover SVIDs (NAK) ............................................................................................761\nTable 8.134 Steps for DFP to UFP Discover SVIDs (BUSY) ..........................................................................................764\nTable 8.135 Steps for DFP to UFP Discover Modes (ACK) ...........................................................................................767\nTable 8.136 Steps for DFP to UFP Discover Modes (NAK)...........................................................................................770\nTable 8.137 Steps for DFP to UFP Discover Modes (BUSY).........................................................................................773\nTable 8.138 Steps for DFP to UFP Enter Mode..................................................................................................................776\nTable 8.139 Steps for DFP to UFP Exit Mode .....................................................................................................................779\nTable 8.140 Steps for DFP to Cable Plug Enter Mode.....................................................................................................782\nTable 8.141 Steps for DFP to Cable Plug Exit Mode ........................................................................................................785\nTable 8.142 Steps for Initiator to Responder Attention................................................................................................788\nTable 8.143 Steps for BIST Carrier Mode Test ..................................................................................................................790\nTable 8.144 Steps for BIST Test Data Test ..........................................................................................................................793\nTable 8.145 Steps for BIST Shared Capacity Test Mode Test .....................................................................................796\nTable 8.146 Steps for UFP USB4 Mode Entry (Accept)..................................................................................................799\nTable 8.147 Steps for UFP USB4 Mode Entry (Reject)...................................................................................................802\nTable 8.148 Steps for UFP USB4 Mode Entry (Wait)......................................................................................................805\nTable 8.149 Steps for Cable Plug USB4 Mode Entry (Accept) ....................................................................................808\nTable 8.150 Steps for Cable Plug USB4 Mode Entry (Reject)......................................................................................811\nTable 8.151 Steps for Cable Plug USB4 Mode Entry (Wait).........................................................................................814\nTable 8.152 Steps for Unstructured VDM Message Sequence....................................................................................817\nTable 8.153 Steps for VDEM Message Sequence ..............................................................................................................820\nTable 8.154 Policy Engine States.............................................................................................................................................966"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "full_path": "9 States and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975",
    "page": 32,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 9.1 USB Power Delivery Type Codes ...................................................................................................................985\nTable 9.2 USB Power Delivery Capability Descriptor ...............................................................................................986\nTable 9.3 Battery Info Capability Descriptor................................................................................................................987\nTable 9.4 PD Consumer Port Descriptor.........................................................................................................................988\nTable 9.5 PD Provider Port Descriptor............................................................................................................................989\nTable 9.6 PD Requests ............................................................................................................................................................990\nTable 9.7 PD Request Codes.................................................................................................................................................990\nTable 9.8 PD Feature Selectors ...........................................................................................................................................990\nTable 9.9 Get Battery Status Request...............................................................................................................................991\nTable 9.10 Battery Status Structure ....................................................................................................................................991\nTable 9.11 Set PD Feature........................................................................................................................................................992\nTable 9.12 Battery Wake Mask..............................................................................................................................................993\nTable 9.13 Charging Policy Encoding .................................................................................................................................994"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Power Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995",
    "full_path": "10 Power Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995",
    "page": 32,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 10.1 Considerations for Sources ..............................................................................................................................996\nTable 10.2 SPR Normative Voltages and Minimum Currents ..................................................................................997\nTable 10.3 SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP.................998\nTable 10.4 SPR Source Port Present PDP less than Port Maximum PDP Examples .......................................999\nTable 10.5 Fixed Supply PDO - Source 5V......................................................................................................................1001\nTable 10.6 Fixed Supply PDO - Source 9V......................................................................................................................1002\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 33Table 10.7 Fixed Supply PDO - Source 15V...................................................................................................................1002\nTable 10.8 Fixed Supply PDO - Source 20V...................................................................................................................1002\nTable 10.9 SPR Adjustable Voltage Supply (AVS) Voltage Ranges......................................................................1004\nTable 10.10 SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP...1005\nTable 10.11 SPR Programmable Power Supply Voltage Ranges ............................................................................1006\nTable 10.12 EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\n1009\nTable 10.14 EPR Source Examples when Port Present PDP is less than Port Maximum PDP...................1010\nTable 10.13 EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using\nan EPR-capable cable.......................................................................................................................................1010\nTable 10.15 EPR Adjustable Voltage Supply (AVS) Voltage Ranges .....................................................................1012\nA CRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nB Message Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC VDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nTable C.1 Discover Identity Command request from Initiator Example .......................................................1017\nTable C.2 Discover Identity Command response from Active Cable Responder Example ....................1018\nTable C.3 Discover Identity Command response from Hub Responder Example .....................................1020\nTable C.4 Discover SVIDs Command request from Initiator Example............................................................1021\nTable C.5 Discover SVIDs Command response from Responder Example ...................................................1022\nTable C.6 Discover Modes Command request from Initiator Example ..........................................................1023\nTable C.7 Discover Modes Command response from Responder Example..................................................1024\nTable C.8 Enter Mode Command request from Initiator Example ...................................................................1025\nTable C.9 Enter Mode Command response from Responder Example...........................................................1026\nTable C.10 Enter Mode Command request with additional VDO Example .....................................................1027\nTable C.11 Exit Mode Command request from Initiator Example ......................................................................1028\nTable C.12 Exit Mode Command response from Responder Example..............................................................1029\nTable C.13 Attention Command request from Initiator Example........................................................................1030\nTable C.14 Attention Command request from Initiator with additional VDO Example ............................1031\nD BMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nE FRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nTable E.1 Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)...............1041\nTable E.2 Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\n1042\nTable E.3 Sequence for slow V BUS discharge (it discharges after FR_Swap message is sent)..............1045\nTable E.4 V BUS discharges quickly after adapter disconnected.........................................................................1046\nPage 34 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-101 Introduction\nUSB has evolved from a data interface capable of supplying limited power to a primary provider of power with a\ndata interface. Today many devices charge or get their power from USB Ports contained in laptops, cars, aircraft or\neven wall sockets. USB has become a ubiquitous power socket for many small devices such as cell phones and other\nhand-held devices. Users need USB to fulfill their requirements not only in terms of data but also to provide power\nto, or charge, their devices simply, often without the need to load a driver, in order to carry out “traditional” USB\nfunctions.\nThere are, however, still many devices which either require an additional power connection to the wall, or exceed\nthe USB default current in order to operate. Increasingly, international regulations require better energy\nmanagement due to ecological and practical concerns relating to the availability of power. Regulations limit the\namount of power available from the wall which has led to a pressing need to optimize power usage. The USB Power\nDelivery Specification has the potential to minimize waste as it becomes a standard for charging devices that are\nnot satisfied by [USBBC 1.2] or [USB Type-C 2.4] .\nWider usage of wireless solutions is an attempt to remove data cabling but the need for “tethered” charging\nremains. In addition, industrial design requirements drive wired connectivity to do much more over the same\nconnector.\nUSB Power Delivery is designed to enable the maximum functionality of USB by providing more flexible power\ndelivery along with data over a single cable. Its aim is to operate with and build on the existing USB ecosystem;\nincreasing power levels from existing USB standards, for example [USBBC 1.2] , enabling new higher power use\ncases such as USB powered Hard Disk Drives (HDDs), laptops and monitors.\nWith USB Power Delivery the power direction is no longer fixed. This enables the product with the power (USB\nHost or Peripheral) to provide the power. For example, a display with a supply from the wall can power, or charge,\na laptop. Alternatively, USB Chargers are able to supply power to laptops and other Battery powered devices\nthrough their, traditional power providing, USB Ports.\nUSB Power Delivery enables Hubs (including Hubs embedded in other devices such as docks or monitors) to\nbecome the means to optimize power management across multiple peripherals by allowing each device to take\nonly the power it requires, and to get more power when required for a given application. Optionally the Hubs can\ncommunicate with the PC to enable even more intelligent and flexible management of power either automatically\nor with some level of user intervention.\nUSB Power Delivery allows low power cases such as headsets to Negotiate for only the power they require. This\nprovides a simple solution that enables USB devices to operate at their optimal power levels.\nThe Power Delivery Specification, in addition to providing mechanisms to Negotiate power also can be used as a\nside-band channel for standard and vendor defined messaging. The specification enables discovery of cable\nCapabilities such as supported speeds and current levels. Power Delivery enables alternative modes of operation\nby providing the mechanisms to discover, enter and exit Modes such as EPR Mode, USB4® Mode or Alternate\nModes."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.1",
    "title": "Overview",
    "full_path": "1.1 Overview",
    "page": 34,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "This specification defines how USB Devices can Negotiate for more current and/or higher or lower voltages over\nthe USB cable (using the USB Type-C® CC wire as the communications channel) than are defined in the [USB 2.0] ,\n[USB 3.2] , [USB4] , [USB Type-C 2.4] or [USBBC 1.2] specifications. It allows Devices with greater power\nrequirements than can be met with today's specification to get the power they require to operate from V BUS and\nNegotiate with external power sources (e.g., Chargers).\nIn addition, it allows a Source and Sink to swap Power Roles such that a USB Device could supply power to the USB\nHost. For example, a display could supply power to a laptop to operate or charge its Battery. This specification also\nadds a mechanism to swap the Data Roles such that the upstream facing Port becomes the downstream facing Port\nand vice versa. It also enables a swap of the end supplying V CONN to a powered cable.\nThe USB Power Delivery Specification is guided by the following principles:\n Works seamlessly with legacy USB Devices.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 35 Compatible with existing spec-compliant USB cables.\n Minimizes potential damage from non-compliant cables (e.g., ‘Y’ cables etc.).\n Optimized for low-cost implementations.\nThis specification defines mechanisms to discover, enter and exit Alternate Modes defined either by a standard or\nby a particular vendor. These Alternate Modes can be supported either by the Port Partner or by a cable connecting\nthe two Port Partners.\nThe specification defines mechanisms to discover the Capabilities of cables which can communicate using Power\nDelivery.\nTo facilitate optimum charging, the specification defines two mechanisms a USB Charger can Advertise for the\ndevice to use:\n1) A list of Fixed Supply voltages each with a maximum current. The device selects a voltage and current\nfrom the list. This is the traditional model used by devices that use internal electronics to manage the\ncharging of their Battery including modifying the voltage and current actually supplied to the Battery.\nThe side-effect of this model is that the charging circuitry generates heat that can be problematic for\nsmall form factor devices.\n2) A list of programmable voltage ranges, in SPR PPS Mode, each with a maximum current. The device re -\nquests a voltage (in 20mV increments) that is within the Advertised range and a maximum current. The\nUSB PPS Charger delivers the requested voltage until the maximum current is reached at which time\nthe USB PPS Charger reduces its output voltage so as not to supply more than the requested maximum\ncurrent. During the high current portion of the charge cycle, the USB PPS Charger can be directly con -\nnected (through an appropriate safety device) to the Battery. This model is used by devices that want\nto minimize the thermal impact of their internal charging circuitry.\n3) A list of adjustable voltage ranges, in SPR AVS Mode or EPR AVS Mode, each with a maximum current.\nThe device requests a voltage (in 100mV increments) that is within the Advertised range and a maxi -\nmum current. The USB AVS Charger delivers the requested voltage."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.2",
    "title": "Purpose",
    "full_path": "1.2 Purpose",
    "page": 35,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "The USB Power Delivery specification defines a power delivery system covering all elements of a USB system\nincluding USB Hosts, USB Devices, Hubs, Chargers and cable assemblies. This specification describes the\narchitecture, protocols, power supply behavior, connectors and cabling necessary for managing power delivery\nover USB at up to 100W in SPR Mode and 240W in EPR Mode. This specification is intended to be fully compatible\nwith and extend the existing USB infrastructure. It is intended that this specification will allow system OEMs,\npower supply and Peripheral developers adequate flexibility for product versatility and market differentiation\nwithout losing backwards compatibility.\nUSB Power Delivery is designed to operate independently of the existing USB bus defined mechanisms used to\nNegotiate power which are:\n [USB 2.0] , [USB 3.2] in band requests for high power interfaces.\n [USBBC 1.2] mechanisms for supplying higher power (not mandated by this specification).\n [USB Type-C 2.4] mechanisms for supplying higher power.\nInitial operating conditions remain the USB Default Operation as defined in [USB 2.0] , [USB 3.2] , [USB Type-C 2.4]\nor [USBBC 1.2] .\n The DFP sources vSafe5V over V BUS.\n The UFP consumes power from V BUS.\nPage 36 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-101.2.1 Scope\nThis specification is intended as an extension to the existing [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] and [USBBC\n1.2] specifications. It addresses only the elements required to implement USB Power Delivery. It is targeted at\npower supply vendors, manufacturers of [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] and [USBBC 1.2] platforms,\ndevices and cable assemblies.\nNormative information is provided to allow interoperability of components designed to this specification.\nInformative information, when provided, illustrates possible design implementation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.3",
    "title": "Section Overview",
    "full_path": "1.3 Section Overview",
    "page": 36,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "This specification contains the following sections:\nTable 1.1 Section Overview\nSection Description\nSection 1, \"Introduction\"Introduction, conventions used in the document, list of terms and abbreviations,\nreferences, and details of parameter usage.\nSection 2, \"Overview\"Overview of the document including a description of the operation of PD and the\narchitecture.\nSection 3, \"USB Type-A and USB Type-\nB Cable Assemblies and Connectors\"Mechanical and electrical characteristics of the cables and connectors used by PD.\nSection Deprecated . See [USBPD 2.0] for legacy PD connector specification.\nSection 4, \"Electrical Requirements\" Electrical requirements for Dead Battery operation and cable detection.\nSection 5, \"Physical Layer\" Details of the PD PHY Layer requirements\nSection 6, \"Protocol Layer\"Protocol Layer requirements including the Message s, timers, counters, and state\noperation.\nSection 7, \"Power Supply\" Power supply requirements for both Provider s and Consumer s.\nSection 8, \"Device Policy\"Device Policy Manager requirements.\nPolicy Engine Atomic Message Sequence (AMS ) diagrams and state diagrams\nSection 9, \"States and Status\nReporting\"PDUSB Device requirements including mapping of VBUS to USB states.\nSystem Policy Manager requirements including descriptors, events, and requests.\nSection 10, \"Power Rules\" PDP Rating definitions for PD.\nSection A, \"CRC calculation\" Example CRC calculations.\nSection B, \"Message Sequence\nExamples (Deprecated)\"Scenarios illustrating Device Policy Manager operation. Deprecated\nSection C, \"VDM Command Examples\" Examples of Structured VDM usage.Section Deprecated .\nSection D, \"BMC Receiver Design\nExamples\"BMC Receiver Design Examples.\nSection E, \"FRS System Level Example\" FRS System Level Example.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 371.4 Conventions"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4.1",
    "title": "Precedence",
    "full_path": "1.4.1 Precedence",
    "page": 37,
    "level": 3,
    "parent_id": "1.4",
    "tags": [],
    "content": "If there is a conflict between text, figures, and tables, the precedence Shall be tables, figures, and then text.\nIn there is a conflict between a generic statement and a more specific statement, the more specific statement Shall\napply."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.4.2",
    "title": "Keywords",
    "full_path": "1.4.2 Keywords",
    "page": 37,
    "level": 3,
    "parent_id": "1.4",
    "tags": [],
    "content": "The following keywords differentiate between the levels of requirements and options.\nTable 1.2 Keywords\nKeyword Definition\nConditional NormativeConditional Normative is a keyword used to indicate a feature that is mandatory\nwhen another related feature has been implemented. Designers are mandated to\nimplement all such requirements, when the dependent features have been\nimplemented, to ensure interoperability with other compliant devices.\nDeprecatedDeprecated is a keyword used to indicate a feature, supported in previous\nreleases of the specification, which is no longer supported.\nDiscard See Discarded .\nDiscardedDiscard , Discards and Discarded are equivalent keywords indicating that a\nPacket when received Shall be thrown away by the PHY Layer and not passed to\nthe Protocol Layer for processing. No GoodCRC Message Shall be sent in response\nto the Packet .\nDiscards See Discarded .\nIgnore See Ignored .\nIgnoredIgnore , Ignores and Ignored are equivalent keywords indicating Message s or\nMessage fields which, when received, Shall result in no special action by the\nreceiver. An Ignored Message Shall only result in returning a GoodCRC Message\nto acknowledge Message receipt. A Message with an Ignored field Shall be\nprocessed normally except for any actions relating to the Ignored field.\nIgnores See Ignored .\nInformativeInformative is a keyword indicating text with no specific requirements,\nprovided only to improve understanding.\nInvalidInvalid is a keyword when used in relation to a Packet indicates that the Packet ’s\nusage or fields fall outside of the defined specification usage. When Invalid is\nused in relation to an Explicit Contract it indicates that a previously established\nExplicit Contract which can no longer be maintained by the Source . When Invalid\nis used in relation to individual K-code s or K-code sequences indicates that the\nreceived Signaling falls outside of the defined specification.\nMay May is a keyword that indicates a choice with no implied preference.\nMay NotMay Not is a keyword that is the inverse of May . Indicates a choice to not\nimplement a given feature with no implied preference.\nN/AN/A is a keyword that indicates that a field or value is not applicable and has no\ndefined value and Shall Not be checked or used by the recipient.\nNormative See Shall .\nOptionalOptional , Optionally and Optional Normative are equivalent keywords that\ndescribe features not mandated by this specification. However, if an Optional\nfeature is implemented, the feature Shall be implemented as defined by this\nspecification.\nOptional Normative See Optional .\nOptionally See Optional .\nPage 38 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-101.4.3 Numbering\nNumbers that are immediately followed by a lowercase “b” (e.g., 01b) are binary values. Numbers that are\nimmediately followed by an uppercase “B” are byte values. Numbers that are immediately followed by a lowercase\n“h” (e.g., 3Ah) or are preceded by “0x” (e.g., 0xFF00) are hexadecimal values. Numbers not immediately followed by\neither a “b”, “B” , or “h” are decimal values.ReservedReserved is a keyword indicating bits, bytes, words, fields, and code values that\nare set-aside for future standardization. Their use and interpretation May be\nspecified by future extensions to this specification and Shall Not be utilized or\nadapted by vendor implementation. A Reserved bit, byte, word, or field Shall be\nset to zero by the sender and Shall be Ignored by the receiver. Reserved field\nvalues Shall Not be sent by the sender and Shall be Ignored by the receiver.\nShallShall and Normative are equivalent keywords indicating a mandatory\nrequirement. Designers are mandated to implement all such requirements to\nensure interoperability with other compliant devices.\nShall NotShall Not is a keyword that is the inverse of Shall indicating non-compliant\noperation.\nShouldShould is a keyword indicating flexibility of choice with a preferred alternative;\nequivalent to the phrase “it is recommended that…”.\nShould NotShould Not is a keyword is the inverse of Should ; equivalent to the phrase “it is\nrecommended that implementations do not…”.\nStatic Static is a keyword indicating that a field that never changes.\nValidValid is a keyword that is the inverse of Invalid indicating either a Packet or\nSignaling that fall within the defined specification or an Explicit Contract that can\nbe maintained by the Source .Table 1.2 Keywords (Continued)\nKeyword Definition\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 391.5 Related Documents\nDocument references listed in Table 1.3, \"Document References\" are inclusive of all approved and published ECNs\nand Errata.\nTable 1.3 Document References\nBookmark Reference Title\n[DPTC2.1] DisplayPortTM Alt Mode on USB Type-C Standard www.vesa.org .\n[IEC 60950-1]IEC 60950-1:2005 Information technology equipment – Safety – Part 1: General\nrequirements: Amendment 1:2009, Amendment 2:2013. www.iec.ch .\n[IEC 60958-1] IEC 60958-1:2021 Digital Audio Interface Part:1 General. www.iec.ch .\n[IEC 62368-1]IEC 62368-1:2018 Audio/Video, information, and communication technology\nequipment – Part 1: Safety requirements. www.iec.ch .\n[IEC 62368-3]IEC 62368-3:2017 Audio/video, information, and communication technology\nequipment - Part 3: Safety aspects for DC power transfer through communication cables\nand ports www.iec.ch .\n[IEC 63002]IEC 63002:2021 Interoperability specifications and communication method for external\npower supplies used with computing and consumer electronics devices www.iec.ch .\n[ISO 3166]ISO 3166 international Standard for country codes and codes for their subdivisions.\nhttp://www.iso.org/iso/home/standards/country_codes.htm .\n[TBT3] see [USB4] Chapter 13 for ThunderboltTM 3 device operation.\n[UCSI]USB Type-C Connector System Software Interface (UCSI) Specification https://\nwww.usb.org/documents .\n[USB 2.0] Universal Serial Bus 2.0 Specification, https://www.usb.org/documents .\n[USB 3.2] Universal Serial Bus 3.2 Specification https://www.usb.org/documents .\n[USB Type-C 2.4]Universal Serial Bus Type-C Cable and Connector Specification, https://www.usb.org/\ndocuments .\n[USB4] Universal Serial Bus 4 Specification (USB4®), https://www.usb.org/documents .\n[USBBC 1.2]Universal Serial Bus Battery Charging Specification plus Errata (referred to in this\ndocument as the Battery Charging specification). https://www.usb.org/documents .\n[USBPD 2.0] Universal Serial Bus Power Delivery Specification, https://www.usb.org/documents .\n[USBPDCompliance] USB Power Delivery Compliance Test Specification, https://www.usb.org/documents .\n[USBPDFirmwareUpdate 1.0]Universal Serial Bus Power Delivery Firmware Update Specification, https://\nwww.usb.org/documents .\n[USBTypeCAuthentication 1.0]Universal Serial Bus Type-C Authentication Specification, https://www.usb.org/\ndocuments .\n[USBTypeCBridge 1.1] Universal Serial Bus Type-C Bridge Specification, https://www.usb.org/documents .\nPage 40 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-101.6 Terms and Abbreviations\nThis section defines terms used throughout this document. For additional terms that pertain to the Universal Serial\nBus, see Chapter 2, “Terms and Abbreviations,” in [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] and [USBBC 1.2] .\nTable 1.4 Terms and Abbreviations\nTerm Description\n(A)PDO Refers to both the PDO and APDO collectively.\nAC Supply\nAC SuppliedRefers to the main AC power source typically provided to the wall AKA “mains”.\nActive Cable A cable with a USB Type-C plug on each end that incorporates data bus signal conditioning\ncircuits. The cable supports the Structured VDM Discover Identity Command to expose its\ncharacteristics in addition to other Structured VDM Command s (Electronically Marked Cable\nsee [USB Type-C 2.4]).\nActive Cable VDO VDO defining the Capabilities of an Active Cable .\nActive Mode A Mode which has been through the Mode Entry process but not the Mode Exit process.\nAdjustable Voltage Supply A power supply whose output voltage can be adjusted to an operating voltage within its\nAdvertised range. These Capabilities are exposed by the Adjustable Voltage Supply (AVS) APDO\n(see Section 6.4.1.2.4, \"Augmented Power Data Object (APDO)\" ).\nNote: Unlike the SPR PPS , the SPR AVS and EPR AVS do not support current limit.\nAdvertise An offer made by a Source in the Source_Capabilities /EPR_Source_Capabilities Message (e.g.,\nan APDO or PDO ).\nAlternate Mode Operation defined by a Vendor or Standard’s organization, which is associated with a SVID . The\ndefinition of Alternate Mode s is outside the scope of USB-IF specifications. Entry to and exit from\nthe Alternate Mode uses the Mode Entry and Mode Exit processes. As defined in [USB Type-C 2.4] .\nAlternate Mode Adapter A PDUSB Device which supports Alternate Mode s as defined in [USB Type-C 2.4].\nNote: Since an AMA is a PDUSB Device , it has a single UFP that is only addressable by SOP\nPacket s.\nAlternate Mode Controller A DFP that supports connection to AMA s as defined in [USB Type-C 2.4]. A DFP that is an AMC\ncan also be a PDUSB Host .\nAMA See Alternate Mode Adapter.\nAMC See Alternate Mode Controller .\nAMS See Atomic Message Sequence .\nAPDO See Augmented Power Data Object.\nAssured Capacity Charger As defined in [USB Type-C 2.4] . This maps to a Charger with one or more Guaranteed Capability\nPorts.\nAssured Capacity Group As defined in [USB Type-C 2.4]. This maps to a group of Guaranteed Capability Port s.\nAtomic Message Sequence A fixed sequence of Message s as defined in Section 8.3.2, \"Atomic Message Sequence Diagrams\"\ntypically starting and ending in one of the following states: PE_SRC_Ready , PE_SNK_Ready or\nPE_CBL_Ready . An AMS is Non-interruptible .\nAttach Mechanical joining of the Port Pair by a cable.\nAttached USB Power Delivery Ports which are mechanically joined with USB cable.\nAttachment See Attach .\nAugmented Power Data\nObjectData Object used to expose a Source Port 's or Sink Port 's power Capabilities as part of a\nSource_Capabilities /EPR_Source_Capabilities or Sink_Capabilities /EPR_Sink_Capabilities\nMessage respectively. An SPR PPS Data Object , SPR AVS Data Object and EPR AVS Data Object are\ndefined.\nAVS See Adjustable Voltage Supply .\nAVS Mode A power supply, currently operating as an AVS, is said to be operating in AVS Mode .\nBattery A power storage device residing behind a Port that can either be a Source or Sink of power.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 41Battery Slot A physical location where a Hot Swappable Battery can be installed. A Battery Slot might or\nmight not have a Hot Swappable Battery present in a Battery Slot at any given time.\nBattery Supply A power supply that directly applies the output of a Battery to VBUS. This is exposed by the\nBattery Supply PDO (see Section 6.4.1.2.3, \"Battery Supply Power Data Object\" ).\nBDO See BIST Data Object .\nBFSK See Binary Frequency Shift Keying .\nBi-phase Mark Coding Modification of Manchester coding where each zero has one transition and a one has two\ntransitions (see [IEC 60958-1] ).\nBinary Frequency Shift\nKeyingA Signaling Scheme now Deprecated in this specification. BFSK used a pair of discrete\nfrequencies to transmit binary (0s and 1s) information over VBUS. See [USBPD 2.0] for further\ndetails.\nBIST Built-In Self-Test - Power Delivery testing mechanism for the PHY Layer .\nBIST Data Object Data Object used by BIST Message s.\nBIST Mode A BIST receiver or transmitter test mode enabled by a BIST Message .\nBIST Carrier Mode A BIST Mode in which the PHY Layer sends out a BMC encoded continuous string of\nalternating \"1\"s and \"0\"s.\nBIST Test Data Mode A BIST Mode in which the PHY Layer sends out a GoodCRC Message and then enters a test mode\nwhere it sends no further Message s, except GoodCRC Message s, in response to received\nMessage s.\nBIST Shared Capacity Test\nModeA BIST Mode applicable only to a Shared Capacity Group of Ports where the maximum Source\nCapabilities are always offered on every Port, regardless of the availability of shared power i.e.,\nall shared power management is disabled.\nBMC See Bi-phase Mark Coding .\nCable Capabilities Capabilities offered by a Cable Plug .\nCable Discovered USB Power Delivery Ports that have exchanged a Message and a GoodCRC Message response\nwith a Cable Plug or a VPD using the USB Power Delivery protocol so that both the Port and the\nCable Plug know that each is PD Capable and which Revision they each support.\nCable Discovery See Cable Discovered .\nCable Plug Term used to describe a PD Capable element in a Multi-Drop system addressed by SOP’ Packet s/\nSOP’’ Packet s. Logically the Cable Plug is associated with a USB Type-C plug at one end of the\ncable. In a practical implementation, the electronics might reside anywhere in the cable.\nCable Reset This is initiated by Cable Reset Signaling from the DFP . It restores the Cable Plug s to their\ndefault, power up condition and resets the PD communications engine in the cable to its default\nstate. It does not reset the Port Partner s but does restore VCONN to its Attachment state.\nCable VDO VDO returned by the Cable Plug containing Cable Capabilities .\nCapabilities Features supported by a product. These can include, for example, power levels supplied/\nneeded, cable type, Battery support or [USB4] support.\nCapabilities Mismatch Indication from the Sink that the Source ’s Advertise d Capabilities don’t match the Sink ’s needs.\nCC See Configuration Channel .\nCert Stat VDO The Cert Stat VDO contains the XID assigned by USB-IF to the product before certification in\nbinary format.\nCharge Through A mechanism for a VCONN Powered USB Device (VPD ) to pass power and CC communication from\none Port to the other without any interference or re-regulation.\nCharge Through Port The USB Type-C receptacle on a USB Device that is designed to allow a Source to be connected\nthrough the USB Device to charge a system to which it is Attached . Most common use is to allow\na single Port USB Host to support a USB Device while being charged.\nCharger Provider whose primary purpose is to supply power to a Consumer or Consumer s in order to\ncharge their Battery .\nChunk A MaxExtendedMsgChunkLen (26 byte) or less portion of a Data Block . Data Block s can be sent\neither as a single Message or as a series of Chunk s.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 42 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Chunked See Chunking .\nChunked Extended Message Extended Message which has been broken up into Chunk s.\nChunking The process of breaking up a Data Block larger than MaxExtendedMsgLegacyLen (26-bytes)\ninto two or more Chunk s.\nChunking Layer Part of the Protocol Layer responsible for Chunking .\nCL See Current Limit .\nCold Socket A Port that does not apply vSafe5V on V BUS until a Sink is Attached .\nCollision Avoidance Mechanisms to prevent simultaneous communication by the Source , Sink and Cable Plug on CC .\nCommand Request and response pair defined as part of a Structured Vendor Defined Message (see Section\n6.4.4.2, \"Structured VDM\" ).\nConfiguration Channel Single wire used by the BMC PHY Layer Signaling Scheme (see [USB Type-C 2.4]).\nConnect See Connected .\nConnected USB Power Delivery ports that have exchanged a Message and a GoodCRC Message response\nusing the USB Power Delivery protocol so that both Port Partner s know that each is PD Capable .\nConstant Voltage A constant voltage feature of an SPR PPS Source . The SPR PPS Source output voltage remains\nconstant as the load changes up to its Current Limit .\nConsumer The capability of a PD Port (typically a Device 's UFP ) to sink power from the power conductor\n(e.g., VBUS). This corresponds to a USB Type-C Port with Rd asserted on its CC wire.\nConsumer/Provider A Consumer with the additional capability to function as a Provider . This corresponds to a Dual-\nRole Power Port with Rd asserted on its CC wire.\nContinuous BIST Mode The BIST Mode where the Port or Cable Plug being tested sends a continuous stream of test data.\nContract An agreement on both power level and direction is reached between a Port Pair . A Contract\ncould be explicitly Negotiated between the Port Pair or could be an implicit power level defined\nby the current State . While operating in Power Delivery mode there will always be either an\nExplicit Contract or Implicit Contract in place. The Contract can only be altered in the case of a\nNegotiation /Re-negotiation , Power Role Swap, Fast Role Swap , Hard Reset , Error Recovery or\nfailure of the Source .\nControl Message A Control Message is defined as a Message with the Number of Data Objects field in the Message\nHeader is set to zero. The Control Message consists only of a Message Header and a CRC .\nCRC CRC stands for Cyclic Redundancy Check. It is an error-detecting code used to determine if a\nblock of data has been corrupted.\nCT-VPD See VCONN Powered USB Charge Through Device .\nCurrent Limit A current limiting feature of an SPR PPS Source . When a Sink operating in SPR PPS mode\nattempts to draw more current from the Source than the requested Current Limit value, the\nSource reduces its output voltage so the current it supplies remains at or below the requested\nvalue.\nNote: Current Limit is not supported by SPR AVS and EPR AVS Source s.\nCV See Constant Voltage.\nData Block An Extended Message Payload data unit. The size of each type of Data Block is specified as a series\nof bytes up to MaxExtendedMsgLen bytes in length. This is distinct from a Data Object used by\na Data Message which is always a 32-bit object.\nData Message A Data Message consists of a Message Header followed by one or more Data Object s. Data\nMessage s are easily identifiable because the Number of Data Objects field in the Message\nHeader is always a non-zero value.\nData Object A Data Message Payload data unit. This 32-bit object contains information specific to different\ntypes of Data Message . For example Power, Request, BIST , and Vendor Data Object s are defined.\nData Reset Process which resets USB Communication .\nData Role A Port Partner will be in one of two Data Role s; either DFP (USB Host ) or UFP (USB Device ).\nData Role Swap Process of exchanging the Data Role s between Port Partner s.\nDead Battery A device has a Dead Battery when the Battery in a device is unable to power its functions.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 43Default Contract An agreement on current at 5V is reached between a Port Pair based on USB Type-C current\n([USB Type-C 2.4]).\nDetach Mechanical unjoining of the Port Pair by removal of the cable.\nDetached USB Power Delivery Ports which are no longer mechanically joined with USB cable.\nDetaches See Detach .\nDevice When lower cased (device), it refers to any USB product, either USB Device or USB Host . When\nin upper case refers to a USB Device (Peripheral or Hub ).\nDevice Policy Policy applied across multiple Ports in a Source or Sink .\nDevice Policy Manager Module running in a Source or Sink that applies Device Policy to each Port in the device, as Local\nPolicy , via the Policy Engine .\nDFP See Downstream Facing Port .\nDFP VDO VDO returned by the DFP containing Capabilities .\nDifferential Non-Linearity The difference between an ideal LSB step, and the real observable LSB step when the Power\nSource is operating in either PPS or AVS mode. A DNL of 0 indicates that the step is ideal. If DNL\nis positive the step is larger than the ideal LSB, and if it is negative then the step is smaller than\nideal.\nDiscovery Process Command sequence using Structured Vendor Defined Message s resulting in identification of the\nPort Partner and Cable Plug , and their supported SVID s and Alternate Mode s.\nDNL See Differential Non-Linearity .\nDownstream Facing Port Indicates the Port's position in the USB topology which typically corresponds to a USB Host root\nPort or Hub downstream Port as defined in [USB Type-C 2.4] . At connection, the Port defaults to\noperation as the Source and as a USB Host (when USB Communication is supported).\nDPM See Device Policy Manager .\nDRD See Dual-Role Data .\nDRP See Dual-Role Power .\nDual-Role Data Capability of operating as either a DFP or UFP .\nDual-Role Data Port A Port capable of operating as DRD .\nDual-Role Power Capability of operating as either a Source or Sink .\nDual-Role Power Device A product containing one or more Dual-Role Power Port s that can operate as either a Source or\na Sink .\nDual-Role Power Port A Port capable of operating as a DRP .\nEM See Extended Message .\nEnd of Packet K-code marker used to delineate the end of a Packet .\nEOP See End of Packet .\nEPR See Extended Power Range .\nEPR AVS A power supply operating in EPR Mode whose output voltage can be adjusted to an operating\nvoltage within its Advertise d range. Unlike SPR PPS it does not support current limit. The AVS\nCapabilities are exposed by the Adjustable Voltage Supply APDO (see Section 6.4.1.2.4,\n\"Augmented Power Data Object (APDO)\" ).\nEPR AVS Mode A EPR Source , currently operating in an EPR AVS Contract , is said to be operating in EPR AVS\nMode .\nEPR Cable A cable which is rated to operate in both SPR Mode and EPR Mode .\nEPR Capabilities The EPR Capabilities Message s (EPR_Source_Capabilities and EPR_Sink_Capabilities ) are\nExtended Message s with the first seven positions filled with the same SPR (A)PDO s returned by\nthe SPR Capabilities Message s (Source_Capabilities and Sink_Capabilities ) followed by the EPR\n(A)PDO s starting in the eighth position.\nEPR Capable A product which has the ability to operate in EPR Mode .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 44 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10EPR Mode A Power Delivery mode of operation where maximum allowable voltage is 48V. The Sink\ncomplies to the requirements of [IEC 62368-1] for operation with a PS3 Source . The Source\ncomplies to the requirements of [IEC 62368-1] for operation with a PS3 Sink . The cable complies\nwith [IEC 62368-1] . Entry into the EPR Mode requires that an EPR Source is Attached to an EPR\nSink with an EPR Cable . The EPR Source will only enter the EPR Mode when requested to do so\nby the Sink and it has determined it is Attached to an EPR Sink with an EPR Capable cable.\nOnly the EPR_Source_Capabilities and the EPR_Request Message s are allowed to Negotiate EPR\nExplicit Contract s. The SPR Mode Message s (Source_Capabilities and Request ) are not allowed\nto be used while in EPR Mode .\nEPR (A)PDO Fixed Supply PDO that offers either 28V, 36V or 48V.\nAdjustable Voltage Supply (AVS) APDO whose Maximum voltage is the highest Fixed Supply PDO\nvoltage in the EPR_Source_Capabilities Message and no more than 240W.\nEPR Sink A Sink that supports both SPR Mode and EPR Mode .\nEPR Sink Port A Port exposed on an EPR Sink .\nEPR Source A Source that supports both SPR Mode and EPR Mode .\nEPR Source Port A Port exposed on an EPR Source .\nError Recovery Port enters the ErrorRecovery State as defined in [USB Type-C 2.4].\nExplicit Contract An agreement reached between a Port Pair as a result of the Power Delivery Negotiation\nprocess. An Explicit Contract is established (or continued) when a Source sends an Accept\nMessage in response to a Request Message sent by a Sink followed by a PS_RDY Message sent by\nthe Source to indicate that the power supply is ready. This corresponds to the PE_SRC_Ready\nState for a Source Policy Engine and the PE_SNK_Ready State for a Source Policy Engine . The\nExplicit Contract can be altered through the Re-negotiation process.\nExtended Capabilities An Extended Message containing Capabilities information.\nExtended Control Message An Extended Message containing control information only.\nExtended Message A Message containing Data Block s. The Extended Message is defined by the Extended field in the\nMessage Header being set to one and contains an Extended Message Header immediately\nfollowing the Message Header .\nExtended Message Header Every Extended Message contains a 16-bit Extended Message Header immediately following the\nMessage Header containing information about the Data Block and any Chunking being applied.\nExtended Power Range Extends the power range from a maximum of 100W ( SPR) to a maximum of 240W ( EPR ). When\noperating in the EPR Mode , only EPR specific Message s (the EPR_Source_Capabilities Message\nand the EPR_Request Message ) are used to Negotiate Explicit Contract s.\nExternal Supply Power supply external to the device. This could be powered from the wall or from any other\npower source.\nFast Role Swap Process of exchanging the Source and Sink Power Role s between Port Partner s rapidly due to the\ndisconnection of an external power supply.\nFast Role Swap Request An indication from an Initial Source to the Initial Sink that a Fast Role Swap is needed. The Fast\nRole Swap Request is indicated by driving the CC line to ground for a short period; it is not a\nMessage or Signaling .\nFirst Explicit Contract The Explicit Contract that immediately follows an Attach , power on Hard Reset , Power Role Swap\nor Fast Role Swap event.\nFixed Battery\nFixed BatteriesA Battery that is not easily removed or replaced by an end user e.g., requires a special tool to\naccess or is soldered in.\nFixed Supply A well-regulated fixed voltage power supply. This is exposed by the Fixed Supply PDO (see\nSection 6.4.1.2.1, \"Fixed Supply Power Data Object\" )\nFrame Generic term referring to an atomic communication transmitted by PD such as a Packet , Test\nFrame or Signaling .\nFRS See Fast Role Swap .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 45Guaranteed Capability Port A Guaranteed Capability Port is always capable of delivering its Port Maximum PDP and\nindicates this by setting its Port Present PDP to be the same as its Port Maximum PDP except\nwhen limited by the cable’s Capabilities . This is a Static capability.\nHard Reset This is initiated by Hard Reset Signaling from either Port Partner . It restores VBUS to USB Default\nOperation and resets the PD communications engine to its default State in both Port Partner s as\nwell as in any Attached Cable Plug s. It restores both Port Partner s to their default Data Role s and\nreturns the VCONN Source to the Source Port. A DRP Source Port operating as a Source will\ncontinue to operate as a Source .\nHost See USB Host .\nHot Swappable Battery A Battery that is easily accessible for a user to remove or change for another Battery .\nHub A USB Device that provides additional connections to the USB.\nID Header VDO The VDO in a Discover Identity Command immediately following the VDM Header . The ID\nHeader VDO contains information corresponding to the Power Delivery Product.\nIdle Condition on CC where there are no signal transitions within a given time window. See Section\n5.8.6.1, \"Definition of Idle\" .\nImplicit Contract An agreement on power levels between a Port Pair which occurs, not because of the Power\nDelivery Negotiation process, but because of a Power Role Swap or Fast Role Swap . Implicit\nContract s are transitory since the Port Pair is required to immediately Negotiate an Explicit\nContract after the Power Role Swap. An Implicit Contract Shall be limited to USB Type-C current\n(see [USB Type-C 2.4]).\nInitial Sink Sink at the start of a Power Role Swap or Fast Role Swap which transitions to being the New\nSource .\nInitial Source Source at the start of a Power Role Swap or Fast Role Swap which transitions to being the New\nSink .\nInitiator The initial sender of a Command request in the form of a query.\nInvariant PDOs A Source Port that offers Invariant PDOs will always Advertise the same PDO s except when\nlimited by the cable.\nIoC The Negotiated current value as defined in [IEC 63002] .\nIR Drop The voltage drop across the cable and connectors between the Source and the Sink as defined in\n[USB Type-C 2.4]. It is a function of the resistance of the ground and power wire in the cable plus\nthe contact resistance in the connectors times the current flowing over the path.\nK-code Special symbols provided by the 4b5b coding scheme. K-code s are used to signal Hard Reset and\nCable Reset and delineate Packet boundaries.\nLocal Policy Every PD Capable device has its own Policy , called the Local Policy that is executed by its Policy\nEngine to control its power delivery behavior. The Local Policy at any given time might be the\ndefault policy, hard coded or modified by changes in operating parameters or one provided by\nthe system USB Host or some combination of these. The Local Policy Optionally can be changed\nby a System Policy Manager .\nLPS Limited Power Supply as defined in [IEC 62368-1] .\nLSB An abbreviation for Least Significant Bit.\nManaged Capability Port A Managed Capability Port can have its Port Present PDP set to a different value than its Port\nMaximum PDP . Its Port Present PDP value can be dynamic and change during normal\noperation.\nMessage The Packet Payload consisting of a Message Header for Control Message s and a Message Header\nand data for Data Message s and Extended Message s as defined in Section 6.2, \"Messages\" .\nMessage Header Every Message starts with a 16-bit Message Header containing basic information about the\nMessage and the PD Port’s Capabilities .\nMessaging Communication in the form of Message s as defined in Section 6, \"Protocol Layer\" .\nModal Operation Operation where there are one or more Active Mode s. Modal Operation ends when there are no\nlonger any Active Mode s.\nMode Mode is a general term used to describe a particular type of operation of a given device.\nExamples of modes are: Alternate Mode , EPR Mode , SPR Mode .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 46 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Mode Entry Process to start operation in a particular Mode .\nMode Exit Process to end operation in a particular Mode .\nMulti-Drop PD is a Multi-Drop system sharing the Power Delivery communication channel between the Port\nPartner s and the cable.\nNegotiate See Negotiation .\nNegotiated See Negotiation .\nNegotiation This is the PD process whereby:\n1) The Source Advertise s its Capabilities .\n2) The Sink requests one of the Advertise d Capabilities .\n3) The Source acknowledges the request, alters its output to satisfy the request and informs\nthe Sink .\nThe result of the Negotiation is a Contract for power delivery/consumption between the Port\nPair .\nNew Sink Sink at the end of a Power Role Swap or Fast Role Swap which has transition from being the Initial\nSource .\nNew Source Source at the end of a Power Role Swap or Fast Role Swap which has transition from being the\nInitial Sink .\nNon-interruptible There cannot be any unexpected Message s during an AMS ; it is therefore Non-interruptible . An\nAMS starts when the first Message in the AMS has been sent (i.e., a GoodCRC Message has been\nreceived acknowledging the Message ). See Section 8.3.2.1.3, \"Atomic Message Sequences\" .\nOCP Over-Current Protection.\nOTP Over-Temperature Protection.\nOVP Over-Voltage Protection.\nPacket One entire unit of PD communication including a Preamble , SOP* , Payload , CRC and EOP as\ndefined in Section 5.6, \"Packet Format\" .\nPassive Cable Cable with a USB plug on each end at least one of which is a Cable Plug supporting SOP’ that does\nnot incorporate data bus signal conditioning circuits. Supports the Structured VDM Discover\nIdentity to determine its characteristics (Electronically Marked Cable see [USB Type-C 2.4]).\nNote: This specification does not discuss Passive Cable s that are not Electronically Marked.\nPassive Cable VDO VDO defining the Capabilities of a Passive Cable .\nPayload Data content of a Packet , provided to/from the Protocol Layer .\nPD USB Power Delivery\nPD Capable A Port that supports USB Power Delivery.\nPD Connection See Connected .\nPD Power The output power, in Watts, of a Source , as specified by the manufacturer and expressed in Fixed\nSupply PDO s as defined in Section 10, \"Power Rules\" .\nPD SID See USB-IF PD SID .\nPDO See Power Data Object .\nPDP See PD Power .\nPDP Rating The PDP Rating is the same as the Manufacturer declared PDP for a Source Port except where\nthere is a fractional value, in which case the PDP Rating corresponds to the integer part of the\nManufacturer declared PDP Rating (see Section 6.4.11.2, \"Port Maximum PDP Field\" ).\nPDUSB USB Device Port or USB Host Port that is both PD Capable and capable of USB Communication . See\nalso PDUSB Host , PDUSB Device and PDUSB Hub .\nPDUSB Device A USB Device with a PD Capable UFP . A PDUSB Device is only addressed by SOP Packet s.\nPDUSB Host A USB Host which is PD Capable on at least one of its DFP s. A PDUSB Host is only addressed by\nSOP Packet s.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 47PDUSB Hub A port expander USB Device with a UFP and one or more DFP s which is PD Capable on at least\none of its Ports. A PDUSB Hub is only addressed by SOP Packet s.\nA self-powered PDUSB Hub is treated as a USB Type-C Multi-Port Charger .\nPDUSB Peripheral A USB Device with a PD Capable UFP which is not a PDUSB Hub . A PDUSB Peripheral is only\naddressed by SOP Packet s.\nPE See Policy Engine .\nPeripheral A physical entity that is Attached to a USB cable and is currently operating as a USB Device .\nPHY Layer The Physical Layer responsible for sending and receiving Message s across the USB Type-C CC\nwire between a Port Pair .\nPolicy Policy defines the behavior of PD Capable parts of the system and defines the Capabilities it\nAdvertise s, requests made to (re) Negotiate power and the responses made to requests received.\nPolicy Engine The Policy Engine interprets the Device Policy Manager ’s input to implement Policy for a given\nPort and directs the Protocol Layer to send appropriate Message s.\nPort An interface typically exposed through a receptacle, or via a plug on the end of a hard-wired\ncaptive cable. USB Power Delivery defines the interaction between a Port Pair .\nPort Pair Two Attached PD Capable Ports.\nPort Partner A Contract is Negotiated between a Port Pair connected by a USB cable. These ports are known\nas Port Partner s.\nPower Conductor The wire that delivers power from the Source to Sink . For example, USB’s VBUS.\nPower Consumer See Consumer .\nPower Data Object Data Object used to expose a Source Port ’s or Sink Port ’s power Capabilities as part of a\nSource_Capabilities / EPR_Source_Capabilities or Sink_Capabilities / EPR_Sink_Capabilities\nMessage respectively. Fixed Supply , Variable Supply and Battery Supply Power Data Object s are\ndefined; SPR Mode uses all four while EPR Mode uses only Fixed Supply and AVS PDO s.\nPower Delivery Mode Operation after a Contract has initially been established between a Port Pair . This Mode persists\nduring normal Power Delivery operation, including after a Power Delivery Mode . Power Delivery\nMode can only be exited by Detach ing the Ports, applying a Hard Reset or by the Source removing\npower (except when the Initial Source removes power from VBUS during the Power Role Swap\nprocedure).\nPower Provider See Provider .\nPower Role A Port Partner will be in one of two Power Role s; either Source or Sink .\nPower Role Swap Process of exchanging the Source and Sink Power Role s between Port Partner s.\nPower Rules Define voltages and current ranges that are offered by compliant USB Power Delivery Source s\nand used by a USB Power Delivery Sink for a given value of PDP Rating . See Section 10, \"Power\nRules\" .\nPPS See Programmable Power Supply .\nPPS Mode An SPR Source , currently operating as an PPS, is said to be operating in PPS Mode .\nPreamble Start of a transmission which is used to enable the receiver to lock onto the carrier. The\nPreamble consists of a 64-bit sequence of alternating 0s and 1s starting with a \"0\" and ending\nwith a \"1\" which is not 4b5b encoded.\nProduct Type Product categorization returned as part of the Discover Identity Command .\nProduct Type VDO VDO identifying a certain Product Type in the ID Header VDO of a Discover Identity Command .\nProduct VDO The Product VDO contains identity information relating to the product.\nProgrammable Power\nSupplyA power supply, operating in SPR Mode, whose output voltage can be programmatically adjusted\nin small increments over its Advertise d range and has a programmable output current fold back\n(note that the SPR AVS and EPR AVS does not).The Capabilities are exposed by the SPR\nProgrammable Power Supply APDO (see Section 6.4.1.2.4, \"Augmented Power Data Object\n(APDO)\" ).\nProtocol Error An unexpected Message during an Atomic Message Sequence . A Protocol Error during an AMS will\nresult in either a Soft Reset or a Hard Reset .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 48 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Protocol Layer The entity that forms the Message s used to communicate information between Port Partner s.\nProvider A PD Port (typically a USB Host , Hub , or Charger DFP ) that can source power over the power\nconductor (e.g., VBUS). This corresponds to a USB Type-C Port with Rp asserted on its CC wire.\nProvider/Consumer A Provider with the additional capability to act as a Consumer . This corresponds to a Dual-Role\nPower Port with Rp asserted on its CC wire.\nPS1\nPS2\nPS3Classification of electrical power as defined in [IEC 62368-1] .\nPSD Sink which draws power but has no other USB or Alternate Mode communication function e.g., a\npower bank.\nRa Prior to application of VCONN , a powered cable applies a pull-down resistor Ra on its VCONN pin.\nRd Pull-down resistor on the USB Type-C CC wire used to indicate that the Port is a Sink (see [USB\nType-C 2.4] ).\nRDO See Request Data Object .\nRe-attach Attach of the Port Pair by a cable after a previous Detach .\nRe-negotiate See Re-negotiation .\nRe-negotiated See Re-negotiation .\nRe-negotiation A process wherein one of the Port Partner s wants to alter the Negotiated Contract .\nRequest Message used by a Sink Port to Negotiate a Contract ; refers to either a Request /EPR_Request\nMessage .\nRequest Data Object Data Object used by a Sink Port to Negotiate a Contract as a part of a Request /EPR_Request\nMessage .\nResponder The receiver of a Command request sent by an Initiator that replies with a Command response.\nRevision Major release of the USB Power Delivery specification. Each Revision will have various Version s\nassociated with it.\nRevision 1.0 Deprecated major Revision of the USB Power Delivery Specification.\nRevision 2.0 Superseded major Revision of the USB Power Delivery Specification as defined in [USBPD 2.0] ,\nwith which this specification is compatible.\nRevision 3.x Current major Revisions of the USB Power Delivery Specification.\nRp Pull-up resistor on the USB Type-C CC wire used to indicate that the Port is a Source (see [USB\nType-C 2.4] ).\nSafe Operation Source s must have the ability to tolerate vSafe5V applied by both Port Partner s.\nShared Capacity Charger As defined in [USB Type-C 2.4] . This maps to a Charger with multiple Managed Capability Port s.\nShared Capacity Group As defined in [USB Type-C 2.4]. This maps to a group with Managed Capability Port s.\nSID See Standard ID .\nSignaling A Preamble followed by an ordered set of four K-code s used to indicate a particular line symbol\ne.g., Hard Reset as defined in Section 5.4, \"Ordered Sets\" .\nSignaling Scheme Physical mechanism used to transmit bits. Only the BMC Signaling Scheme is defined in this\nspecification.\nNote: The BFSK Signaling Scheme supported in Revision 1.0 of this specification has been\nDeprecated .\nSingle-Role Port A Port that is only capable of operating either as a Source or Sink , but not both. E.g., the port is\nnot a DRP .\nSink The Port consuming power from VBUS; most commonly a USB Device .\nSink Capabilities Capabilities wanted by a Sink .\nSink Directed Charge A charging scheme whereby the Sink connects the Source to its Battery through safety and other\ncircuitry. When the SPR PPS Current Limit feature is activated, the Source automatically controls\nits output current by adjusting its output voltage.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 49Sink Port Port operating as a Sink .\nSink Standby During Sink Standby the Sink reduces its current draw to iSnkStdby\nSoft Reset A process that resets the PD communications engine to its default state.\nSOP K-code marker used for communication between Port Partner s. See also Start of Packet .\nSOP Communication Communication using SOP Packet s also implies that an AMS is being followed.\nSOP Packet Any Power Delivery Packet which starts with an SOP .\nSOP’ Communication Communication with a Cable Plug using SOP’ Packet s, also implies that an AMS is being followed.\nSOP’ Packet Any Power Delivery Packet which starts with an SOP’ used to communicate with a Cable Plug .\nSOP’’ Communication Communication with a Cable Plug using SOP’’ Packets, also implies that an AMS is being followed.\nSOP’’ Packet Any Power Delivery Packet which starts with an SOP’’ used to communicate with a Cable Plug\nwhen SOP’ Packet s are being used to communicate with the other Cable Plug .\nSOP’\nSOP’’K-code marker used for communication between a Port and a Cable Plug . See also Start of Packet .\nSOP* Used to generically refer to K-code markers: SOP , SOP’ and SOP’’ . See also Start of Packet .\nSOP* Communication Communication using SOP* Packet s, also implies an AMS is being followed.\nSOP* Packet A term referring to any Power Delivery Packet starting with either SOP , SOP’ , or SOP’’ .\nSource The Power Role a Port is operating in to supply power over VBUS; most commonly a USB Host or\nHub downstream port.\nSource Capabilities Capabilities offered by a Source .\nSource Port Port operating as a Source .\nSpecification Revision See Revision.\nSPM See System Policy Manager .\nSPR See Standard Power Range .\nSPR AVS An SPR Source whose output voltage can be adjusted to an operating voltage within its\nAdvertise d range. Unlike SPR PPS , it does not support current limit. The SPR AVS Capabilities are\nexposed by the SPR AVS APDO (see Section 6.4.1.2.4.2, \"SPR Adjustable Voltage Supply APDO\" ).\nSPR AVS Mode A SPR Source , currently operating in an SPR AVS Contract , is said to be operating in SPR AVS\nMode .\nSPR Capabilities An SPR Capabilities Message (Source_Capabilities Message or Sink_Capabilities Message ) has at\nleast one Power Data Object for vSafe5V followed by up to 6 additional Power Data Object s.\nSPR Contract Explicit Contract Negotiate d, in SPR Mode , based on SPR (A)PDO s.\nSPR Mode The classic mode of PD operation where Explicit Contract s are Negotiated using SPR (A)PDO s.\nSPR (A)PDO Fixed Supply PDO that offers up to 20V and no more than 100W.\nVariable Supply PDO whose Maximum voltage offers up to 21V and no more than 100W.\nBattery Supply PDO whose Maximum voltage offers up to 21V and no more than 100W.\nAdjustable Voltage Supply (AVS) APDO whose Maximum voltage is up to 20V and no more than\n100W.\nProgrammable Power Supply (PPS) APDO whose Maximum voltage is up to 21V and no more\nthan 100W.\nSPR PPS A power supply whose output voltage and output current can be programmatically adjusted in\nsmall increments over its Advertise d range. It supports current limit unlike SPR AVS and EPR\nAVS. The Capabilities are exposed by the Programmable Power Supply APDO s (see Section\n6.4.1.2.4, \"Augmented Power Data Object (APDO)\" ).\nSPR PPS Mode A power supply, currently operating in an SPR PPS Contract , is said to be operating in SPR PPS\nMode .\nSPR Sink A Sink which only supports SPR Mode and does not support EPR Mode .\nSPR Sink Port A Port exposed on an SPR Sink .\nSPR Source A Source which only supports SPR Mode and does not support EPR Mode .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 50 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10SPR Source Port A Port exposed on an SPR Source .\nStandard ID 16-bit unsigned value assigned by the USB-IF to a given industry standards organization’s\nspecification.\nStandard or Vendor ID Generic term referring to either a VID or a SID. SVID is used in place of the phrase “Standard or\nVendor ID.”\nStandard Power Range Only the Source_Capabilities and the Request Message s are allowed to Negotiate SPR Explicit\nContract s. The EPR Message s (the EPR_Source_Capabilities Message and the EPR_Request\nMessage ) are not allowed to be used while in SPR Mode .\nStart of Packet K-code marker used to delineate the start of a Packet .\nState PD state machine state as defined in Section 6.12, \"State behavior\" and Section 8.3.3, \"State\nDiagrams\" state machines.\nStructured VDM See Structured Vendor Defined Message .\nStructured VDM Header The VDM Header for a Structured Vendor Defined Message .\nStructured Vendor Defined\nMessageA Vendor Defined Message where the contents and usage of bits 14...0 of the VDM Header are\ndefined by this specification.\nSVDM See Structured Vendor Defined Message .\nSVID See Standard or Vendor ID .\nSwap Standby During Swap Standby the Source does not drive VBUS and the Sink's current draw does not\nexceed iSnkSwapStdby .\nSystem Policy Overall system Policy generated by the system, broken up into the policies required by each Port\nPair to affect the System Policy . It is programmatically fed to the individual devices for\nconsumption by their Policy Engine s.\nSystem Policy Manager Module running on the USB Host . It applies the System Policy through communication with PD\nCapable Consumer s and Provider s that are also connected to the USB Host via USB.\nTest Frame Frame consisting of a Preamble , SOP* , followed by test data (See Section 5.9, \"Built in Self-Test\n(BIST)\" ).\nTest Pattern Continuous stream of test data in a given sequence (See Section 5.9, \"Built in Self-Test (BIST)\" ).\nTester The Tester is assumed to be a piece of test equipment that manages the BIST testing process of\na PD UUT .\nUFP See Upstream Facing Port .\nUFP VDO VDO returned by the UFP containing Capabilities .\nUI See Unit Interval .\nUnchunked See Unchunked Extended Message .\nUnchunked Extended\nMessageExtended Message that has been transmitted whole without using Chunking .\nUnexpected Message Message that a Port supports but has been received in an incorrect State .\nUnit Interval The time to transmit a single data bit on the wire.\nUnit Under Test The PD device that is being tested by the Tester and responds to the initiation of a particular BIST\ntest sequence.\nUnrecognized Message Message that a Port does not understand e.g., a Message using a Reserved Message type, a\nMessage defined by a higher specification Revision than the Revision this Port supports, or an\nUnstructured Vendor Defined Message for which the VID is not recognized.\nUnstructured VDM See Unstructured Vendor Defined Message .\nUnstructured VDM Header The VDM Header for an Unstructured Vendor Defined Message .\nUnstructured Vendor\nDefined MessageA Vendor Defined Message where the contents of bits 14...0 of the VDM Header are undefined.\nUnsupported Message Message that a Port recognizes but does not support. This is a Message defined by the\nspecification, but which is not supported by this Port.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 51Upstream Facing Port Indicates the Port’s position in the USB topology typically a Port on a Device as defined in [USB\nType-C 2.4] . At connection, the Port defaults to operation as a USB Device (when USB\nCommunication is supported) and Sink .\nUSB Attached State Synonymous with the [USB 2.0] and [USB 3.2] definition of the Attached state\nUSB Communication Transfer of USB data Packet s as defined in [USB 2.0] and [USB 3.2] .\nUSB Default Operation Operation of a Port at Attach or after a Hard Reset where the DFP Source applies vSafe5V on VBUS\nand the UFP Sink is operating at vSafe5V as defined in [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] or\n[USBBC 1.2] .\nUSB Device Either a Hub or a Peripheral device as defined in [USB 2.0] , [USB 3.2] and [USB4] .\nUSB Host The computer system where the USB Host controller is installed as defined in [USB 2.0] , [USB\n3.2] and [USB4] .\nUSB Hub See Hub .\nUSB Powered State Synonymous with the [USB 2.0] and [USB 3.2] definition of the powered state.\nUSB Safe State State of the USB Type-C connector when there are pins to be re-purposed (see [USB Type-C 2.4] )\nso they are not damaged by and do not cause damage to their Port Partner .\nUSB Type-A Term used to refer to any A plug or receptacle including USB Micro-A plugs and USB Standard-\nA plugs and receptacles. USB Micro-AB receptacles are assumed to be a combination of USB\nType-A and USB Type-B .\nUSB Type-B Terms used to refer to any B-plug or receptacle including USB Micro-B plugs and USB Standard-\nB plugs and receptacles, including the PD and non-PD versions. USB Micro-AB receptacles are\nassumed to be a combination of USB Type-A and USB Type-B .\nUSB Type-C Term used to refer to the USB Type-C connector plug, or receptacle as defined in [USB Type-C\n2.4] .\nUSB Type-C Multi-Port\nChargerA product that exposes multiple USB Type-C Source Ports for the purpose of charging multiple\nconnected USB Device s as defined in [USB Type-C 2.4].\nUSB-C® Port Control Module in a PD Capable device which controls Attach /Detach and either detects or sets the Rp\nvalue.\nUSB-IF PD SID Standard ID allocated to this specification by the USB Implementer’s Forum.\nUSB4® Mode Device is operating in a Mode as defined in [USB4] .\nUUT See Unit Under Test .\nVariable Supply A poorly regulated power supply that is not a Battery . This is exposed by the Variable Supply PDO\n(see Section 6.4.2, \"Request Message\") .\nVBUS The VBUS wire delivers power from a Source to a Sink .\nVCONN Once the connection between USB Host and device is established, the CC pin (CC1 or CC2) in the\nreceptacle that is not connected via the CC wire through the standard cable is re-purposed to\nsource VCONN to power circuits in a Cable Plug , VCONN Powered Accessory or VCONN Powered USB\nDevice (see [USB Type-C 2.4]).\nVCONN Powered Accessory An accessory that is powered from VCONN to operate in an Alternate Mode (see [USB Type-C\n2.4] ).\nVCONN Powered USB Charge\nThrough DeviceA CT-VPD is a VPD with an additional port for connecting a Source (e.g., a Charger ) as defined in\n[USB Type-C 2.4].\nWhen no Charger is connected, a CT-VPD behaves as a VPD .\nWhen a Charger is connected, no PD communication to the CT-VPD itself is possible as CC is\nconnected to the Charger port. Hence all PD communication then is with the Charger and the\ncable with which it is connected.Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nPage 52 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-101.7 Parameter Values\nThe parameters in this specification are expressed in terms of absolute values. For details of how each parameter\nis measured in compliance please see [USBPDCompliance] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.8",
    "title": "Changes from Revision 3.0",
    "full_path": "1.8 Changes from Revision 3.0",
    "page": 52,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "Extended Power Range (EPR) including Adjustable Voltage Supply (AVS) has been added."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.9",
    "title": "Compatibility with Revision 2.0",
    "full_path": "1.9 Compatibility with Revision 2.0",
    "page": 52,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "This Revision of the USB Power Delivery specification is designed to be fully inter-operable with [USBPD 2.0]\nsystems using BMC Signaling over the [USB Type-C 2.4] connector and to be compatible with Revision 2.0\nhardware.\nPlease see Section 2.3, \"USB Power Delivery Capable Devices\" for more details of the mechanisms defined to enable\ncompatibility. VCONN Powered USB Device A captive cable USB Device that can be powered by either VCONN or VBUS as defined in [USB Type-\nC 2.4] .\nA VPD is a captive cable USB Device that can be powered by either VCONN or VBUS and only\nresponds to SOP’ Communication as defined in the Tables in Section 6.12, \"State behavior\") . It\nonly responds to Message s sent with a Specification Revision of at least Revision 3.x . A VPD is not\nallowed to support Alternate Mode s.\nThe term VPD refers to either a VPD or a CT-VPD with no Charger connected.\nVCONN Source The USB Type-C Port responsible for sourcing VCONN .\nVCONN Swap Process of exchanging the VCONN Source between Port Partner s.\nVDEM See Vendor Defined Extended Message .\nVDM See Vendor Defined Message .\nVDM Header The first Data Object following the Message Header in a Vendor Defined Message . The VDM\nHeader contains the SVID relating to the VDM being sent and provides information relating to\nthe Command in the case of a Structured VDM (see Section 6.4.4, \"Vendor Defined Message\") .\nVDO See Vendor Data Object .\nVendor Data Object Data Object used to send Vendor specific information as part of a Message .\nVendor Defined Extended\nMessagePD Extended Message defined for vendor/standards usage. A VDEM does not define any\nstructure and Message s can be created in any manner that the vendor chooses.\nVendor Defined Message PD Data Message defined for vendor/standards usage. These are further partitioned into\nStructured Vendor Defined Message s, where Command s are defined in this specification, and\nUnstructured Vendor Defined Message s which are entirely vendor defined (see Section 6.4.4,\n\"Vendor Defined Message\") .\nVendor ID 16-bit unsigned value assigned by the USB-IF to a given Vendor.\nVersion A minor release of the USB Power Delivery specification associated with a particular Revision.\nVersion numbers are also defined in VDM s.\nVI Same as power (i.e., voltage * current = power)\nVID See Vendor ID .\nVPD See VCONN Powered USB Device .Table 1.4 Terms and Abbreviations (Continued)\nTerm Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 532 Overview\nThis section contains no Normative requirements."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1",
    "title": "Introduction",
    "full_path": "2.1 Introduction",
    "page": 53,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": "USB Power Delivery ( PD) defines the mechanisms for pairs of directly Attached Port s (also referred to as Port\nPartner s or Port Pair s) to Negotiate voltage, current and/or direction of power flow over the USB cable. It uses the\nUSB Type-C® connector's CC wire as the communications channel. The PD mechanisms operate independently of\nand supersede other USB methods defined in [USB 2.0] , [USB 3.2] , [USBBC 1.2] and [USB Type-C 2.4] .\nUSB Power Delivery also defines sideband mechanisms used for configuration management of USB Type-C devices\nand cables. Using Structured Vendor Defined Message s (Structured VDM s), PD facilitates discovery of device and\ncables features and performance. Structured VDM s are also used to enter/exit some Active Mode s, either USB-based\n(e.g., USB4® Mode ) or USB Type-C Alternate Mode s. Alternate Mode s are associated with Standard or Vendor ID s\n(SVID s) and can be either standard (e.g., DisplayPort Alternate Mode ) or proprietary (e.g., Intel Thunderbolt™ 3)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.1",
    "title": "Power Delivery Source Operational Contracts",
    "full_path": "2.1.1 Power Delivery Source Operational Contracts",
    "page": 53,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": "A PD Source will be in one of three Contract s:\n Default Contract which it enters immediately following a Connect where the Source provides 5V and\nAdvertises the amount of current it can deliver using the Rp value as defined in [USB Type-C 2.4] . A\nSource in a Default Contract will remain in this Contract until the Sink is Detached or the Source and Sink\nNegotiate and enter an Explicit Contract .\n Implicit Contract which immediately follows a Power Role Swap or Fast Role Swap and is transitory. The\nPD Source provides 5V and Advertises the amount of current it can deliver using the Rp value as defined\nin [USB Type-C 2.4] . A Source in an Implicit Contract will immediately Negotiate with the Sink and enter\nan Explicit Contract .\n Explicit Contract is the state of the Source after any PD power Negotiation consisting of the Source\nsending a Source_Capabilities Message , the Sink responding with a Request Message , the Source\nacknowledging the request with an Accept Message and finally the Source sends a PS_RDY Message\nwhen the Source is ready to deliver the requested power. This is the normal operational state for PD. A\nSource in an Explicit Contract will remain in an Explicit Contract during and after a Re-negotiation of its\nContract and will exit the Explicit Contract when:\n Disconnected from the Sink where it will restart in a Default Contract when reconnected to the Sink .\n Following a Hard Reset where it will restart as if it were Detached then Attached to the Sink .\n Following a Power Role Swap or Fast Role Swap where it will enter an Implicit Contract .\n Following USB Type-C Error Recovery which is an electrical Detach /Re-attach (remove and assert\nRp)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.2",
    "title": "Power Delivery Contract Negotiation",
    "full_path": "2.1.2 Power Delivery Contract Negotiation",
    "page": 53,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": "Contract s Negotiate d using the USB Power Delivery Specification supersede any and all previous power contracts\nestablished whether from standard [USB 2.0] , [USB 3.2] , [USBBC 1.2] or [USB Type-C 2.4] mechanisms. While\noperating in Power Delivery Mode there will be a Contract in place (either Explicit Contract or Implicit Contract ) that\ndetermines the power level available and the direction of that power. The Port Pair will remain in Power Delivery\nMode until the Port Pair is Detached , there is a Hard Reset , or USB Type-C Error Recovery , or the Source removes\npower except as part of the Power Role Swap or Fast Role Swap processes.\nNote: [USB4] does not define a default power, rather relies on a PD power Contract . When first Attached the\n[USB4] device operates in [USB 3.2] Mode which is its USB Default Operation .\nAn Explicit Contract is Negotiate d by the process of the Source sending a set of Capabilities , from which the Sink is\nrequired to request a particular capability and then the Source accepting this request.\nPage 54 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10An Implicit Contract is the specified level of power allowed in particular states (i.e., during and after a Power Role\nSwap or Fast Role Swap ). Implicit Contract s are temporary; Port Pair s are required to immediately Negotiate an\nExplicit Contract .\nEach Provider has a Local Policy , governing power allocation to its Port s. Consumer s also have their own Local Policy\ngoverning how they draw power. A System Policy can be enacted over USB that allows modification to this Local\nPolicy and hence management of overall power allocation in the system.\nWhen PD Capable devices are Attached to each other, the DFP s and UFP s initially default to standard USB Default\nOperation . The DFP supplies vSafe5V and the UFP draws current in accordance with the rules defined by [USB 2.0] ,\n[USB 3.2] , [USB Type-C 2.4] or [USBBC 1.2] specifications. After Power Delivery Negotiation has taken place,\npower can be supplied at higher, or lower, voltages and higher currents than defined in these specifications. It is\nalso possible to:\n Do a Power Role Swap or Fast Role Swap to exchange the Power Role s such that the DFP receives power\nand the UFP supplies power.\n Do a Data Role Swap such that the DFP becomes the UFP and vice-versa.\n Do a VCONN Swap to change the Port supplying V CONN to the cable.\n Enter into EPR Mode .\n Enter into USB4® Mode .\n Enter into Alternate Mode s.\n Send Vendor Defined Message s.\nPrior to the First Explicit Contract only the Source Port , which is also the VCONN Source , can communicate with the\nAttached cable assembly. This is important where 5A and EPR capability are marked as well as other details of the\ncable assembly such as the supported speed.\nCable Discovery , determining whether the cable can communicate, can occur on initial Attachment of a Port Pair\nbefore an Explicit Contract has been established. It is also possible to carry out Cable Discovery after a Power Role\nSwap or Fast Role Swap prior to re-establishing an Explicit Contract , where the UFP is the Source , and an Implicit\nContract is in place. Cable Discovery can be carried out after an Explicit Contract has been established, if the cable\nhas not yet been discovered."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.1.3",
    "title": "Other Uses for Power Delivery",
    "full_path": "2.1.3 Other Uses for Power Delivery",
    "page": 54,
    "level": 3,
    "parent_id": "2.1",
    "tags": [],
    "content": "Once an Explicit Contract is in place, PD can be used to manage the Port s and cables for non-power related\nfunctionality.\nPD is used to enter the USB4® Mode of operation. Port s and cables can support functionality beyond power. For\nexample, a cable can have active components that require VCONN power or a Port /cable can support a video display\nAlternate Mode such as DisplayPort. PD defines an infrastructure to discover these additional Capabilities and\nMode s that include:\n Discovering a Port or Cable Plug 's Capabilities .\n Discovery of the SVID s a Port or Cable Plug supports.\n Discovery of the Mode s a Port or Cable Plug supports.\n Entry into a Mode supported by the Port and/or Cable Plug .\n Exiting Mode s supported by the Port and/or Cable Plug ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.2",
    "title": "Compatibility with Revision 2.0",
    "full_path": "2.2 Compatibility with Revision 2.0",
    "page": 54,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": "Revision 3.x of the USB Power Delivery specification is designed to be fully inter-operable with [USBPD 2.0]\nsystems using BMC Signaling over the [USB Type-C 2.4] connector and to be compatible with Revision 2.0\nhardware.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 55This specification mandates that all Revision 3.x systems fully support Revision 2.0 operation. They must discover\nthe supported Revision used by their Port Partner and any connected Cable Plug s and revert to operation using the\nlowest common Revision number (see Section 6.2.1.1.5, \"Specification Revision\" ).\nThis specification defines Extended Message s containing data of up to 260 bytes (see Section 6.2.1.2, \"Extended\nMessage Header\" ). These Message s can be larger than expected by existing PHY HW. To accommodate Revision 2.0\nbased systems a Chunking mechanism is mandated such that Message s are limited to Revision 2.0 sizes unless it is\ndiscovered that both systems support the longer Message lengths.\nThis specification includes changes to the Vendor Data Object s (VDO ) used in the discovery of passive/active\nmarked cables and Alternate Mode Adapter s (AMA ) (see Section 6.4.4.2, \"Structured VDM\" ). To enable systems to\ndetermine which VDO format is being used the Structured Vendor Defined Message (SVDM ) Version number has\nbeen incremented to 2.x. Version numbers have also been incorporated into the VDO s themselves to facilitate\nfuture changes if these become necessary."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.3",
    "title": "USB Power Delivery Capable Devices",
    "full_path": "2.3 USB Power Delivery Capable Devices",
    "page": 55,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": "Some examples of USB Power Delivery capable devices can be seen in Figure 2.1, \"Logical Structure of USB Power\nDelivery Capable Devices\" (a USB Host , a USB Device , a Hub , and a Charger ). These are given for reference only and\nare not intended to limit the possible configurations of products that can be built using this specification.\nFigure 2.1 Logical Structure of USB Power Delivery Capable Devices\nEach USB Power Delivery capable device is assumed to be made up of at least one Port . Provider s are assumed to\nhave a Source and Consumer s a Sink . Each device contains one, or more, of the following components:\n UFP s that:\n Sink Power.\n Communicate using SOP Packets.\n Optionally Communicate using SOP’ Packet s/SOP’’ Packet s.\n Optionally source power (a Dual-Role Power Device ).\n Optionally communicate via USB.\n Optionally support Alternate Mode s.\n DFP s that:USB Host\nUFPUSB Device\nPower\nStorageExternal\npowerUSB Hub\nDFPPower\nStorageExternal\npowerUSB Charger\nUFP\nPower\nStorageExternal\npowerExternal\npower\nPower\nStorage\nDFP DFP\nOptional\nPower inputOptional\nFeatureMultiple Power\ninputs/outputsMultiple Power\noutputs\nPower inputLegend\nPage 56 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Source Power\n Communicate using SOP Packets.\n Optionally Communicate using SOP* Packet s.\n Optionally Sink power (a Dual-Role Power Device ).\n Optionally communicate via USB.\n Optionally support Alternate Mode s.\n A Source that can be:\n An externally powered source (e.g., AC powered).\n Power Storage (e.g., Battery /Power Bank).\n Derived from another Port (e.g., bus-powered Hub ).\n A Sink that can be:\n Power Storage (e.g., a Battery /Power Bank).\n Used to power internal functions.\n Used to power devices Attached to other devices (e.g., a bus-powered Hub ).\n A VCONN Source that:\n Can be either Port Partner , either the DFP /UFP or Source /Sink .\n Powers the Cable Plug (s).\n Powers VPD s (VCONN Powered USB Device s).\n Is the only Port allowed to talk to the Cable Plug (s) at any given time.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 572.4 SOP* Communication"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.1",
    "title": "Introduction",
    "full_path": "2.4.1 Introduction",
    "page": 57,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": "The Start of Packet (or SOP ) is used as an addressing scheme to identify whether the communications were\nintended for one of the Port Partner s (SOP Communication ) or one of the Cable Plug s (SOP’ Communication /SOP’’\nCommunication ). SOP /SOP’ and SOP’’ are collectively referred to as SOP* . All SOP* Communication s take place over\na single wire ( CC). The term Cable Plug in the SOP’ Communication /SOP’’ Communication case is used to represent\na logical entity in the cable which is capable of PD Communication, and which might or might not be physically\nlocated in the plug.\nNote: There are there are other SOP s defined for special operation such as debug which are not discussed here.\nThe following sections describe how this addressing scheme operates for Port -to-Port and Port to Cable Plug\ncommunication."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.2",
    "title": "SOP* Collision Avoidance",
    "full_path": "2.4.2 SOP* Collision Avoidance",
    "page": 57,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": "For all SOP* the Source co-ordinates communication to avoid bus collisions by allowing the Sink to initiate\nmessaging when it does not need to communicate itself. Once an Explicit Contract is in place, the Source\nmanipulates its Rp value (3A) to indicate to the Sink that it can initiate an Atomic Message Sequence (AMS ). This AMS\ncan be communication with the Source or with one of the Cable Plug s. As soon as the Source itself needs to initiate\nan AMS , it will manipulate its Rp value (1.5A) to indicate this to the Sink . The Source then waits for any outstanding\nSink SOP* Communication to complete before initiating an AMS itself. In all cases, the Port initiating an AMS waits\nfor CC to be Idle before putting the Message on CC."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.3",
    "title": "SOP Communication",
    "full_path": "2.4.3 SOP Communication",
    "page": 57,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": "SOP Communication is used for Port -to-Port communication between the Source and the Sink . SOP Communication\nis recognized by both Port Partner s but not by any intervening Cable Plug s. SOP Communication takes priority over\nother SOP* Communication s since it is critical to complete power related operations as soon as possible."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.4.4",
    "title": "SOP'/SOP'' Communication with Cable Plugs",
    "full_path": "2.4.4 SOP'/SOP'' Communication with Cable Plugs",
    "page": 57,
    "level": 3,
    "parent_id": "2.4",
    "tags": [],
    "content": "SOP’ Communication is recognized by electronics in one Cable Plug (see [USB Type-C 2.4] ). SOP’’ Communication\ncan also be supported when SOP’ Communication is also supported. SOP’ and SOP’’ assignment in the cable\nassembly is fixed and does not change dynamically.\nSOP Communication between the Port Partner s is not recognized by the Cable Plug . Figure 2.2, \"Example SOP'\nCommunication between V CONN Source and Cable Plug(s)\" outlines the usage of SOP* Communication s between a\nVCONN Source (DFP /UFP ) and the Cable Plug s.\nSince all SOP* Communication s take place over a single wire ( CC), the SOP* Communication periods must be\ncoordinated to prevent important communication from being blocked. For a product which does not recognize\nSOP /SOP’ or SOP’’ Packet s, this will look like a non- Idle channel, leading to missed Packet s and retries.\nCommunications between the Port Partner s take precedence meaning that communications with the Cable Plug\ncan be interrupted but will not lead to a Soft Reset or Hard Reset .\nWhen a Default Contract or Implicit Contract is in place (e.g., at startup, after a Power Role Swap or Fast Role Swap )\nonly the Source Port that is supplying VCONN is allowed to send Packet s to a Cable Plug (SOP’ ) and is allowed to\nrespond to Packet s from the Cable Plug (SOP’ ) with a GoodCRC Message in order to discover the Cable Plug 's\ncharacteristics (see Figure 2.2, \"Example SOP' Communication between V CONN Source and Cable Plug(s)\" ). During\nthis phase, all communication with the Cable Plug is initiated and controlled by the VCONN Source which acts to\nprevent conflicts between SOP Packet s and SOP’ Packet s. The Sink does not communicate with the Cable Plug and\nDiscards any SOP’ Packet s received.\nWhen an Explicit Contract is in place, only the VCONN Source (either the DFP or the UFP ) can communicate with the\nCable Plug (s) using SOP’ Packet s/SOP’’ Packet s (see Figure 2.2, \"Example SOP' Communication between V CONN\nSource and Cable Plug(s)\" ). During this phase, all communication with the Cable Plug is initiated and controlled by\nthe VCONN Source which acts to prevent conflicts between SOP* Packet s. The Port that is not the VCONN Source is not\nPage 58 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10allowed to communicate with the Cable Plug and does not recognize any SOP’ Packet s/SOP’’ Packet s received. Only\nthe DFP , when acting as a VCONN Source , is allowed to send SOP* Packet s to control the entry and exiting of Mode s\nand to manage Modal Operation .\nFigure 2.2 Example SOP' Communication between V CONN Source and Cable Plug(s)\nVCONN Source\n(DFP/UFP)\nSOP signalingSOP’\nsignaling\nSOP’’\nsignalingCable\nPlug1\n(SOP’’)Electronically Marked\nCableCable\nPlug1\n(SOP’)VCONN\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 592.5 Operational Overview\nA USB Power Delivery Port supplying power is known as a Source and a Port consuming power is known as a Sink .\nThere is only one Source Port and one Sink Port in each PD Connection between the Port Partner s. At Attach the\nSource Port (the Port with Rp asserted see [USB Type-C 2.4] ) is also the DFP and VCONN Source . At Attach the Sink\nPort (the Port with Rd asserted) is also the UFP and is not the VCONN Source .\nThe original USB PD specification allowed Source s to deliver up to 100W. This classic Mode of operation is referred\nto as the Standard Power Range (SPR). The First Explicit Contract , the first Contract after a Default Contract or\nImplicit Contract , is always an SPR Contract . There is an Optional higher power Mode referred to as the Extended\nPower Range (EPR ) where the Source is allowed to deliver up to 240W. The EPR Mode can only be entered from the\nSPR Mode . The entry process is designed to prevent accidental entry into this higher power Mode . It can be entered\nonly when an SPR Explicit Contract is in place and both the Source Port and Sink Port as well as the cable support\nEPR .\nThe Source /Sink Power Role s, DFP /UFP Data Role s and VCONN Source role can all subsequently be swapped\northogonally to each other. A Port that supports both Source and Sink Power Role s is called a Dual-Role Power Port\n(DRP ). A Port that supports both DFP and UFP Data Role s is called a Dual-Role Data Port (DRD ).\nWhen USB Communications capability is supported in the DFP Data Role then the Port will also be able to act as a\nUSB Host . Similarly, when USB Communication s capability is supported in the UFP Data Role then the Port will also\nbe able to act as a USB Device .\nThe following sections describe the high-level operation of ports taking on the roles of DFP , UFP , Source and Sink .\nFor details of how PD maps to USB states in a PDUSB Device see Section 9.1.2, \"Mapping to USB Device States\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.5.1",
    "title": "Source Operation",
    "full_path": "2.5.1 Source Operation",
    "page": 59,
    "level": 3,
    "parent_id": "2.5",
    "tags": [],
    "content": "The Source operates differently depending on its Attachment status:\n At Attach (no PD Connection or Contract ):\n For a Source -only Port the Source detects Sink Attachment .\n For a DRP that toggles between Source and Sink operation, the Port becomes a Source Port on\nAttachment of a Sink\n The Source then supplies vSafe5V .\n Before PD Connection (no PD Connection or Contract ):\n Prior to sending Source_Capabilities Message s the Source can detect the Cable Capabilities and\nAdvertises its Capabilities depending on the Cable Capabilities detected:\n The default current carrying capability of a USB Type-C cable is 3A.\n The Source can attempt to communicate with one of the Cable Plug s using SOP’ Packet s. If the\nCable Plug responds, then communication takes place to discover the cable's Capabilities (e.g., 5A\ncapable).\n The Source periodically Advertises its Capabilities by sending Source_Capabilities Message s every\ntTypeCSendSourceCap .\n Establishing PD Connection (no PD Connection or Contract ):\n Presence of a PD Capable Port Partner is detected either:\n By receiving a GoodCRC Message in response to a Source_Capabilities Message .\n By receiving Hard Reset Signaling .\n Establishing the First Explicit Contract after an Attach , Hard Reset , USB Type-C Error Recovery or Implicit\nContract as a result of a Power Role Swap or Fast Role Swap :\nPage 60 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The Source receives a Request Message from the Sink and, if this is a Valid request, responds with\nan Accept Message followed by a PS_RDY Message when its power supply is ready to source power\nat the agreed level. At this point an Explicit Contract has been agreed.\n A DFP that does not generate SOP’ Packet s or SOP’’ Packet s, is not required to detect SOP’ Packet s or\nSOP’’ Packet s and Discards them.\n When in an Explicit Contract (PE_SRC_Ready State):\n The Source processes and responds (if a response is required) to all Message s received and sends\nappropriate Message s whenever its Local Policy requires:\n The Source informs the Sink whenever its Capabilities change, by sending a Source_Capabilities\nMessage .\n The Source responds to a Sink Request Message with the Capabilities mismatch bit set, by\nsending a Source_Capabilities Message with its maximum available power.\n The Source will always have an Rp value asserted on its CC wire used for Collision Avoidance .\n When this Port is a DRP the Source can initiate or receive a request for the exchange of Power\nRole s. After the Power Role Swap this Port will be a Sink and in an Implicit Contract until an\nExplicit Contract is Negotiate d immediately afterwards.\n When this Port is a DRD the Source can initiate or receive a request for an exchange of Data Role s.\nAfter a Data Role Swap the DFP (USB Host ) becomes a UFP (USB Device ). The Port remains a\nSource and the VCONN Source role remains unchanged.\n The Source can initiate or receive a request for an exchange of VCONN Source role. During a VCONN\nSwap VCONN is applied by both Port s (make before break). The Port remains a Source and DFP /\nUFP Data Role s remain unchanged.\n The Source when it is the VCONN Source can communicate with a Cable Plug using SOP’\nCommunication or SOP’’ Communication at any time it is not engaged in any other SOP\nCommunication :\n If SOP Packets are received by the Source , during SOP’ Communication or SOP’’ Communication ,\nthe SOP’ Communication or SOP’’ Communication is immediately terminated (the Cable Plug\ntimes out and does not retry).\n If the Source needs to initiate an SOP Communication during an ongoing SOP’ Communication or\nSOP’’ Communication (e.g., for a Capabilities change) then the SOP’ Communication or SOP’’\nCommunication s will be interrupted.\n When the Source Port is also a DFP :\n The Source can control the entry and exiting of Mode s in the Cable Plug (s) and control Modal\nOperation .\n The Source can initiate Unstructured VDM s or Structured VDM s.\n The Source can control the entry and exiting of Mode s in the Sink and control Modal Operation\nusing Structured VDM s.\n Detach or communications failure:\n A Source detects plug Detach and takes VBUS down to vSafe5V within tSafe5V and vSafe0V within\ntSafe0V (i.e. using USB Type-C Detach detection via CC).\n When the Source detects the failure to receive a GoodCRC Message in response to a Message within\ntReceive :\n Leads to a Soft Reset , within tSoftReset of the CRCReceiveTimer expiring.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 61 If the Soft Reset process cannot be completed a Hard Reset will be issued within tHardReset of\nthe CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s:\n When the Source is also the V CONN Source , VCONN will also be power cycled during the Hard\nReset .\n When the Source operating in SPR PPS Mode fails to receive periodic communication (e.g., a Request\nMessage ) from the Sink within tPPSTimeout:\n Source issues a Hard Reset and takes VBUS to vSafe5V .\n When the Source operating in the EPR Mode fails to receive periodic communication (i.e., an\nEPR_KeepAlive Message or any other Message ) from the Sink within tSourceEPRKeepAlive :\n Source issues a Hard Reset and takes VBUS to vSafe5V .\n Receiving no response to further attempts at communication is interpreted by the Source as an error\n(see Error handling).\n Errors during power transitions will automatically lead to a Hard Reset to restore power to default\nlevels.\n Error handling:\n Protocol Error s are handled by a Soft_Reset Message issued by either Port Partner , that resets\ncounters, timers and states, but does not change the Negotiate d voltage and current or the Port 's\nrole (e.g., Source , DFP /UFP , VCONN Source ) and does not cause an exit from Modal Operation .\n Serious errors are handled by Hard Reset Signaling issued by either Port Partner . A Hard Reset :\n Resets protocol as for a Soft Reset but also returns the power supply to USB Default Operation\n(vSafe0V or vSafe5V output) in order to protect the Sink .\n Restores the Port 's Data Role to DFP .\n Restores the Port 's power to its USB default state.\n When the Sink is the VCONN Source it removes VCONN then the Source Port is restored as the VCONN\nSource .\n Causes all Active Mode s to be exited such that the Source is no longer in Modal Operation .\n After a Hard Reset it is expected that the Port Partner will respond within tNoResponse . If this does\nnot occur then nHardResetCount further Hard Reset s are carried out before the Source performs\nadditional Error Recovery steps, as defined in [USB Type-C 2.4] , by entering the ErrorRecovery\nstate.\nPage 62 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-102.5.2 Sink Operation\n At Attach (no PD Connection or Contract ):\n Sink detects Source Attachment through the presence of vSafe5V .\n For a DRP that toggles between Source and Sink operation, the Port becomes a Sink Port on\nAttachment of a Source .\n Once the Sink detects the presence of vSafe5V on VBUS it waits for a Source_Capabilities Message\nindicating the presence of a PD Capable Source .\n If the Sink does not receive a Source_Capabilities Message within tTypeCSinkWaitCap then it can\nissue Hard Reset Signaling in order to cause the Source Port to send a Source_Capabilities Message\nif the Source Port is PD Capable .\n The Sink does not generate SOP’ Packet s or SOP’’ Packet s, is not required to detect SOP’ Packet s or\nSOP’’ Packet s and Discards them.\n Establishing PD Connection (no PD Connection or Contract ):\n The Sink receives a Source_Capabilities Message and responds with a GoodCRC Message .\n The Sink does not generate SOP’ Packet s or SOP’’ Packet s, is not required to detect SOP’ Packet s or\nSOP’’ Packet s and Discards them.\n Establishing the First Explicit Contract after an Attach , Hard Reset or Implicit Contract as a result of a\nPower Role Swap or Fast Role Swap :\n The Sink receives a Source_Capabilities Message from the Source and responds with a Request\nMessage . If this is a Valid request the Sink receives an Accept Message followed by a PS_RDY Message\nwhen the Source 's power supply is ready to source power at the agreed level. At this point the Source\nand Sink have entered into an Explicit Contract :\n The Sink Port can request one of the Capabilities offered by the Source , even if this is the vSafe5V\noutput offered by [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] or [USBBC 1.2] , in order to enable\nfuture power Negotiation :\n A Sink not requesting any Valid capability with a Request Message results in an error.\n A Sink unable to fully operate at the offered Capabilities requests the default capability but in -\ndicates that it would prefer another power level by setting the Capability Mismatch bit in the\nRequest Message and also providing a physical indication of the failure to the end user (e.g.,\nusing an LED).\n The Sink does not generate SOP’ Packet s or SOP’’ Packet s, is not required to detect SOP’ Packet s or\nSOP’’ Packet s and Discards them.\n During PD Connection (Explicit Contract - PE_SNK_Ready state):\n The Sink processes and responds (if a response is required) to all Message s received and sends\nappropriate Message s whenever its Local Policy requires.\n A Sink whose power needs have changed indicates this to the Source with a new Request Message .\nThe Sink Port can request one of the Capabilities previously offered by the Source , even if this is the\nvSafe5V output offered by [USB 2.0] , [USB 3.2] , [USB Type-C 2.4] or [USBBC 1.2] , in order to enable\nfuture power Negotiation :\n Not requesting any capability with a Request Message results in an error.\n A Sink unable to fully operate at the offered Capabilities requests an offered capability but\nindicates a Capabilities Mismatch i.e., that it would prefer another power level also providing a\nphysical indication of the failure to the end user (e.g., using an LED).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 63 A Sink operating in the SPR PPS Mode periodically sends Request Message within tPPSRequest even\nif its request is unchanged.\n A Sink operating in the EPR Mode periodically communicates with the Source (i.e., sends an\nEPR_KeepAlive Message or any other Message ) within tSourceEPRKeepAlive .\n The Sink will always have Rd asserted on its CC wire.\n When this Port is a DRP , the Sink can initiate or receive a request for the exchange of Power Role s.\nAfter the Power Role Swap this Port will be a Source and an Implicit Contract will be in place until an\nExplicit Contract is Negotiated immediately afterwards.\n When this Port is a DRD the Sink can initiate or receive a request for an exchange of Data Role s. After\na Data Role Swap the UFP (USB Device ) becomes a DFP (USB Host ). The Port remains a Sink and\nVCONN Source role (or not) remains unchanged.\n The Sink can initiate or receive a request for an exchange of VCONN Source . During a VCONN Swap\nVCONN is applied by both ends (make before break). The Port remains a Sink and DFP /UFP Data Role s\nremain unchanged.\n The Sink when it is the VCONN Source can communicate with a Cable Plug using SOP’ Communication\nor SOP’’ Communication at any time it is not engaged in any other SOP Communication :\n If SOP Packet s are received by the Sink , during SOP’ Communication or SOP’’ Communication , the\nSOP’ Communication or SOP’’ Communication is immediately terminated (the Cable Plug times\nout and does not retry)\n If the Sink needs to initiate an SOP Communication during an ongoing SOP’ Communication or\nSOP’’ Communication (e.g., for a Capabilities change) then the SOP’ Communication or SOP’’\nCommunication s will be interrupted.\n When the Sink Port is also a DFP :\n The Sink can initiate Unstructured VDM s or Structured VDM s.\n The Sink can control the Mode Entry and Mode Exit of Mode s in the Source and control Modal\nOperation (e.g. [USB4] ).\n Detach or Communications Failure:\n A Sink detects the removal of VBUS and interprets this as the end of the PD Connection :\n This is unless the vSafe0V is due to either a Hard Reset , Power Role Swap or Fast Role Swap .\n A Sink detects plug removal (i.e., absence of Rp or VBUS) and discharges VBUS.\n When the Sink detects the failure to receive a GoodCRC Message in response to a Message within\ntReceive :\n Leads to a Soft Reset , within tSoftReset of the CRCReceiveTimer expiring.\n If the Soft Reset process cannot be completed a Hard Reset will be issued within tHardReset of\nthe CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s.\n Receiving no response to further attempts at communication is interpreted by the Sink as an\nerror (see Error handling).\n When the Sink operating in the SPR PPS Mode fails to send periodic communication (i.e. a Request\nMessage ) to the Source within tPPSRequest , the Source will issue a Hard Reset that results in VBUS\ngoing to vSafe5V .\n When the Sink operating in the EPR Mode fails to send periodic communication (i.e. an\nEPR_KeepAlive Message or any other Message ) to the Source within tSourceEPRKeepAlive the\nSource will issue a Hard Reset that results in VBUS going to vSafe5V .\nPage 64 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Errors during power transitions will automatically lead to a Hard Reset to restore power to default\nlevels.\n Error handling:\n Protocol Error s are handled by a Soft_Reset Message issued by either Port Partner , that resets\ncounters, timers and states, but does not change the Negotiate voltage and current or the Port 's role\n(e.g., Sink , DFP /UFP , VCONN Source ) and does not cause an exit from Modal Operation .\n Serious errors are handled by Hard Reset Signaling issued by either Port Partner . A Hard Reset :\n resets protocol as for a Soft Reset but also returns the power supply to USB Default Operation\n(vSafe0V or vSafe5V output) in order to protect the Sink .\n restores the Port 's Data Role to UFP .\n when the Sink is the VCONN Source it removes VCONN then the Source Port is restored as the VCONN\nSource .\n causes all Active Mode s to be exited such that the Source is no longer in Modal Operation .\n After a Hard Reset it is expected that the Port Partner will respond within tTypeCSinkWaitCap . If this\ndoes not occur, then two further Hard Reset s are carried out before the UFP stays in the\nPE_SNK_Wait_for_Capabilities state.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 652.5.3 Cable Plugs\n Cable Plug s are powered when VCONN is present but are not aware of the status of the Contract between\nthe ports the cable assembly is connecting.\n Cable Plug s do not initiate AMS s and only respond to Message s sent to them.\n Detach or Communications Failure:\n Communications can be interrupted at any time.\n There is no communication timeout scheme between the DFP /UFP and Cable Plug .\n The Cable Plug is ready to respond to potentially repeated requests.\n Error handling:\n The Cable Plug detects Hard Reset Signaling to determine that the Source and Sink have been reset\nand will need to reset itself (equivalent to a power cycle).\n The Cable Plug cannot generate Hard Reset Signaling itself.\n The Hard Reset process power cycles both VBUS and VCONN so this is expected to reset the Cable\nPlug s by itself.\n A Cable Plug detects Cable Reset Signaling to determine that it will need to reset itself (equivalent to a\npower cycle).\nPage 66 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-102.6 Architectural Overview\nThis logical architecture is not intended to be taken as an implementation architecture. An implementation\narchitecture is, by definition, a part of product definition and is therefore outside of the scope of this specification.\nThis section outlines the high-level logical architecture of USB Power Delivery referenced throughout this\nspecification. In practice various implementation options are possible based on many different possible types of\nPD devices. PD devices can have many different configurations e.g., USB Communication or non- USB\nCommunication , single versus multiple Port s, dedicated power supplies versus supplies shared on multiple ports,\nhardware versus software-based implementations etc. The architecture outlined in this section is therefore\nprovided only for reference to indicate the high-level logical model used by the PD specification. This architecture\nis used to identify the key concepts and to indicate logical blocks and possible links between them.\nThe USB Power Delivery is a Port to Port architecture in which each PD Capable device is made up of several major\ncomponents.\n Figure 2.3, \"USB Power Delivery Communications Stack\" illustrates the relationship of the layers of the\ncommunications stack between a Port Pair.\nThe communications stack consists of:\n A Device Policy Manager (see Section 8.2, \"Device Policy Manager\" ) that exists in all devices and manages\nUSB Power Delivery resources within the device across one or more Port s based on the device's Local\nPolicy .\n A Policy Engine (see Section 8.3, \"Policy Engine\" ) that exists in each USB Power Delivery Port\nimplements the Local Policy for that Port .\n A Protocol Layer (see Section 6, \"Protocol Layer\" ) that enables Message s to be exchanged between a Source\nPort and a Sink Port .\n A PHY Layer (see Section 5, \"Physical Layer\" ) that handles transmission and reception of bits on the wire\nand handles data transmission\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 67Figure 2.3 USB Power Delivery Communications Stack\nAdditionally, USB Power Delivery devices which can operate as USB devices can communicate over USB (see Figure\n2.4, \"USB Power Delivery Communication Over USB\" ). An Optional System Policy Manager (see Chapter 9 and [UCSI] )\nthat resides in the USB Host communicates with the PDUSB Device over USB, via the root Port and potentially\nmanages the individual Port to Port connections over a tree of USB Hub s. The Device Policy Manager interacts with\nthe USB interface in each device to provide and update PD related information in the USB domain.\nNote: A PD device is not required to have a USB device interface.ProtocolPolicy EngineDevice Policy\nManager\nCCPhysical Layer Physical LayerProtocolPolicy EngineDevice Policy\nManagerProvider Consumer\nPage 68 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 2.4 USB Power Delivery Communication Over USB\nFigure 2.5, \"High Level Architecture View\" shows the logical blocks between two Attached PD Port s (Port Pair). In\naddition to the communication stack described above there are also:\n For a Provider or Dual-Role Power Device : one or more Source s providing power to one or more Port s.\n For a Consumer or Dual-Role Power Device : A Sink consuming power.\n A USB-C® Port Control module (see Section4.4 \"Cable Type Detection \") that detects cable Attach /Detach\nas defined in [USB Type-C 2.4] .\n USB Power Delivery uses standard cabling as defined in [USB Type-C 2.4] .System Policy\nManager\nPhysical LayerProtocolPolicy EngineDevice Policy\nManager\nCCPD USB\nDeviceUSB Host\nUSB Root Hub\nUSB Interface USB HubUSB Hub\nPhysical LayerProtocolPolicy EngineDevice Policy\nManager\nCCPD USB\nDevice\nUSB Interface\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 69The Device Policy Manager talks to the communication stack, Source /Sink , and the USB-C® Port Control block to\nmanage the resources in the Provider or Consumer .\nFigure 2.5, \"High Level Architecture View\" illustrates a Provider and a Consumer . Dual-Role Power Device s can be\nconstructed by combining the elements of both Provider and Consumer into a single device. Provider s can also\ncontain multiple Source Port s each with their own communications stack and USB-C® Port Control .\nFigure 2.5 High Level Architecture View"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.1",
    "title": "Policy",
    "full_path": "2.6.1 Policy",
    "page": 69,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": "There are two levels of Policy:\n1) System Policy applied system wide by the System Policy Manager across multiple Provider s or Consumer s.\n3) Local Policy enforced on a Provider or Consumer by the Device Policy Manager for a device.\nPolicy comprises several logical blocks:\n System Policy Manager (system wide).\n Device Policy Manager (one per Provider or Consumer ).\n Policy Engine (one per Source Port or Sink Port )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.1.1",
    "title": "System Policy Manager",
    "full_path": "2.6.1.1 System Policy Manager",
    "page": 69,
    "level": 4,
    "parent_id": "2.6.1",
    "tags": [],
    "content": "Since the USB Power Delivery protocol is Port to Port , implementation of a System Policy requires communication\nby an additional data communication mechanism i.e., USB. [UCSI] has been created to define an interface for the\nSystem Policy Manager to communicate with the Device Policy Manager . When present, the System Policy Manager\nmonitors and controls System Policy between various Provider s and Consumer s connected via USB. The System\nPolicy Manager resides in the USB Host and communicates via USB with the Device Policy Manager in each\nconnected Device . Device s without USB Communication capability or are not data connected, will not be able to\nparticipate in System Policy .\nThe System Policy Manager is Optional so USB Power Delivery Provider s and Consumer s will operate without it\nbeing present. This includes systems where the USB Host does not provide a System Policy Manager and can also\ninclude \"headless\" systems without any USB Host . In those cases where a USB Host is not present, USB Power\nDelivery is useful for charging purposes, or the powering of devices since useful USB functionality is not possible.\nWhere there is a USB Host , but no System Policy Manager , Provider s and Consumer s can Negotiate power between Power\nSource(s)\nPhysical LayerProtocolSource PortDevice Policy ManagerProvider\nPolicy Engine\nPower\nSink\nPhysical LayerProtocolSink PortDevice Policy ManagerConsumer\nPolicy Engine\nUSB-C Port\nControlUSB-C Port\nControl\nVBUSUSB Port\nVBUSUSB Port\nCC CCBMC BMC\nCCVBUS\nPage 70 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10themselves, independently of USB power rules, but are more limited in terms of the options available for managing\npower."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.1.2",
    "title": "Device Policy Manager",
    "full_path": "2.6.1.2 Device Policy Manager",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.1",
    "tags": [],
    "content": "The Device Policy Manager provides mechanisms to monitor and control the USB Power Delivery system within a\nparticular Consumer or Provider . The Device Policy Manager enables Local Policy to be enforced across the system\nby communication with the System Policy Manager . Local Policy is enacted on a per Port basis by the Device Policy\nManager 's control of the Source Port s/Sink Port s and by communication with the Policy Engine and USB-C® Port\nControl for that Port . The Device Policy Manager is responsible for the sharing algorithm used in Shared Capacity\nCharger s (see [USB Type-C 2.4] )"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.1.3",
    "title": "Policy Engine",
    "full_path": "2.6.1.3 Policy Engine",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.1",
    "tags": [],
    "content": "Provider s and Consumer s are free to implement their own Local Policy on their directly connected Source Port s or\nSink Port s. These will be supported by Negotiation and status mechanisms implemented by the Policy Engine for\nthat Port . The Policy Engine interacts directly with the Device Policy Manager to determine the present Local Policy\nto be enforced. The Device Policy Manager will also inform the Policy Engine whenever there is a change in Local\nPolicy (e.g., Capabilities change)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.2",
    "title": "Message Formation and Transmission",
    "full_path": "2.6.2 Message Formation and Transmission",
    "page": 70,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.2.1",
    "title": "Protocol Layer",
    "full_path": "2.6.2.1 Protocol Layer",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.2",
    "tags": [],
    "content": "The Protocol Layer forms the Message s used to communicate information between a Port Pair . It is responsible for\nforming Capabilities Message s, requests and acknowledgments. Additionally, it forms Message s used to swap roles\nand maintain presence. It receives inputs from the Policy Engine indicating which Message s to send and indicates\nthe responses back to the Policy Engine .\nThe basic protocol uses a push model where the Provider pushes its Capabilities to the Consumer that in turn\nresponds with a request based on the offering. However, the Consumer can asynchronously request the Provider 's\npresent Capabilities and can select another voltage/current.\nExtended Message s of up to a Data Size of MaxExtendedMsgLen can be sent and received provided the Protocol\nLayer determines that both Port Partner s support this capability. When one of both Port Partner s do not support\nExtended Message s of Data Size greater than MaxExtendedMsgLegacyLen then the Protocol Layer supports a\nChunking mechanism to break larger Message s into smaller Chunk s of size MaxExtendedMsgChunkLen . All Port s\nthat support Extended Message s longer than MaxExtendedMsgLegacyLen are required to support Chunking ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.2.2",
    "title": "PHY Layer",
    "full_path": "2.6.2.2 PHY Layer",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.2",
    "tags": [],
    "content": "The PHY Layer is responsible for sending and receiving Message s across the USB Type-C CC wire and for managing\ndata. PD is a Multi-Drop system, sharing CC between the Port Partner s and the Cable Plug (s) that implements\nCollision Avoidance and recovery mechanisms. The PHY Layer detects errors in the Message s using a CRC ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.3",
    "title": "Collision Avoidance",
    "full_path": "2.6.3 Collision Avoidance",
    "page": 70,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.3.1",
    "title": "Policy Engine",
    "full_path": "2.6.3.1 Policy Engine",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.3",
    "tags": [],
    "content": "The Policy Engine in a Source will indicate to the Protocol Layer the start and end of each Atomic Message Sequence\n(AMS ) that the Source initiates. The Policy Engine in a Sink will indicate to the Protocol Layer the start of each AMS\nthe Sink initiates. This enables co-ordination of AMS initiation between the Port Partner s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.3.2",
    "title": "Protocol Layer",
    "full_path": "2.6.3.2 Protocol Layer",
    "page": 70,
    "level": 4,
    "parent_id": "2.6.3",
    "tags": [],
    "content": "The Protocol Layer in the Source will request the PHY to set the Rp value to SinkTxOK when it is not actively sending\nMessage s. This indicates to the Sink that it can initiate an AMS by sending the first Message in the sequence. The\nProtocol Layer in the Source will request the PHY Layer to set the Rp value to SinkTxNG to indicate that the Sink\ncannot initiate an AMS since the Source is about to initiate an AMS .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 71The Protocol Layer in the Sink , when the Policy Engine indicates that an AMS is being initiated, will wait for the Rp\nvalue to be set to SinkTxOK before initiating the AMS by sending the first Message in the sequence."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.3.3",
    "title": "PHY Layer",
    "full_path": "2.6.3.3 PHY Layer",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.3",
    "tags": [],
    "content": "The PHY Layer in the Source will set the Rp value to either SinkTxOK or SinkTxNG as directed by the Protocol Layer .\nThe PHY Layer in the Sink will detect the present Rp value and inform the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4",
    "title": "Power supply",
    "full_path": "2.6.4 Power supply",
    "page": 71,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4.1",
    "title": "Source",
    "full_path": "2.6.4.1 Source",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.4",
    "tags": [],
    "content": "Each Provider will contain one or more power sources that are shared between one or more Port s. These power\nsources are controlled by the Local Policy . Source Port s start up in USB Type-C Operation where the Port applies\nvSafe0V on VBUS and returns to this state on Detach or after a Hard Reset . When the Source detects Attach events it\ntransitions its output to vSafe5V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4.2",
    "title": "Sink",
    "full_path": "2.6.4.2 Sink",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.4",
    "tags": [],
    "content": "Consumer s are assumed to have one Sink connected to a Port . This Sink is controlled by Local Policy . Sink s start up\nin USB Default Operation where the Port can operate at vSafe5V with USB default specified current levels and\nreturn to this state on Detach or after a Hard Reset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4.3",
    "title": "Dual-Role Power Ports",
    "full_path": "2.6.4.3 Dual-Role Power Ports",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.4",
    "tags": [],
    "content": "Dual-Role Power Port s have the ability to operate as either a Source or a Sink and to swap between the two Power\nRole s using Power Role Swap or Fast Role Swap ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4.4",
    "title": "Dead Battery or Lost Power Detection",
    "full_path": "2.6.4.4 Dead Battery or Lost Power Detection",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.4",
    "tags": [],
    "content": "[USB Type-C 2.4] defines mechanisms intended to communicate with and to charge a Sink or DRP with a Dead\nBattery ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.4.5",
    "title": "V CONN Source",
    "full_path": "2.6.4.5 V CONN Source",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.4",
    "tags": [],
    "content": "The Source Port at Attach , is also the VCONN Source . The responsibility for sourcing VCONN can be swapped between\nthe Source Port s and Sink Port s in a make before break fashion to ensure that the Cable Plug s are continuously\npowered. To ensure reliable communication with the Cable Plug s only the Port that is the VCONN Source is permitted\nto communicate with the Cable Plug s.\nNote: Prior to a Power Role Swap , Data Role Swap or Fast Role Swap each new Source Port needs to ensure that\nit is the VCONN Source if it needs to communicate with the Cable Plug s after the swap."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.5",
    "title": "DFP/UFP",
    "full_path": "2.6.5 DFP/UFP",
    "page": 71,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.5.1",
    "title": "Downstream Facing Port (DFP)",
    "full_path": "2.6.5.1 Downstream Facing Port (DFP)",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.5",
    "tags": [],
    "content": "The Downstream Facing Port or DFP is equivalent in the USB topology to the Port a USB Device is Attached to. The\nDFP will also correspond to the USB Host but only if USB Communication is supported while acting as a DFP .\nProducts such as Charger s can be a DFP while not having USB Communication capability. Only the DFP is allowed\nto control Alternate Mode operation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.5.2",
    "title": "Upstream Facing Port (UFP)",
    "full_path": "2.6.5.2 Upstream Facing Port (UFP)",
    "page": 71,
    "level": 4,
    "parent_id": "2.6.5",
    "tags": [],
    "content": "The Upstream Facing Port or UFP is equivalent in the USB topology to the Port on a USB Device that is connected to\nthe USB Host or USB Hub 's DFP . The UFP will also correspond to the USB Device but only if USB Communication is\nsupported while acting as a UFP . Products which charge can be a UFP while not having USB Communication\ncapability.\nPage 72 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-102.6.5.3 Dual-Role Data Ports\nDual-Role Data Port s have the ability to operate as either a DFP or a UFP and to swap between the two Data Role s\nusing Data Role Swap .\nNote: Products can be Dual-Role Data Port s without being Dual-Role Power Port s that is they can switch\nlogically between DFP and UFP Data Role s even if they are Source -only or Sink -only Ports."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.6",
    "title": "Cable and Connectors",
    "full_path": "2.6.6 Cable and Connectors",
    "page": 72,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": "The USB Power Delivery specification assumes certified USB cables and associated detection mechanisms as\ndefined in the [USB Type-C 2.4] specification."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.6.1",
    "title": "USB-C Port Control",
    "full_path": "2.6.6.1 USB-C Port Control",
    "page": 72,
    "level": 4,
    "parent_id": "2.6.6",
    "tags": [],
    "content": "The USB-C® Port Control block provides mechanisms to:\n Inform the Device Policy Manager of cable Attach /Detach events.\n Inform Sink 's Device Policy Manager of the Rp value.\n Allow Source 's Device Policy Manager to set the Rp value."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.7",
    "title": "Interactions between Non-PD, BC, and PD devices",
    "full_path": "2.6.7 Interactions between Non-PD, BC, and PD devices",
    "page": 72,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": "USB Power Delivery only operates when two USB Power Delivery devices are directly connected. When a device\nfinds itself a mixed environment, where the other device does not support the USB Power Delivery Specification,\nthe existing rules on supplying vSafe5V as defined in the [USB 2.0] , [USB 3.2] , [USBBC 1.2] or [USB Type-C 2.4]\nspecifications are applied.\nThere are two primary cases to consider:\n The USB Host (DFP /Source ) is non- PD and as such will not send any Advertisements. An Attached PD\nCapable device will not see any Advertisements and operates using the rules defined in the [USB 2.0] ,\n[USB 3.2] , [USBBC 1.2] or [USB Type-C 2.4] specifications.\n The Device (UFP /Sink ) is non- PD and as such will not see any Advertisements and therefore will not\nrespond. The USB Host (DFP /Source ) will continue to supply vSafe5V to VBUS as specified in the [USB\n2.0] , [USB 3.2] , [USBBC 1.2] or [USB Type-C 2.4] specifications."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.6.8",
    "title": "Power Rules",
    "full_path": "2.6.8 Power Rules",
    "page": 72,
    "level": 3,
    "parent_id": "2.6",
    "tags": [],
    "content": "Power Rules define voltages and current ranges that are offered by compliant USB Power Delivery Source s and used\nby a USB Power Delivery Sink for a given value of PDP Rating . See Chapter 10 \"Power Rules\" for further details.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 732.7 Extended Power Range (EPR) Operation\nExtended Power Range is a Mode that provides for up to 240W which is considerably more power than the 100W\nthe original PD specification ( SPR Mode ) offered. It is a Mode of operation that can be entered only when an Explicit\nContract is in place and both the Port s and the Cable Plug (s) support EPR .\nEntry into EPR Mode follows a strict process; this assures that the higher voltages, at power levels above 100W, are\nonly transferred between known EPR Capable Source s and EPR Capable Sink s over EPR Capable cables. EPR Source s\nare capable of both Fixed Supply and Adjustable Voltage Supply (AVS) operation. Maintaining EPR Mode operation\nalso requires maintaining a regular cadence of USB PD communications; loss of communications between the EPR\nSource and EPR Sink will cause a Hard Reset to be initiated resulting in a return to SPR operation.\nThe EPR Mode entry, operational and exit process is summarized by the following steps:\n1) Negotiate and enter into an Explicit Contract in the Standard Power Range . During this step, EPR Capable\nSource s and Sink s will declare their supported EPR Capabilities through PDO/APDO and RDO exchanges.\n2) An EPR Sink , having discovered an EPR Source , can request EPR Mode entry.\n3) The EPR Source , having already confirmed that the Attached cable assembly is EPR Capable during the\nFirst Explicit Contract Negotiation , will respond to the EPR Sink with an acknowledgment of the EPR\nMode entry request.\n4) While in EPR Mode :\na) The EPR Source sends EPR Capabilities (Fixed Supply PDOs and an AVS APDO ) to the EPR Sink which\nrequires the Sink to evaluate and respond as appropriate to adjust the Explicit Contract .\nb) The EPR Sink maintains a regular cadence of communications with the EPR Source to allow EPR\nMode to continue.\n5) When either the EPR Source or EPR Sink no longer wants to remain in EPR Mode operation, a normal\nexit from EPR Mode will first require adjusting the Explicit Contract to a voltage of 20V or lower ( SPR\n(A)PDO ) followed by an explicit EPR Mode exit request.\na) Source initiated: EPR Source sends an EPR_Source_Capabilities Message that only includes SPR\nvoltages to force the EPR Sink to drop to 20V or below followed by the EPR Mode exit. Once EPR Mode\nis exited, a new SPR Contract is Negotiate d to return to SPR Mode operation.\nb) Sink initiated; EPR Sink requests a drop to 20V or below followed by the EPR Mode exit. Once EPR\nMode is exited, a new SPR Contract is Negotiate d to return to SPR Mode operation.\nFigure 2.6, \"Example of a Normal EPR Mode Operational Flow\" illustrates an example of a normal EPR Mode\noperational flow. In this example, at some time during the EPR Mode operation, the Source decides that it needs to\nexit EPR Mode , so it resends the EPR Capabilities to the Sink with only SPR (A)PDO s to cause the Sink to Negotiate\nan SPR Contract of 20V or lower and then the Source follows with an EPR Mode exit Message . Once EPR Mode is\nexited, a new SPR Contract is Negotiate d to return to SPR Mode operation.\nPage 74 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 2.6 Example of a Normal EPR Mode Operational Flow\nNot illustrated in Figure 2.6, \"Example of a Normal EPR Mode Operational Flow\" , while in EPR Mode operation, the\nSink might decide it wants to exit EPR Mode . In this case, the Sink must initiate the exit process by revising its\nExplicit Contract with the Source at 20V or less followed with an EPR_Mode exit Message . Once EPR Mode is exited,\na new SPR Contract is Negotiate d to formalize the return to SPR Mode operation. Failure to revise the Explicit\nContract to one at 20V or less before attempting to exit EPR Mode will result in a Hard Reset .EPR Source EPR Cable EPR Sink\nEnter EPR\nMode?\nCable is EPR?\nExit EPR\nMode?Establish SPR Contract\n(Source/Sink EPR Status)\nRequest EPR Mode\nAccept EPR Mode\nEstablish EPR Contract\nMaintain PD Repetitive Communications\nEstablish EPR Contract (20V or less)\nExit EPR Mode\nEstablish SPR Contract\n(Source/Sink EPR Status)EPR Mode\nEntry\nPhase\nEPR Mode\nOperation\nEPR Mode\nExit Phase\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 752.8 Charging Models\nThis section provides a charging model overview for each of the primary power delivery methods: Fixed Supply ,\nProgrammable Power Supply and Adjustable Voltage Supply ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8.1",
    "title": "Fixed Supply Charging Models",
    "full_path": "2.8.1 Fixed Supply Charging Models",
    "page": 75,
    "level": 3,
    "parent_id": "2.8",
    "tags": [],
    "content": "USB Power Delivery supports Fixed Supply charging using a set of defined standard voltages with current available\nup to the limit of the Source 's and cable's Advertised Capabilities . As summarized in Table 2.1, \"Fixed Supply Power\nRanges\" , the standard voltages are available in either the Standard Power Range (SPR) and/or the Extended Power\nRange (EPR )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.8.2",
    "title": "Programmable Power Supply (PPS) Charging Models",
    "full_path": "2.8.2 Programmable Power Supply (PPS) Charging Models",
    "page": 75,
    "level": 3,
    "parent_id": "2.8",
    "tags": [],
    "content": "USB Power Delivery includes support for Programmable Power Supply (PPS) charging using a set of defined\nstandard voltage ranges. With current up to the limit of the Source 's and cable's Advertised Capabilities .\nAdditionally, when operating in SPR Mode the current is also limited by the Operating Current field value in the\nRequest Message .\nNote: PPS operation is not available in EPR Mode .\nThe standard voltage ranges available in the Standard Power Range (SPR) for PPS are summarized in Table 2.2,\n\"PPS Voltage Power Ranges\" .Table 2.1 Fixed Supply Power Ranges\nPower Range Available Current and\nVoltagesPDP Range Notes\nStandard Power Range (SPR) 3A: 5V, 9V, 15V, 20V\n5A1: 20V15 – 60W\n>60 – 100W\nExtended Power Range (EPR ) 3A2: 5V, 9V, 15V, 20V\n5A2: 20V\n5A2: 28V, 36V, 48V15 – 60W\n>60 – 100W\n>100 – 240WRequires entry into EPR Mode .\n1) Requires 5A cable.\n2) Requires EPR cable.\nTable 2.2 PPS Voltage Power Ranges\nAvailable Current Prog Min Voltage (V) Max Voltage (V) PDP Range\n3A 9V Prog 5 11 16 – 60W\n15V Prog 5 16\n20V Prog 5 21\n5A1 20V Prog 5 21 61 – 100W\n1) Requires 5A cable.\nPage 76 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-102.8.3 Adjustable Voltage Supply (AVS) Charging Models\nUSB Power Delivery operating in SPR Mode (when PDP is higher than 27W) and EPR Mode includes support for\nAdjustable Voltage Supply (AVS) charging using a set of defined standard voltage ranges based on the Source 's PDP\nRating .\nThe standard voltage ranges available for AVS are summarized in Table 2.3, \"AVS Voltage Power Ranges\" .\nTable 2.3 AVS Voltage Power Ranges\nPDP\nMinimum\nVoltage (V)Maximum\nVoltage (V)Maximum\nAvailable\nCurrent3Minimum\nVoltage (V)Maximum\nVoltage (V)Maximum\nAvailable\nCurrent\n>27…45W 9 15 3A N/A\n>45…60W 9 20 3A\n>60…100W 9 20 5A1\n100…140W 9 20 5A2 15 28 5A2\n>140…180W 9 20 5A2 15 36 5A2\n>180…240W 9 20 5A2 15 48 5A2\n1) Requires 5A cable.\n2) Requires an EPR Cable.\n3) The maximum available SPR AVS current is determined by the maximum available current in the\nFixed Supply 15V PDO in the 9 - 15V range and Fixed Supply 20V PDO in the 15 - 20V range.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 773 USB Type-A and USB Type-B Cable Assemblies and\nConnectors\nThis section has been Deprecated . Please refer to [USBPD 2.0] for details of cables and connectors used in scenar -\nios utilizing the BFSK Signaling Scheme in conjunction with USB Type-A or USB Type-B connectors.\nPage 78 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-104 Electrical Requirements\nThis chapter covers the platform's electrical requirements for implementing USB Power Delivery."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.1",
    "title": "Interoperability with other USB Specifications",
    "full_path": "4.1 Interoperability with other USB Specifications",
    "page": 78,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": "USB Power Delivery May be implemented alongside the [USB 2.0] , [USB 3.2] , [USB4] , [USBBC 1.2] and [USB Type-\nC 2.4] (USB Type-C ) specifications. In the case where a Device requests power via [USBBC 1.2] and then the USB\nPower Delivery Specification, it Shall follow the USB Power Delivery Specification until the Port Pair is Detached\nor there is a Hard Reset . If the USB Power Delivery connection is lost, the Port Shall return to its default state, see\nSection 6.8.3, \"Hard Reset\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.2",
    "title": "Dead Battery Detection / Unpowered Port Detection",
    "full_path": "4.2 Dead Battery Detection / Unpowered Port Detection",
    "page": 78,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": "Dead Battery /unpowered operation is when a USB Device needs to provide power to a USB Host under the\ncircumstances where the USB Host :\n Has a Dead Battery that requires charging or\n Has lost its power source or\n Does not have a power source or\n Does not want to provide power.\nDead Battery charging operation for connections between USB Type-C connectors is defined in [USB Type-C 2.4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.3",
    "title": "Cable IR Ground Drop (IR Drop)",
    "full_path": "4.3 Cable IR Ground Drop (IR Drop)",
    "page": 78,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": "Every PD Sink Port capable of USB Communication can be susceptible to unreliable USB Communication if the\nvoltage drop across ground falls outside of the acceptable common mode range for the USB Hi-Speed transceivers\ndata lines due to excessive current draw. Certified USB cabling is specified such that such errors don't typically\noccur (See [USB Type-C 2.4] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4.4",
    "title": "Cable Type Detection",
    "full_path": "4.4 Cable Type Detection",
    "page": 78,
    "level": 2,
    "parent_id": "4",
    "tags": [],
    "content": "Standard USB Type-C® cable assemblies are rated for PD voltages higher than vSafe5V and current levels of at least\n3A (See [USB Type-C 2.4] ). The Source Shall limit maximum Capabilities it offers so as not to exceed the Capabilities\nof the type of cabling detected.\nSource s capable of offering more than 3A Shall detect the type of Attached cable and limit the Capabilities they offer\nbased on the current carrying capability of the cable determined by the Cable Capabilities determined using the\nDiscover Identity Command (see Section 6.4.4.3.1, \"Discover Identity\" ) sent using SOP’ Communication (see Section\n2.4, \"SOP* Communication\" ) to the Cable Plug . The Cable VDO returned as part of the Discover Identity Command\ndetails the maximum current and voltage values that Shall be Negotiate d for a given cable as part of an Explicit\nContract .\nThe Cable Discovery process is usually run when the Source is powered up, after a Power Role Swap or Fast Role\nSwap or when power is applied to a Sink . The method used to detect these events Shall meet the following\nrequirements:\n Source s Shall run the Cable Discovery process prior to the Source sending Source_Capabilities Messag -\nes offering currents in excess of 3A and/or voltages in excess of 20V.\n Sink s with USB Type-C connectors Shall select Capabilities from the offered Source Capabilities assum -\ning that the Source has already determined the Capabilities of the cable.\n Sink s with the Dual-Role Power bit set, Shall respond to a Get_Source_Cap Message by declaring their\nfull Source Capabilities , without limiting them based on the cable's Capabilities .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 795 Physical Layer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.1",
    "title": "Physical Layer Overview",
    "full_path": "5.1 Physical Layer Overview",
    "page": 79,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": "The Physical Layer ( PHY Layer ) defines the Signaling technology for USB Power Delivery. This chapter defines the\nelectrical requirements and parameters of the PHY Layer required for interoperability between PDUSB Device s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.2",
    "title": "Physical Layer Functions",
    "full_path": "5.2 Physical Layer Functions",
    "page": 79,
    "level": 2,
    "parent_id": "5",
    "tags": [],
    "content": "The USB PD PHY Layer consists of a pair of transmitters and receivers that communicate across a single signal wire\n(CC). All communication is half duplex. The PHY Layer practices Collision Avoidance to minimize communication\nerrors on the channel.\nThe transmitter performs the following functions:\n Receive Packet data from the Protocol Layer .\n Calculate and append a CRC .\n Encode the Packet data including the CRC (i.e., the Payload ).\n Transmit the Packet (Preamble , SOP* , Payload , CRC and EOP ) across the channel using Bi-phase Mark\nCoding (BMC ) over CC.\nThe receiver performs the following functions:\n Recover the clock and lock onto the Packet from the Preamble .\n Detect the SOP* .\n Decode the received data including the CRC.\n Detect the EOP and validate the CRC:\n If the CRC is Valid , deliver the Packet data to the Protocol Layer .\n If the CRC is Invalid , flush the received data.\nPage 80 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.3 Symbol Encoding\nExcept for the Preamble , all communications on the line Shall be encoded with a line code to ensure a reasonable\nlevel of DC-balance and a suitable number of transitions. This encoding makes receiver design less complicated and\nallows for more variations in the receiver design.\n4b5b line code Shall be used. This encodes 4-bit data to 5-bit symbols for transmission and decodes 5-bit symbols\nto 4-bit data for consumption by the receiver.\nThe 4b5b code provides data encoding along with special symbols. Special symbols are used to signal Hard Reset ,\nand delineate Packet boundaries (see Table 5.1, \"4b5b Symbol Encoding\" ).\nTable 5.1 4b5b Symbol Encoding\nName 4b 5b Symbol Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0000 11110 hex data 0",
    "full_path": "0 0000 11110 hex data 0",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "0001 01001 hex data 1",
    "full_path": "1 0001 01001 hex data 1",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "0010 10100 hex data 2",
    "full_path": "2 0010 10100 hex data 2",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "0011 10101 hex data 3",
    "full_path": "3 0011 10101 hex data 3",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "0100 01010 hex data 4",
    "full_path": "4 0100 01010 hex data 4",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "0101 01011 hex data 5",
    "full_path": "5 0101 01011 hex data 5",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "0110 01110 hex data 6",
    "full_path": "6 0110 01110 hex data 6",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "0111 01111 hex data 7",
    "full_path": "7 0111 01111 hex data 7",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "1000 10010 hex data 8",
    "full_path": "8 1000 10010 hex data 8",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "1001 10011 hex data 9",
    "full_path": "9 1001 10011 hex data 9",
    "page": 80,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "A 1010 10110 hex data A\nB 1011 10111 hex data B\nC 1100 11010 hex data C\nD 1101 11011 hex data D\nE 1110 11100 hex data E\nF 1111 11101 hex data F\nSync-1 K-code 11000 Startsynch #1\nSync-2 K-code 10001 Startsynch #2\nRST-1 K-code 00111 Hard Reset #1\nRST-2 K-code 11001 Hard Reset #2\nEOP K-code 01101 EOP End of Packet\nError 00000 Shall Not be used\nError 00001 Shall Not be used\nError 00010 Shall Not be used\nError 00011 Shall Not be used\nError 00100 Shall Not be used\nError 00101 Shall Not be used\nSync-3 K-code 00110 Startsynch #3\nError 01000 Shall Not be used\nError 01100 Shall Not be used\nError 10000 Shall Not be used\nError 11111 Shall Not be used\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 815.4 Ordered Sets\nOrdered sets Shall be interpreted according to Figure 5.1, \"Interpretation of ordered sets\" .\nAn ordered set consists of 4 K-code s sent as shown in Figure 5.1, \"Interpretation of ordered sets\" .\nFigure 5.1 Interpretation of ordered sets\nA list of the ordered sets used by USB Power Delivery can be seen in Table 5.2, \"Ordered Sets\" . SOP* is a generic term\nused in place of SOP /SOP’ /SOP’’ .\nThe receiver Shall search for all four K-code s. When the receiver finds all four K-code s in the correct place, it Shall\ninterpret this as a Valid ordered set. When the receiver finds three out of four K-code s in the correct place, it May Table 5.2 Ordered Sets\nOrdered Set Reference\nCable Reset Section 5.6.5, \"Cable Reset\"\nHard Reset Section 5.6.4, \"Hard Reset\"\nSOP Section 5.6.1.2.1, \"Start of Packet Sequence (SOP)\"\nSOP’ Section 5.6.1.2.2, \"Start of Packet Sequence Prime (SOP')\"\nSOP’_Debug Section 5.6.1.2.4, \"Start of Packet Sequence Prime Debug (SOP'_Debug)\"\nSOP’’ Section 5.6.1.2.3, \"Start of Packet Sequence Double Prime (SOP'')\"\nSOP’’_Debug Section 5.6.1.2.5, \"Start of Packet Sequence Double Prime Debug (SOP''_Debug)\"K-code 4 K-code 3 K-code 2 K-code 1Transmit last Transmit first\nTransmit last Transmit firstb4 b0\nBIT\n4BIT\n3BIT\n2BIT\n1BIT\n0\nPage 82 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10interpret this as a Valid ordered set. The receiver Should ensure that all four K-code s are Valid to avoid ambiguity\nin detection (see Table 5.3, \"Validation of Ordered Sets\" ).\nTable 5.3 Validation of Ordered Sets\n1st code 2nd code 3rd code 4th code\nValid1 Corrupt K-code K-code K-code\nValid1 K-code Corrupt K-code K-code\nValid1 K-code K-code Corrupt K-code\nValid1 K-code K-code K-code Corrupt\nValid2 (perfect) K-code K-code K-code K-code\nInvalid (example) K-code Corrupt K-code Corrupt\n1) May be interpreted as a Valid ordered set.\n2) Shall be interpreted as a Valid ordered set.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 835.5 Transmitted Bit Ordering\nThis section describes the order of bits on the wire that Shall be used when transmitting data of varying sizes.\nTable 5.4, \"Data Size\" shows the different data sizes that are possible.\nFigure 5.2, \"Transmit Order for Various Sizes of Data\" shows the transmission order that Shall be followed.\nFigure 5.2 Transmit Order for Various Sizes of DataTable 5.4 Data Size\nUnencoded Encoded\nByte 8-bits 10-bits\nWord 16-bits 20- bits\nDWord 32-bits 40-bits\nb31 b0\nb31 Transmit last b16 b15 Transmit first b0\nb15 b8 b7 b0\nb7 b4 b3 b0\nb4 b04b5b\nTransmit last Transmit firstBIT\n3BIT\n2BIT\n1BIT\n0BIT\n4\nPage 84 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.6 Packet Format\nThe Packet format Shall consist of a Preamble , an SOP* , (see Section 5.6.1.2, \"Start of Packet Sequences\" ), Packet data\nincluding the Message Header , a CRC and an EOP (see Section 5.6.1.5, \"End of Packet (EOP)\" ). The Packet format is\nshown in Figure 5.3, \"USB Power Delivery Packet Format\" and indicates which parts of the Packet Shall be 4b/5b\nencoded. Once 4b/5b encoded, the entire Packet Shall be transmitted using BMC over CC.\nNote: All the bits in the Packet , including the Preamble , are BMC encoded.\nSee Section 6.2.1, \"Message Construction\" for more details of the Packet construction for Control Message s, Data\nMessage s and Extended Message s.\nFigure 5.3 USB Power Delivery Packet Format"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1",
    "title": "Packet Framing",
    "full_path": "5.6.1 Packet Framing",
    "page": 84,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": "The transmission starts with a Preamble that is used to allow the receiver to lock onto the carrier. It is followed by\na SOP* (Start of Packet). The Packet is terminated with an EOP (End of Packet ) K-code ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.1",
    "title": "Preamble",
    "full_path": "5.6.1.1 Preamble",
    "page": 84,
    "level": 4,
    "parent_id": "5.6.1",
    "tags": [],
    "content": "The Preamble is used to achieve lock in the receiver by presenting an alternating series of \"0s\" and \"1s\", so the\naverage frequency is the carrier frequency. Unlike the rest of the Packet , the Preamble Shall Not be 4b/5b encoded.\nThe Preamble Shall consist of a 64-bit sequence of alternating 0s and 1s. The Preamble Shall start with a \"0\" and\nShall end with a \"1\"."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.2",
    "title": "Start of Packet Sequences",
    "full_path": "5.6.1.2 Start of Packet Sequences",
    "page": 84,
    "level": 4,
    "parent_id": "5.6.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.2.1",
    "title": "Start of Packet Sequence (SOP)",
    "full_path": "5.6.1.2.1 Start of Packet Sequence (SOP)",
    "page": 84,
    "level": 5,
    "parent_id": "5.6.1.2",
    "tags": [],
    "content": "SOP is an ordered set. The SOP ordered set is defined as: three Sync-1 K-code s followed by one Sync-2 K-code (see\nTable 5.5, \"SOP Ordered Set\" ).\nA Power Delivery Capable Source or Sink Shall be able to detect and communicate with Packet s using SOP . If a Valid\nSOP is not detected (see Table 5.3, \"Validation of Ordered Sets\" ) then the whole transmission Shall be Discarded .\nSending and receiving of SOP Packets Shall be limited to PD Capable Port s on PDUSB Host s and PDUSB Device s.\nCable Plug s and VPD s Shall neither send nor receive SOP Packets.Table 5.5 SOP Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Sync-1",
    "full_path": "1 Sync-1",
    "page": 84,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Sync-1",
    "full_path": "2 Sync-1",
    "page": 84,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Sync-1",
    "full_path": "3 Sync-1",
    "page": 84,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-2",
    "full_path": "4 Sync-2",
    "page": 84,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Preamble(training for receiver)\nSOP* (Start\nOf Packet)Message\nHeaderByte 0 Byte 1 ...\n... Byte n-1 Byte n\nCRC\nEOP (End Of\nPacket)\nLEGEND:\nTraining sequence provided by the\nPhysical layer, not encoded with 4b5b\nProvided by the Physical\nlayer, encoded with 4b5bProvided by the Protocol\nlayer, encoded with 4b5b\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 85Note: PDUSB Device s, even if they have the physical form of a cable (e.g., AMA s), are still required to respond to\nSOP Packets."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.2.2",
    "title": "Start of Packet Sequence Prime (SOP')",
    "full_path": "5.6.1.2.2 Start of Packet Sequence Prime (SOP')",
    "page": 85,
    "level": 5,
    "parent_id": "5.6.1.2",
    "tags": [],
    "content": "The SOP’ ordered set is defined as: two Sync-1 K-code s followed by two Sync-3 K-code s (see Table 5.6, \"SOP’\nOrdered Set\" ).\nA VPD Shall have SOP’ Communication capability. A VPD and a Cable Plug capable of SOP’ Communication s Shall\nonly detect and communicate with Packet s starting with SOP’ .\nA Port needing to communicate with a Cable Plug capable of SOP’ Communication s, Attached between a Port Pair\nwill be able to communicate using both Packet s starting with SOP’ to communicate with the Cable Plug and starting\nwith SOP to communicate with its Port Partner .\nFor a VPD or a Cable Plug supporting SOP’ Communication s, if a Valid SOP’ is not detected (see Table 5.3, \"Validation\nof Ordered Sets\" ) then the whole transmission Shall be Discarded . For a Port supporting SOP’ Communication s if a\nValid SOP or SOP’ is not detected (see Table 5.3, \"Validation of Ordered Sets\" ) then the whole transmission Shall be\nDiscarded . When there is no Explicit Contract or an Implicit Contract in place a Sink Shall Not send SOP’ Packet s\nand Shall Discard all Packet s starting with SOP’ ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.2.3",
    "title": "Start of Packet Sequence Double Prime (SOP'')",
    "full_path": "5.6.1.2.3 Start of Packet Sequence Double Prime (SOP'')",
    "page": 85,
    "level": 5,
    "parent_id": "5.6.1.2",
    "tags": [],
    "content": "The SOP’’ ordered set is defined as the following sequence of K-code s: Sync-1 , Sync-3 , Sync-1 , Sync-3 (see Table 5.7,\n\"SOP’’ Ordered Set\" ).\nA VPD Shall Not have SOP’’ Communication capability. A Cable Plug capable of SOP’’ Communication , Shall have a\nSOP’ Communication capability in the other Cable Plug . No cable Shall only support SOP’’ Communication . A Cable\nPlug to which SOP’’ Communication is assigned Shall only detect and communicate with Packet s starting with SOP’’\nand Shall Discard any other Packet s.\nA Port needing to communicate with such a Cable Plug , Attached between a Port Pair will be able to communicate\nusing Packet s starting with SOP’ and SOP’’ to communicate with the Cable Plug s and Packet s starting with SOP to\ncommunicate with its Port Partner . A Port which supports SOP’’ Communication Shall also support SOP’\nCommunication and Shall co-ordinate SOP* Communication so as to avoid collisions.\nFor the Cable Plug supporting SOP’’ Communication , if a Valid SOP’’ is not detected (see Table 5.3, \"Validation of\nOrdered Sets\" ) then the whole transmission Shall be Discarded . For the Port if a Valid SOP* is not detected (see\nTable 5.3, \"Validation of Ordered Sets\" ) then the whole transmission Shall be Discarded .Table 5.6 SOP’ Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Sync-1",
    "full_path": "1 Sync-1",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Sync-1",
    "full_path": "2 Sync-1",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Sync-3",
    "full_path": "3 Sync-3",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-3",
    "full_path": "4 Sync-3",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 5.7 SOP’’ Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Sync-1",
    "full_path": "1 Sync-1",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Sync-3",
    "full_path": "2 Sync-3",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Sync-1",
    "full_path": "3 Sync-1",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-3",
    "full_path": "4 Sync-3",
    "page": 85,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 86 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.6.1.2.4 Start of Packet Sequence Prime Debug (SOP'_Debug)\nThe SOP’_Debug ordered set is defined as the following sequence of K-code s: Sync-1 , RST-2 , RST-2 , Sync-3 (see\nTable 5.8, \"SOP’_Debug Ordered Set\" ). The usage of this Ordered Set is presently undefined."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.2.5",
    "title": "Start of Packet Sequence Double Prime Debug (SOP''_Debug)",
    "full_path": "5.6.1.2.5 Start of Packet Sequence Double Prime Debug (SOP''_Debug)",
    "page": 86,
    "level": 5,
    "parent_id": "5.6.1.2",
    "tags": [],
    "content": "The SOP’’_Debug ordered set is defined as the following sequence of K-code s: Sync-1 , RST-2 , Sync-3 , Sync-2 (see\nTable 5.9, \"SOP’’_Debug Ordered Set\" ). The usage of this Ordered Set is presently undefined."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.3",
    "title": "Packet Payload",
    "full_path": "5.6.1.3 Packet Payload",
    "page": 86,
    "level": 4,
    "parent_id": "5.6.1",
    "tags": [],
    "content": "The Packet data is delivered from the Protocol Layer (see Section 6.2, \"Messages\" ) and Shall be encoded with the\nhex data codes from Table 5.1, \"4b5b Symbol Encoding\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.4",
    "title": "CRC",
    "full_path": "5.6.1.4 CRC",
    "page": 86,
    "level": 4,
    "parent_id": "5.6.1",
    "tags": [],
    "content": "The CRC Shall be inserted just after the Payload . It is described in Section 5.6.2, \"CRC\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.1.5",
    "title": "End of Packet (EOP)",
    "full_path": "5.6.1.5 End of Packet (EOP)",
    "page": 86,
    "level": 4,
    "parent_id": "5.6.1",
    "tags": [],
    "content": "The end of Packet marker Shall be a single EOP K-code as defined in Figure 5.1, \"Interpretation of ordered sets\" . This\nShall mark the end of the CRC. After the EOP , the CRC -residual Shall be checked. If the CRC is not good, the whole\ntransmission Shall be Discarded , if it is good, the Packet Shall be delivered to the Protocol Layer .\nNote: An EOP May be used to prematurely terminate a Packet e.g., before sending Hard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.2",
    "title": "CRC",
    "full_path": "5.6.2 CRC",
    "page": 86,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": "The Message Header and data Shall be protected by a 32-bit CRC .\n CRC -32 protects the data integrity of the data Payload . CRC -32 is defined as follows:\n The CRC -32 polynomial Shall be = 04C1_1DB7h.\n The CRC -32 Initial value Shall be = FFFF_FFFFh.\n CRC -32 Shall be calculated for all bytes of the Payload not inclusive of any Packet framing symbols (i.e.,\nexcludes the Preamble , SOP* , EOP ).\n CRC -32 calculation Shall begin at byte 0, bit 0 and continue to bit 7 of each of the bytes of the Packet .\n The remainder of CRC -32 Shall be complemented.\n The residual of CRC -32 Shall be C704 DD7Bh.Table 5.8 SOP’_Debug Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Sync-1",
    "full_path": "1 Sync-1",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "RST-2",
    "full_path": "2 RST-2",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "RST-2",
    "full_path": "3 RST-2",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-3",
    "full_path": "4 Sync-3",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 5.9 SOP’’_Debug Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Sync-1",
    "full_path": "1 Sync-1",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "RST-2",
    "full_path": "2 RST-2",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Sync-3",
    "full_path": "3 Sync-3",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-2",
    "full_path": "4 Sync-2",
    "page": 86,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 87This inversion of the CRC -32 remainder adds an offset of FFFF_FFFFh that will create a constant CRC-32 residual of\nC704_DD7Bh at the receiver side.\nNote: The CRC implementation is identical to the one used in [USB 3.2] .\nFigure 5.4, \"CRC-32 Generation\" is an illustration of CRC -32 generation. The output bit ordering Shall be as detailed\nin Table 5.10, \"CRC-32 Mapping\" .\nPage 88 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 5.4 CRC-32 Generation\nThe CRC -32 Shall be encoded before transmission.Table 5.10 CRC-32 Mapping\nCRC-32 Result Bit Position in CRC-32 Field"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "31",
    "full_path": "0 31",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "30",
    "full_path": "1 30",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "29",
    "full_path": "2 29",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "28",
    "full_path": "3 28",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "27",
    "full_path": "4 27",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "26",
    "full_path": "5 26",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "25",
    "full_path": "6 25",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "24",
    "full_path": "7 24",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "23",
    "full_path": "8 23",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "22",
    "full_path": "9 22",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "21",
    "full_path": "10 21",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "20",
    "full_path": "11 20",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "19",
    "full_path": "12 19",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "13",
    "title": "18",
    "full_path": "13 18",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "17",
    "full_path": "14 17",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "16",
    "full_path": "15 16",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "15",
    "full_path": "16 15",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "17",
    "title": "14",
    "full_path": "17 14",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "18",
    "title": "13",
    "full_path": "18 13",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "19",
    "title": "12",
    "full_path": "19 12",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "20",
    "title": "11",
    "full_path": "20 11",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "21",
    "title": "10",
    "full_path": "21 10",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "22",
    "title": "9",
    "full_path": "22 9",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "23",
    "title": "8",
    "full_path": "23 8",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "24",
    "title": "7",
    "full_path": "24 7",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "25",
    "title": "6",
    "full_path": "25 6",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "26",
    "title": "5",
    "full_path": "26 5",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "4",
    "full_path": "27 4",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "28",
    "title": "3",
    "full_path": "28 3",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "29",
    "title": "2",
    "full_path": "29 2",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "30",
    "title": "1",
    "full_path": "30 1",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "31",
    "title": "076543210 1 5 1 4 1 3 1 2 1 1 1 0 9 8 2 3 2 2 2 1 2 0 1 9 1 8 1 7 1 6 3 1 3 0 2 9 2 8 2 7 2 6 2 5 2 4",
    "full_path": "31 076543210 1 5 1 4 1 3 1 2 1 1 1 0 9 8 2 3 2 2 2 1 2 0 1 9 1 8 1 7 1 6 3 1 3 0 2 9 2 8 2 7 2 6 2 5 2 4",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "= Flip Flop7654 3210 15 14 13 12 11 10 9 8 23 22 21 20 19 18 17 16 31 30 2928 27 26 25 24\nData Byte 2\nData Byte 1\nData Byte 0\n76543210\nByte OrderBit\nOrder\nInput"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "B D 1 1 C 4 0",
    "full_path": "7 B D 1 1 C 4 0",
    "page": 88,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 895.6.3 Packet Detection Errors\nCRC errors, or errors detected while decoding encoded symbols using the code table, Shall be treated the same\nway; the Message Shall be Discarded and a GoodCRC Message Shall Not be returned.\nWhile the receiver is processing a Packet , if at any time the CC-line becomes Idle the receiver Shall stop processing\nthe Packet and Discard it (no GoodCRC Message is returned). See Section 5.8.6.1, \"Definition of Idle\" for the\ndefinition of BMC Idle ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.6.4",
    "title": "Hard Reset",
    "full_path": "5.6.4 Hard Reset",
    "page": 89,
    "level": 3,
    "parent_id": "5.6",
    "tags": [],
    "content": "Hard Reset Signaling is an ordered set of bytes sent with the purpose to be recognized by the PHY Layer . The Hard\nReset Signaling ordered set is defined as: three RST-1 K-code s followed by one RST-2 K-code (see Table 5.11, \"Hard\nReset Ordered Set\" ).\nA device Shall perform a Hard Reset when it receives Hard Reset Signaling . After receiving the Hard Reset\nSignaling , the device Shall reset as described in Section 6.8.3, \"Hard Reset\" . If a Valid Hard Reset is not detected (see\nTable 5.3, \"Validation of Ordered Sets\" ) then the whole transmission Shall be Discarded .\nA Cable Plug Shall perform a Hard Reset when it detects Hard Reset Signaling being sent between the Port Partner s.\nAfter receiving the Hard Reset Signaling , the device Shall reset as described in Section 6.8.3, \"Hard Reset\" .\nThe procedure for sending Hard Reset Signaling Shall be as follows:\n If the PHY Layer is currently sending a Message , the Message Shall be interrupted by sending an EOP K-\ncode and the rest of the Message Discarded .\n If CC is not Idle, wait for it to become Idle (see Section 5.8.6.1, \"Definition of Idle\" ).\n Wait tInterFrameGap .\n If CC is still Idle send the Preamble followed by the 4 K-code s for Hard Reset Signaling .\n Disable the channel (i.e., stop sending and receiving), reset the PHY Layer and inform the Protocol Layer\nthat the PHY Layer has been reset.\n Re-enable the channel when requested by the Protocol Layer .\nFigure 5.5, \"Line format of Hard Reset\" shows the line format of Hard Reset Signaling which is a Preamble followed\nby the Hard Reset Ordered Set.\nFigure 5.5 Line format of Hard ResetTable 5.11 Hard Reset Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "RST-1",
    "full_path": "1 RST-1",
    "page": 89,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "RST-1",
    "full_path": "2 RST-1",
    "page": 89,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "RST-1",
    "full_path": "3 RST-1",
    "page": 89,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "RST-2",
    "full_path": "4 RST-2",
    "page": 89,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Preamble(training for receiver)\nRST-1\nLEGEND:\nPreamble provided by the Physical layer,\nnot encoded with 4b5b\nProvided by the Physical\nlayer, encoded with 4b5b\nRST-1\nRST-1\nRST-2\nPage 90 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.6.5 Cable Reset\nCable Reset Signaling is an ordered set of bytes sent with the purpose to be recognized by the PHY Layer . The Cable\nReset Signaling ordered set is defined as the following sequence of K-code s: RST-1 , Sync-1 , RST-1 , Sync-3 (see\nTable 5.12, \"Cable Reset Ordered Set\" ).\nCable Reset Signaling Shall only be sent by the DFP . The Cable Reset Ordered Set is used to reset the Cable Plug s\nwithout the need to Hard Reset the Port Partner s. The state of the Cable Plug after the Cable Reset Signaling Shall\nbe equivalent to power cycling the Cable Plug .\nFigure 5.6, \"Line format of Cable Reset\" shows the line format of Cable Reset Signaling which is a Preamble followed\nby the Cable Reset Ordered Set.\nFigure 5.6 Line format of Cable ResetTable 5.12 Cable Reset Ordered Set\nK-Code Number K-Code in Code\nTable"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "RST-1",
    "full_path": "1 RST-1",
    "page": 90,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Sync-1",
    "full_path": "2 Sync-1",
    "page": 90,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "RST-1",
    "full_path": "3 RST-1",
    "page": 90,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Sync-3",
    "full_path": "4 Sync-3",
    "page": 90,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Preamble(training for receiver)\nRST-1\nLEGEND:\nPreamble provided by the Physical layer,\nnot encoded with 4b5b\nProvided by the Physical\nlayer, encoded with 4b5b\nSync-1\nRST-1\nSync-3\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 915.7 Collision Avoidance\nThe PHY Layer Shall monitor the channel for data transmission and only initiate transmissions when CC is Idle. If\nthe bus Idle condition is present, it Shall be considered safe to start a transmission provided the conditions detailed\nin Section 5.8.5.4, \"Inter-Frame Gap\" are met. The bus Idle condition Shall be checked immediately prior to\ntransmission. If transmission cannot be initiated, then the Packet Shall be Discarded . If the Packet is Discarded\nbecause CC is not Idle, the PHY Layer Shall signal to the Protocol Layer that it has Discarded the Message as soon\nas CC becomes Idle. See Section 5.8.6.1, \"Definition of Idle\" for the definition of Idle CC.\nIn addition, during an Explicit Contract , the PHY Layer Shall control the Rp resistor value to avoid collisions\nbetween Source and Sink transmissions. The Source Shall set an Rp value corresponding to a current of 3A\n(SinkTxOK ) to indicate to the Sink that it May initiate an AMS . The Source Shall set an Rp value corresponding to a\ncurrent of 1.5A (SinkTxNG) this Shall indicate to the Sink that it Shall Not initiate an AMS and Shall only respond\nto Message s as part of an AMS . See [USB Type-C 2.4] (USB Type-C ) for details of the corresponding Rp values. During\nthe Implicit Contract that precedes an Explicit Contract (including Power Role Swap and Fast Role Swap ) the Rp\nresistor value is used to specify USB Type-C current and is not used for Collision Avoidance .\nTable 5.13, \"Rp values used for Collision Avoidance\" details the Rp values that Shall be used by the Source to control\nSink initiation of an AMS .\nSee also Section 6.6.16, \"Collision Avoidance Timers\" and Section 6.10, \"Collision Avoidance\" .Table 5.13 Rp values used for Collision Avoidance\nSource RpParameter Description Sink Operation Source Operation\n1.5A@5V SinkTxNG Sink Transmit “No Go,”The Sink Shall Not initiate\nan AMS once tSinkDelay has\nelapsed after SinkTxNG is\nasserted.Source can initiate an AMS\ntSinkTx after setting Rp to\nthis value.\n3A@5V SinkTxOK Sink Transmit “Ok” Sink can initiate an AMS .Source cannot initiate an\nAMS while it has this value\nset.\nPage 92 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8 Bi-phase Mark Coding (BMC) Signaling Scheme\nBi-phase Mark Coding (BMC ) is the PHY Layer Signaling Scheme for carrying USB Power Delivery Message s. This\nencoding assumes a dedicated DC connection, over the CC wire, which is used for sending PD Message s.\nBi-phase Mark Coding is a version of Manchester coding (see [IEC 60958-1] ). In BMC , there is a transition at the\nstart of every bit time (UI ) and there is a second transition in the middle of the UI when a 1 is transmitted. BMC is\neffectively DC balanced, (each 1 is DC balanced and two successive zeros are DC balanced, regardless of the number\nof intervening 1's). It has bounded disparity (limited to 1 bit over an arbitrary Packet , so a very low DC level).\nFigure 5.7, \"BMC Example\" illustrates Bi-phase Mark Coding . This example shows the transition from a Preamble to\nthe Sync-1 K-code s of the SOP Ordered Set at the start of a Message .\nNote: Other K-code s can occur after the Preamble for Signaling such as Hard Reset and Cable Reset .\nFigure 5.7 BMC Example"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.1",
    "title": "Encoding and signaling",
    "full_path": "5.8.1 Encoding and signaling",
    "page": 92,
    "level": 3,
    "parent_id": "5.8",
    "tags": [],
    "content": "BMC uses DC coupled baseband Signaling on CC. Figure 5.8, \"BMC Transmitter Block Diagram\" shows a block\ndiagram for a Transmitter and Figure 5.9, \"BMC Receiver Block Diagram\" shows a block diagram for the\ncorresponding Receiver.\nFigure 5.8 BMC Transmitter Block DiagramPreamble Sync-1 Sync-1"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "01010101",
    "title": "01 01 00 00 11",
    "full_path": "01010101 01 01 00 00 11",
    "page": 92,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Data In\nBMC\nto CCData4b5b\nEncoder\nCRCBMC\nEncoder\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 93Figure 5.9 BMC Receiver Block Diagram\nThe USB PD baseband signal Shall be driven on the CC wire with a tristate driver that Shall cause a vSwing swing\non CC. The tristate driver is slew rate limited (see min rise/fall time in Section 5.8.5, \"BMC Transmitter\nSpecifications\" ) to limit coupling to D+/D- and to other signal lines in the USB Type-C fully featured cables (see [USB\nType-C 2.4] ). This slew rate limiting can be performed either with driver design or an RC filter on the driver output.\nWhen sending the Preamble , the transmitter Shall start by transmitting a low level. The receiver Shall tolerate the\nloss of the first edge. The transmitter May vary the start of the Preamble by tStartDrive min (see Figure 5.10, \"BMC\nEncoded Start of Preamble\" ).\nFigure 5.10 BMC Encoded Start of Preamble\nThe transmitter Shall terminate the final bit of the Frame by an edge (the “trailing edge”) to help ensure that the\nreceiver clocks the final bit. If the trailing edge results in the transmitter driving CC low (i.e., the final half- UI of the\nFrame is high, see Figure 5.11, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low\nLast Transition\" and Figure 5.12, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-\nLow Last Transition\" ), then the transmitter:\n Shall continue to drive CC low for tHoldLowBMC .\n Should release CC to high impedance as soon as possible after min tHoldLowBMC and Shall release CC\nby max tEndDriveBMC .\nFigure 5.11, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low Last Transition\"\nillustrates the end of a BMC encoded Frame with an encoded zero for which the final bit of the Frame is terminated\nby a high to low transition. Figure 5.12, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with\nHigh-to-Low Last Transition\" illustrates the end of a BMC Encoded Frame with an encoded one for which the final\nbit of the Frame is terminated by a high to low transition. Both figures also illustrate the tInterFrameGap timing\nrequirement before the start of the next Frame when the Port has either been transmitting or receiving the\nprevious Frame (see Section 5.8.5.4, \"Inter-Frame Gap\" ).Datafrom CC 5b4b\nDecoder\nCRCBMC\nDecoderSOP\nDetect\n1UI 1UI 1UI 1UI 1UI 1UI01 01 01 etc\nHigh Impedance\n(level set by R p/Rd)\ntStartDrive\nPage 94 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 5.11 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low Last\nTransition\nFigure 5.12 Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-Low Last\nTransition\nIf the trailing edge results in the transmitter driving CC high (i.e., the final half-UI of the Frame is low, see Figure\n5.13, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last Transition\" and\nFigure 5.14, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last Transition\" ),\nthen the transmitter:\n Shall continue to drive CC high for 1 UI.\n Then Shall drive CC low for tHoldLowBMC .\n Should release CC to high impedance as soon as possible after min tHoldLowBMC and Shall release CC\nby max tEndDriveBMC .\nFigure 5.13, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last Transition\"\nillustrates the ending of a BMC encoded Frame that ends with an encoded zero for which the final bit of the Frame\nis terminated by a low to high transition. Figure 5.14, \"Transmitting or Receiving BMC Encoded Frame Terminated\nby One with Low to High Last Transition\" illustrates the ending of a BMC encoded Frame that ends with an encoded\none for which the final bit of the Frame is terminated by a low to high transition. Both figures also illustrate the\ntInterFrameGap timing requirement before the start of the next Frame when the Port has either been transmitting\nor receiving the previous Frame (see Section 5.8.5.4, \"Inter-Frame Gap\" ).1UI\nmax tEndDriveBMC\ntInterFrameGapmin tHoldLowBMCfinal bit\nof frame\n0pre-amable for\nnext frame\n0trailing edge of\nfinal bit\nHigh Impedance\n(level set by R p/Rd)\n1UI\nmax tEndDriveBMC\ntInterFrameGapmin tHoldLowBMCfinal bit\nof frame\n0pre-amable for\nnext frame\n0trailing edge of\nfinal bit\nHigh Impedance\n(level set by R p/Rd)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 95Figure 5.13 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last\nTransition\nFigure 5.14 Transmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last\nTransition\nNote: There is no requirement to maintain a timing phase relationship between back-to-back Packet s.1UI 1UI\nmax tEndDriveBMC\ntInterFrameGapmin tHoldLowBMCfinal bit\nof frame\n0pre-amable for\nnext frame\n0trailing edge of\nfinal bit\nHigh Impedance\n(level set by R p/Rd)\n1UI 1UI\nmax tEndDriveBMC\ntInterFrameGapmin tHoldLowBMCfinal bit\nof frame\n1pre-amable for\nnext frame\n0trailing edge of\nfinal bit\nHigh Impedance\n(level set by R p/Rd)\nPage 96 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.2 Transmit and Receive Masks"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.2.1",
    "title": "Transmit Masks",
    "full_path": "5.8.2.1 Transmit Masks",
    "page": 96,
    "level": 4,
    "parent_id": "5.8.2",
    "tags": [],
    "content": "The transmitted signal Shall Not violate the masks defined in Figure 5.15, \"BMC Tx 'ONE' Mask\" , Figure 5.16, \"BMC\nTx 'ZERO' Mask\" , Table 5.14, \"BMC Tx Mask Definition, X Values\" and Table 5.15, \"BMC Tx Mask Definition, Y Values\"\nat the output of a load equivalent to the cable model and receiver load model described in Section 5.8.3,\n\"Transmitter Load Model\" . The masks apply to the full range of Rp/Rd values as defined in [USB Type-C 2.4] .\nNote: The measurement of the transmitter does not need to accommodate a change in signal offset due to the\nground offset when current is flowing in the cable.\nThe transmitted signal Shall have a rise time no faster than tRise . The transmitted signal Shall have a fall time no\nfaster than tFall . The maximum limits on the rise and fall times are enforced by the Tx inner masks.\nFigure 5.15 BMC Tx 'ONE' Mask\nY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8\n0.5UI1UI\nY6Y7Y8Y9\nX9 X10 X11 X12 X13 X14\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 97Figure 5.16 BMC Tx 'ZERO' Mask\nTable 5.14 BMC Tx Mask Definition, X Values\nName Description Value Units\nX1Tx Left Edge of Mask 0.015 UI\nX2Tx see figure 0.07 UI\nX3Tx see figure 0.15 UI\nX4Tx see figure 0.25 UI\nX5Tx see figure 0.35 UI\nX6Tx see figure 0.43 UI\nX7Tx see figure 0.485 UI\nX8Tx see figure 0.515 UI\nX9Tx see figure 0.57 UI\nX10Tx see figure 0.65 UI\nX11Tx see figure 0.75 UI\nX12Tx see figure 0.85 UI\nX13Tx see figure 0.93 UI\nX14Tx Right Edge of Mask 0.985 UIY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8\n0.5UI1UI\nY6Y7Y8Y9\nX9 X10 X11 X12 X13 X14\nPage 98 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.2.2 Receive Masks\nA Source using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask when\nsourcing power as defined in Figure 5.17, \"BMC Rx 'ONE' Mask when Sourcing Power\" , Figure 5.18, \"BMC Rx 'ZERO'\nMask when Sourcing Power\" and Table 5.16, \"BMC Rx Mask Definition\" . The Source Rx mask is bounded by sweeping\na Tx mask compliant signal, with added vNoiseActive between power neutral and Source offsets.\nA Consumer using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask\nwhen sinking power as defined in Figure 5.21, \"BMC Rx 'ONE' Mask when Sinking Power\" , Figure 5.22, \"BMC Rx\n'ZERO' Mask when Sinking Power\" and Table 5.16, \"BMC Rx Mask Definition\" . The Consumer Rx mask is bounded by\nsweeping a Tx mask compliant signal, with added vNoiseActive between power neutral and Consumer offsets.\nEvery product using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask\nwhen power neutral as defined in Figure 5.19, \"BMC Rx 'ONE' Mask when Power neutral\" , FFigure 5.20, \"BMC Rx\n'ZERO' Mask when Power neutral\" and Table 5.16, \"BMC Rx Mask Definition\" .\nDual-Role Power Device s Shall meet the receiver requirements for a Source when providing power during any\ntransmission using the BMC Signaling Scheme or a Sink when consuming power during any transmission using the\nBMC Signaling Scheme .\nCable Plug s Shall meet the receiver requirements for both a Source and a Sink during any transmission using the\nBMC Signaling Scheme .\nThe parameters used in the masks are specified to be appropriate to either edge triggered or oversampling\nreceiver implementations.\nThe masks are defined for 'ONE' and 'ZERO' separately as BMC enforces a transition at the midpoint of the unit\ninterval while a 'ONE' is transmitted.\nThe Rx masks are defined to bound the Rx noise after the Rx bandwidth limiting filter with the time constant\ntRxFilter has been applied.\nThe boundaries of Rx outer mask, Y1Rx and Y5Rx , are specified according to vSwing max and accommodate half\nof vNoiseActive from cable noise coupling and the signal offset vIRDropGNDC due to the ground offset when\ncurrent is flowing in the cable.\nThe vertical dimension of the Rx inner mask, Y4Rx - Y2Rx , for power neutral is derived by reducing the vertical\ndimension of the Tx inner mask, Y7Tx - Y3Tx, at time location X3Tx by vNoiseActive to account for cable noise\ncoupling. The received signal is composed of a waveform compliant to the Tx mask plus vNoiseActive .\nThe vertical dimension of the Rx inner mask for sourcing power is derived by reducing the vertical dimension of\nthe Tx inner mask by vNoiseActive and vIRDropGNDC to account for both cable noise coupling and signal DC offset. Table 5.15 BMC Tx Mask Definition, Y Values\nName Description Value Units\nY1Tx Lower bound of Out -\ner mask-0.075 V\nY2Tx Lower bound of in -\nner mask0.075 V\nY3Tx see figure 0.15 V\nY4Tx see figure 0.325 V\nY5Tx Inner mask vertical\nmidpoint0.5625 V\nY6Tx see figure 0.8 V\nY7Tx see figure 0.975 V\nY8Tx see figure 1.04 V\nY9Tx Upper Bound of Out -\ner mask1.2 V\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 99The received signal is composed of a waveform compliant to the Tx mask plus the maximum value of vNoiseActive\nplus vIRDropGNDC where the vIRDropGNDC value transitions between the minimum and the maximum values as\nallowed in this spec.\nThe vertical dimension of the Rx inner mask for sinking power is derived by reducing the vertical dimension of the\nTx inner mask by vNoiseActive max and vIRDropGNDC max for account for both cable noise coupling and signal\nDC offset. The received signal is composed of a waveform compliant to the Tx mask plus the maximum value of\nvNoiseActive plus vIRDropGNDC where the vIRDropGNDC value transitions between the minimum and the\nmaximum values as allowed in this spec.\nThe center line of the Rx inner mask, Y3Rx , is at half of the nominal vSwing for power neutral, and is shifted up by\nhalf of vIRDropGNDC max for sourcing power and is shifted down by half of vIRDropGNDC max for sinking power.\nThe receiver sensitivity Shall be set such that the receiver does not treat noise on an undriven signal path as an\nincoming signal. Signal amplitudes below vNoiseIdle max Shall be treated as noise when BMC is Idle.\nFigure 5.17 BMC Rx 'ONE' Mask when Sourcing Power\nY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nPage 100 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 5.18 BMC Rx 'ZERO' Mask when Sourcing Power\nFigure 5.19 BMC Rx 'ONE' Mask when Power neutralY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 101Figure 5.20 BMC Rx 'ZERO' Mask when Power neutral\nFigure 5.21 BMC Rx 'ONE' Mask when Sinking PowerY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nY5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nPage 102 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 5.22 BMC Rx 'ZERO' Mask when Sinking Power\nTable 5.16 BMC Rx Mask Definition\nName Description Value Units\nX1Rx Left Edge of Mask 0.07 UI\nX2Rx Top Edge of Mask 0.15 UI\nX3Rx See figure 0.35 UI\nX4Rx See figure 0.43 UI\nX5Rx See figure 0.57 UI\nX6Rx See figure 0.65 UI\nX7Rx See figure 0.85 UI\nX8Rx See figure 0.93 UI\nY1Rx Lower bound of Outer Mask -0.3325 V\nY2RxLower Bound of Inner MaskY3Rx – 0.205 when sourcing power1 or sinking power1.\nY3Rx – 0.33 when power neutral1.V\nY3Rx\nCenter line of Inner Mask0.6875 Sourcing Power1."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5625",
    "title": "Power Neutral1.",
    "full_path": "0.5625 Power Neutral1.",
    "page": 102,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.4375",
    "title": "Sinking Power1.V",
    "full_path": "0.4375 Sinking Power1.V",
    "page": 102,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": "Y4RxUpper bound of Inner maskY3Rx + 0.205 when sourcing power1 or sinking power1.\nY3Rx + 0.33 when power neutral1.V\nY5Rx Upper bound of the Outer mask 1.5325 V\n1) The position of the center line of the Inner Mask is dependent on whether the receiver is Sourcing or Sinking power\nor is Power Neutral (see earlier in this section).Y5\nY4\nY3\nY2\nY1\nX1 X2 X3 X4 X5 X6 X7 X8 0.5UI1UI\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1035.8.3 Transmitter Load Model\nThe transmitter load model Shall be equivalent to the circuit outlined in Figure 5.23, \"Transmitter Load Model for\nBMC Tx from a Source\" for a Source and Figure 5.24, \"Transmitter Load Model for BMC Tx from a Sink\" for a Sink . It\nis formed by the concatenation of a cable load model and a receiver load model. See [USB Type-C 2.4] for details of\nthe Rp and Rd resistors.\nNote: The parameters zCable_CC, tCableDelay_CC and cCablePlug_CC are defined in [USB Type-C 2.4] .\nFigure 5.23 Transmitter Load Model for BMC Tx from a Source\nFigure 5.24 Transmitter Load Model for BMC Tx from a Sink\nThe transmitter system components rOutput and cShunt are illustrated for Informative purposes, and do not form\npart of the transmitter load model. See Section 5.8.5, \"BMC Transmitter Specifications\" for a description of the\ntransmitter system design.\nThe value of the modeled cable inductance, La, (in nH) Shall be calculated from the following formula:\nLa= tCableDelay_CCmax* zCable_CCmin\ntCableDelay_CC is the modeled signal propagation delay through the cable, and zCable_CC is the modeled cable\nimpedance.\nThe modeled cable inductance is 640nH for a cable with zCable_CCmin = 32Ω and tCableDelay_CCmax = 20ns.\nThe value of the modeled cable capacitance, Ca, (in pF) Shall be calculated from the following formula:\nCa=tCableDelay_CCmax/zCable_CCmin\nThe modeled cable capacitance is Ca = 625pF for a cable with zCable_CCmin = 32Ω and tCableDelay_CCmax = 20ns.\nTherefore, Ca/2 = 312.5pF.\ncCablePlug_CC models the capacitance of the plug at each end of the cable. cReceiver models the capacitance of the\nreceiver. The maximum values Shall be used in each case.cCablePlug_CC\ncShuntConnector\nca\n2La\ncReceiverReceiver\nLoad ModelTransmitter Load\nModel Output\nCable ModelcCablePlug_CCca\n2rOutputRp\nRd\ncCablePlug_CC\ncShuntConnector\nca\n2La\ncReceiverReceiver\nLoad ModelTransmitter Load\nModel Output\nCable ModelcCablePlug_CCca\n2rOutputRp\nRd\nPage 104 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Note: The transmitter load model assumes that there are no other return currents on the ground path.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1055.8.4 BMC Common specifications\nThis section defines the common receiver and transmitter requirements."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.4.1",
    "title": "BMC Common Parameters",
    "full_path": "5.8.4.1 BMC Common Parameters",
    "page": 105,
    "level": 4,
    "parent_id": "5.8.4",
    "tags": [],
    "content": "The electrical requirements specified in Table 5.17, \"BMC Common Normative Requirements\" Shall apply to both\nthe transmitter and receiver.\nTable 5.17 BMC Common Normative Requirements\nName Description Min Nom Max Units Comment\nfBitRate Bit rate 270 300 330 Kbps\ntUnitInterval Unit Interval1 3.03 3.70 µs 1/ fBitRate\n1) Denotes the time to transmit an unencoded data bit, not the shortest high or low times on the wire after encoding\nwith BMC . A single data bit cell has duration of 1UI , but a data bit cell with value 1 will contain a centrally placed"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "01",
    "title": "or 10 transition in addition to the transition at the start of the cell.",
    "full_path": "01 or 10 transition in addition to the transition at the start of the cell.",
    "page": 105,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 106 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.5 BMC Transmitter Specifications\nThe transmitter Shall meet the specifications defined in Table 5.18, \"BMC Transmitter Normative Requirements\" .\nTable 5.18 BMC Transmitter Normative Requirements\nName Description Min Nom Max Units Comment\npBitRate Maximum difference between the\nbit-rate during the part of the\nPacket following the Preamble\nand the reference bit-rate.0.25 %The reference bit rate is the\naverage bit rate of the last 32 bits\nof the Preamble .\nrFRSwapTx Fast Role Swap Request transmit\ndriver resistance (excluding cable\nresistance)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "ΩMaximum driver resistance of a",
    "full_path": "5 ΩMaximum driver resistance of a",
    "page": 106,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Fast Role Swap Request\ntransmitter. Assumes a worst case\ncable resistance of 15Ω as defined\nin [USB Type-C 2.4].\nNote: Based on this value the\nmaximum combined\ndriver and cable resistance\nof a Fast Role Swap Request\ntransmitter is 20Ω.\ntEndDriveBMC Time to cease driving the line\nafter the end of the last bit of the\nFrame .23 µsMin value is limited by\ntHoldLowBMC .\ntFall Fall Time"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "300",
    "title": "ns10% and 90% amplitude points,",
    "full_path": "300 ns10% and 90% amplitude points,",
    "page": 106,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "minimum is under an unloaded\ncondition.\ntHoldLowBMC Time to cease driving the line\nafter the final high-to-low\ntransition.1 µsMax value is limited by\ntEndDriveBMC .\ntInterFrameGap Time from the end of last bit of a\nFrame until the start of the first\nbit of the next Preamble .25 µs\ntFRSwapTx Fast Role Swap Request transmit\nduration60 120 µsFast Role Swap Request is\nindicated from the Initial Source\nto the Initial Sink by driving CC\nlow for this time.\ntRise Rise time"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "300",
    "title": "ns10% and 90% amplitude points,",
    "full_path": "300 ns10% and 90% amplitude points,",
    "page": 106,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "minimum is under an unloaded\ncondition.\ntStartDrive Time before the start of the first\nbit of the Preamble when the\ntransmitter Shall start driving\nthe line.-1 1 µs\nvSwing Voltage Swing"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.05",
    "title": "1.125 1.2 VApplies to both no load condition",
    "full_path": "1.05 1.125 1.2 VApplies to both no load condition",
    "page": 106,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "and under the load condition\nspecified in Section 5.8.3,\n\"Transmitter Load Model\" .\nzDriver Transmitter output impedance"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "33",
    "title": "75 ΩSource output impedance at the",
    "full_path": "33 75 ΩSource output impedance at the",
    "page": 106,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Nyquist frequency of [USB 2.0]\nlow speed (750 kHz) while the\nSource is driving the CC line.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1075.8.5.1 Capacitance when not transmitting\ncReceiver is the capacitance that a DFP or UFP Shall present on the CC line when the DFP or UFP 's receiver is not\ntransmitting on the line. The transmitter May have more capacitance than cReceiver while driving the CC line, but\nShall meet the waveform mask requirements. Once transmission is complete, the transmitter Shall disengage\ncapacitance in excess of cReceiver from the CC wire within tInterFrameGap ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.5.2",
    "title": "Source Output Impedance",
    "full_path": "5.8.5.2 Source Output Impedance",
    "page": 107,
    "level": 4,
    "parent_id": "5.8.5",
    "tags": [],
    "content": "Source output impedance zDriver is determined by the driver resistance and the shunt capacitance of the Source\nand is hence a frequency dependent term. zDriver impacts the noise ingression in the cable. It is specified such that\nthe noise at the Receiver is bounded.\nzDriver is defined by the following equation:\nzDriver =rOutput/(1+s*rOutput*cShunt)\nFigure 5.25 Transmitter diagram illustrating zDriver\ncShunt Shall Not cause a violation of cReceiver when not transmitting."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.5.3",
    "title": "Bit Rate Drift",
    "full_path": "5.8.5.3 Bit Rate Drift",
    "page": 107,
    "level": 4,
    "parent_id": "5.8.5",
    "tags": [],
    "content": "Limits on the drift in fBitRate are set to help low-complexity receiver implementations.\nfBitRate is the reciprocal of the average bit duration from the previous 32 bits at a given portion of the Packet . The\nchange in fBitRate during a Packet Shall be less than pBitRate . The reference bit rate (refBitRate) is the average\nfBitRate over the last 32 bits of the Preamble . fBitRate throughout the Packet , including the EOP , Shall be within\npBitRate of refBitRate. pBitRate is expressed as a percentage:\npBitRate = | fBitRate - refBitRate | / refBitRate x 100%\nThe transmitter Shall have the same pBitRate for all Packet types. The BIST Carrier Mode and Bit Stream signals\nare continuous signals without a Payload . When checking pBitRate any set of 1044 bits (20 bit SOP followed by"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1024",
    "title": "PRBS bits) within a continuous signal May be considered as the part of the Packet following the Preamble and",
    "full_path": "1024 PRBS bits) within a continuous signal May be considered as the part of the Packet following the Preamble and",
    "page": 107,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the 32 preceding bits considered to be the last 32 bits of the Preamble used to compute refBitRate.rOutput\ncShuntzDriver\nPage 108 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.5.4 Inter-Frame Gap\nFigure 5.26, \"Inter-Frame Gap Timings\" illustrates the inter- Frame gap timings.\nFigure 5.26 Inter-Frame Gap Timings\nThe transmitter Shall drive the bus for no longer than tEndDriveBMC after transmitting the final bit of the Frame .\nBefore starting to transmit the next Frame 's Preamble the transmitter of the next Frame Shall ensure that it waits\nfor tInterFrameGap after either:\n Transmitting the previous Frame , for example sending the next Message in an AMS immediately after\nhaving sent a GoodCRC Message , or\n Receiving the previous Frame , for example when responding to a received Message with a GoodCRC\nMessage , or\n Observing an Idle condition on CC (see Section 5.7, \"Collision Avoidance\" ). In this case the Port is waiting\nto initiate an AMS observes Idle (see Section 5.8.6.1, \"Definition of Idle\" ) and then waits tInterFrameGap\nbefore transmitting the Frame . See also Section 5.7, \"Collision Avoidance\" for details on when an AMS can\nbe initiated.\nNote: The transmitter is also required to verify a bus Idle condition immediately prior to starting transmission\nof the next Frame (see Section 5.8.6.1, \"Definition of Idle\" ).\nThe transmitter of the next Frame May vary the start of the Preamble by tStartDrive (see Section 5.8.1, \"Encoding\nand signaling\" ).\nSee also Section 5.8.1, \"Encoding and signaling\" for figures detailing the timings relating to transmitting, receiving,\nand observing Idle in relating to Frame s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.5.5",
    "title": "Shorting of Transmitter Output",
    "full_path": "5.8.5.5 Shorting of Transmitter Output",
    "page": 108,
    "level": 4,
    "parent_id": "5.8.5",
    "tags": [],
    "content": "A Transmitter in a Port or Cable Plug Shall tolerate having its output be shorted to ground for tFRSwapTx max.\nThis is due to the potential for Fast Role Swap to be signaled while the Transmitter is in the process of transmitting\n(see Section 5.8.5.6, \"Fast Role Swap Transmission\" ).End of Frame PreambleBus driven after end\nof FrameBus driven before\nPreamble\ntEndDriveBMC tStartDrivetInterFrameGap\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1095.8.5.6 Fast Role Swap Transmission\nThe Fast Role Swap process is intended for use by a PDUSB Hub that presently has an external supply and is\nproviding power both through its downstream Port s to USB Device s and upstream to a USB Host such as a laptop.\nOn removal of the external wall supply Fast Role Swap enables a VBUS supply to be maintained by allowing the USB\nHost to apply vSafe5V when it sees VBUS droop below vSafe5V after having detected Fast Role Swap Signaling . The\nFast Role Swap AMS is then used to correctly assign Source /Sink Power Role s and configure the Rp/Rd resistors (see\nSection 8.3.2.8, \"Fast Role Swap\" ).\nThe Initial Source Shall signal a Fast Role Swap Request by driving CC to ground with a resistance of less than\nrFRSwapTx for tFRSwapTx . The Initial Source Shall only send a Fast Role Swap Request when it has an Explicit\nContract . The Initial Source May send a Fast Role Swap Request even if it has not yet had its Sink Capabilities queried\nby the Initial Sink . On transmission of the Fast Role Swap Request any pending Message s Shall be Discarded (see\nSection 6.12.2.2.1, \"Common Protocol Layer Message Transmission State Diagram\" ).\nThe Fast Role Swap Signaling May override any active transmissions.\nSince the Initial Sink 's response to the Fast Role Swap signal is to send an FR_Swap Message , the Initial Source Shall\nensure Rp is set to SinkTxOK once the Fast Role Swap Signaling is complete.\nPage 110 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.6 BMC Receiver Specifications\nThe receiver Shall meet the specifications defined in Table 5.19, \"BMC Receiver Normative Requirements\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.8.6.1",
    "title": "Definition of Idle",
    "full_path": "5.8.6.1 Definition of Idle",
    "page": 110,
    "level": 4,
    "parent_id": "5.8.6",
    "tags": [],
    "content": "BMC Collision Avoidance is performed by the detection of signal transitions at the receiver. Detection is active when\nnTransitionCount transitions occur at the receiver within a time window of tTransitionWindow . After waiting\ntTransitionWindow without detecting nTransitionCount transitions the bus Shall be declared Idle.\nRefer to Section 5.8.5.4, \"Inter-Frame Gap\" for details of when transmissions May start.Table 5.19 BMC Receiver Normative Requirements\nName Description Min Nom Max Units Comment\ncReceiver\nCC receiver capacitance 200 600 pFThe DFP or UFP system Shall have ca -\npacitance within this range when not\ntransmitting on the line.\nnBER Bit error rate, S/N = 25 dB 10-6\nnTransitionCountTransitions for signal detect 3Number of transitions to be detected to\ndeclare bus non- Idle.\ntFRSwapRxFast Role Swap Request de-\ntection time30 50 µsA Fast Role Swap Request results in the\nreceiver detecting a signal low for at\nleast this amount of time.\ntRxFilter Rx bandwidth limiting filter\n(digital or analog)100 nsTime constant of a single pole filter to\nlimit broad-band noise ingression1.\ntTransitionWindow Time window for detecting\nnon- Idle12 20 µs\nvFRSwapCableTxFast Role Swap Request volt -\nage detection threshold490 520 550 mVThe Fast Role Swap Request must be be -\nlow this voltage threshold to be detect -\ned.\nvIRDropGNDC Cable Ground IR Drop 250 mV As specified in [USB Type-C 2.4].\nvNoiseActive\nNoise amplitude when BMC\nis active.165 mVPeak-to-peak noise from VBUS, [USB\n2.0] and SBU lines after the Rx band -\nwidth limiting filter with the time con -\nstant tRxFilter has been applied.\nvNoiseIdle\nNoise amplitude when BMC\nis Idle.300 mVPeak-to-peak noise from VBUS, [USB\n2.0] and SBU lines after the Rx band -\nwidth limiting filter with the time con -\nstant tRxFilter has been applied.\nzBmcRx Receiver Input Impedance 1 MΩ\n1) Broad-band noise ingression is due to coupling in the cable interconnect.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1115.8.6.2 Multi-Drop\nThe BMC Signaling Scheme is suitable for use in Multi-Drop configurations containing one or two BMC Multi-Drop\ntransceivers connected to the CC wire, where one or both ends of a cable contains a Multi-Drop transceiver. In this\nspecification the location of the Multi-Drop transceiver is referred to as the Cable Plug .\nFigure 5.27, \"Example Multi-Drop Configuration showing two DRPs\" below illustrates a typical Multi-Drop\nconfiguration with two DRP s.\nFigure 5.27 Example Multi-Drop Configuration showing two DRPs\nThe Multi-Drop transceiver Shall obey all the electrical characteristics specified in this section except for those\nrelating to capacitance. The maximum capacitance allowed for the Multi-Drop node when not driving the line is\ncCablePlug_CC defined in [USB Type-C 2.4] . There are no constraints as to the distance of the Multi-Drop\ntransceiver from the end of the plug. The Multi-Drop transceiver(s) May be located anywhere along the cable\nincluding the plugs. The Multi-Drop transceiver suffers less from ground offset compared to the transceivers in the\nUSB Host or USB Device and contributes no significant reflections.\nIt is possible to have a configuration at Attach where one Port can be a VCONN Source and the other Port is not able\nto be a VCONN Source , such that there is no switch in the second Port . An example of a DFP with a switch Attached\nto a UFP without a switch is outlined in Figure 5.28, \"Example Multi-Drop Configuration showing a DFP and UFP\" .\nThe capacitance on the CC line for a Port not able to be a VCONN Source Shall still be within cReceiver except when\ntransmitting.\nFigure 5.28 Example Multi-Drop Configuration showing a DFP and UFPcReceiverSwitch\nVCONN\ncCablePlug cCablePlugConnector ConnectorCableDRP DRP\ncReceiverSwitch\nVCONN\ncReceiverSwitch\nVCONN\ncCablePlug cCablePlugConnector ConnectorCableDFP UFP\ncReceiver\nPage 112 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-105.8.6.3 Fast Role Swap Detection\nAn Initial Sink prepares for a Fast Role Swap by ensuring that once it has detected the Fast Role Swap Request its\npower supply is ready to respond by applying vSafe5V according to the timing detailed in Section 7.1.13, \"Fast Role\nSwap\" . The Initial Sink Shall only respond to the Fast Role Swap Request when all the following conditions have\nbeen met:\n An Explicit Contract has been established and the Sink Capabilities of the Initial Source have been\nreceived by, and at the request of, the Initial Sink .\n The Sink_Capabilities Message received from the Initial Source has at least one of the Fast Role Swap\nbits set in its 5V Fixed Supply PDO.\n The Initial Sink is able and willing to source the current requested by the Initial Source in the Fast Role\nSwap bits of its Sink_Capabilities Message .\nOn detection of the Fast Role Swap Request any pending Message s Shall be Discarded (see Section 6.12.2.2.1,\n\"Common Protocol Layer Message Transmission State Diagram\" ).\nWhen the Initial Sink is prepared for a Fast Role Swap and the bus is idle the CC voltage averaged over tFRSwapRx\nmin remains above 0.7V (see [USB Type-C 2.4] ) since the Source Rp is either 1.5A or 3.0A. However, vNoiseIdle\nnoise May cause the CC line voltage to reach 0.7V- vNoiseIdle /2 for short durations. When the Initial Sink is\nprepared for a Fast Role Swap while it is transmitting and the Initial Source is sending a Fast Role Swap Request , the\ntransmission will be attenuated such that the peak CC voltage will not exceed vFRSwapCableTx min. Therefore,\nwhen the Initial Sink is prepared for a Fast Role Swap , it Shall Not detect a Fast Role Swap Request when the CC\nvoltage, averaged over tFRSwapRx min, is above 0.7V. When the Initial Sink is prepared for a Fast Role Swap , it\nShall detect a CC voltage lower than vFRSwapCableTx min for tFRSwapRx as a Fast Role Swap Request .\nNote: The Initial Sink is not required to average the CC voltage to meet these requirements.\nThe Initial Sink Shall initiate the Fast Role Swap AMS within tFRSwapInit of detecting the Fast Role Swap Request\nin order to assign the Rp/Rd resistors to the correct Port s and to re-synchronize the state machines (see Section\n6.3.19, \"FR_Swap Message\" ).\nThe Initial Sink Shall become the New Source and Shall start supplying vSafe5V at USB Type-C current (see [USB\nType-C 2.4] ) no later than tSrcFRSwap after VBUS has dropped below vSafe5V . An Initial Sink Shall disable its VBUS\nDisconnect Threshold detection circuitry while Fast Role Swap detection is active.\nNote: While power is transitioning the VCONN Source to the Cable Plug (s) cannot be guaranteed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1135.9 Built in Self-Test (BIST)\nThe following sections define BIST functionality which Shall be supported."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.9.1",
    "title": "BIST Carrier Mode",
    "full_path": "5.9.1 BIST Carrier Mode",
    "page": 113,
    "level": 3,
    "parent_id": "5.9",
    "tags": [],
    "content": "In BIST Carrier Mode , the PHY Layer Shall send out a BMC encoded continuous string of alternating \"1\"s and \"0\"s.\nThis enables the measurement of power supply noise and frequency drift.\nNote: This transmission is a purely a sequence of alternating bits and Shall Not be formatted as a Packet .\nSee also Section 6.4.3, \"BIST Message\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5.9.2",
    "title": "BIST Test Data Mode",
    "full_path": "5.9.2 BIST Test Data Mode",
    "page": 113,
    "level": 3,
    "parent_id": "5.9",
    "tags": [],
    "content": "A BIST Test Data Message is used by the Tester to send various Tester generated Test Pattern s to the UUT in order\nto test the UUT 's receiver. See also Section 6.4.3, \"BIST Message\" .\nFigure 5.29, \"Test Frame\" shows the Test Frame which Shall be sent by the Tester to the UUT . The BIST Message ,\nwith a BIST Test Data BIST Data Object consists of a Preamble , followed by SOP* , followed by the Message Header\nwith a data length of 7 Data Object s, followed a BIST Test Data BIST Data Object , followed by 6 Data Object s\ncontaining test data, followed by the CRC and then an EOP .\nFigure 5.29 Test Frame\nPreamble(training for receiver)\nSOP* (Start\nOf Packet) Test Data 192 bits ...\nLEGEND:\nPreamble, not encoded\nwith 4b5b\nProvided by the Physical\nlayer, encoded with 4b5bHeader\nData Objects = 7BIST Test Data\nBDO\nProvided by the Protocol\nlayer, encoded with 4b5b\nCRC\nEOP (End Of\nPacket)...\nPage 114 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106 Protocol Layer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.1",
    "title": "Overview",
    "full_path": "6.1 Overview",
    "page": 114,
    "level": 2,
    "parent_id": "6",
    "tags": [],
    "content": "This chapter describes the requirements of the USB Power Delivery Specification's Protocol Layer including:\n Details of how Message s are constructed and used.\n Use of timers and timeout values.\n Use of Message and retry counters.\n Reset operation.\n Error handling.\n State behavior.\nRefer to Section 2.6, \"Architectural Overview\" for an overview of the theory of operation of USB Power Delivery.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1156.2 Messages\nThis specification defines three types of Message s:\n Control Message s that are short and used to manage the Message flow between Port Partner s or to\nexchange Message s that require no additional data. Control Message s are 16 bits in length.\n Data Message s that are used to exchange information between a pair of Port Partner s. Data Message s\nrange from 48 to 240 bits in length.\n Some examples of Data Message s are:\n Those used to expose Capabilities and Negotiate power.\n Those used for the BIST .\n Those that are Vendor Defined Message s.\n Extended Message s that are used to exchange information between a pair of Port Partner s. Extended\nMessage s are up to MaxExtendedMsgLen bytes.\n Some examples of Extended Message s are:\n Those used for Source and Battery information.\n Those used for Security.\n Those used for Firmware Update.\n Those that are Vendor Defined Extended Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1",
    "title": "Message Construction",
    "full_path": "6.2.1 Message Construction",
    "page": 115,
    "level": 3,
    "parent_id": "6.2",
    "tags": [],
    "content": "All Message s Shall be composed of a Message Header and a variable length (including zero) data portion. A Message\neither originates in the Protocol Layer and is passed to the PHY Layer , or it is received by the PHY Layer and is\npassed to the Protocol Layer .\nFigure 6.1, \"USB Power Delivery Packet Format for a Control Message\" illustrates a Control Message as part of a\nPacket showing the parts are provided by the Protocol Layer and PHY Layer .\nFigure 6.1 USB Power Delivery Packet Format for a Control Message\nFigure 6.2, \"USB Power Delivery Packet Format including Data Message Payload\" illustrates a Data Message as part\nof a Packet showing the parts are provided by the Protocol Layer and PHY Layer .PreambleSOP* (Start\nOf Packet)CRCEOP (End Of\nPacket)Message Header\n(16 bit)\nLegend:\nPHY Layer Protocol Layer\nPage 116 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.2 USB Power Delivery Packet Format including Data Message Payload\nFigure 6.3, \"USB Power Delivery Packet Format including an Extended Message Header and Payload\" illustrates an\nExtended Message as part of a Packet showing the parts are provided by the Protocol Layer and PHY Layer .\nFigure 6.3 USB Power Delivery Packet Format including an Extended Message Header and Payload"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1",
    "title": "Message Header",
    "full_path": "6.2.1.1 Message Header",
    "page": 116,
    "level": 4,
    "parent_id": "6.2.1",
    "tags": [],
    "content": "Every Message Shall start with a Message Header as shown in:\n Figure 6.1, \"USB Power Delivery Packet Format for a Control Message\"\n Figure 6.2, \"USB Power Delivery Packet Format including Data Message Payload\"\n Figure 6.3, \"USB Power Delivery Packet Format including an Extended Message Header and Payload\"\nand as defined in Table 6.1, \"Message Header\" . The Message Header contains basic information about the Message\nand the PD Port Capabilities .\nThe Message Header May be used standalone as a Control Message when the Number of Data Objects field is zero\nor as the first part of a Data Message when the Number of Data Objects field is non-zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.1",
    "title": "Extended",
    "full_path": "6.2.1.1.1 Extended",
    "page": 116,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 1-bit Extended field Shall be set to zero to indicate a Control Message or Data Message and set to one to indicate\nan Extended Message .Table 6.1 Message Header\nBit(s) Start of Packet Field Name Reference"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "SOP* Extended Section 6.2.1.1.1",
    "full_path": "15 SOP* Extended Section 6.2.1.1.1",
    "page": 116,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 SOP* Number of Data Objects Section 6.2.1.1.2\n11…9 SOP* MessageID Section 6.2.1.1.3\n8SOP only Port Power Role Section 6.2.1.1.4\nSOP’ /SOP’’ Cable Plug Section 6.2.1.1.7\n7…6 SOP* Specification Revision Section 6.2.1.1.5\n5SOP only Port Data Role Section 6.2.1.1.6\nSOP’ /SOP’’ Reserved Section 1.4.2\n4…0 SOP* Message Type Section 6.2.1.1.8PreambleSOP* (Start\nOf Packet)CRCEOP (End Of\nPacket)Message Header\n(16 bit)0..7 Data Object(s)\nLegend:\nPHY Layer Protocol Layer\nPreambleSOP* (Start\nOf Packet)CRCEOP (End Of\nPacket)Message Header\n(16 bit)Data (0..260 bytes)\nLegend:\nPHY Layer Protocol LayerExtended Message Header\n(16 bit)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 117The Extended field Shall apply to all SOP* Packet types."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.2",
    "title": "Number of Data Objects",
    "full_path": "6.2.1.1.2 Number of Data Objects",
    "page": 117,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "When the Extended field is set to zero the 3-bit Number of Data Objects field Shall indicate the number of 32-bit\nData Object s that follow the Message Header . When this field is zero the Message is a Control Message and when it\nis non-zero, the Message is a Data Message .\nThe Number of Data Objects field Shall apply to all SOP* Packet types.\nWhen both the Extended bit and Chunked bit are set to one, the Number of Data Objects field Shall indicate the\nnumber of Data Object s in the Message padded to the 4-byte boundary including the Extended Message Header as\npart of the first Data Object .\nWhen the Extended bit is set to one and Chunked bit is set to zero, the Number of Data Objects field Shall be\nReserved .\nNote: In this case, the Message length is determined solely by the Data Size field in the Extended Message\nHeader ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.3",
    "title": "MessageID",
    "full_path": "6.2.1.1.3 MessageID",
    "page": 117,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 3-bit MessageID field is the value generated by a rolling counter maintained by the originator of the Message .\nThe MessageIDCounter Shall be initialized to zero at power-on as a result of a Soft Reset , or a Hard Reset . The\nMessageIDCounter Shall be incremented when a Message is successfully received as indicated by receipt of a\nGoodCRC Message .\nNote: The usage of MessageID during testing with BIST Message s is defined in [USBPDCompliance].\nThe MessageID field Shall apply to all SOP* Packet types."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.4",
    "title": "Port Power Role",
    "full_path": "6.2.1.1.4 Port Power Role",
    "page": 117,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 1-bit Port Power Role field Shall indicate the Port 's present Power Role :\n 0b Sink\n 1b Source\nMessage s, such as Get_Sink_Cap_Extended , that are only ever sent by a Source , Shall always have the Port Power\nRole field set to Source . Similarly, Message s such as the Request Message that are only ever sent by a Sink Shall\nalways have the Port Power Role field set to Sink .\nDuring the Power Role Swap AMS , for the Initial Source Port , the Port Power Role field Shall be set to Sink in the\nPS_RDY Message indicating that the Initial Source 's power supply is turned off (see Table 8.60, \"Steps for a\nSuccessful Source Initiated Power Role Swap Sequence\" and Table 8.63, \"Steps for a Successful Sink Initiated Power\nRole Swap Sequence\" ).\nDuring the Power Role Swap AMS , for the Initial Sink , the Port Power Role field Shall be set to Source for Message s\ninitiated by the Policy Engine after receiving the PS_RDY Message from the Initial Source (see Table 8.60, \"Steps for\na Successful Source Initiated Power Role Swap Sequence\" and Table 8.63, \"Steps for a Successful Sink Initiated Power\nRole Swap Sequence\" ).\nDuring the Fast Role Swap AMS , for the Initial Source Port , the Port Power Role field Shall be set to Sink in the\nPS_RDY Message indicating that VBUS is not being driven by the Initial Source and is within vSafe5V (see Figure 8.39,\n\"Successful Fast Role Swap Sequence\" ).\nDuring the Fast Role Swap AMS , for the Initial Sink Port , the Port Power Role field Shall be set to Source for\nMessage s initiated by the Policy Engine after receiving the PS_RDY Message from the Initial Source (see Figure 8.39,\n\"Successful Fast Role Swap Sequence\" ).\nNote: The GoodCRC Message sent by the Initial Sink in response to the PS_RDY Message from the Initial Source\nwill have its Port Power Role field set to Sink since this is initiated by the Protocol Layer . Subsequent\nPage 118 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Message s initiated by the Policy Engine , such as the PS_RDY Message sent to indicate that VBUS is ready,\nwill have the Port Power Role field set to Source .\nThe Port Power Role field of a received Message Shall Not be verified by the receiver and Shall Not lead to Soft\nReset , Hard Reset or Error Recovery if it is incorrect.\nThe Port Power Role field Shall only be defined for SOP Packets."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.5",
    "title": "Specification Revision",
    "full_path": "6.2.1.1.5 Specification Revision",
    "page": 118,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The Specification Revision field Shall be one of the following values (except 11b):\n 00b - Revision 1.0 (Deprecated )\n 01b - Revision 2.0\n 10b - Revision 3.x\n 11b - Reserved , Shall Not be used.\nTo ensure interoperability with existing PDUSB products, PDUSB products Shall support every PD Specification\nRevision starting from [USB 2.0] for SOP* ; the only exception to this is a VPD which Shall Ignore Message s sent with\nPD Specification Revision 2.0 and earlier.\nAfter a physical or logical ( USB Type-C® Error Recovery ) Attach , a Port discovers the common Specification Revision\nlevel between itself and its Port Partner and/or the Cable Plug (s), and uses this Specification Revision level until a\nDetach , Hard Reset or Error Recovery happens.\nAfter detection of the Specification Revision to be used, all PD communications Shall comply completely with the\nrelevant Revision of the PD specification.\nThe 2-bit Specification Revision field of a GoodCRC Message does not carry any meaning and Shall be considered\nas don't care by the recipient of the Message . The sender of a GoodCRC Message Shall set the Specification Revision\nfield to 01b ( Revision 2.0 ) when responding to a Message that contains 01b in the Specification Revision field of\nthe Message Header . The sender of a GoodCRC Message May set the Specification Revision field to 01b or 10b when\nresponding to a Message that contains 10b ( Revision 3.x ) in the Specification Revision field of the Message Header .\nThe Specification Revision field Shall apply to all SOP* Packet types.\nAn Attach event or a Hard Reset Shall cause the detection of the applicable Specification Revision to be performed\nfor both Port s and Cable Plug s according to the rules stated below:\nWhen the Source Port first communicates with the Sink Port the Specification Revision field Shall be used as\ndescribed by the following steps:\n1) The Source Port sends a Source_Capabilities Message to the Sink Port setting the Specification\nRevision field to the highest Revision of the Power Delivery Specification the Source Port supports.\n2) The Sink Port responds with a Request Message setting the Specification Revision field to the highest\nRevision of the Power Delivery Specification the Sink Port supports that is equal to or lower than the\nSpecification Revision received from the Source Port .\n3) The Source and Sink Port s Shall use the Specification Revision in the Request Message from the Sink in\nstep 2 in all subsequent communications until a Detach , Hard Reset , or Error Recovery happens.\nPrior to entering the First Explicit Contract , the VCONN Source Shall use the following steps to establish a\nSpecification Revision level:\n1) The V CONN Source sends a Discover Identity REQ to the Cable Plug (SOP’ ) setting the Specification\nRevision field in the Message to the highest Revision of the Power Delivery Specification the VCONN\nSource supports. After a VCONN Swap the required Soft_Reset / Accept Message exchange is used for the\nsame purpose (see Section 6.3.13, \"Soft Reset Message\" ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1192) The Cable Plug responds with a Discover Identity ACK setting the Specification Revision field in the\nMessage to the highest Revision of the Power Delivery Specification the VCONN Source supports that is\nequal to or lower than the Specification Revision it received from the Source Port .\n3) The Cable Plug and VCONN Source Shall communicate using the lower of the two revisions until an\nExplicit Contract has been established.\n4) Table 6.2, \"Revision Interoperability during an Explicit Contract\" shows the Specification Revision that\nShall be used between the Port Partner s and the Cable Plug s when the Specification Revision has been\ndiscovered and an Explicit Contract is in place.\nNotes:\n A VCONN Source that does not communicate with the Cable Plug (s) May skip the above procedure.\n When a Cable Plug does not respond to a Revision 3.x Discover Identity REQ with a Discover Identity\nACK or BUSY the VCONN Source May repeat steps 1-4 using a Revision 2.0 Discover Identity REQ in step"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "before establishing that there is no Cable Plug to communicate with.",
    "full_path": "1 before establishing that there is no Cable Plug to communicate with.",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "A VCONN Source that supports Revision 3.x of the Power Delivery Specification May communicate with a Cable Plug\nalso supporting Revision 3.x using Revision 3.x Compliant Communications regardless of the Specification Revision\nof its Port Partner while no Explicit Contract exists. After an Explicit Contract has been established the Port Partner s\nand Cable Plug (s) Shall use Table 6.2, \"Revision Interoperability during an Explicit Contract\" to determine the\nRevision to be used.\nAll data in all Message s Shall be consistent with the Specification Revision field in the Message Header for that\nparticular Message .\nA Cable Plug Shall Not save the state of the agreed Specification Revision . A Cable Plug Shall respond with the\nhighest Specification Revision it supports that is equal to or lower than the Specification Revision contained in the\nMessage received from the VCONN Source .\nCable Plug s Shall operate using the same Specification Revision for both SOP’ and SOP’’ . Cable assemblies with two\nCable Plug s Shall operate using the same Specification Revision for both Cable Plug s.\nSee Table 6.2, \"Revision Interoperability during an Explicit Contract\" for details of how various Revisions Shall\ninter-operate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.6",
    "title": "Port Data Role",
    "full_path": "6.2.1.1.6 Port Data Role",
    "page": 119,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 1-bit Port Data Role field Shall indicate the Port 's present Data Role :\n 0b UFP\n 1b DFPTable 6.2 Revision Interoperability during an Explicit Contract\nPort 1 Revision Cable Plug Revision Port 2 Revision Port to Port\nOperating\nRevisionPort to Cable\nPlug Operating\nRevision"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "2 2 2 2",
    "full_path": "2 2 2 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "2 3 2 2",
    "full_path": "2 2 3 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "3 2 2 2",
    "full_path": "2 3 2 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "3 3 2 2",
    "full_path": "2 3 3 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "2 2 2 2",
    "full_path": "3 2 2 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "2 3 3 2",
    "full_path": "3 2 3 3 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "3 2 2 2",
    "full_path": "3 3 2 2 2",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "3 3 3 3",
    "full_path": "3 3 3 3 3",
    "page": 119,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 120 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Port Data Role field Shall only be defined for SOP Packets. For all other SOP* Packet s the Port Data Role field\nis Reserved and Shall be set to zero.\nIf a USB Type-C Port receives a Message with the Port Data Role field set to the same Data Role as its current Data\nRole , except for the GoodCRC Message , USB Type-C Error Recovery actions as defined in [USB Type-C 2.4] Shall be\nperformed.\nFor a USB Type-C Port the Port Data Role field Shall be set to the default value at Attachment after a Hard Reset : 0b\nfor a Port with Rd asserted and 1b for a Port with Rp asserted.\nIn the case that a Port is not USB Communications capable, at Attachment a Source Port Shall default to DFP and a\nSink Port Shall default to UFP ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.7",
    "title": "Cable Plug",
    "full_path": "6.2.1.1.7 Cable Plug",
    "page": 120,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 1-bit Cable Plug field Shall indicate whether this Message originated from a Cable Plug or VPD :\n 0b Message originated from a DFP or UFP .\n 1b Message originated from a Cable Plug or VPD\nThe Cable Plug field Shall only apply to SOP’ Packet and SOP’’ Packet types."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.1.8",
    "title": "Message Type",
    "full_path": "6.2.1.1.8 Message Type",
    "page": 120,
    "level": 5,
    "parent_id": "6.2.1.1",
    "tags": [],
    "content": "The 5-bit Message Type field Shall indicate the type of Message being sent. To fully decode the Message Type , the\nNumber of Data Objects field is first examined to determine whether the Message is a Control Message or a Data\nMessage . Then the specific Message Type can be found in Table 6.5, \"Control Message Types\" or Table 6.6, \"Data\nMessage Types\" .\nThe Message Type field Shall apply to all SOP* Packet types."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2",
    "title": "Extended Message Header",
    "full_path": "6.2.1.2 Extended Message Header",
    "page": 120,
    "level": 4,
    "parent_id": "6.2.1",
    "tags": [],
    "content": "Extended Message s (indicated by the Extended field being set in the Message Header ) Shall contain an Extended\nMessage Header following the Message Header as shown in Figure 6.3, \"USB Power Delivery Packet Format including\nan Extended Message Header and Payload\" and defined in “ Table 6.3, \"Extended Message Header\" .\nExtended Message s contain Data Block s of Data Size , defined in the Extended Message , that are either sent in a\nsingle Message or as a series of Chunk s. When the Data Block is sent as a series of Chunk s, each Chunk in the series,\nexcept for the last Chunk , Shall contain MaxExtendedMsgChunkLen bytes. The last Chunk in the series Shall\ncontain the remainder of the Data Block and so could be less than MaxExtendedMsgChunkLen bytes and Shall be\npadded to the next 4-byte Data Object boundary."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.1",
    "title": "Chunked",
    "full_path": "6.2.1.2.1 Chunked",
    "page": 120,
    "level": 5,
    "parent_id": "6.2.1.2",
    "tags": [],
    "content": "The Port Partner s Shall use the Unchunked Extended Messages Supported field in the Source_Capabilities\nMessage and Unchunked Extended Messages Supported field in the Request Message to determine whether to\nsend Message s of Data Size > MaxExtendedMsgLegacyLen bytes in a single Unchunked Extended Message (see\nSection 6.4.1.2.1.6, \"Unchunked Extended Messages Supported\" and Section 6.4.2.6, \"Unchunked Extended Messages\nSupported\" ).Table 6.3 Extended Message Header\nBit(s) Start of Packet Field Name Reference"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "SOP* Chunked Section 6.2.1.2.1",
    "full_path": "15 SOP* Chunked Section 6.2.1.2.1",
    "page": 120,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…11 SOP* Chunk Number Section 6.2.1.2.2"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "SOP* Request Chunk Section 6.2.1.2.3",
    "full_path": "10 SOP* Request Chunk Section 6.2.1.2.3",
    "page": 120,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "SOP* Reserved",
    "full_path": "9 SOP* Reserved",
    "page": 120,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "8…0 SOP* Data Size Section 6.2.1.2.4\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 121When either Port Partner only supports Chunked Extended Message s:\n The Chunked bit in every Extended Message Shall be set to one.\n Every Extended Message of Data Size > MaxExtendedMsgLegacyLen Shall be transmitted between the\nPort Partner s in Chunk s\n The Number of Data Objects in the Message Header Shall indicate the number of Data Object s in the\nMessage padded to the 4-byte boundary including the Extended Message Header as part of the first Data\nObject .\nThe conditions listed above Shall apply until the Port Pair is Detached , there is a Hard Reset , there is Error Recovery\nor the Source removes power (except during a Power Role Swap or Fast Role Swap when the Initial Source removes\npower in order to for the New Source to apply power).\nWhen both Port Partner s support Unchunked Extended Message s:\n The Chunked bit in every Extended Message Shall be set to zero.\n Every Extended Message Shall be transmitted between the Port Partner s Unchunked.\n The Number of Data Objects in the Message Header is Reserved .\nThe conditions listed above Shall apply until the Port Pair is Detached , there is a Hard Reset , there is Error Recovery\nor the Source removes power (except during a Power Role Swap or Fast Role Swap when the Initial Source removes\npower in order to for the New Source to apply power).\nWhen sending Extended Message s to the Cable Plug the VCONN Source Shall only send Chunked Extended Message s.\nCable Plug s Shall always send Extended Messages of Data Size > MaxExtendedMsgLegacyLen Chunked and Shall\nset the Chunked bit in every Extended Message to one.\nWhen Extended Message s are supported Chunking Shall be supported."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.2",
    "title": "Chunk Number",
    "full_path": "6.2.1.2.2 Chunk Number",
    "page": 121,
    "level": 5,
    "parent_id": "6.2.1.2",
    "tags": [],
    "content": "The Chunk Number field Shall only be Valid in a Message if the Chunked flag is set to one. If the Chunked flag is\nset to zero the Chunk Number field Shall also be set to zero.\nThe Chunk Number field is used differently depending on whether the Message is a request for Data, or a requested\nData Block being returned:\n In a request for data the Chunk Number field indicates the number of the Chunk being requested. The\nrequester Shall only set this field to the number of the next Chunk in the series (the next Chunk after the\nlast received Chunk ).\n In the requested Data Block the Chunk Number field indicates the number of the Chunk being returned.\nThe Chunk Number for each Chunk in the series Shall start at zero and Shall increment for each Chunk\nby one up to a maximum of 9 corresponding to 10 Chunk s in total."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.3",
    "title": "Request Chunk",
    "full_path": "6.2.1.2.3 Request Chunk",
    "page": 121,
    "level": 5,
    "parent_id": "6.2.1.2",
    "tags": [],
    "content": "The Request Chunk bit Shall only be used for the Chunked transfer of an Extended Message when the Chunked bit\nis set to 1 (see Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" ). For Unchunked Extended\nMessage transfers, Message s Shall be sent and received without the request/response mechanism (see Figure 6.4,\n\"Example Security_Request sequence Unchunked (Chunked bit = 0)\" ).\nThe Request Chunk bit Shall be set to one to indicate that this is a request for a Chunk of a Data Block and Shall be\nset to zero to indicate that this is a Chunk response containing a Chunk . Except for Chunk zero, a requested Chunk\nof a Data Block Shall only be returned as a Chunk response to a corresponding request for that Chunk . Both the\nChunk request and the Chunk response Shall contain the same value in the Message Type field. When the Request\nChunk bit is set to one the Data Size field Shall be zero.\nPage 122 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.2.1.2.4 Data Size\nThe Data Size field Shall indicate how many bytes of data in total are in Data Block being returned. The total\nnumber of data bytes in the Message Shall Not exceed MaxExtendedMsgLen .\nIf the Data Size field is less than MaxExtendedMsgLegacyLen and the Chunked bit is set then the Packet Payload\nShall be padded to the next 4-byte Data Object boundary with zeros (0x00).\nIf the Data Size field is greater than expected for a given Extended Message but less than or equal to\nMaxExtendedMsgLen then the expected fields in the Message Shall be processed appropriately and the additional\nfields Shall be Ignored ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.5",
    "title": "Extended Message Examples",
    "full_path": "6.2.1.2.5 Extended Message Examples",
    "page": 122,
    "level": 5,
    "parent_id": "6.2.1.2",
    "tags": [],
    "content": "The following examples illustrate the transmission of Extended Message s both Chunked (Chunked bit is one) and\nUnchunked ( Chunked bit is zero). The examples use a Security_Request Message of Data Size 7 bytes which is\nresponded to by a Security_Response Message of Data Size 30 bytes. The sizes of these Message s are arbitrary and\nare used to illustrate Message transmission; they are not intended to correspond to genuine security related\nMessage s.\nDuring Negotiation of the Explicit Contract after connection, the Port Partner s use the Unchunked Extended\nMessages Supported field in the Source_Capabilities Message and Unchunked Extended Messages Supported\nfield in the Request Message to determine the value of the Chunked bit (see Table 6.4, \"Use of Unchunked Message\nSupported bit\" ). When both Port Partner s support Unchunked Extended Message s then the Chunked bit is zero\notherwise the Chunked bit is one.\nThe Chunked bit is used to determine whether:\n The Chunk request/response mechanism is used.\n Extended Message s are Chunked .\n Padding is applied.\n The Number of Data Objects field is used.\nThe following examples illustrate the expected usage in each case."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.5.1",
    "title": "Security_Request/Security_Response Unchunked Example",
    "full_path": "6.2.1.2.5.1 Security_Request/Security_Response Unchunked Example",
    "page": 122,
    "level": 6,
    "parent_id": "6.2.1.2.5",
    "tags": [],
    "content": "Figure 6.4, \"Example Security_Request sequence Unchunked (Chunked bit = 0)\" illustrates a typical sequence for a\nSecurity_Request Message responded to by a Security_Response Message using Unchunked Extended Message s\n(Chunked bit is zero) between a USB Host and a Charger . The entire Data Block is returned in one Message . The\nChunk request/response mechanism is not used.Table 6.4 Use of Unchunked Message Supported bit\nSource : Source_Capabilities Message\nUnchunked Message\nSupported bit = 0Unchunked Message\nSupported bit = 1\nSink : Request Message Unchunked Message\nSupported bit = 0Chunked bit = 1 Chunked bit = 1\nUnchunked Message\nSupported bit = 1Chunked bit = 1 Chunked bit = 0\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 123Figure 6.4 Example Security_Request sequence Unchunked (Chunked bit = 0)\nFigure 6.5, \"Example byte transmission for Security_Request Message of Data Size 7 (Chunked bit is set to zero)\"\ndetails the Security_Request Message shown in Figure 6.4, \"Example Security_Request sequence Unchunked\n(Chunked bit = 0)\" . The figure shows the byte ordering on the bus as well as the fact that there is no padding in this\ncase. The Number of Data Objects field has a value of 0 since it is Reserved when the Chunked bit is zero. The Data\nSize field indicates the length of the Extended Message when the Chunked bit is set to 0, which in this case is 7 bytes.\nFigure 6.5 Example byte transmission for Security_Request Message of Data Size 7 (Chunked bit is set to\nzero)\nFigure 6.6, \"Example byte transmission for Security_Response Message of Data Size 30 (Chunked bit is set to zero)\"\ndetails the Security_Response Message shown in Figure 6.4, \"Example Security_Request sequence Unchunked\n(Chunked bit = 0)\" . The figure shows the byte ordering on the bus as well as the fact that there is no padding in this\ncase. The Number of Data Objects field has a value of 0 since it is Reserved when the Chunked bit is zero. The Data\nSize field indicates the length of the Extended Message when the Chunked bit is set to zero, which in this case is 30\nbytes.Host Charger\nSecurity_Request\n(Data Size = 7, Chunked = 0)\nGoodCRCGoodCRC\nSecurity_Response\n(Data Size = 30, Chunked = 0)\nMessage Header\n(16 bit)\nMessage Type =\nSecurity_Request\nNumber of Data\nObjects = 0 (Reserved)Data (7 bytes)Extended Message\nHeader\n(16 bit)\nChunked = 0\nData Size = 7\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBB0 B1 B2 B3 B4 B5 B6\nPage 124 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.6 Example byte transmission for Security_Response Message of Data Size 30 (Chunked bit is set to\nzero)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.2.1.2.5.2",
    "title": "Security_Request/Security_Response Chunked Example",
    "full_path": "6.2.1.2.5.2 Security_Request/Security_Response Chunked Example",
    "page": 124,
    "level": 6,
    "parent_id": "6.2.1.2.5",
    "tags": [],
    "content": "Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" illustrates a typical sequence for a\nSecurity_Request Message responded to by a Security_Response Message using Chunked Extended Message s\n(Chunked bit is one) between a USB Host and a Charger .\nNote: Chunk Number zero in every Extended Message is sent without the need for a Chunk Request, but Chunk\nNumber one and following need to be requested with a Chunk request.Message Header\n(16 bit)\nMessage Type =\nSecurity_Response\nNumber of Data\nObjects = 0 (Reserved)Data (30 bytes)Extended Message\nHeader\n(16 bit)\nChunked = 0\nData Size = 30\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBB0 B1 B28 B29\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 125Figure 6.7 Example Security_Request sequence Chunked (Chunked bit = 1)\nFigure 6.8, \"Example Security_Request Message of Data Size 7 (Chunked bit set to 1)\" shows the Security_Request\nMessage shown in Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" in more detail\nincluding the byte ordering on the bus and padding. Three bytes of padding have been added to the Message so that\nthe total number of bytes is a multiple of 32-bits, corresponding to 3 Data Object s. The Number of Data Objects\nfield is set to 3 to indicate the length of this Chunk . The Chunk Number is set to zero and the Data Size field is set\nto 7 to indicate the length of the whole Extended Message .Host Charger\nSecurity_Request\n(Number of Data Objects = 3,\nChunked = 1, Chunk Number = 0,\nRequest Chunk = 0, Data Size = 7)\nGoodCRC\nGoodCRCSecurity_Response\n(Number of Data Objects = 7,\nChunked = 1, Chunk Number = 0,\nRequest Chunk = 0, Data Size = 30)\nSecurity_Response “Chunk request”\n(Number of Data Objects = 1,\nChunked = 1, Chunk Number = 1,\nRequest Chunk = 1, Data Size = 0)\nGoodCRCGoodCRC\nSecurity_Response\n(Number of Data Objects = 2,\nChunked = 1, Chunk Number = 1,\nRequest Chunk = 0, Data Size = 30)Security_Request Chunk\nSecurity_Response\nPage 126 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.8 Example Security_Request Message of Data Size 7 (Chunked bit set to 1)\nFigure 6.9, \"Example Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\" shows Chunk\nNumber zero of the Security_Response Message shown in Figure 6.7, \"Example Security_Request sequence Chunked\n(Chunked bit = 1)\" in more detail including the byte ordering on the bus and padding. No padding is need for this\nChunk since the full 26-byte Payload plus 2-byte Extended Message Header is a multiple of 32-bits, corresponding\nto 7 Data Object s. The Number of Data Objects field is set to 7 to indicate the length of this Chunk and the Data\nSize field is set to 30 to indicate the length of the whole Extended Message .\nFigure 6.9 Example Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\nFigure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" shows an example of the Message\nformat, byte ordering and padding for the Security_Response Message Chunk request for Chunk Number one\nshown in Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" . In the Chunk request the\nNumber of Data Objects field in the Message is set to 1 to indicate that the Payload is 32 bits equivalent to 1 data\nobject (see Figure 6.10, \"Example byte transmission for a Security_Response Message Chunk request (Chunked bit is\nset to 1)\" ). Since the Chunked bit is set to 1 the Chunk request/Chunk response mechanism is used. The Message is\na Chunk request so the Request Chunk bit is set to one, and in this case Chunk one is being requested so Chunk\nNumber is set to one. Data Size is set to zero indicating the length of the Data Block being transferred. Two bytes\nof padding are added to ensure that the Payload is a multiple of 32 bits.Message Header\n(16 bit)\nMessage Type =\nSecurity_Request\nNumber of Data\nObjects = 3Data (7 bytes)Extended Message\nHeader\n(16 bit)\nChunked = 1\nChunk Number = 0\nRequest Chunk = 0\nData Size = 7\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBB0 B1 B2 B3 B4 B5 B6P0\n(0x00)P1\n(0x00)P2\n(0x00)Padding (3 bytes)\nData Object 0 Data Object 1 Data Object 2\nMessage Header\n(16 bit)\nMessage Type =\nSecurity_Response\nNumber of Data\nObjects = 7Data (26 bytes)Extended Message\nHeader\n(16 bit)\nChunked = 1\nChunk Number = 0\nRequest Chunk = 0\nData Size = 30\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBB0 B1 B22 B23\nData Object 0B24 B25\nData Object 6\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 127Figure 6.10 Example byte transmission for a Security_Response Message Chunk request (Chunked bit is set\nto 1)\nFigure 6.11, \"Example Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\" shows Chunk\nNumber one of the Security_Response Message shown in Figure 6.7, \"Example Security_Request sequence Chunked\n(Chunked bit = 1)\" in more detail including the byte ordering on the bus and padding. Two bytes of padding are\nadded to ensure that the Payload is a multiple of 32 bits, corresponding to 2 Data Object s. The Number of Data\nObjects field is set to 2 to indicate the length of this Chunk and the Data Size field is set to 30 to indicate the length\nof the whole Extended Message .\nFigure 6.11 Example Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)Message Header\n(16 bit)\nMessage Type =\nSecurity_Response\nNumber of Data\nObjects = 1Extended Message\nHeader\n(16 bit)\nChunked = 1\nChunk Number = 1\nRequest Chunk = 1\nData Size = 0\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBP0\n(0x00)P1\n(0x00)Padding (2 bytes)\nData Object 0\nMessage Header\n(16 bit)\nMessage Type =\nSecurity_Response\nNumber of Data\nObjects = 2Data (4 bytes)Extended Message\nHeader\n(16 bit)\nChunked = 1\nChunk Number = 1\nRequest Chunk = 0\nData Size = 30\nMessage\nHeader\nLSBMessage\nHeader\nMSBMessage\nHeader\nLSBMessage\nHeader\nMSBB0 B1 B2 B3P0\n(0x00)P1\n(0x00)Padding (2 bytes)\nData Object 0 Data Object 1\nPage 128 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.3 Control Message\nA Message is defined as a Control Message when the Number of Data Objects field in the Message Header is set to\nzero. The Control Message consists only of a Message Header and a CRC . The Protocol Layer originates the Control\nMessage s (i.e., Accept Message , Reject Message etc.).\nThe Control Message types are specified in the Message Header 's Message Type field (bits 4…0) and are\nsummarized in Table 6.5, \"Control Message Types\" . The Sent by column indicates entities which May send the given\nMessage (Source , Sink or Cable Plug ); entities not listed Shall Not issue the corresponding Message . The \"Valid Start\nof Packet\" column indicates the Message s which Shall only be issued in SOP Packet s and the Message s which May\nbe issued in SOP* Packet s.\nTable 6.5 Control Message Types\nBits 4…0 Message Type Sent by Description Valid\nStart of\nPacket\n0_0000 Reserved N/AAll values not explicitly\ndefined are Reserved and\nShall Not be used.\n0_0001 GoodCRC Source , Sink or Cable Plug See Section 6.3.1 . SOP*\n0_0010 GotoMin ( Deprecated ) Deprecated See Section 6.3.2 . N/A\n0_0011 Accept Source , Sink or Cable Plug See Section 6.3.3 . SOP*\n0_0100 Reject Source , Sink or Cable Plug See Section 6.3.4 . SOP*\n0_0101 Ping ( Deprecated ) Deprecated See Section 6.3.5 . SOP only\n0_0110 PS_RDY Source or Sink See Section 6.3.6 . SOP only\n0_0111 Get_Source_Cap Sink or DRP See Section 6.3.7 . SOP only\n0_1000 Get_Sink_Cap Source or DRP See Section 6.3.8 . SOP only\n0_1001 DR_Swap Source or Sink See Section 6.3.9 . SOP only\n0_1010 PR_Swap Source or Sink See Section 6.3.10 . SOP only\n0_1011 VCONN _Swap Source or Sink See Section 6.3.11 . SOP only\n0_1100 Wait Source or Sink See Section 6.3.12 . SOP only\n0_1101 Soft_Reset Source or Sink See Section 6.3.13 . SOP*\n0_1110 Data_Reset Source or Sink See Section 6.3.14 . SOP only\n0_1111 Data_Reset_Complete Source or Sink See Section 6.3.15 . SOP only\n1_0000 Not_Supported Source , Sink or Cable Plug See Section 6.3.16 . SOP*\n1_0001 Get_Source_Cap_Extended Sink or DRP See Section 6.3.17 . SOP only\n1_0010 Get_Status Source or Sink See Section 6.3.18 . SOP*\n1_0011 FR_Swap Sink1 See Section 6.3.19 . SOP only\n1_0100 Get_PPS_Status Sink See Section 6.3.20 . SOP only\n1_0101 Get_Country_Codes Source or Sink See Section 6.3.21 . SOP only\n1_0110 Get_Sink_Cap_Extended Source or DRP See Section 6.3.22 . SOP only\n1_0111 Get_Source_Info Sink or DRP See Section 6.3.23 . SOP Only\n1_1000 Get_Revision Source or Sink See Section 6.3.24 . SOP*\n1_1001…\n1_1111Reserved N/AAll values not explicitly\ndefined are Reserved and\nShall Not be used.\n1) In this case the Port is providing vSafe5V however it will have Rd asserted rather than Rp and sets the Port Power\nRole field to Sink , until the Fast Role Swap AMS has completed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1296.3.1 GoodCRC Message\nThe GoodCRC Message Shall be sent by the receiver to acknowledge that the previous Message was correctly\nreceived (i.e., had a GoodCRC Message ). The GoodCRC Message Shall return the Message 's MessageID so the sender\ncan determine that the correct Message is being acknowledged. The first bit of the GoodCRC Message Shall be\nreturned within tTransmit after receipt of the last bit of the previous Message .\nBIST does not send the GoodCRC Message while in a Continuous BIST Mode (see Section 6.4.3, \"BIST Message\" ).\nThe retry mechanism is triggered when the Message sender fails to receive a GoodCRC Message before the\nCRCReceiveTimer expires. It is used by the Message sender to detect that the Message was not correctly received\nby the Message recipient due to noise or other disturbance on the Configuration Channel (CC). The retry mechanism\nShall Not be used for any other purpose such as a means of gaining time for processing the required response to\nthe received Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.2",
    "title": "GotoMin Message (Deprecated)",
    "full_path": "6.3.2 GotoMin Message (Deprecated)",
    "page": 129,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The GotoMin ( Deprecated ) Message has been Deprecated . The 0_0010 Message Type is no longer Valid and Shall\nbe responded to by a Not_Supported Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.3",
    "title": "Accept Message",
    "full_path": "6.3.3 Accept Message",
    "page": 129,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Accept Message is a Valid response in the following cases:\n It Shall be sent by the Source , in SPR Mode , to signal the Sink that the Source is willing to meet the\nRequest Message .\n It Shall be sent by the Source , in EPR Mode , to signal the Sink that the Source is willing to meet the\nEPR_Request Message .\n It Shall be sent by the recipient of the PR_Swap Message to signal that it is willing to do a Power Role\nSwap and has begun the Power Role Swap AMS .\n It Shall be sent by the recipient of the DR_Swap Message to signal that it is willing to do a Data Role Swap\nand has begun the Data Role Swap AMS .\n It Shall be sent by the recipient of the VCONN _Swap Message to signal that it is willing to do a VCONN Swap\nand has begun the VCONN Swap AMS .\n It Shall be sent by the recipient of the FR_Swap Message to indicate that it has begun the Fast Role Swap\nAMS .\n It Shall be sent by the recipient of the Soft_Reset Message to indicate that it has completed its Soft Reset .\n It Shall be sent by the recipient of the Enter_USB Message to indicate that it has begun the Enter USB\nAMS .\n It Shall be sent by the recipient of the Data_Reset Message to indicate that it has begun the Data Reset\nAMS .\nThe Accept Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section\n6.6.2, \"SenderResponseTimer\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.4",
    "title": "Reject Message",
    "full_path": "6.3.4 Reject Message",
    "page": 129,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Reject Message is a Valid response in the following cases:\n It Shall be sent to signal the Sink , in SPR Mode , that the Source is unable to meet the Request Message .\nThis May be due an Invalid request or because the Source can no longer provide what it previously\nAdvertised.\nPage 130 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 It Shall be sent to signal the Sink , in EPR Mode , that the Source is unable to meet the EPR_Request\nMessage . This May be due an Invalid request or because the Source can no longer provide what it\npreviously Advertised.\n It Shall be sent by the recipient of a PR_Swap Message to indicate it is unable to do a Power Role Swap .\n It Shall be sent by the recipient of a PR_Swap Message while in EPR Mode .\n It Shall be sent by the recipient of a DR_Swap Message to indicate it is unable to do a Data Role Swap .\n It Shall be sent by the recipient of a VCONN _Swap Message that is not presently the VCONN Source , to\nindicate it is unable to do a VCONN Swap .\n It Shall be sent by UFP on receiving an Enter_USB Message to indicate it is unable to enter the requested\nUSB Mode .\nThe sender of a Request , EPR_Request , PR_Swap , DR_Swap , VCONN _Swap , or Enter_USB Message , on receiving a\nReject Message response, Shall Not send this same Message to the recipient until one of the following has occurred:\n A New Explicit Contract Negotiation as a result of the Source sending a Source_Capabilities Message or\nEPR_Source_Capabilities Message . This can be triggered by:\n The Source 's Device Policy Manager .\n A Get_Source_Cap Message sent from the Sink to the Source in SPR Mode .\n An EPR_Get_Source_Cap Message sent from the Sink to the Source in EPR Mode .\n A Power Role Swap .\n A Soft Reset .\n A Hard Reset .\n A Disconnect/Re-connect.\n A Data Role Swap .\n A Data Reset .\nThe Sink May send a different Request Message to the one which was rejected but Shall Not repeat the same\nRequest Message , using the same RDO , unless there has been a New Explicit Contract Negotiation , Data Role Swap\nor Data Reset as described above.\nThe Reject Message Shall be sent within tReceiverResponse of the receipt of the last bit of Message (see Section\n6.6.2, \"SenderResponseTimer\" ).\nNote: The Reject Message is not a Valid response when a Message is not supported. In this case the\nNot_Supported Message is returned (see Section 6.3.16, \"Not_Supported Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.5",
    "title": "Ping Message",
    "full_path": "6.3.5 Ping Message",
    "page": 130,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Ping ( Deprecated ) Message has been deprecated. The 0_0101 Message Type is no longer Valid .\nA Port that receives a Ping ( Deprecated ) Message May respond with a Not_Supported Message or Ignore the Ping\n(Deprecated ) Message . A Cable Plug that receives a Ping ( Deprecated ) Message Shall Ignore the Ping ( Deprecated )\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.6",
    "title": "PS_RDY Message",
    "full_path": "6.3.6 PS_RDY Message",
    "page": 130,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The PS_RDY Message Shall be sent by the Source (or by both the New Sink and New Source during the Power Role\nSwap AMS or Fast Role Swap AMS ) to indicate its power supply has reached the desired operating condition (see\nSection 8.3.2.2, \"Power Negotiation\" ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1316.3.7 Get_Source_Cap Message\nThe Get_Source_Cap (Get Source Capabilities ) Message May be sent by a Port to request the Source Capabilities and\nDual-Role Power capability of its Port Partner (e.g., Dual-Role Power capable). The Port Shall respond by returning\na Source_Capabilities Message (see Section 6.4.1.5, \"SPR Source Capabilities Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.8",
    "title": "Get_Sink_Cap Message",
    "full_path": "6.3.8 Get_Sink_Cap Message",
    "page": 131,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Sink_Cap (Get Sink Capabilities ) Message May be sent by a Port to request the Sink Capabilities and Dual-\nRole Power capability of its Port Partner (e.g., Dual-Role Power capable). The Port Shall respond by returning a\nSink_Capabilities Message (see Section 6.4.1.6, \"SPR Sink Capabilities Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.9",
    "title": "DR_Swap Message",
    "full_path": "6.3.9 DR_Swap Message",
    "page": 131,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The DR_Swap Message is used to exchange DFP and UFP operation between Port Partner s while maintaining the\ndirection of power flow over V BUS. The Data Role Swap process can be used by Port Partner s whether or not they\nsupport USB Communication s capability. A DFP that supports USB Communication capability starts as the USB Host\non Attachment . A UFP that supports USB Communication capability starts as the USB Device on Attachment .\n[USB Type-C 2.4] Dual-Role Data (DRD ) Port s Shall have the capability to perform a Data Role Swap from the\nPE_SRC_Ready or PE_SNK_Ready states. DFP s and UFP s May have the capability to perform a Data Role Swap from\nthe PE_SRC_Ready or PE_SNK_Ready states. A Data Role Swap Shall be regarded in the same way as a cable Detach /\nRe-attach in relation to any USB Communication which is ongoing between the Port Partner s. If there are any Active\nMode s between the Port Partner s when a DR_Swap Message is a received, then a Hard Reset Shall be performed\n(see Section 6.4.4.3.4, \"Enter Mode Command\" ). If the Cable Plug has any Active Mode s then the DFP Shall Not issue\na DR_Swap Message and Shall cause all Active Mode s in the Cable Plug to be exited before accepting a Data Role\nSwap request.\nThe source of VBUS and VCONN Source Shall remain unchanged as well as the Rp/Rd resistors on the CC wire during\nthe Data Role Swap process.\nThe DR_Swap Message May be sent by either Port Partner . The recipient of the DR_Swap Message Shall respond\nby sending an Accept Message , a Wait Message or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\" ).\n If an Accept Message is sent, the Source and Sink Shall exchange Data Role s.\n If a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a\nData Role Swap and no action Shall be taken.\n If a Wait Message is sent, the requester is informed that a Data Role Swap might be possible in the future\nbut that no immediate action Shall be taken.\nBefore a Data Role Swap the initial DFP Shall have its Port Data Role bit set to DFP , and the initial UFP Shall have\nits Port Data Role bit set to UFP .\nAfter a successful Data Role Swap the DFP /Host Shall become the UFP /Device and vice-versa; the new DFP Shall\nhave its Port Data Role bit set to DFP , and the new UFP Shall have its Port Data Role bit set to UFP . Where USB\nCommunication is supported by both Port Partner s a USB data connection Should be established according to the\nnew Data Role s.\nIf the Data Role Swap , after having been accepted by the Port Partner , is subsequently not successful, in order to\nattempt a re-establishment of the connection, USB Type-C Error Recovery actions, such as disconnect, as defined in\n[USB Type-C 2.4] will be necessary.\nSee Section 8.3.2.9, \"Data Role Swap\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.10",
    "title": "PR_Swap Message",
    "full_path": "6.3.10 PR_Swap Message",
    "page": 131,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The PR_Swap Message May be sent by either Port Partner to request an exchange of Power Role s. The recipient of\nthe Message Shall respond by sending an Accept Message , a Wait Message or a Reject Message (see Section 6.9,\n\"Accept, Reject and Wait\" ).\nPage 132 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 If an Accept Message is sent, the Source and Sink Shall do a Power Role Swap .\n If a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a\nPower Role Swap and no action Shall be taken.\n If a Wait Message is sent, the requester is informed that a Power Role Swap might be possible in the\nfuture but that no immediate action Shall be taken.\nThe PR_Swap Message Shall Not be sent while in EPR Mode . While in EPR Mode if a Power Role Swap is required,\nan EPR Mode exit Shall be done first.\nAfter a successful Power Role Swap the Port Partner s Shall reset their respective Protocol Layer s (equivalent to a\nSoft Reset ): resetting their MessageIDCounter , RetryCounter and Protocol Layer state machines before attempting\nto establish the First Explicit Contract . At this point the New Source Shall also reset its CapsCounter.\nThe New Source Shall have Rp asserted on the CC wire and the New Sink Shall have Rd asserted on the CC wire as\ndefined in [USB Type-C 2.4] . When performing a Power Role Swap from Source to Sink , the Port Shall change its CC\nwire resistor from Rp to Rd. When performing a Power Role Swap from Sink to Source , the Port Shall change its CC\nwire resistor from Rd to Rp. The DFP (Host ), UFP (Device ) Data Role s and VCONN Source Shall remain unchanged by\nthe Power Role Swap process.\nNote: During the Power Role Swap process the Initial Sink does not disconnect even though VBUS drops below\nvSafe5V .\nFor more information regarding the Power Role Swap , refer to:\n Section 7.3.2, \"Transitions Caused by Power Role Swap\"\n Section 8.3.2.5, \"Data Reset\" .\n Section 8.3.3.19.3, \"Policy Engine in Source to Sink Power Role Swap State Diagram\" .\n Section 8.3.3.19.4, \"Policy Engine in Sink to Source Power Role Swap State Diagram\" .\n Section 9.1.2, \"Mapping to USB Device States\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.11",
    "title": "V CONN _Swap Message",
    "full_path": "6.3.11 V CONN _Swap Message",
    "page": 132,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The V CONN _Swap Message Shall be supported by any Port that can operate as a VCONN Source .\nThe VCONN _Swap Message May be sent by either Port Partner to request an exchange of VCONN Source . The recipient\nof the Message Shall respond by sending an Accept Message , Reject Message , Wait Message (see Section 6.9,\n\"Accept, Reject and Wait\" ) or Not_Supported Message .\n If an Accept Message is sent, the Port Partner s Shall perform a VCONN Swap . The new VCONN Source Shall\nsend a PS_RDY Message within tVc ONNSourceOn to indicate that it is now sourcing VCONN . The initial\nVCONN Source Shall cease sourcing VCONN within tVCONN SourceOff of receipt of the last bit of the EOP of\nthe PS_RDY Message .\n If a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a\nVCONN Swap and no action Shall be taken. A Reject Message Shall only be sent by the Port that is not\npresently the VCONN Source in response to a VCONN _Swap Message . The Port that is presently the VCONN\nSource Shall Not send a Reject Message in response to VCONN _Swap Message .\n If a Wait Message is sent, the requester is informed that a VCONN Swap might be possible in the future\nbut that no immediate action Shall be taken. A Port after losing the VCONN Source role due to incoming\nVCONN Swap request Shall Not initiate a VCONN Swap until at least tVCONN SwapDelayDFP /\ntVCONN SwapDelayUFP after completing the previous VCONN Swap AMS .\n If a Not_Supported Message is sent, the requester is informed that VCONN Swap is not supported. The\nPort that is not presently the VCONN Source May turn on VCONN when a Not_Supported Message is\nreceived in response to a VCONN _Swap Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 133The DFP (Host ), UFP (Device ) Data Role s and Source of VBUS Shall remain unchanged as well as the Rp/Rd resistors\non the CC wire during the VCONN Swap process.\nVCONN Shall be continually sourced during the VCONN Swap process to maintain power to the Cable Plug (s) i.e., make\nbefore break.\nBefore communicating with a Cable Plug a Port Shall ensure that it is the VCONN Source and that the Cable Plug s are\npowered, by performing a VCONN Swap if necessary. Since it cannot be guaranteed that the present VCONN Source is\nsupplying VCONN , the only means to ensure that the Cable Plug s are powered is for a Port wishing to communicate\nwith a Cable Plug to become the VCONN Source . If a Not_Supported Message is returned in response to the\nVCONN _Swap Message , then the Port is allowed to become the VCONN Source until a Hard Reset or Detach .\nA VCONN Source that is also a Source can attempt to send a Discover Identity Command using SOP’ to a Cable Plug\nprior to the establishment of the First Explicit Contract .\nNote: Even when it is presently the VCONN Source , the Sink is not permitted to initiate an AMS with a Cable Plug\nunless Rp is set to SinkTxOK (see Section 6.9, \"Accept, Reject and Wait\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12",
    "title": "Wait Message",
    "full_path": "6.3.12 Wait Message",
    "page": 133,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Wait Message is a Valid response to one of the following Message s:\n It Shall be sent to signal the Sink , in response to a Request Message in SPR Mode during Negotiation , to\nindicate that the Source is currently unable to meet the request.\n It Shall be sent to signal the Sink , in response to a EPR_Request Message in EPR Mode during\nNegotiation , to indicate that the Source is currently unable to meet the request.\n It Shall be sent by the recipient of a PR_Swap Message to indicate it is currently unable to do a Power\nRole Swap .\n It Shall be sent by the recipient of a DR_Swap Message to indicate it is currently unable to do a Data Role\nSwap .\n It Shall be sent by the recipient of a VCONN _Swap Message that is not presently the VCONN Source to\nindicate it is currently unable to do a VCONN Swap .\n It Shall be sent by the recipient of an Enter_USB Message to indicate it is currently unable to enter the\nrequested USB Mode .\nThe Wait Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section\n6.9, \"Accept, Reject and Wait\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12.1",
    "title": "Wait in response to a Request Message",
    "full_path": "6.3.12.1 Wait in response to a Request Message",
    "page": 133,
    "level": 4,
    "parent_id": "6.3.12",
    "tags": [],
    "content": "The Wait Message allows the Source time to recover the power it requires to meet the request, e.g., through Re-\nnegotiation with other Sink s or an upstream Source . A Source Should only send a Wait Message in response to a\nRequest Message when an Explicit Contract exists between the Port Partner s.\nThe Sink is allowed to repeat the Request Message using the SinkRequestTimer and Shall ensure that there is\ntSinkRequest after receiving the Wait Message before sending another Request Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12.2",
    "title": "Wait in response to a PR_Swap Message",
    "full_path": "6.3.12.2 Wait in response to a PR_Swap Message",
    "page": 133,
    "level": 4,
    "parent_id": "6.3.12",
    "tags": [],
    "content": "The Wait Message is used when responding to a PR_Swap Message to indicate that a Power Role Swap might be\npossible in the future. This can occur in any case where the device receiving the PR_Swap Message needs to\nevaluate the request further e.g., by requesting Sink Capabilities from the originator of the PR_Swap Message . Once\nit has completed this evaluation one of the Port Partner s Should initiate the Power Role Swap process again by\nsending a PR_Swap Message .\nThe Wait Message is also used where a Hub is operating in hybrid mode when a request cannot be satisfied (see\n[UCSI] ).\nPage 134 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10A Port that receives a Wait Message in response to a PR_Swap Message Shall wait tPRSwapWait after receiving\nthe Wait Message before sending another PR_Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12.3",
    "title": "Wait in response to a DR_Swap Message",
    "full_path": "6.3.12.3 Wait in response to a DR_Swap Message",
    "page": 134,
    "level": 4,
    "parent_id": "6.3.12",
    "tags": [],
    "content": "The Wait Message is used when responding to a DR_Swap Message to indicate that a Data Role Swap might be\npossible in the future. This can occur in any case where the device receiving the DR_Swap Message needs to\nevaluate the request further. Once it has completed this evaluation one of the Port Partner s Should initiate the Data\nRole Swap process again by sending a DR_Swap Message .\nA Port that receives a Wait Message in response to a DR_Swap Message Shall wait tDRSwapWait after receiving\nthe Wait Message before sending another DR_Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12.4",
    "title": "Wait in response to a V CONN _Swap Message",
    "full_path": "6.3.12.4 Wait in response to a V CONN _Swap Message",
    "page": 134,
    "level": 4,
    "parent_id": "6.3.12",
    "tags": [],
    "content": "The Wait Message is used when responding to a VCONN _Swap Message to indicate that a VCONN _Swap might be\npossible in the future. This can occur in any case where the device receiving the VCONN _Swap Message needs to\nevaluate the request further. Once it has completed this evaluation one of the Port Partner s Should initiate the\nVCONN Swap process again by sending a VCONN _Swap Message .\nA Port that receives a Wait Message in response to a VCONN _Swap Message Shall wait tVCONN SwapWait after\nreceiving the Wait Message before sending another VCONN _Swap Message .\nA Port that is currently the VCONN Source Shall respond with an Accept Message (rather than a Wait Message ) if the\nPort Partner 's Revision and Version , as reported in the Revision Message , is earlier than R3.2 V1.1. A Port Partner\nsupporting an earlier Revision and Version will not expect a Wait Message and will generate a Soft Reset in response."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.12.5",
    "title": "Wait in response to an Enter_USB Message",
    "full_path": "6.3.12.5 Wait in response to an Enter_USB Message",
    "page": 134,
    "level": 4,
    "parent_id": "6.3.12",
    "tags": [],
    "content": "The Wait Message is used, by the UFP , when responding to an Enter_USB Message to indicate that entering the\nrequested USB Mode might be possible in the future. This can occur, for example, in any case where the UFP needs\nto Negotiate more power to enter the mode. Once the UFP has completed this the DFP Should initiate the Enter USB\nprocess again by sending an Enter_USB Message .\nA DFP that receives a Wait Message in response to an Enter_USB Message Shall wait tEnterUSBWait after receiving\nthe Wait Message before sending another Enter_USB Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.13",
    "title": "Soft Reset Message",
    "full_path": "6.3.13 Soft Reset Message",
    "page": 134,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "A Soft_Reset Message May be initiated by either the Source or Sink to its Port Partner requesting a Soft Reset . The\nSoft_Reset Message Shall cause a Soft Reset of the connected Port Pair (see Section 6.8.1, \"Soft Reset and Protocol\nError\" ). If the Soft_Reset Message fails a Hard Reset Shall be initiated within tHardReset of the last\nCRCReceiveTimer expiring after nRetryCount retries have been completed.\nA Soft_Reset Message is used to recover from Protocol Layer errors; putting the Message counters to a known state\nto regain Message synchronization. The Soft_Reset Message has no effect on the Source or Sink ; that is the\npreviously Negotiated direction. Voltage and current remain unchanged. Modal Operation is unaffected by Soft\nReset . However after a Soft Reset has completed, an Explicit Contract Negotiation occurs, in order to re-establish PD\nCommunication and to bring state operation for both Port Partner s back to either the PE_SNK_Ready or\nPE_SRC_Ready states as appropriate (see Section 8.3.3.4, \"SOP Soft Reset and Protocol Error State Diagrams\" ).\nA Soft_Reset Message May be sent by either the Source or Sink when there is a Message synchronization error. If\nthe error is not corrected by the Soft Reset , Hard Reset Signaling Shall be issued (see Section 6.8.3, \"Hard Reset\" ).\nA Soft_Reset Message Shall be targeted at a specific entity depending on the type of SOP* Packet used. Soft_Reset\nMessage s sent using SOP Packet s Shall Soft Reset the Port Partner only. Soft_Reset Message s sent using SOP’ Packet /\nSOP’’ Packet s Shall Soft Reset the corresponding Cable Plug only.\nAfter a VCONN Swap the VCONN Source needs to reset the Cable Plug 's Protocol Layer to ensure MessageID\nsynchronization. If after a VCONN Swap the VCONN Source wants to communicate with a Cable Plug using SOP’\nPacket s, it Shall issue a Soft_Reset Message using a SOP’ Packet in order to reset the Cable Plug 's Protocol Layer . If\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 135the VCONN Source wants to communicate with a Cable Plug using SOP’’ Packet s, it Shall issue a Soft_Reset Message\nusing a SOP’’ Packet in order to reset the Cable Plug 's Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.14",
    "title": "Data_Reset Message",
    "full_path": "6.3.14 Data_Reset Message",
    "page": 135,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Data_Reset Message May be sent by either the DFP or UFP and Shall reset the USB data connection and exit all\nAlternate Mode s with its Port Partner while preserving the power on VBUS. USB4® Mode capable ports Shall support\nthe Data_Reset Message and other ports May support the Data_Reset Message .\nThe Data_Reset Message Shall Not change the existing:\n Power Contract\n Data Role s (i.e., which Port is the DFP or UFP )\nThe receiver of the Data_Reset Message Shall respond by sending an Accept Message and then follow the process\noutlined in the following steps. Neither the sender nor receiver Shall initiate a VCONN Swap until the Data Reset\nprocess is complete, and the Data_Reset_Complete Message has been sent. Following receipt of the Accept\nMessage , or GoodCRC following the Accept , depending which Port sends the Data_Reset Message :\n1) The DFP Shall :\n Disconnect the Port 's [USB 2.0] D+/D- signals.\n If operating in [USB 3.2] remove the Port 's Rx Terminations (see [USB 3.2] ).\n If operating in [USB4] drive the Port 's SBTX to a logic low (see [USB4] ).\n2) Both the DFP and UFP Shall exit all Alternate Mode s if any.\n3) Reset the cable:\n If the VCONN Source Port is also the UFP , then it Shall run the UFP VCONN Power Cycle process de -\nscribed in Section 7.1.15.1, \"UFP V CONN Power Cycle\" .\n If the VCONN Source Port is also the DFP , then it Shall run the DFP VCONN Power Cycle process de -\nscribed in Section 7.1.15.2, \"DFP V CONN Power Cycle\" .\n The DFP Shall exit the VCONN Power Cycle process as the VCONN Source and be sourcing VCONN .\n4) After tDataReset the DFP Shall :\n Reconnect the [USB 2.0] D+/D- signals.\n If the Port was operating in [USB 3.2] or [USB4] reapply the Port 's Rx Terminations (see [USB 3.2] ).\n5) The Data Reset process is complete; the DFP Shall send a Data_Reset_Complete Message and enter the\nUSB4® Discovery and Entry Flow (See [USB Type-C 2.4] ).\nIf the Initiator of the Data_Reset Message does not receive a Valid response within tSenderResponse it Shall enter\nthe ErrorRecovery State."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.15",
    "title": "Data_Reset_Complete Message",
    "full_path": "6.3.15 Data_Reset_Complete Message",
    "page": 135,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Data_Reset_Complete Message Shall be sent by the DFP to the UFP to indicate the completion of the Data Reset\nprocess (see Section 6.3.14, \"Data_Reset Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.16",
    "title": "Not_Supported Message",
    "full_path": "6.3.16 Not_Supported Message",
    "page": 135,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Not_Supported Message Shall be sent by a Port or Cable Plug in response to any Message it does not support.\nReturning a Not_Supported Message is assumed in this specification and has not been called out explicitly except\nin Section 6.13, \"Message Applicability\" which defines cases where the Not_Supported Message is returned.\nPage 136 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.3.17 Get_Source_Cap_Extended Message\nThe Get_Source_Cap_Extended Message is sent by a Port to request additional information about a Port 's Source\nCapabilities . The Port Shall respond by returning a Source_Capabilities_Extended Message (see Section 6.5.1,\n\"Source_Capabilities_Extended Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.18",
    "title": "Get_Status Message",
    "full_path": "6.3.18 Get_Status Message",
    "page": 136,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Status Message is sent by a Port using SOP to request the Port Partner 's present status.\nThe Port Partner Shall respond by returning a Status Message (see Section 6.5.2, \"Status Message\" ). A Port that\nreceives an Alert Message (see Section 6.4.6, \"Alert Message\" ) indicates that the Source or Sink 's Status has changed\nand Should be re-read using a Get_Status Message .\nThe Get_Status Message May also be sent to an Active Cable to get its present status using SOP’ /SOP’’ .\nThe Active Cable Shall respond by returning a Status Message (see Section 6.5.2, \"Status Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.19",
    "title": "FR_Swap Message",
    "full_path": "6.3.19 FR_Swap Message",
    "page": 136,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The FR_Swap Message Shall be sent by the New Source within tFRSwapInit after it has detected a Fast Role Swap\nsignal (see Section 5.8.6.3, \"Fast Role Swap Detection\" and Section 6.6.17.3, \"tFRSwapInit\" ). The Fast Role Swap AMS\nis necessary to apply Rp to the New Source and Rd to the New Sink and to re-synchronize the state machines. The\ntFRSwapInit time Shall be measured from the time the Fast Role Swap Request has been sent for tFRSwapRx (max)\nuntil the last bit of the EOP of the FR_Swap Message has been transmitted by the PHY Layer .\nThe recipient of the FR_Swap Message Shall respond by sending an Accept Message .\nAfter a successful Fast Role Swap the Port Partner s Shall reset their respective Protocol Layer s (equivalent to a Soft\nReset ): resetting their MessageIDCounter , RetryCounter and Protocol Layer state machines before attempting to\nestablish the First Explicit Contract . At this point the Source Shall also reset its CapsCounter.\nThis ensures that only the Cable Plug responds with a GoodCRC Message to the Discover Identity Command .\nPrior to the Fast Role Swap AMS , the New Source Shall have Rd asserted on the CC wire and the New Sink Shall have\nRp asserted on the CC wire.\nNote: This is an incorrect assignment of Rp/Rd (since Rp follows the Source and Rd follows the Sink as defined\nin [USB Type-C 2.4] ) that is corrected by the Fast Role Swap AMS .\nDuring the Fast Role Swap AMS , the New Source Shall change its CC wire resistor from Rd to Rp and the New Sink\nShall change its CC wire resistor from Rp to Rd. The DFP (Host ), UFP (Device ) Data Role s and VCONN Source Shall\nremain unchanged during the Fast Role Swap process.\nThe Initial Source Should avoid being the VCONN Source (by using the VCONN Swap process) whenever not actively\ncommunicating with the cable, since it is difficult for the Initial Source to maintain VCONN power during the Fast Role\nSwap process.\nNote: A Fast Role Swap is a \"best effort\" solution to a situation where a PDUSB Device has lost its external\npower. This process can occur at any time, even during an AMS in which case error handling such as Hard\nReset or [USB Type-C 2.4] Error Recovery will be triggered.\nNote: During the Fast Role Swap process the Initial Sink does not disconnect even though VBUS drops below\nvSafe5V .\nFor more information regarding the Fast Role Swap process, refer to:\n Section 7.1.13, \"Fast Role Swap\"\n Section 7.2.10, \"Fast Role Swap\"\n Section 8.3.3.19.5, \"Policy Engine in Source to Sink Fast Role Swap State Diagram\"\n Section 8.3.3.19.6, \"Policy Engine in Sink to Source Fast Role Swap State Diagram\"\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 137 Section 9.1.2, \"Mapping to USB Device States\" for VBUS mapping to USB states."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.20",
    "title": "Get_PPS_Status",
    "full_path": "6.3.20 Get_PPS_Status",
    "page": 137,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_PPS_Status Message is sent by the Sink to request additional information about a Source 's status. The Port\nShall respond by returning a PPS_Status Message (see Section 6.5.10, \"PPS_Status Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.21",
    "title": "Get_Country_Codes",
    "full_path": "6.3.21 Get_Country_Codes",
    "page": 137,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Country_Codes Message is sent by a Port to request the alpha-2 country codes its Port Partner supports as\ndefined in [ISO 3166] . The Port Partner Shall respond by returning a Country_Codes Message (see Section 6.5.11,\n\"Country_Codes Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.22",
    "title": "Get_Sink_Cap_Extended Message",
    "full_path": "6.3.22 Get_Sink_Cap_Extended Message",
    "page": 137,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Sink_Cap_Extended (Get Sink Capabilities Extended) Message is sent by a Port to request additional\ninformation about a Port 's Sink Capabilities . The Port Shall respond by returning a Sink_Capabilities_Extended\nMessage (see Section 6.5.13, \"Sink_Capabilities_Extended Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.23",
    "title": "Get_Source_Info Message",
    "full_path": "6.3.23 Get_Source_Info Message",
    "page": 137,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Source_Info Message is sent by a Port to request the type, maximum Capabilities and present Capabilities\nof the Port when it is operating as a Source . The Port Shall respond by returning the Source_Info Message (See\nSection 6.4.11, \"Source_Info Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.3.24",
    "title": "Get_Revision Message",
    "full_path": "6.3.24 Get_Revision Message",
    "page": 137,
    "level": 3,
    "parent_id": "6.3",
    "tags": [],
    "content": "The Get_Revision Message is sent by a Port using SOP to request the Revision and Version of the Power Delivery\nSpecification its Port Partner supports.\nThe Port Partner Shall respond by returning a Revision Message (See Section 6.4.12, \"Revision Message\" ).\nThe Get_Revision Message May also be sent to a Cable Plug to request the Revision and Version of the Power\nDelivery Specification it supports using SOP’ /SOP’’ .\nThe Active Cable Shall respond by returning a Revision Message (see Section 6.4.12, \"Revision Message\" ).\nPage 138 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4 Data Message\nA Data Message Shall consist of a Message Header and be followed by one or more Data Object s. Data Message s are\neasily identifiable because the Number of Data Objects field in the Message Header is a non-zero value.\nThere are many types of Data Object s used to compose Data Message s. Some examples are:\n Power Data Object (PDO) used to expose a Source Port 's power Capabilities or a Sink 's power\nrequirements.\n Request Data Object ( RDO ) used by a Sink Port to Negotiate an Explicit Contract .\n Vendor Data Object (VDO ) used to convey vendor specific information.\n BIST Data Object (BDO ) used for PHY Layer compliance testing.\n Battery Status Data Object (BSDO) used to convey Battery status information.\n Alert Data Object (ADO) used to indicate events occurring on the Source or Sink .\nThe type of Data Object being used in a Data Message is defined by the Message Header 's Message Type field and\nis summarized in Table 6.6, \"Data Message Types\" . The Sent by column indicates entities which May send the given\nMessage (Source , Sink or Cable Plug ); entities not listed Shall Not issue the corresponding Message . The \"Valid Start\nof Packet\" column indicates the Message s which Shall only be issued in SOP Packet s and the Message s which May\nbe issued in SOP* Packet s.\nTable 6.6 Data Message Types\nBits 4…0 Type Sent by Description Valid Start of\nPacket\n0_0000 Reserved N/AAll values not explicitly defined are\nReserved and Shall Not be used.N/A\n0_0001 Source_Capabilities Source or Dual-Role Power See Section 6.4.1.5 SOP only\n0_0010 Request Sink only See Section 6.4.2 SOP only\n0_0011 BIST Tester , Source or Sink See Section 6.4.3 SOP*\n0_0100 Sink_Capabilities Sink or Dual-Role Power See Section 6.4.2 SOP only\n0_0101 Battery_Status Source or Sink See Section 6.4.5 SOP only\n0_0110 Alert Source or Sink See Section 6.4.6 SOP only\n0_0111 Get_Country_Info Source or Sink See Section 6.4.7 SOP only\n0_1000 Enter_USB DFP See Section 6.4.8 SOP*\n0_1001 EPR_Request Sink See Section 6.4.9 SOP only\n0_1010 EPR_Mode Source or Sink See Section 6.4.10 SOP only\n0_1011 Source_Info Source See Section 6.4.11 SOP only\n0_1100 Revision Source , Sink or Cable Plug See Section 6.4.12 SOP*\n0_1101…0\n_1110Reserved N/AAll values not explicitly defined are\nReserved and Shall Not be used.N/A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1111 Vendor_Defined Source , Sink or Cable Plug See Section 6.4.4 SOP*",
    "full_path": "0 1111 Vendor_Defined Source , Sink or Cable Plug See Section 6.4.4 SOP*",
    "page": 138,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1_0000…1\n_1111Reserved N/AAll values not explicitly defined are\nReserved and Shall Not be used.N/A\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1396.4.1 Capabilities Message\nThere are two distinct Capabilities Message s: one used while in SPR Mode and another while in EPR Mode . This\nsection defines the Capabilities Message s specific to the SPR Mode and Section 6.5.15, \"EPR Capabilities Message\"\ndefines the Capabilities Message s specific to the EPR Mode ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.1",
    "title": "Power Data Objects",
    "full_path": "6.4.1.1 Power Data Objects",
    "page": 139,
    "level": 4,
    "parent_id": "6.4.1",
    "tags": [],
    "content": "Sections Section 6.4.1.5, \"SPR Source Capabilities Message\" and Section 7.1.3, \"Types of Sources\" describes the Power\nData Object s (PDOs) used in the construction of a Capabilities Message for both SPR Mode and EPR Mode .\nThere are three types of Power Data Object s. They contain additional information beyond that encoded in the\nMessage Header to identify each of the three types of Power Data Object s:\n Fixed Supply is used to expose well-regulated fixed voltage power supplies.\n Variable Supply is used to expose very poorly regulated power supplies.\n Battery Supply is used to expose batteries that can be directly connected to VBUS.\nThere are three types of Augmented Power Data Object s:\n SPR PPS is used to expose a power supply whose output voltage can be programmatically adjusted over\nthe Advertised voltage range and limited by the Source to a programmable current limit.\n SPR AVS and EPR AVS are used to expose a power supply whose output voltage can be adjusted over the\nAdvertised voltage range but otherwise is equivalent to a Fixed Supply (AVS does not support a\nprogrammable current limit).\nPower Data Object s are also used to expose additional Capabilities that May be utilized, such as in the case of a\nPower Role Swap .\nA list of one or more Power Data Object s Shall be sent by the Source to convey its Capabilities . The Sink May then\nrequest one of these Capabilities by returning a Request Data Object that contains an index to a Power Data Object ,\nto Negotiate a mutually agreeable Explicit Contract .\nWhere Maximum and Minimum voltage and current values are given in PDOs these Shall be taken to be absolute\nvalues.\nThe Source and Sink Shall Not Negotiate a power level that would allow the current to exceed the maximum current\nsupported by their receptacles or the Attached plug (see [USB Type-C 2.4] ). The Source Shall limit its offered\nCapabilities to the maximum current supported by its receptacle and Attached plug. A Sink Shall only make a\nrequest from any of the Capabilities offered by the Source . For further details see Section 4.4, \"Cable Type Detection\" .\nSource s expose their power Capabilities by sending a Source_Capabilities Message . Sink s expose their power\nrequirements by sending a Sink_Capabilities Message . Both are composed of several 32-bit Power Data Object s\n(see Table 6.7, \"Power Data Object\" ).\nTable 6.7 Power Data Object\nBit(s) Description\nValue Parameter\nB31…3000b Fixed Supply (Vmin = Vmax)\n01b Battery\n10b Variable Supply (non- Battery )\n11b Augmented Power Data Object ( APDO )\nB29…0 Specific Power Capabilities are described by the PDO s in the following sections.\nPage 140 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Augmented Power Data Object (APDO ) is defined to allow support for more than the four PDO types by\nextending the Power Data Object field from 2 to 4 bits when the B31…B30 are 11b. The generic APDO structure is\nshown in Table 6.8, \"Augmented Power Data Object\" .\nTable 6.8 Augmented Power Data Object\nBit(s) Description\nValue Parameter\nB31…30 11b Augmented Power Data Object ( APDO )\nB29…2800b SPR PPS\n01b EPR AVS\n10b SPR AVS\n11b Reserved\nB27…0 Specific Power Capabilities are described by the APDO s in the following sections.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1416.4.1.2 Source Power Data Objects\nThis section lists the types of PDOs a Source can use in an SPR Capabilities or EPR Capabilities Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1",
    "title": "Fixed Supply Power Data Object",
    "full_path": "6.4.1.2.1 Fixed Supply Power Data Object",
    "page": 141,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.9, \"Fixed Supply PDO – Source\" describes the Fixed Supply (00b) PDO. See Section 7.1.3, \"Types of Sources\" for\nthe electrical requirements of the power supply.\nSince all USB Provider s support vSafe5V , the required vSafe5V Fixed Supply Power Data Object is also used to\nconvey additional information that is returned in bits 29…23. All other Fixed Supply Power Data Object s Shall set\nbits 29…23 to zero.\nFor a Source offering no Capabilities , the Voltage field (B19…10) Shall be set to 5V and the Maximum Current field\nShall be set to 0mA. This is used in cases such as a Dual-Role Power device which offers no Capabilities in its default\nPower Role or when external power is required to offer power.\nWhen a Source wants a Sink , consuming power from VBUS, to go to its lowest power state, the Voltage field\n(B19…10) Shall be set to 5V and the Maximum Current field Shall be set to 0mA. This is used in cases where the\nSource wants the Sink to draw pSnkSusp."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.1",
    "title": "Dual-Role Power",
    "full_path": "6.4.1.2.1.1 Dual-Role Power",
    "page": 141,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable i.e., supports the PR_Swap Message .\nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role .\nIf the Dual-Role Power bit is set to one in the Source_Capabilities Message the Dual-Role Power bit in the\nSink_Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the\nSource_Capabilities Message the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.2",
    "title": "USB Suspend Supported",
    "full_path": "6.4.1.2.1.2 USB Suspend Supported",
    "page": 141,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "Prior to an Explicit Contract or when the USB Communications Capable bit is set to zero, the USB Suspend\nSupported flag is undefined and Sink s Shall follow the rules for suspend as defined in [USB 2.0] , [USB 3.2] , [USB4] ,\n[USB Type-C 2.4] or [USBBC 1.2] . After an Explicit Contract has been Negotiated :\n If the USB Suspend Supported flag is set, then the Sink Shall follow the [USB 2.0] , [USB 3.2] or [USB4]\nrules for suspend and resume. A PDUSB Peripheral May draw up to pSnkSusp during suspend; a PDUSB\nHub May draw up to pHubSusp during suspend (see Section 7.2.3, \"Sink Standby\" ).Table 6.9 Fixed Supply PDO – Source\nBit(s) Field Description\nB31…30 Fixed Supply 00b - Fixed Supply PDO\nB29 Dual-Role Power Set to ‘1’ for Dual-Role Power device.\nB28 USB Suspend Supported Set to ‘1’ if USB suspend is supported.\nB27 Unconstrained Power Set to ‘1’ if unconstrained power is available.\nB26 USB Communications Capable Set to ‘1’ if capable of USB Communication s capable\nB25 Dual-Role Data Set to ‘1’ for a Dual-Role Data device.\nB24Unchunked Extended Messages\nSupportedSet to ‘1 if Unchunked Extended Message s are supported.\nB23 EPR Capable Set to ‘1 if EPR Capable .\nB22 Reserved Reserved – Shall be set to zero.\nB21…20 Peak Current Peak Current value.\nB19…10 Voltage Voltage in 50mV units\nB9…0 Maximum Current Maximum current in 10mA units\nPage 142 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 If the USB Suspend Supported flag is cleared, then the Sink Shall Not apply the [USB 2.0] , [USB 3.2] or\n[USB4] rules for suspend and May continue to draw the Negotiated power.\nNote: When USB is suspended, the USB device state is also suspended.\nSink s May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting\nthe No USB Suspend flag in a Request Message (see Section 6.4.2.5, \"No USB Suspend\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.3",
    "title": "Unconstrained Power",
    "full_path": "6.4.1.2.1.3 Unconstrained Power",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to\nadequately power the system while charging external devices, or when the device's primary function is to charge\nexternal devices.\nTo set the Unconstrained Power bit because of an external source, the external source of power Should be either:\n An AC Supply , e.g., a Charger , directly connected to the Sink .\n Or, in the case of a PDUSB Hub :\n A PD Source with its Unconstrained Power bit set.\n Multiple PD Source s all with their Unconstrained Power bits set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.4",
    "title": "USB Communications Capable",
    "full_path": "6.4.1.2.1.4 USB Communications Capable",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The USB Communications Capable bit Shall only be set for Source s capable of communication over the USB data\nlines (e.g., D+/- or SS Tx/Rx)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.5",
    "title": "Dual-Role Data",
    "full_path": "6.4.1.2.1.5 Dual-Role Data",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The Dual-Role Data bit Shall be set when the Port is Dual-Role Data capable i.e., it supports the DR_Swap Message .\nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role\nor Data Role . If the Dual-Role Data bit is set to one in the Source_Capabilities Message the Dual-Role Data bit in\nthe Sink_Capabilities Message Shall also be set to one. If the Dual-Role Data bit is set to zero in the\nSource_Capabilities Message the Dual-Role Data bit in the Sink_Capabilities Message Shall also be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.6",
    "title": "Unchunked Extended Messages Supported",
    "full_path": "6.4.1.2.1.6 Unchunked Extended Messages Supported",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The Unchunked Extended Messages Supported bit Shall be set when the Port can send and receive Extended\nMessage s with Data Size > MaxExtendedMsgLegacyLen bytes in a single, Unchunked Extended Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.7",
    "title": "EPR Mode Capable",
    "full_path": "6.4.1.2.1.7 EPR Mode Capable",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The EPR Capable bit is a Static bit that Shall be set if the Source is designed to supply more than 100W and operate\nin EPR Mode .\nWhen this bit is set, an EPR Source :\n Operating in SPR Mode Shall only send an EPR_Source_Capabilities Message in response to an\nEPR_Get_Source_Cap Message\n May only enter EPR Mode when the Cable and the Sink also report that they are EPR Capable ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.1.8",
    "title": "Peak Current",
    "full_path": "6.4.1.2.1.8 Peak Current",
    "page": 142,
    "level": 6,
    "parent_id": "6.4.1.2.1",
    "tags": [],
    "content": "The USB Power Delivery Fixed Supply is only required to deliver the amount of current requested in the Operating\nCurrent field ( IoC) of an RDO . In some usages however, for example computer systems, where there are short\nbursts of activity, it might be desirable to overload the Source for short periods.\nFor example, when a computer system tries to maintain average power consumption, the higher the peak current,\nthe longer the low current (see Section 7.2.8, \"Sink Peak Current Operation\" ) period needed to maintain such\naverage power. The Peak Current field allows a Source to Advertise this additional capability. This capability is\nintended for direct Port to Port connections only and Shall Not be offered to downstream Sink s via a Hub .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 143Every Fixed Supply PDO Shall contain a Peak Current field. Supplies that want to offer a set of overload Capabilities\nShall Advertise this through the Peak Current field in the corresponding Fixed Supply PDO (see Table 6.10, \"Fixed\nPower Source Peak Current Capability\" ). Supplies that do not support an overload capability Shall set these bits to\n00b in the corresponding Fixed Supply PDO. Supplies that support an extended overload capability specified in the\nPeakCurrent1…3 fields of the Source_Capabilities_Extended Message (see Section 6.5.1,\n\"Source_Capabilities_Extended Message\" ) Shall also set these bits to 00b. Sink s wishing to utilize these Extended\nCapabilities Shall first send the Get_Source_Cap_Extended Message to determine what Capabilities , if any are\nsupported by the Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.2",
    "title": "Variable Supply (non-Battery) Power Data Object",
    "full_path": "6.4.1.2.2 Variable Supply (non-Battery) Power Data Object",
    "page": 143,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.11, \"Variable Supply (non-Battery) PDO – Source\" describes a Variable Supply (non- Battery ) (10b) PDO for\na Source . See Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall define the range that output voltage Shall fall within. This does not indicate the voltage that\nwill be supplied, except it Shall fall within that range. The absolute voltage, including any voltage variation, Shall\nNot fall below the Minimum Voltage field value and Shall Not exceed the Maximum Voltage field value. The\nMinimum Voltage field value Shall Not be less than 80% of the Maximum Voltage field value."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.3",
    "title": "Battery Supply Power Data Object",
    "full_path": "6.4.1.2.3 Battery Supply Power Data Object",
    "page": 143,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.12, \"Battery Supply PDO – Source\" describes a Battery Supply (01b) PDO for a Source . See Section 7.1.3,\n\"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall represent the Battery 's voltage range. The Battery Shall be capable of supplying the Power\nvalue over the entire voltage range. The absolute voltage, including any voltage variation, Shall Not fall below the\nMinimum Voltage field value and Shall Not exceed the Maximum Voltage field value.\nNote: The Battery Supply PDO uses power instead of current.Table 6.10 Fixed Power Source Peak Current Capability\nBits 21…20 Description\n00Peak current equals IoC (default) or look at the Source_Capabilities_Extended Message (send\nGet_Source_Cap_Extended Message )\n01Overload Capabilities :\n1. Peak current equals 150% IoC for 1ms @ 5% duty cycle (low current equals 97% IoC for 19ms)\n2. Peak current equals 125% IoC for 2ms @ 10% duty cycle (low current equals 97% IoC for 18ms)\n3. Peak current equals 110% IoC for 10ms @ 50% duty cycle (low current equals 90% IoC for 10ms)\n10Overload Capabilities :\n1. Peak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2. Peak current equals 150% IoC for 2ms @ 10% duty cycle (low current equals 94% IoC for 18ms)\n3. Peak current equals 125% IoC for 10ms @ 50% duty cycle (low current equals 75% IoC for 10ms)\n11Overload Capabilities :\n1. Peak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2. Peak current equals 175% IoC for 2ms @ 10% duty cycle (low current equals 92% IoC for 18ms)\n3. Peak current equals 150% IoC for 10ms @ 50% duty cycle (low current equals 50% IoC for 10ms)\nTable 6.11 Variable Supply (non-Battery) PDO – Source\nBit(s) Field Description\nB31…30 Variable Supply 01b - Variable Supply (non- Battery ) PDO\nB29…20 Maximum Voltage Maximum voltage in 50mV units\nB19…10 Minimum Voltage Minimum voltage in 50mV units\nB9…0 Maximum Current Maximum current in 10mA units\nPage 144 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Sink May monitor the Battery voltage.\nTable 6.12 Battery Supply PDO – Source\nBit(s) Field Description\nB31…30 Battery Supply 10b - Battery Supply PDO\nB29…20 Maximum Voltage Maximum voltage in 50mV units\nB19…10 Minimum Voltage Minimum voltage in 50mV units\nB9…0 Maximum Allowable Power Maximum allowable power in 250mW units\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1456.4.1.2.4 Augmented Power Data Object (APDO)\nThe voltage fields define the output voltage range over which the power supply Shall be adjustable in 20mV steps\nin SPR PPS Mode and 100mV steps in both SPR AVS Mode and EPR AVS Mode . The Maximum Current field contains\nthe current the Programmable Power Supply Shall be capable of delivering over the Advertised voltage range. See\nSection 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.1",
    "title": "SPR Programmable Power Supply APDO",
    "full_path": "6.4.1.2.4.1 SPR Programmable Power Supply APDO",
    "page": 145,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.13, \"SPR Programmable Power Supply APDO – Source\" below describes the SPR PPS (1100b) APDO for a\nSource operating in SPR Mode and supplying 5V up to 21V.\nThe PPS APDO is used primarily for Sink Directed Charge Directed Charge of a Battery in the Sink . When applying a\ncurrent to the Battery greater than the cable supports, a high efficiency fixed voltage scaler May be used in the Sink\nto reduce the cable current."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.1.1",
    "title": "PPS Power Limited",
    "full_path": "6.4.1.2.4.1.1 PPS Power Limited",
    "page": 145,
    "level": 7,
    "parent_id": "6.4.1.2.4.1",
    "tags": [],
    "content": "When the PPS Power Limited bit is set, the SPR PPS Source Shall operate in the same way as if the PPS Power\nLimited bit is clear (see Section 7.1.4.2, \"SPR Programmable Power Supply (PPS)\" with the below exception:\n May supply power that exceeds the Source 's rated PDP within the Optional operating area in Figure 7.7,\n\"SPR PPS Constant Power\" .\nWhen the PPS Power Limited bit is cleared, the SPR PPS Source Shall deliver the Maximum Current field value up\nto the Maximum Voltage as Advertised in its APDO .\nThe SPR PPS Source Shall Not reject an RDO with an Operating Current field value that is less than or equal to the\nMaximum Current field value in the APDO even if the requested Operating Current field value is greater than the\nSource 's PDP/requested Output voltage.Table 6.13 SPR Programmable Power Supply APDO – Source\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 SPR PPS 00b – SPR PPS\nB27 PPS Power Limited Set to ‘1’ when PPS Power Limited\nB26…25 Reserved Reserved – Shall be set to zero.\nB24…17 Maximum Voltage Maximum voltage in 100mV increments\nB16 Reserved Reserved – Shall be set to zero.\nB15…8 Minimum Voltage Minimum voltage in 100mV increments\nB7 Reserved Reserved – Shall be set to zero.\nB6...0 Maximum Current Maximum current in 50mA increments\nPage 146 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.1.2.4.2 SPR Adjustable Voltage Supply APDO\nTable 6.14, \"SPR Adjustable Voltage Supply APDO – Source\" below describes the SPR AVS (1110b) APDO for a Source\noperating in SPR Mode and supplying 9V up to 20V."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.2.1",
    "title": "Peak Current",
    "full_path": "6.4.1.2.4.2.1 Peak Current",
    "page": 146,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Peak Current field follows the same definition as for the Peak Current field (see Section 6.4.1.2.1.8, \"Peak\nCurrent\" and Table 6.10, \"Fixed Power Source Peak Current Capability\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.3",
    "title": "EPR Adjustable Voltage Supply APDO",
    "full_path": "6.4.1.2.4.3 EPR Adjustable Voltage Supply APDO",
    "page": 146,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.15, \"EPR Adjustable Voltage Supply APDO – Source\" below describes the EPR AVS (1101b) APDO for a Source\noperating in EPR Mode and supplying 15V up to 48V."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.3.1",
    "title": "PDP",
    "full_path": "6.4.1.2.4.3.1 PDP",
    "page": 146,
    "level": 7,
    "parent_id": "6.4.1.2.4.3",
    "tags": [],
    "content": "The PDP field Shall contain the AVS Port 's PDP.\nSee Section 10.2.3.3, \"Optional Normative Extended Power Range (EPR)\" and Figure 10.6, \"Valid EPR AVS Operating\nRegion\" for more information regarding how PDP in the AVS APDO relates to maximum available current."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.2.4.3.2",
    "title": "Peak Current",
    "full_path": "6.4.1.2.4.3.2 Peak Current",
    "page": 146,
    "level": 7,
    "parent_id": "6.4.1.2.4.3",
    "tags": [],
    "content": "The USB Power Delivery EPR AVS is only required to deliver the amount of current requested in the Operating\nCurrent field ( IoC) of an AVS RDO . In some usages however, for example computer systems, where there are short\nbursts of activity, it might be desirable to overload the Source for short periods.\nFor example, when a computer system tries to maintain average power consumption, the higher the peak current,\nthe longer the low current period needed to maintain such average power (see Section 7.2.8, \"Sink Peak Current\nOperation\" ). The Peak Current (Source EPR AVS) field allows a Source to Advertise this additional capability. This Table 6.14 SPR Adjustable Voltage Supply APDO – Source\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 SPR AVS 10b – SPR AVS\nB27…26 Peak CurrentPeak Current (see Table 6.10, \"Fixed Power Source Peak Current\nCapability\" ))\nB25…20 Reserved Reserved – Shall be set to zero.\nB19…10 Maximum Current 15VFor 9V – 15V range: Maximum current in 10mA units equal to the\nMaximum Current field of the 15V Fixed Supply PDO\nB9…0 Maximum Current 20VFor 15V – 20V range: Maximum current in 10mA units equal to the\nMaximum Current field of the 20V Fixed Supply PDO , set to 0 if the\nmaximum voltage in the SPR AVS range is 15V.\nTable 6.15 EPR Adjustable Voltage Supply APDO – Source\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 EPR AVS 01b – EPR AVS\nB27…26 Peak Current (Source EPR AVS)Peak Current (see Table 6.16, \"EPR AVS Power Source Peak Current\nCapability\" )\nB25…17 Maximum Voltage Maximum voltage in 100mV increments\nB16 Reserved Reserved – Shall be set to zero.\nB15…8 Minimum Voltage Minimum voltage in 100mV increments\nB7…0 PDP PDP in 1W increments\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 147capability is intended for direct Port to Charger connections only and Shall Not be offered to downstream Sink s via\na Hub .\nEvery EPR AVS APDO Shall contain a Peak Current (Source EPR AVS) field. Supplies that want to offer a set of\noverload Capabilities Shall Advertise this through the Peak Current (Source EPR AVS) field in the corresponding\nEPR AVS APDO (see Table 6.16, \"EPR AVS Power Source Peak Current Capability\" . Supplies that do not support an\noverload capability Shall set these bits to 00b in the corresponding EPR AVS APDO . Supplies that support an\nextended overload capability specified in the PeakCurrent1…3 fields of the Source_Capabilities_Extended\nMessage (see Section 6.5.1, \"Source_Capabilities_Extended Message\" ) Shall set these bits to 00b. Sink s wishing to\nutilize these Extended Capabilities Shall first send a Get_Source_Cap_Extended Message to determine what\nCapabilities , if any are supported by the Source .\nTable 6.16 EPR AVS Power Source Peak Current Capability\nBits 21…20 Description\n00Peak current equals IoC (default) or look at the Source_Capabilities_Extended Message (send\nGet_Source_Cap_Extended Message )\n01Overload Capabilities :\n1. Peak current equals 150% IoC for 1ms @ 5% duty cycle (low current equals 97% IoC for 19ms)\n2. Peak current equals 125% IoC for 2ms @ 10% duty cycle (low current equals 97% IoC for 18ms)\n3. Peak current equals 110% IoC for 10ms @ 50% duty cycle (low current equals 90% IoC for 10ms)\n10Overload Capabilities :\n1. Peak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2. Peak current equals 150% IoC for 2ms @ 10% duty cycle (low current equals 94% IoC for 18ms)\n3. Peak current equals 125% IoC for 10ms @ 50% duty cycle (low current equals 75% IoC for 10ms)\n11Overload Capabilities :\n1. Peak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2. Peak current equals 175% IoC for 2ms @ 10% duty cycle (low current equals 92% IoC for 18ms)\n3. Peak current equals 150% IoC for 10ms @ 50% duty cycle (low current equals 50% IoC for 10ms)\nPage 148 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.1.3 Sink Power Data Objects\nThis section lists the types of PDOs a Sink can use in an SPR or EPR Capabilities Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1",
    "title": "Sink Fixed Supply Power Data Object",
    "full_path": "6.4.1.3.1 Sink Fixed Supply Power Data Object",
    "page": 148,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.17, \"Fixed Supply PDO – Sink\" describes the Sink Fixed Supply (00b) PDO. See Section 7.1.3, \"Types of Sources\"\nfor the electrical requirements of the power supply. The Sink Shall set the Voltage field to its required voltage and\nthe Operational Current field to its required operating current. Required operating current is defined as the\namount of current a given device needs to be functional. This value could be the maximum current the Sink will\never require or could be sufficient to operate the Sink in one of its modes of operation.\nSince all USB Consumer s support vSafe5V , the required vSafe5V Fixed Supply Power Data Object is also used to\nconvey additional information that is returned in bits 29 through 20. All other Fixed Supply Power Data Object s\nShall set bits 29…20 to zero.\nFor a Sink requiring no power from the Source , the Voltage field Shall be set to 5V and the Operational Current\nfield Shall be set to 0mA."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.1",
    "title": "Dual-Role Power",
    "full_path": "6.4.1.3.1.1 Dual-Role Power",
    "page": 148,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "The Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable i.e., supports the PR_Swap Message .\nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role .\nIf the Dual-Role Power bit is set to one in the Source_Capabilities Message the Dual-Role Power bit in the\nSink_Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the\nSource_Capabilities Message the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.2",
    "title": "Higher Capability",
    "full_path": "6.4.1.3.1.2 Higher Capability",
    "page": 148,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "In the case that the Sink needs more than vSafe5V (e.g., 15V) to provide full functionality, then the Higher\nCapability bit Shall be set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.3",
    "title": "Unconstrained Power",
    "full_path": "6.4.1.3.1.3 Unconstrained Power",
    "page": 148,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "The Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to\nadequately power the system while charging external devices, or when the device's primary function is to charge\nexternal devices.Table 6.17 Fixed Supply PDO – Sink\nBit(s) Field Description\nB31…30 Fixed Supply 00b - Fixed Supply PDO\nB29 Dual-Role Power Set to ‘1’ if Dual-Role Power supported\nB28 Higher Capability Set to ‘1’ if Higher Capability supported\nB27 Unconstrained Power Set to ‘1’ if Unconstrained Power supported\nB26 USB Communications Capable Set to ‘1’ if USB Communication s Capable\nB25 Dual-Role Data Dual-Role Data\nB24...23Fast Role Swap required USB Type-C\nCurrentFast Role Swap required USB Type-C current (see also [USB Type-C\n2.4] ):\nValue Description\n00b Fast Role Swap not supported (default)\n01b Default USB Port\n10b 1.5A@5V\n11b 3.0A@5V\nB22...20 Reserved Reserved – Shall be set to zero.\nB19…10 Voltage Voltage in 50mV units\nB9…0 Operational Current Operational current in 10mA units\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 149To set the Unconstrained Power bit because of an external source, the external source of power Should be either:\n An AC Supply , e.g., a Charger , directly connected to the Sink .\n Or, in the case of a PDUSB Hub :\n A PD Source with its Unconstrained Power bit set.\n Multiple PD Source s all with their Unconstrained Power bits set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.4",
    "title": "USB Communications Capable",
    "full_path": "6.4.1.3.1.4 USB Communications Capable",
    "page": 149,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "The USB Communications Capable bit Shall only be set for Sink s capable of communication over the USB data\nlines (e.g., D+/- or SS Tx/Rx)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.5",
    "title": "Dual-Role Data",
    "full_path": "6.4.1.3.1.5 Dual-Role Data",
    "page": 149,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "The Dual-Role Data bit Shall be set when the Port is Dual-Role Data capable i.e., it supports the DR_Swap Message .\nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role\nor Data Role . If the Dual-Role Data bit is set to one in the Source_Capabilities Message the Dual-Role Data bit in\nthe Sink_Capabilities Message Shall also be set to one. If the Dual-Role Data a bit is set to zero in the\nSource_Capabilities Message the Dual-Role Data bit in the Sink_Capabilities Message Shall also be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.1.6",
    "title": "Fast Role Swap USB Type-C Current",
    "full_path": "6.4.1.3.1.6 Fast Role Swap USB Type-C Current",
    "page": 149,
    "level": 6,
    "parent_id": "6.4.1.3.1",
    "tags": [],
    "content": "The Fast Role Swap required USB Type-C Current field Shall indicate the current level the Sink will require after\na Fast Role Swap has been performed.\nThe Initial Source Shall Not transmit a Fast Role Swap Request if the Fast Role Swap required USB Type-C Current\nfield is set to zero.\nInitially when the New Source applies vSafe5V it will have Rd asserted but Shall provide the USB Type-C current\nindicated by the New Sink in this field. If the New Source is not able to supply this level of current, it Shall Not\nperform a Fast Role Swap . When Rp is asserted by the New Source during the Fast Role Swap AMS (see Section 6.3.19,\n\"FR_Swap Message\" ), the value of USB Type-C current indicated by Rp Shall be the same or greater than that\nindicated in the Fast Role Swap required USB Type-C Current field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.2",
    "title": "Variable Supply (non-Battery) Power Data Object",
    "full_path": "6.4.1.3.2 Variable Supply (non-Battery) Power Data Object",
    "page": 149,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.18, \"Variable Supply (non-Battery) PDO – Sink\" describes a Variable Supply (non- Battery ) (10b) PDO used\nby a Sink . See Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational\nCurrent field Shall be set to the operational current that the Sink requires at the given voltage range. The absolute\nvoltage, including any voltage variation, Shall Not fall below the Minimum Voltage field value and Shall Not\nexceed the Maximum Voltage field value. Required operating current is defined as the amount of current a given\ndevice needs to be functional. This value could be the maximum current the Sink will ever require or could be\nsufficient to operate the Sink in one of its modes of operation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.3",
    "title": "Battery Supply Power Data Object",
    "full_path": "6.4.1.3.3 Battery Supply Power Data Object",
    "page": 149,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.19, \"Battery Supply PDO – Sink\" describes a Battery Supply (01b) PDO used by a Sink . See Section 7.1.3,\n\"Types of Sources\" for the electrical requirements of the power supply.Table 6.18 Variable Supply (non-Battery) PDO – Sink\nBit(s) Field Description\nB31…30 Variable Supply 01b - Variable Supply (non- Battery ) PDO\nB29…20 Maximum Voltage Maximum voltage in 50mV units\nB19…10 Minimum Voltage Minimum voltage in 50mV units\nB9…0 Operational Current Operational current in 10mA units\nPage 150 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational Power\nfield Shall be set to the operational power that the Sink requires at the given voltage range. The absolute voltage,\nincluding any voltage variation, Shall Not fall below the Minimum Voltage field value and Shall Not exceed the\nMaximum Voltage field value.\nNote: Only the Battery Supply PDO uses power instead of current.\nRequired operating power is defined as the amount of power a given device needs to be functional. This value could\nbe the maximum power the Sink will ever require or could be sufficient to operate the Sink in one of its modes of\noperation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.4",
    "title": "Augmented Power Data Objects",
    "full_path": "6.4.1.3.4 Augmented Power Data Objects",
    "page": 150,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "See Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe Maximum and Minimum voltage fields Shall be set to the output voltage range that the Sink requires to\noperate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.4.1",
    "title": "SPR Programmable Power Supply APDO",
    "full_path": "6.4.1.3.4.1 SPR Programmable Power Supply APDO",
    "page": 150,
    "level": 6,
    "parent_id": "6.4.1.3.4",
    "tags": [],
    "content": "Table 6.20, \"SPR Programmable Power Supply APDO – Sink\" below describes a SPR PPS APDO for a Sink operating in\nSPR Mode and consuming 21V or less. The Maximum Current field Shall be set to the maximum current the Sink\nrequires over the voltage range. The maximum current is defined as the maximum amount of current the device\nneeds to fully support its function (e.g., Sink Directed Charge ).Table 6.19 Battery Supply PDO – Sink\nBit(s) Field Description\nB31…30 Battery Supply 10b - Battery Supply PDO\nB29…20 Maximum Voltage Maximum voltage in 50mV units\nB19…10 Minimum Voltage Minimum voltage in 50mV units\nB9…0 Operational Power Operational Power in 250mW units\nTable 6.20 SPR Programmable Power Supply APDO – Sink\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 SPR PPS 00b – SPR PPS\nB27…25 Reserved Reserved – Shall be set to zero.\nB24…17 Maximum Voltage Maximum voltage in 100mV increments\nB16 Reserved Reserved – Shall be set to zero.\nB15…8 Minimum Voltage Minimum voltage in 100mV increments\nB7 Reserved Reserved – Shall be set to zero.\nB6...0 Maximum Current Maximum current in 50mA increments\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1516.4.1.3.4.2 SPR Adjustable Voltage Supply APDO\nTable 6.21, \"SPR Adjustable Voltage Supply APDO – Sink\" below describes the SPR AVS (1110b) APDO for a Sink\noperating in SPR AVS Mode . The Maximum Current 15V /Maximum Current 20V fields in the SPR AVS APDO for\nthe Sink is defined as the maximum current the device needs to fully support its function."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.3.4.3",
    "title": "EPR Adjustable Voltage Supply APDO",
    "full_path": "6.4.1.3.4.3 EPR Adjustable Voltage Supply APDO",
    "page": 151,
    "level": 6,
    "parent_id": "6.4.1.3.4",
    "tags": [],
    "content": "Table 6.22, \"EPR Adjustable Voltage Supply APDO – Sink\" below describes a EPR AVS APDO for a Sink operating in\nEPR AVS Mode . The PDP field in the EPR AVS APDO for the Sink is defined as the PDP the device needs to fully\nsupport its function."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.4",
    "title": "SPR Capabilities Message Construction",
    "full_path": "6.4.1.4 SPR Capabilities Message Construction",
    "page": 151,
    "level": 4,
    "parent_id": "6.4.1",
    "tags": [],
    "content": "An SPR Capabilities Message (Source_Capabilities Message or Sink_Capabilities Message ) Shall have at least one\nPower Data Object for vSafe5V . The SPR Capabilities Message Shall also contain the sending Port 's information\nfollowed by up to 6 additional Power Data Object s. Power Data Object s in an SPR Capabilities Message Shall be sent\nin the following order:\n1) The vSafe5V Fixed Supply PDO Shall always be the first (A)PDO .\n2) The remaining Fixed Supply PDOs, if present, Shall be sent in voltage order; lowest to highest.\n3) The Battery Supply PDOs if present Shall be sent in Minimum voltage order; lowest to highest.\n4) The Variable Supply (non- Battery ) PDOs, if present, Shall be sent in Minimum voltage order; lowest to\nhighest.\n5) The SPR AVS APDO , if present, Shall be sent.\n6) The Programmable Power Supply APDO s, if present, Shall be sent in Maximum voltage order, lowest to\nhighest.\nNote: The EPR Capabilities Message construction is defined in Section 6.5.15.1, \"EPR Capabilities Message\nConstruction\" .Table 6.21 SPR Adjustable Voltage Supply APDO – Sink\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 SPR AVS 10b – SPR AVS\nB27…20 Reserved Reserved – Shall be set to zero.\nB19…10 Maximum Current 15VFor 9V – 15V range: Maximum current in 10mA units equal to the\nMaximum Current field of the 15V Fixed Supply PDO\nB9…0 Maximum Current 20VFor 15V – 20V range: Maximum Current in 10mA units equal to the\nMaximum Current field of the 20V Fixed Supply PDO , set to 0 if the\nMaximum voltage in the SPR AVS range is 15V.\nTable 6.22 EPR Adjustable Voltage Supply APDO – Sink\nBit(s) Field Description\nB31…30 APDO 11b – Augmented Power Data Object ( APDO )\nB29…28 EPR AVS 01b – EPR AVS\nB27…26 Reserved Reserved – Shall be set to zero.\nB25…17 Maximum Voltage Maximum voltage in 100mV increments\nB16 Reserved Reserved – Shall be set to zero.\nB15…8 Minimum Voltage Minimum voltage in 100mV increments\nB7…0 PDP PDP in 1W increments\nPage 152 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.12, \"SPR Capabilities Message Construction\" describes the construction of an SPR Capabilities Message . The\nMessage will always have at least one Fixed Supply 5V PDO and may have up to six more PDOs depending on the\nSource Capabilities .\nFigure 6.12 SPR Capabilities Message Construction\nFigure 6.13 Example Capabilities Message with 2 Power Data Objects\nIn the 27W Source as shown in Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\" , the Number\nof Data Objects field is 2: vSafe5V plus one other voltage.\nPower Data Object s (PDO) and Augmented Power Data Object s (APDO ) are identified by the Message Header 's\nMessage Type field. They are used to form SPR Capabilities Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.5",
    "title": "SPR Source Capabilities Message",
    "full_path": "6.4.1.5 SPR Source Capabilities Message",
    "page": 152,
    "level": 4,
    "parent_id": "6.4.1",
    "tags": [],
    "content": "Source s send a Source_Capabilities Message either as part of advertising Port Capabilities , or in response to a\nGet_Source_Cap Message . See Section 6.5.15.2, \"EPR_Source_Capabilities Message\" for information about EPR Source\nCapabilities Message s.\nFollowing a Hard Reset , a power-on event or plug insertion event, a Source Port Shall send a Source_Capabilities\nMessage after every SourceCapabilityTimer timeout as an Advertisements that Shall be interpreted by the Sink\nPort on Attachment . The Source Shall continue sending a minimum of nCapsCount Source_Capabilities Message s\nuntil a GoodCRC Message is received.\nAdditionally, a Source_Capabilities Message Shall only be sent by a Port in the following cases:\n By the Source Port from the PE_SRC_Ready state upon a change in its ability to supply power to this\nPort .\n By a Source Port or Dual-Role Power Port in response to a Get_Source_Cap Message .\n Optionally by a Source Port from the PE_SRC_Ready state when available power in a multi- Port system\nchanges, even if the Source Capabilities for this Port have not changed.\nA Source Port Shall report its Capabilities in a series of 32-bit Power Data Object s (see Table 6.7, \"Power Data\nObject\" ) as part of a Source_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power\nData Objects\" ). Power Data Object s are used to convey a Source Port 's Capabilities to provide power including Dual-\nRole Power ports presently operating as a Sink .\nEach Power Data Object Shall describe a specific Source capability such as a Battery (e.g., 2.8-4.1V) or a Fixed Supply\n(e.g., 15V) at a maximum allowable current. The Number of Data Objects field in the Message Header Shall define\nthe number of Power Data Object s that follow the Message Header in a Data Message . All Source s Shall minimally\noffer one Power Data Object that reports vSafe5V . A Source Shall Not offer multiple Power Data Object s of the same\ntype ( Fixed Supply , Variable Supply , Battery Supply ) and the same voltage but Shall instead offer one Power Data\nObject with the highest available current for that Source capability and voltage. Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bytesPDO",
    "full_path": "2 bytesPDO",
    "page": 152,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1PDO\n2PDO\n3PDO\n4PDO\n5PDO\n6PDO\n7\n001b 010b 011b 100b 101b 110b 111b\nHeader\nNo. of Data Objects = 2\nFixed 5V\nPDO\nFixed 9V\nPDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 153Sink s with Accessory Support do not source VBUS (see [USB Type-C 2.4] ). Sink s with Accessory Support are still\nconsidered Source s when sourcing V CONN to an Accessory even though VBUS is not applied; in this case they Shall\nAdvertise vSafe5V with the Maximum Current field set to 0mA in the first Power Data Object. The main purpose of\nthis is to enable the Sink with Accessory Support to get into the PE_SRC_Ready State to enter an Alternate Mode .\nA Sink in SPR Mode Shall evaluate every Source_Capabilities Message it receives and Shall respond with a Request\nMessage . If its power consumption exceeds the Source Capabilities it Shall Re-negotiate so as not to exceed the\nSource 's most recently Advertised Capabilities .\nA Sink , in SPR Mode , in an Explicit Contract with a PPS APDO , Shall periodically re-request the PPS APDO at least\nevery tPPSRequest until either:\n The Sink requests something other than PPS APDO .\n There is a Power Role Swap .\n There is a Hard Reset .\n There is Error Recovery .\nA Sink in EPR Mode that receives a Source_Capabilities Message in response to a Get_Source_Cap Message Shall\nNot respond with a Request Message . If a Sink in EPR Mode receives a Source_Capabilities Message , not in response\nto a Get_Source_Cap Message , the Sink Shall initiate a Hard Reset .\nA Source that has accepted a Request Message with a Programmable RDO Shall issue Hard Reset Signaling if it has\nnot received a Request Message with a Programmable RDO within tPPSTimeout. The Source Shall discontinue this\nbehavior after:\n Receiving a Request Message with a Fixed Supply , Variable Supply or Battery Supply RDO .\n There is a Power Role Swap .\n There is a Hard Reset .\n There is Error Recovery ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.6",
    "title": "SPR Sink Capabilities Message",
    "full_path": "6.4.1.6 SPR Sink Capabilities Message",
    "page": 153,
    "level": 4,
    "parent_id": "6.4.1",
    "tags": [],
    "content": "Sink s send a Sink_Capabilities Message (see Section 6.4.2, \"Request Message\" ) in response to a Get_Sink_Cap\nMessage . See Section 6.5.15.3, \"EPR_Sink_Capabilities Message\" for more information about the Capabilities Message .\nA USB Power Delivery capable Sink , upon detecting vSafe5V on VBUS and after a SinkWaitCapTimer timeout\nwithout seeing a Source_Capabilities Message , Shall send a Hard Reset . If the Attached Source is USB Power\nDelivery capable, it responds by sending Source_Capabilities Message s thus allowing power Negotiation s to begin.\nA Sink Port Shall report power levels it is able to operate at in a series of 32-bit Power Data Object s (see Section\nTable 6.7, \"Power Data Object\" ). These are returned as part of a Sink_Capabilities Message in response to a\nGet_Sink_Cap Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\" ). This is similar\nto that used for Source Port Capabilities with equivalent Power Data Object s for Fixed Supply , Variable Supply and\nBattery Supply as defined in this section. Power Data Object s are used to convey the Sink Port 's operational power\nrequirements including Dual-Role Power Port s presently operating as a Source .\nEach Power Data Object Shall describe a specific Sink operational power level, such as a Battery Supply (e.g., 2.8-\n4.1V) or a Fixed Supply (e.g., 15V). The Number of Data Objects field in the Message Header Shall define the\nnumber of Power Data Object s that follow the Message Header in a Data Message .\nAll Sink s Shall minimally offer one Power Data Object with a power level at which the Sink can operate. A Sink Shall\nNot offer multiple Power Data Object s of the same type ( Fixed Supply , Variable Supply , Battery Supply ) and the same\nvoltage but Shall instead offer one Power Data Object with the highest available current for that Sink capability and\nvoltage.\nAll Sink s Shall include one Power Data Object that reports vSafe5V even if they require additional power to operate\nfully. In the case where additional power is required for full operation the Higher Capability bit Shall be set.\nPage 154 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.1.6.1 Use by Dual-Role Power devices\nDual-Role Power devices send a Source_Capabilities Message (see Section 6.4.1.5, \"SPR Source Capabilities\nMessage\" ) as part of advertising Port Capabilities when operating in Source role. Dual-Role Power devices send a\nSource_Capabilities Message in response to a Get_Source_Cap Message regardless of their present operating role.\nSimilarly Dual-Role Power devices send a Sink_Capabilities Message (see Section 6.4.1.6, \"SPR Sink Capabilities\nMessage\" ) in response to a Get_Sink_Cap Message regardless of their present operating role."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.1.6.2",
    "title": "Management of the Power Reserve",
    "full_path": "6.4.1.6.2 Management of the Power Reserve",
    "page": 154,
    "level": 5,
    "parent_id": "6.4.1.6",
    "tags": [],
    "content": "This section has been removed. Refer to Section 8.2.5, \"Managing Power Requirements\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1556.4.2 Request Message\nA Request Message Shall be sent by a Sink to request power during the request phase of an SPR power Negotiation .\nThe Request Data Object Shall be returned by the Sink making a request for power. It Shall be sent in response to\nthe most recent Source_Capabilities Message (see Section 8.3.2.2, \"Power Negotiation\" ) when in SPR Mode . A\nRequest Message Shall return one and only one Sink Request Data Object that Shall identify the Power Data Object\nbeing requested.\nThe Source Shall respond to a Request Message with an Accept Message , a Wait Message or a Reject Message (see\nSection 6.9, \"Accept, Reject and Wait\" ).\nThe Request Message includes the requested power level. For example, if the Source_Capabilities Message\nincludes a Fixed Supply PDO that offers 9V @ 1.5A and if the Sink only wants 9V @ 0.5A, it will set the Operating\nCurrent field to 50 (i.e., 10mA * 50 = 0.5A).\nThe request uses a different format depending on the kind of power requested.\n The Fixed Supply Power Data Object and Variable Supply Power Data Object share a common format\nshown in Table 6.23, \"Fixed and Variable Request Data Object\" .\n The Battery Supply Power Data Object uses the format shown in Table 6.24, \"Battery Request Data\nObject\" .\n The PPS Request Data Object's format is shown in Table 6.25, \"PPS Request Data Object\" .\n The AVS Request Data Object's format is shown in Table 6.26, \"AVS Request Data Object\" .\nThe Request Data Object s are also used by the EPR_Request Message when operating in EPR Mode . See Section 6.4.9,\n\"EPR_Request Message\" for information about the use of the EPR_Request Message .\nA Source operating in EPR Mode that receives a Request Message Shall initiate a Hard Reset .\nTable 6.23 Fixed and Variable Request Data Object\nBit(s) Field Description\nB31…28 Object PositionObject position (0000b and 1110b…1111b are\nReserved and Shall Not be used)\nB27 Giveback GiveBack flag = 0 - Deprecated and Shall be set to zero.\nB26 Capability Mismatch Set to ‘1’ for a Capabilities Mismatch\nB25 USB Communications Capable Set to ‘1’ if USB Communication s Capable\nB24 No USB Suspend Set to ‘1’ if requesting No USB Suspend\nB23 Unchunked Extended Messages Supported Set to ‘1’ if Unchunked Extended Message s Supported\nB22 EPR Capable Set to ‘1’ if EPR Capable\nB21…20 Reserved Reserved – Shall be set to zero.\nB19…10 Operating Current Operating current in 10mA units\nB9…0 Maximum Operating Current Maximum Operating current 10mA units\nPage 156 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 6.24 Battery Request Data Object\nBit(s) Field Description\nB31…28 Object PositionObject position (0000b and 1110b…1111b are\nReserved and Shall Not be used)\nB27 Giveback GiveBack flag = 0- Deprecated and Shall be set to zero.\nB26 Capability Mismatch Set to ‘1’ for a Capabilities Mismatch\nB25 USB Communications Capable Set to ‘1’ if USB Communication s Capable\nB24 No USB Suspend Set to ‘1’ if requesting No USB Suspend\nB23 Unchunked Extended Messages Supported Set to ‘1’ if Unchunked Extended Message s Supported\nB22 EPR Capable Set to ‘1’ if EPR Capable\nB21…20 Reserved Reserved – Shall be set to zero.\nB19…10 Operating Power Operating Power in 250mW units\nB9…0 Maximum Operating Power Maximum Operating Power in 250mW units\nTable 6.25 PPS Request Data Object\nBit(s) Field Description\nB31…28 Object PositionObject position (0000b and 1110b…1111b are\nReserved and Shall Not be used)\nB27 Reserved Reserved – Shall be set to zero.\nB26 Capability Mismatch Set to ‘1’ for a Capabilities Mismatch\nB25 USB Communications Capable Set to ‘1’ if USB Communication s Capable\nB24 No USB Suspend Set to ‘1’ if requesting No USB Suspend\nB23 Unchunked Extended Messages SupportedSet to ‘1’ if Unchunked Extended Message s\nSupported\nB22 EPR Capable Set to ‘1’ if EPR Capable\nB21 Reserved Reserved – Shall be set to zero.\nB20...9 Output Voltage Output voltage in 20mV units.\nB8...7 Reserved Reserved – Shall be set to zero.\nB6...0 Operating Current Operating current 50mA units.\nTable 6.26 AVS Request Data Object\nBit(s) Field Description\nB31…28 Object PositionObject position (0000b and 1110b…1111b are\nReserved and Shall Not be used)\nB27 Reserved Reserved – Shall be set to zero.\nB26 Capability Mismatch Set to ‘1’ for a Capabilities Mismatch\nB25 USB Communications Capable Set to ‘1’ if USB Communication s Capable\nB24 No USB Suspend Set to ‘1’ if requesting No USB Suspend\nB23 Unchunked Extended Messages SupportedSet to ‘1’ if Unchunked Extended Message s\nSupported\nB22 EPR Capable Set to ‘1’ if EPR Capable\nB21 Reserved Reserved – Shall be set to zero.\nB20...9 Output VoltageOutput voltage in 25mV units, the least two\nsignificant bits Shall be set to zero making the\neffective voltage step size 100mV.\nB8...7 Reserved Reserved – Shall be set to zero.\nB6...0 Operating Current Operating current 50mA units.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1576.4.2.1 Object Position\nThe value in the Object Position field Shall indicate which object in the Source_Capabilities Message or\nEPR_Source_Capabilities Message the RDO refers to. The value 0001b always indicates the 5V Fixed Supply PDO as\nit is the first object following the Source_Capabilities Message ’s Message Header or EPR_Source_Capabilities\nMessage ’s Extended Message Header . The number 0010b refers to the next PDO and so forth.\nThe Object Position field values 0001b…0111b Shall only be used to refer to SPR (A)PDO s. SPR (A)PDO s May be\nrequested by either a Request or an EPR_Request Message . Object positions 1000b…1011b Shall only be used to\nrefer to EPR (A)PDO s. EPR (A)PDO s Shall only be requested by an EPR_Request Message . If the Object Position field\nin a Request Message contains a value greater than 0111b, the Source Shall send Hard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.2",
    "title": "GiveBack Flag (Deprecated)",
    "full_path": "6.4.2.2 GiveBack Flag (Deprecated)",
    "page": 157,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Giveback flag has been Deprecated and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.3",
    "title": "Capability Mismatch",
    "full_path": "6.4.2.3 Capability Mismatch",
    "page": 157,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "A Capabilities Mismatch occurs when the Source cannot satisfy the Sink 's power requirements based on the Source\nCapabilities it has offered. In this case the Sink Shall make a Valid request from the offered Source Capabilities and\nShall set the Capability Mismatch bit (see Section 8.2.5.2, \"Power Capability Mismatch\" ). When a Capabilities\nMismatch condition does not exist, the Sink Shall Not set the Capability Mismatch bit.\nWhen a Sink returns a Request Data Object with the Capability Mismatch bit set in response to a Source Capabilities\nMessage , it indicates that it wants more power than the Source is currently offering. This can be due to either a\nspecific voltage that is not being offered or there is not sufficient current for the voltages that are being offered.\nSource s whose Port Reported PDP is less than their Port Present PDP (see Section 6.4.11, \"Source_Info Message\" )\nShall respond to the Requests with the Capability Mismatch bit set as follows. The Source within\ntCapabilitiesMismatchResponse of the PS_RDY Message Shall send a new Source Capabilities Message that offers\neither:\n1) The set of Source Capabilities to minimally satisfy the Sink 's requirements based on what it actually\nrequires for full operation by evaluating the:\na) Sink_Capabilities_Extended Message (if supported by the Sink ) and/or\nb) Sink_Capabilities or EPR_Sink_Capabilities Message .\n2) The set of Source Capabilities the Source can supply at this time based on the Port Present PDP .\nTo prevent looping, Source s Should Not send a new Source Capabilities Message in response to subsequent Request\nMessage with the Capability Mismatch flag set until its Port Present PDP changes.\nOnce a Guaranteed Capability Source that has responded to a Capability Mismatch , it Shall Not subsequently send\nout another Source Capabilities Message at a lower PDP unless the power required by the Sink (as indicated in its\nSink Capabilities Message or Sink_Capabilities_Extended Message ) has also been reduced. Source s wishing to\nmanage their power May periodically check the Sink Capabilities Message or Sink_Capabilities_Extended Message\nto determine whether these have changed.\nNote: A Source Capabilities Message refers to a Source_Capabilities Message or an EPR_Source_Capabilities\nMessage , and a Sink Capabilities Message refers to a Sink_Capabilities Message or EPR_Sink_Capabilities\nMessage , Request refers to a Request Message or EPR_Request depending on operating mode.\nIn this context a Valid Request Message means the following:\n The Object Position field Shall contain a reference to an object that was present in the last received\nSource Capabilities Message .\n The Operating Current /Operating Power field Shall contain a value which is less than or equal to the\nmaximum current/power offered by the selected (A)PDO the Source Capabilities Message .\nPage 158 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.2.4 USB Communications Capable\nThe USB Communications Capable flag Shall be set to one when the Sink has USB data lines and is capable of\ncommunicating using either [USB 2.0] , [USB 3.2] or [USB4] protocols. The USB Communications Capable flag\nShall be set to zero when the Sink does not have USB data lines or is otherwise incapable of communicating using\neither [USB 2.0] , [USB 3.2] or [USB4] protocols. This is used by the Source to determine operation in certain cases\nsuch as USB suspend. If the USB Communications Capable flag has been set to zero by a Sink , then the Source needs\nto be aware that USB Suspend rules cannot be observed by the Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.5",
    "title": "No USB Suspend",
    "full_path": "6.4.2.5 No USB Suspend",
    "page": 158,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The No USB Suspend flag May be set by the Sink to indicate to the Source that this device is requesting to continue\nits Explicit Contract during USB Suspend. Sink s setting this flag typically have functionality that can use power for\npurposes other than USB Communication e.g., for charging a Battery .\nThe Source uses this flag to evaluate whether it Should re-issue the Source_Capabilities Message with the USB\nSuspend Supported flag cleared."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.6",
    "title": "Unchunked Extended Messages Supported",
    "full_path": "6.4.2.6 Unchunked Extended Messages Supported",
    "page": 158,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Unchunked Extended Messages Supported bit Shall be set when the Port can send and receive Extended\nMessage s with Data Size > MaxExtendedMsgLegacyLen bytes in a single, Unchunked Extended Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.7",
    "title": "EPR Mode Capable",
    "full_path": "6.4.2.7 EPR Mode Capable",
    "page": 158,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The EPR Capable bit Shall indicate whether or not the Sink is capable of operating in EPR Mode . When the Sink 's\nability to operate in EPR Mode changes, it Shall send a new Request Message with the updated EPR Capable bit set\nin the RDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.8",
    "title": "Operating Current",
    "full_path": "6.4.2.8 Operating Current",
    "page": 158,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Operating Current field in the Request Data Object Shall be set to the highest current the Sink will draw during\nthe Explicit Contract . A new Request Message or EPR_Request Message , with an updated Operating Current value,\nShall be issued whenever the Sink 's power needs change.\nThe Operating Current field in the SPR Programmable Request Data Object is used in addition by the Sink to\nrequest the Source for the Current Limit level it needs. When the request is accepted the Source 's output current\nsupplied into any load Shall be less than or equal to the Operating Current value. When the Sink attempts to\nconsume more current, the Source Shall reduce the output voltage so as not to exceed the Operating Current\nvalue.\nThe Operating Current field in the AVS Request Data Object Shall be set to the highest current the Sink will draw\nduring the Explicit Contract .\nNote: A Source in AVS Mode , unlike the SPR Source in PPS Mode , does not support current limit; the Sink is\nresponsible not to take more current than it requested.\nA new Request / EPR_Request Message , with an updated Operating Current value, Shall be issued whenever the\nSink 's power needs change.\nThe value in the Operating Current field Shall Not exceed the value in the Maximum Current field of the\nSource_Capabilities Message . For EPR AVS , the Operating Current field Shall Not exceed the PDP / Output voltage\nrounded down to the nearest 50 mA.\nThis field Shall apply to the Fixed Supply , Variable Supply , Programmable and AVS RDO s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.9",
    "title": "Maximum Operating Current",
    "full_path": "6.4.2.9 Maximum Operating Current",
    "page": 158,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Maximum Operating Current field has been functionally Deprecated . In order to maintain backward\ncompatibility with Source s that may try to interpret the Maximum Operating Current field in the Request Message\nor EPR_Request Message , the field Shall be set equal to the value of the Operating Current field. To ensure\nbackward compatibility, the Source Should Ignore this field.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 159This field Shall apply to the Fixed Supply and Variable Supply RDO in SPR Mode and the Fixed Supply RDO in EPR\nCapable ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.10",
    "title": "Operating Power",
    "full_path": "6.4.2.10 Operating Power",
    "page": 159,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Operating Power field in the Request Data Object Shall be set to the highest power the Sink will draw\nthroughout the Explicit Contract .\nThis field Shall apply to the Battery Supply RDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.11",
    "title": "Maximum Operating Power",
    "full_path": "6.4.2.11 Maximum Operating Power",
    "page": 159,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Maximum Operating Power field has been functionally Deprecated . In order to maintain backward\ncompatibility with Source s that may try to interpret the Maximum Operating Power field in the Request Message ,\nthe field Shall be set equal to the value of the Operating Power field. To ensure backward compatibility, the Source\nShould Ignore this field.\nThis field Shall apply to the Battery Supply RDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.2.12",
    "title": "Output Voltage",
    "full_path": "6.4.2.12 Output Voltage",
    "page": 159,
    "level": 4,
    "parent_id": "6.4.2",
    "tags": [],
    "content": "The Output Voltage field in the Programmable and AVS Request Data Object s Shall be set by the Sink to the voltage\nthe Sink requires as measured at the Source 's output connector. The Output Voltage field Shall be greater than or\nequal to the Minimum Voltage field and less than or equal to the Maximum Voltage field in the Programmable\nPower Supply and AVS APDO s, respectively.\nThis field Shall apply to the Programmable RDO and AVS RDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3",
    "title": "BIST Message",
    "full_path": "6.4.3 BIST Message",
    "page": 159,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": "The BIST Message is sent to request the Port to enter a PHY Layer test mode (see Section 5.9, \"Built in Self-Test\n(BIST)\" ) that performs one of the following functions:\n Enter a Continuous BIST Mode to send a continuous stream of test data to the Tester .\n Enter and leave a Shared Capacity Group test mode.\nThe Message format is as shown in Figure 6.14, \"BIST Message\" .\nFigure 6.14 BIST Message\nAll Ports Shall be able to be a Unit Under Test (UUT ) only when operating at vSafe5V . All of the following BIST\nMode s Shall be supported:\n Process reception of a BIST Carrier Mode BIST Data Object that Shall result in the generation of the\nappropriate carrier signal.\n Process reception of a BIST Test Data BIST Data Object that Shall result in the Message being Ignored .\nUUT s with Ports constituting a Shared Capacity Group (see [USB Type-C 2.4] ) Shall support the following BIST\nMode :\n Process reception of a BIST Shared Test Mode Entry BIST Data Object that Shall cause the UUT to enter\nBIST Shared Capacity Test Mode ; a mode in which the UUT offers its full Source Capabilities on every Port\nin the Shared Capacity Group . Header\nNo. of Data Objects = 1 or 7\nBIST Data Object\nPage 160 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Process reception of a BIST Shared Test Mode Exit BIST Data Object that Shall cause the UUT to exit\nthe BIST Shared Capacity Test Mode .\nWhen a Port receives a BIST Message BIST Data Object for a BIST Mode when not operating at vSafe5V , the BIST\nMessage Shall be Ignored .\nWhen a Port receives a BIST Message BIST Data Object for a BIST Mode it does not support the BIST Message Shall\nbe Ignored .\nWhen a Port or Cable Plug receives a BIST Message BIST Data Object for a Continuous BIST Mode the Port or Cable\nPlug enters the requested BIST Mode and Shall remain in that BIST Mode for tBISTContMode and then Shall return\nto normal operation (see Section 6.6.7.2, \"BISTContModeTimer\" ).\nThe usage model of the PHY Layer BIST Mode s generally assumes that some controlling agent will request a test of\nits Port Partner .\nIn Section 8.3.2.15, \"Built in Self-Test (BIST)\" there is a sequence description of the test sequences used for\ncompliance testing.\nThe fields in the BIST Data Object are defined in the Table 6.27, \"BIST Data Object\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3.1",
    "title": "BIST Carrier Mode",
    "full_path": "6.4.3.1 BIST Carrier Mode",
    "page": 160,
    "level": 4,
    "parent_id": "6.4.3",
    "tags": [],
    "content": "Upon receipt of a BIST Message , with a BIST Carrier Mode BIST Data Object , the UUT Shall send out a continuous\nstring of BMC encoded alternating \"1\"s and \"0\"s.\nThe UUT Shall exit the Continuous BIST Mode within tBISTContMode of this Continuous BIST Mode being enabled\n(see Section 6.6.7.2, \"BISTContModeTimer\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3.2",
    "title": "BIST Test Data Mode",
    "full_path": "6.4.3.2 BIST Test Data Mode",
    "page": 160,
    "level": 4,
    "parent_id": "6.4.3",
    "tags": [],
    "content": "Upon receipt of a BIST Message , with a BIST Test Data BIST Data Object , the UUT Shall return a GoodCRC Message\nand Shall enter BIST Test Data Mode in which it sends no further Message s except for GoodCRC Message s in\nresponse to received Message s. See Section 5.9.2, \"BIST Test Data Mode\" for the definition of the Test Frame .\nThe test Shall be ended by sending Hard Reset Signaling to reset the UUT .Table 6.27 BIST Data Object\nBit(s) Value Parameter Description Reference Applicability\nB31…280000b…0100b Reserved Shall Not be used Section 1.4.2 -\n0101b BIST Carrier ModeRequest\nTransmitter to enter\nBIST Carrier ModeSection 6.4.3.1\nMandatory\n0110b…0111b Reserved Shall Not be used Section 1.4.2 -\n1000b BIST Test Data Sends a Test Frame .Section 6.4.3.2 Mandatory\n1001b BIST Shared Test Mode EntryRequests UUT to\nenter BIST Shared\nCapacity Test Mode .Section 6.4.3.3.1Mandatory for UUT s\nwith shared capacity\n1010b BIST Shared Test Mode ExitRequests UUT to exit\nBIST Shared\nCapacity Test Mode .Section 6.4.3.3.2Mandatory for UUT s\nwith shared capacity\n1011b…1111b Reserved Shall Not be used Section 1.4.2 -\nB27…0 Reserved Shall be set to zero. Section 1.4.2 -\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1616.4.3.3 BIST Shared Capacity Test Mode\nA Shared Capacity Group of Ports share a common power source that is not capable of simultaneously powering all\nthe ports to their full Source Capabilities (see [USB Type-C 2.4] ). The BIST Shared Capacity Test Mode Shall only be\nimplemented by ports in a Shared Capacity Group .\nThe UUT Shared Capacity Group of Ports Shall contain one or more Ports, designated as Master Ports, that\nrecognize both the BIST Shared Test Mode Entry BIST Data Object and the BIST Shared Test Mode Exit BIST Data\nObject ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3.3.1",
    "title": "BIST Shared Test Mode Entry",
    "full_path": "6.4.3.3.1 BIST Shared Test Mode Entry",
    "page": 161,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "When any master Port in a Shared Capacity Group receives a BIST Message with a BIST Shared Test Mode Entry\nBIST Data Object , while in the PE_SRC_Ready State, the UUT Shall enter a compliance test mode where the\nmaximum Source Capabilities are always offered on every Port , regardless of the availability of shared power i.e.,\nall shared power management is disabled.\nPorts in the Shared Capacity Group that are not Master Ports Shall Not enter compliance mode on receiving the\nBIST Shared Test Mode Entry BIST Data Object .\nUpon receipt of a BIST Message , with a BIST Shared Test Mode Entry BIST Data Object , the UUT Shall return a\nGoodCRC Message and Shall enter the BIST Shared Capacity Test Mode .\nOn entering this mode, the UUT Shall send a new Source_Capabilities Message from each Port in the Shared\nCapacity Group within tBISTSharedTestMode . The Tester will not exceed the shared capacity during this mode."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.3.3.2",
    "title": "BIST Shared Test Mode Exit",
    "full_path": "6.4.3.3.2 BIST Shared Test Mode Exit",
    "page": 161,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Upon receipt of a BIST Message , with a BIST Shared Test Mode Exit BIST Data Object , the UUT Shall return a\nGoodCRC Message and Shall exit the BIST Shared Capacity Test Mode . If any other Message , aside from a BIST\nMessage , with a BIST Shared Test Mode Exit BIST Data Object , is received while in BIST Shared Capacity Test Mode\nthis Shall Not cause the UUT to exit the BIST Shared Capacity Test Mode\nOn exiting the mode, the UUT May send a new Source_Capabilities Message to each Port in the Shared Capacity\nGroup or the UUT May perform ErrorRecovery on each Port .\nPorts in the Shared Capacity Group that are not Master Ports Shall Not exit compliance mode on receiving the BIST\nShared Test Mode Entry BIST Data Object .\nPorts in the Shared Capacity Group that are not Master Ports Should Not exit compliance mode on receiving the\nBIST Shared Test Mode Exit BIST Data Object .\n The UUT Shall exit BIST Shared Capacity Test Mode when It is powered off.\n The UUT Shall remain in BIST Shared Capacity Test Mode for any PD event (except when a BIST Shared\nTest Mode Exit BIST Data Object , is received); specifically the UUT Shall remain in BIST Shared Capacity\nTest Mode when any of the following PD events occurs:\n Hard Reset\n Cable Reset\n Soft Reset\n Data Role Swap\n Power Role Swap\n Fast Role Swap\n VCONN Swap .\n The UUT May leave BIST Shared Capacity Test Mode if the Tester makes a request that exceeds the\nCapabilities of the UUT .\nPage 162 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4 Vendor Defined Message\nThe Vendor_Defined Message (VDM ) is provided to allow vendors to exchange information outside of that defined\nby this specification.\nA Vendor_Defined Message Shall consist of at least one Vendor Data Object (VDO ), the VDM Header , and May\ncontain up to a maximum of six additional VDO s.\nTo ensure vendor uniqueness of Vendor_Defined Message s, all Vendor_Defined Message s Shall contain a Valid\nUSB Standard or Vendor ID (SVID ) allocated by USB-IF in the VDM Header .\nTwo types of Vendor_Defined Message s are defined: Structured VDM s and Unstructured VDM s. A Structured VDM\ndefines an extensible structure designed to support Modal Operation . An Unstructured VDM does not define any\nstructure and Message s May be created in any manner that the vendor chooses.\nVendor_Defined Message s Shall Not be used for direct power Negotiation . They May however be used to alter\nLocal Policy , affecting what is offered or consumed via the normal PD Message s.\nThe Message format Shall be as shown in Figure 6.15, \"Vendor Defined Message\" .\nFigure 6.15 Vendor Defined Message\nThe VDM Header Shall be the first 4-byte object in a Vendor Defined Message . The VDM Header provides Command\nspace to allow vendors to customize Message s for their own purposes. Additionally, vendors May make use of the\nCommand s in a Structured VDM .\nThe fields in the VDM Header for an Unstructured VDM , when the VDM Type Bit is set to zero, Shall be as defined\nin Table 6.28, \"Unstructured VDM Header\" . The fields in the VDM Header for a Structured VDM , when the VDM Type\nBit is set to one Shall be as defined in Table 6.29, \"Structured VDM Header\" .\nBoth Unstructured VDM s and Structured VDM s Shall only be sent and received after an Explicit Contract has been\nestablished. The only exception to this is the Discover Identity Command which May be sent by Source when a\nDefault Contract or an Implicit Contract (in place after Attach , a Power Role Swap or Fast Role Swap ) is in place in\norder to discover Cable Capabilities (see S Section 8.3.3.25.3, \"Source Startup Structured VDM Discover Identity of a\nCable Plug State Diagram\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.1",
    "title": "Unstructured VDM",
    "full_path": "6.4.4.1 Unstructured VDM",
    "page": 162,
    "level": 4,
    "parent_id": "6.4.4",
    "tags": [],
    "content": "The Unstructured VDM does not define the contents of bits B14…0 in the VDM Header . Their definition and use are\nthe sole responsibility of the vendor indicated by the VID. The Port Partner s and Cable Plug s Shall exit any states\nentered using an Unstructured VDM when a Hard Reset appears on PD.\nThe following rules apply to the use of Unstructured VDM Message s:\n Unstructured VDM s Shall only be used when an Explicit Contract is in place.\n Prior to establishing an Explicit Contract Unstructured VDM s Shall Not be sent and Shall be Ignored if\nreceived.\n Only the DFP Shall be an Initiator of Unstructured VDM s.\n Only the UFP or a Cable Plug Shall be a Responder to Unstructured VDM .\n Unstructured VDM s Shall Not be initiated or responded to under any other circumstances.Header\nNo. of Data Objects = 1-7\nVDM Header\n0-6 VDOs\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 163 Unstructured VDM s Shall only be used during Modal Operation in the context of an Active Mode i.e., only\nafter the UFP has Ack'ed the Enter Mode Command can Unstructured VDM s be sent or received. The\nActive Mode and the associated Unstructured VDM s Shall use the same SVID .\n Unstructured VDM s May be used with SOP* Packet s.\n When a DFP or UFP does not support Unstructured VDM s or does not recognize the VID it Shall return\na Not_Supported Message .\nTable 6.28, \"Unstructured VDM Header\" illustrates the VDM Header bits."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.1.1",
    "title": "USB Vendor ID",
    "full_path": "6.4.4.1.1 USB Vendor ID",
    "page": 163,
    "level": 5,
    "parent_id": "6.4.4.1",
    "tags": [],
    "content": "The Vendor ID (VID) field Shall contain the 16-bit Vendor ID value assigned to the vendor by the USB-IF ( VID). No\nother value Shall be present in this field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.1.2",
    "title": "VDM Type",
    "full_path": "6.4.4.1.2 VDM Type",
    "page": 163,
    "level": 5,
    "parent_id": "6.4.4.1",
    "tags": [],
    "content": "The VDM Type field Shall be set to zero indicating that this is an Unstructured VDM ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2",
    "title": "Structured VDM",
    "full_path": "6.4.4.2 Structured VDM",
    "page": 163,
    "level": 4,
    "parent_id": "6.4.4",
    "tags": [],
    "content": "Setting the VDM Type field to 1 ( Structured VDM ) defines the use of bits B14…0 in the Structured VDM Header . The\nfields in the Structured VDM Header are defined in Table 6.29, \"Structured VDM Header\" .\nThe following rules apply to the use of Structured VDM Message s:\n Structured VDM s Shall only be used when an Explicit Contract is in place with the following exception:\n Prior to establishing the First Explicit Contract , a Source May issue Discover Identity Message s, to a\nCable Plug using SOP’ Packet s, as an Initiator (see Section 8.3.3.25.3, \"Source Startup Structured VDM\nDiscover Identity of a Cable Plug State Diagram\" ).\n Either Port May be an Initiator of Structured VDM s except for the Enter Mode and Exit Mode Command s\nwhich Shall only be initiated by the DFP .\n A Cable Plug Shall only be a Responder to Structured VDM s.\n Structured VDM s Shall Not be initiated or responded to under any other circumstances.\n When a DFP or UFP does not support Structured VDM s any Structured VDM s received Shall return a\nNot_Supported Message .\n When using any of the SVID Specific Command s in the Structured VDM Header (VDM Header b4…0 -\nvalue 16 - 31) the Responder Shall NAK Message s where the SVID in the VDM Header is not recognized\nas an SVID that uses SVID Specific Command s or the use of SVID Specific Command s is not supported for\nthe SVID .\n When a Cable Plug does not support Structured VDM s any Structured VDM s received Shall be Ignored .Table 6.28 Unstructured VDM Header\nBit(s) Parameter Description\nB31…16 Vendor ID (VID) Unique 16-bit unsigned integer. Assigned by the USB-IF to the Vendor.\nB15 VDM Type 0 = Unstructured VDM\nB14…0 Available for Vendor Use Content of this field is defined by the vendor.\nPage 164 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10A DFP , UFP or Cable Plug which supports Structured VDM s and receiving a Structured VDM for a SVID that it does\nnot recognize Shall reply with a NAK Command .\nTable 6.29 Structured VDM Header\nBit(s) Field Description\nB31…16 Standard or Vendor ID (SVID) Unique 16-bit unsigned integer, assigned by the USB-IF\nB15 VDM Type 1 = Structured VDM\nB14…13Structured VDM Version\n(Major)Version Number (Major) of the Structured VDM (not this specification\nVersion ):\nVersion 1.0 = 00b ( Deprecated and Shall Not be used)\nVersion 2.x = 01b\nValues 2-3 are Reserved and Shall Not be used\nB12…11Structured VDM Version\n(Minor)For Command s 0…15 Version Number (Minor) of the Structured VDM\nVersion 2.0 = 00b (Used for ports implemented prior to USB PD\nRevision 3.1, Version 1.6)\nVersion 2.1 = 01b (Used for ports implemented starting with USB\nPD Revision 3.1, Version 1.6)\nAll other Values are Reserved and Shall Not be used\nSVID Specific Command s (16…31) defined by the SVID .\nB10…8 Object PositionFor the Enter Mode , Exit Mode , and Attention Command s (Requests/\nResponses):\n000b = Reserved and Shall Not be used.\n001b…110b = Index into the list of VDO s to identify the desired\nAlternate Mode VDO\n111b = Exit all Active Mode s (equivalent of a power on reset). Shall\n only be used with the Command .\nCommand s 0…3, 7…15:\n000b\n001b…111b = Reserved and Shall Not be used.\nSVID Specific Command s (16…31) defined by the SVID .\nB7…6 Command Type00b = REQ (Request from Initiator Port)\n01b = ACK (Acknowledge Response from Responder Port)\n10b = NAK (Negative Acknowledge Response from Responder Port)\n11b = BUSY (Busy Response from Responder Port)\nB5 Reserved Shall be set to zero and Shall be Ignored\nB4…01Command0 = Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "= Discover Identity",
    "full_path": "1 = Discover Identity",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "= Discover SVIDs",
    "full_path": "2 = Discover SVIDs",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "= Discover Modes",
    "full_path": "3 = Discover Modes",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "= Enter Mode",
    "full_path": "4 = Enter Mode",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "= Exit Mode",
    "full_path": "5 = Exit Mode",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "= Attention",
    "full_path": "6 = Attention",
    "page": 164,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7-15 = Reserved and Shall Not be used.\n16…31 = SVID Specific Command s\n1) In the case where a SID is used the modes are defined by a standard. When a VID is used the modes are defined by the\nVendor.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 165Section Table 6.30, \"Structured VDM Commands\" shows the Command s, which SVID to use with each Command and\nthe SOP* values which Shall be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.1",
    "title": "SVID",
    "full_path": "6.4.4.2.1 SVID",
    "page": 165,
    "level": 5,
    "parent_id": "6.4.4.2",
    "tags": [],
    "content": "The Standard or Vendor ID (SVID) field Shall contain either a 16-bit USB Standard ID value (SID) or the 16-bit\nassigned to the vendor by the USB-IF ( VID). No other value Shall be present in this field.\nSection Table 6.31, \"SVID Values\" lists specific SVID values referenced by this specification."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.2",
    "title": "VDM Type",
    "full_path": "6.4.4.2.2 VDM Type",
    "page": 165,
    "level": 5,
    "parent_id": "6.4.4.2",
    "tags": [],
    "content": "The VDM Type field Shall be set to one indicating that this is a Structured VDM ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.3",
    "title": "Structured VDM Version",
    "full_path": "6.4.4.2.3 Structured VDM Version",
    "page": 165,
    "level": 5,
    "parent_id": "6.4.4.2",
    "tags": [],
    "content": "The Structured VDM Version (Major) /Structured VDM Version (Minor) fields indicate the level of functionality\nsupported in the Structured VDM part of the specification. This is not the same Version as the Version of this\nspecification. The Structured VDM Version (Major) Shall be set to 01b to indicate Version 2.x with the Structured\nVDM Version (Minor) field set as appropriate based on whether the Port is implemented to USB PD Revision 3.1,\nVersion 1.6 (or newer) or a prior Version .\nTo ensure interoperability with existing PDUSB products, PDUSB products Shall support every Structured VDM\nVersion number starting from Version 1.0.\nOn receipt of a VDM Header with a higher Version number than it supports, a Port or Cable Plug Shall respond using\nthe highest Version number it supports. On receipt of a VDM Header with a lower Version number than it supports,\na Port or Cable Plug Shall respond using the same Version number it received.\nThe Structured VDM Version (Major) /Structured VDM Version (Minor) fields of the Discover Identity Command\nsent and received during the Discovery Process Shall be used to determine the lowest common Structured VDM\nVersion supported by the Port Partner s or Cable Plug and Shall continue to operate using this Specification Revision\nuntil they are Detached . After discovering the Structured VDM Version , the Structured VDM Version (Major) /\nStructured VDM Version (Minor) fields Shall match the agreed common Structured VDM Version .Table 6.30 Structured VDM Commands\nCommand VDM Header SVID\nFieldSOP* used\nDiscover Identity Shall only use the PD SID . Shall only use SOP /SOP’ .\nDiscover SVIDs Shall only use the PD SID . Shall only use SOP /SOP’ .\nDiscover Modes Valid with any SVID . Shall only use SOP /SOP’ .\nEnter Mode Valid with any SVID . Valid with SOP* .\nExit Mode Valid with any SVID . Valid with SOP* .\nAttention Valid with any SVID . Valid with SOP* .\nSVID Specific Command sValid with any SVID . Valid with SOP* (defined by SVID ).\nTable 6.31 SVID Values\nParameter Value Description\nPD SID 0xFF00 Standard ID allocated to this specification by USB-IF.\nDPTC SID 0xFF01 Standard ID allocated to [DPTC2.1] by USB-IF.\nPage 166 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.2.4 Object Position\nThe Object Position field Shall be used by the Enter Mode and Exit Mode Command s. The Discover Modes\nCommand returns a list of zero to six VDO s, each of which describes an Alternate Mode . The value in Object Position\nfield is an index into that list that indicates which VDO (e.g., Alternate Mode ) in the list the Enter Mode and Exit\nMode Command refers to. The Object Position Shall start with one for the first Alternate Mode in the list. If the SVID\nis a VID, the content of the VDO for the Alternate Mode Shall be defined by the vendor. If the Standard or Vendor\nID (SVID) is a SID, the value Shall be assigned, by the USB-IF, to the given Standard. The VDO 's content May be as\nsimple as a numeric value or as complex as bit mapped description of Capabilities of the Alternate Mode . In all cases,\nthe Responder is responsible for deciphering the contents to know whether or not it supports the Alternate Mode\nat the Object Position.\nThis field Shall be set to zero in the Request or Response ( REQ , ACK , NAK or BUSY ) when not required by the\nspecification of the individual Command ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.5",
    "title": "Command Type",
    "full_path": "6.4.4.2.5 Command Type",
    "page": 166,
    "level": 5,
    "parent_id": "6.4.4.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.5.1",
    "title": "Commands other than Attention",
    "full_path": "6.4.4.2.5.1 Commands other than Attention",
    "page": 166,
    "level": 6,
    "parent_id": "6.4.4.2.5",
    "tags": [],
    "content": "This Command Type field Shall be used to indicate the type of Command request/response being sent.\nAn Initiator Shall set the Command Type field to REQ to indicate that this is a Command request from an Initiator .\nIf Structured VDM s are supported, then the responses are as follows:\n \"Responder ACK \" is the normal return and Shall be sent to indicate that the Command request was\nreceived and handled normally.\n \"Responder NAK \" Shall be returned when the Command request:\n Has an Invalid parameter (e.g., Invalid SVID or Alternate Mode ).\n Cannot be acted upon because the configuration is not correct (e.g., an Alternate Mode which has a\ndependency on another Alternate Mode or a request to exit an Alternate Mode which is not an Active\nMode ).\n Is an Unrecognized Message .\n The handling of \" Responder NAK \" is left up to the Initiator .\n \"Responder BUSY \" Shall be sent in the response to a VDM when the Responder is unable to respond to\nthe Command request immediately, but the Command request May be retried. The Initiator Shall wait\ntVDMBusy after a \" Responder BUSY \" response is received before retrying the Command request."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.5.2",
    "title": "Attention Command",
    "full_path": "6.4.4.2.5.2 Attention Command",
    "page": 166,
    "level": 6,
    "parent_id": "6.4.4.2.5",
    "tags": [],
    "content": "This Command Type field Shall be used to indicate the type of Command request being sent. An Initiator Shall set\nthe field to REQ to indicate that this is a Command request from an Initiator . If Structured VDMs are supported, then\nno response Shall be made to an Attention Command ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.6",
    "title": "Command",
    "full_path": "6.4.4.2.6 Command",
    "page": 166,
    "level": 5,
    "parent_id": "6.4.4.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.6.1",
    "title": "Commands other than Attention",
    "full_path": "6.4.4.2.6.1 Commands other than Attention",
    "page": 166,
    "level": 6,
    "parent_id": "6.4.4.2.6",
    "tags": [],
    "content": "The Command field contains the value for the VDM Command being sent. The Command s explicitly listed in the\nCommand field are used to identify devices and manage their operational Modes. There is a further range of\nCommand values left for the vendor to use to manage additional extensions.\nA Structured VDM Command consists of a Command request and a Command response ( ACK , NAK or BUSY ). A\nStructured VDM Command is deemed to be completed (and if applicable, the transition to the requested\nfunctionality is made) when the GoodCRC Message has been successfully received by the Responder in reply to its\nCommand response.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 167If Structured VDM s are supported, but the Structured VDM Command request is an Unrecognized Message , it Shall\nbe NAKed (see Table 6.32, \"Commands and Responses\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.2.6.2",
    "title": "Attention Command",
    "full_path": "6.4.4.2.6.2 Attention Command",
    "page": 167,
    "level": 6,
    "parent_id": "6.4.4.2.6",
    "tags": [],
    "content": "The Command field contains the value for the VDM Command being sent ( Attention ). The Attention Command\nMay be used by the Initiator to notify the Responder that it requires service.\nA Structured VDM Attention Command consists of a Command request but no Command response. A Structured\nVDM Attention Command is deemed to be completed when the GoodCRC Message has been successfully received\nby the Initiator in reply to its Attention Command request.\nIf Structured VDM s are supported, but the Structured VDM Attention Command request is an Unrecognized Message\nit Shall be Ignored (see Table 6.32, \"Commands and Responses\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3",
    "title": "Use of Commands",
    "full_path": "6.4.4.3 Use of Commands",
    "page": 167,
    "level": 4,
    "parent_id": "6.4.4",
    "tags": [],
    "content": "The VDM Header for a Structured VDM Message defines Command s used to retrieve a list of SVID s the device\nsupports, to discover the Modes associated with each SVID , and to enter/exit the Modes. The Command s include:\n Discover Identity\n Discover SVIDs\n Discover Modes\n Enter Mode\n Exit Mode\n Attention\nAdditional Command space is also Reserved for Standard and Vendor use and for future extensions.\nThe Command AMS s use the terms Initiator and Responder to identify messaging roles the ports are taking on\nrelative to each other. This role is independent of the Port 's power capability ( Provider , Consumer etc.) or its\npresent Power Role (Source or Sink ). The Initiator is the Port sending the initial Command request and the\nResponder is the Port replying with the Command response. See Section 6.4.4.4, \"Command Processes\" .\nAll Ports that support Modes Shall support the Discover Identity , Discover SVIDs , the Discover Modes , the Enter\nMode and Exit Mode Command s.\nTable 6.32, \"Commands and Responses\" details the responses a Responder May issue to each Command request.\nResponses not listed for a given Command Shall Not be sent by a Responder . A NAK response Should be taken as\nan indication not to retry that particular Command .\nExamples of Command usage can be found in Appendix C, \"VDM Command Examples\" .Table 6.32 Commands and Responses\nCommand Allowed Response Reference\nDiscover Identity ACK , NAK , BUSY Section 6.4.4.3.1\nDiscover SVIDs ACK , NAK , BUSY Section 6.4.4.3.2\nDiscover Modes ACK , NAK , BUSY Section 6.4.4.3.3\nEnter Mode ACK , NAK Section 6.4.4.3.4\nExit Mode ACK , NAK Section 6.4.4.3.5\nAttention None Section 6.4.4.3.6\nPage 168 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1 Discover Identity\nThe Discover Identity Command is provided to enable an Initiator to identify its Port Partner and for an Initiator\n(VCONN Source ) to identify the Responder (Cable Plug or VPD ). The Discover Identity Command is also used to\ndetermine whether a Cable Plug or VPD is PD-Capable by looking for a GoodCRC Message Response.\nThe Discover Identity Command Shall only be sent to SOP when there is an Explicit Contract .\nThe Discover Identity Command Shall be used to determine whether a given Cable Plug or VPD is PD Capable (see\nSection 8.3.3.21.1, \"Initiator Structured VDM Discover Identity State Diagram\" and Section 8.3.3.25.3, \"Source Startup\nStructured VDM Discover Identity of a Cable Plug State Diagram\" ). In this case a Discover Identity Command request\nsent to SOP’ Shall Not cause a Soft Reset if a GoodCRC Message response is not returned since this can indicate a\nnon-PD Capable cable or VPD .\nNote: A Cable Plug or VPD will not be ready for PD Communication until tV CONN Stable after VCONN has been\napplied (see [USB Type-C 2.4] ).\nDuring Cable Plug or VPD discovery, when there is an Explicit Contract , Discover Identity Command s are sent at a\nrate defined by the DiscoverIdentityTimer (see Section 6.6.15, \"DiscoverIdentityTimer\" ) up to a maximum of\nnDiscoverIdentityCount times (see Section 6.7.5, \"Discover Identity Counter\" ).\nA PD-Capable Cable Plug or VPD Shall return a Discover Identity Command ACK in response to a Discover Identity\nCommand request sent to SOP’ .\nThe Discover Identity Command Shall be used to determine the identity and/or Capabilities of the Port Partner .\nThe following products Shall return a Discover Identity Command ACK in response to a Discover Identity\nCommand request sent to SOP :\n A PD-Capable UFP that supports Modal Operation .\n A PD-Capable product that has multiple DFP s.\n A PD-Capable [USB4] product.\nThe SVID in the Discover Identity Command request Shall be set to the PD SID (see Section Table 6.31, \"SVID\nValues\" ).\nThe Number of Data Objects field in the Message Header in the Discover Identity Command request Shall be set\nto 1 since the Discover Identity Command request Shall Not contain any VDO s.\nThe Discover Identity Command ACK sent back by the Responder Shall contain an ID Header VDO , a Cert Stat VDO ,\na Product VDO and the Product Type VDO s defined by the Product Type as shown in Figure 6.16, \"Discover Identity\nCommand response\" . This specification defines the following Product Type VDO s:\n Passive Cable VDO (see Section 6.4.4.3.1.6, \"Passive Cable VDO\" )\n Active Cable VDO s (see Section 6.4.4.3.1.7, \"Active Cable VDOs\" )\n VCONN Powered USB Device (VPD ) VDO (see Section 6.4.4.3.1.9, \"V CONN Powered USB Device VDO\" )\n UFP VDO (see Section 6.4.4.3.1.4, \"UFP VDO\" )\n DFP VDO (see Section 6.4.4.3.1.5, \"DFP VDO\" )\nNo VDO s other than those defined in this specification Shall be sent as part of the Discover Identity Command\nresponse. Where there is no Product Type VDO defined for a specific Product Type , no VDO s Shall be sent as part of\nthe Discover Identity Command response. Any additional VDO s received by the Initiator Shall be Ignored .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 169Figure 6.16 Discover Identity Command response\nThe Number of Data Objects field in the Message Header in the Discover Identity Command NAK and BUSY\nresponses Shall be set to 1 since they Shall Not contain any VDO s.\nIf the product is a DRD both a Product Type (UFP ) and a Product Type (DFP ) are declared in the ID Header. These\nproducts Shall return Product Type VDO s for both UFP and DFP beginning with the UFP VDO , then by a 32-bit Pad\nObject (defined as all '0's), followed by the DFP VDO as shown in Figure 6.17, \"Discover Identity Command response\nfor a DRD\" .\nFigure 6.17 Discover Identity Command response for a DRD"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1",
    "title": "ID Header VDO",
    "full_path": "6.4.4.3.1.1 ID Header VDO",
    "page": 169,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The ID Header VDO contains information corresponding to the Power Delivery Product. The fields in the ID Header\nVDO Shall be as defined in Section Table 6.33, \"ID Header VDO\" .\nTable 6.33 ID Header VDO\nBit(s) Description Reference\nB31USB Communications Capable as USB Host Section 6.4.4.3.1.1.1\nShall be set to one if the product is capable of enumerating USB Device s.\nShall be set to zero otherwise.\nB30USB Communications Capable as a USB Device Section 6.4.4.3.1.1.2\nShall be set to one if the product is capable of being enumerated as a\nUSB Device .\nShall be set to zero otherwise\nB29…27SOP Product Type (UFP) Section 6.4.4.3.1.1.3\n000b – Not a UFP\n001b – PDUSB Hub\n010b – PDUSB Peripheral\n011b – PSD\n100b…111b – Reserved , Shall Not be used.\nSOP’ Product Type (Cable Plug/VPD)\n000b – Not a Cable Plug /VPD\n001b…010b – Reserved , Shall Not be used.\n011b – Passive Cable\n100b – Active Cable\n101b – Reserved , Shall Not be used.\n110b – VCONN Powered USB Device (VPD )\n111b – Reserved , Shall Not be used.Header\nNo. of Data Objects = 4-71\nVDM Header\nID Header VDO\nCert Stat VDO\n0..32Product Type VDO(s)\nProduct VDO\n1. Only Data objects defined in this specification can be sent as part of the Discover Identity Command.\n2. The following sections define the number and content of the VDOs for each Product Type.\nHeader\nNo. of Data Objects = 7\nVDM Header\nID Header VDO\nCert Stat VDO\nProduct VDO\nProduct Type VDO(s)\nyy\npp\n((\n((\n))\nUFP Pad DFP\nPage 170 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1.1.1 USB Communications Capable as a USB Host\nThe USB Communications Capable as USB Host field is used to indicate whether or not the Port has a USB Host\nCapability."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1.2",
    "title": "USB Communications Capable as a USB Device",
    "full_path": "6.4.4.3.1.1.2 USB Communications Capable as a USB Device",
    "page": 170,
    "level": 7,
    "parent_id": "6.4.4.3.1.1",
    "tags": [],
    "content": "The USB Communications Capable as a USB Device field is used to indicate whether or not the Port has a USB Device\nCapability."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1.3",
    "title": "Product Type (UFP)",
    "full_path": "6.4.4.3.1.1.3 Product Type (UFP)",
    "page": 170,
    "level": 7,
    "parent_id": "6.4.4.3.1.1",
    "tags": [],
    "content": "The SOP Product Type (UFP) field indicates the type of Product when in UFP Data Role , whether a VDO will be\nreturned and if so the type of VDO to be returned. The Product Type indicated in the SOP Product Type (UFP) field\nShall be the closest categorization of the main functionality of the Product in UFP Data Role or \"Undefined\" when\nthere is no suitable category for the product. For DRD Products this field Shall always indicate the Product Type\nwhen in UFP role regardless of the present Data Role . Table 6.34, \"Product Types (UFP)\" defines the Product Type\nVDO s which Shall be returned.B26Modal Operation Supported Section 6.4.4.3.1.1.4\nShall be set to one if the product ( UFP /Cable Plug ) is capable of\nsupporting Modal Operation (Alternate Mode s).\nShall be set to zero otherwise.\nB25…23SOP - Product Type (DFP)\nSection 6.4.4.3.1.1.6000b – Not a DFP\n001b – PDUSB Hub\n010b – PDUSB Host\n011b – Power Brick\n100b…111b – Reserved , Shall Not be used.\nSOP’ : Reserved , Shall Not be used.\nB22…21Connector Type\nSection 6.4.4.3.1.1.700b – Reserved , for compatibility with legacy systems.\n01b – Reserved , Shall Not be used.\n10b – USB Type-C Receptacle\n11b – USB Type-C Plug\nB20…16 Reserved , Shall Not be used.\nB15…0 USB Vendor IDSection 6.4.4.3.1.1.8\n[USB 2.0] /[USB 3.2] /[USB4]\nTable 6.34 Product Types (UFP)\nProduct Type Description Product Type\nVDOReference\nUndefined Shall be used when this is not a UFP . None\nPDUSB Hub Shall be used when the Product is a PDUSB Hub .UFP VDO Section 6.4.4.3.1.4\nPDUSB Peripheral Shall be used when the Product is a PDUSB\nDevice other than a PDUSB Hub .UFP VDO Section 6.4.4.3.1.4\nPSD Shall be used when the Product is a PSD, e.g.,\npower bank. NoneTable 6.33 ID Header VDO (Continued)\nBit(s) Description Reference\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1716.4.4.3.1.1.4 Product Type (Cable Plug)\nThe SOP’ Product Type (Cable Plug/VPD) field indicates the type of Product when the Product is a Cable Plug or VPD ,\nwhether a VDO will be returned and if so the type of VDO to be returned. Table 6.35, \"Product Types (Cable Plug/\nVPD)\" defines the Product Type VDO s which Shall be returned."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1.5",
    "title": "Modal Operation Supported",
    "full_path": "6.4.4.3.1.1.5 Modal Operation Supported",
    "page": 171,
    "level": 7,
    "parent_id": "6.4.4.3.1.1",
    "tags": [],
    "content": "The Modal Operation Supported bit is used to indicate whether or not the Product (either a Cable Plug or a device\nthat can operate in the UFP role) is capable of supporting Modes. The Modal Operation Supported bit does not\ndescribe a DFP 's Alternate Mode Controller functionality.\nA product that supports Modal Operation Shall respond to the Discover SVIDs Command with a list of SVID s for all\nof the Modes it is capable of supporting whether or not those Modes can currently be entered."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1.6",
    "title": "Product Type (DFP)",
    "full_path": "6.4.4.3.1.1.6 Product Type (DFP)",
    "page": 171,
    "level": 7,
    "parent_id": "6.4.4.3.1.1",
    "tags": [],
    "content": "The SOP - Product Type (DFP) field indicates the type of Product when in DFP Data Role , whether a VDO will be\nreturned and if so the type of VDO to be returned. The Product Type indicated in the SOP - Product Type (DFP) field\nShall be the closest categorization of the main functionality of the Product in DFP Data Role or \"Undefined\" when\nthere is no suitable category for the product. For DRD Products this field Shall always indicate the Product Type\nwhen in DFP role regardless of the present Data Role . Table 6.36, \"Product Types (DFP)\" defines the Product Type\nVDO s which Shall be returned.\nIn SOP’ Communication (Cable Plug s and VPD s) this bit field is Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.1.7",
    "title": "Connector Type Field",
    "full_path": "6.4.4.3.1.1.7 Connector Type Field",
    "page": 171,
    "level": 7,
    "parent_id": "6.4.4.3.1.1",
    "tags": [],
    "content": "The Connector Type field (B22…21) Shall contain a value identifying it as either a USB Type-C receptacle or a USB\nType-C plug.Table 6.35 Product Types (Cable Plug/VPD)\nProduct Type Description Product Type\nVDOReference\nUndefinedShall be used where no other Product Type value\nis appropriate.None\nActive CableShall be used when the Product is a cable that\nincorporates signal conditioning circuits.Active Cable VDO Section 6.4.4.3.1.7\nPassive CableShall be used when the Product is a cable that\ndoes not incorporate signal conditioning circuits.Passive Cable VDO Section 6.4.4.3.1.6\nVCONN Powered USB\nDeviceShall be used when the Product is a PDUSB\nVCONN Powered USB Device .VPD VDO Section 6.4.4.3.1.9\nTable 6.36 Product Types (DFP)\nProduct Type Description Product Type\nVDOReference\nUndefinedShall be used where no other Product Type value\nis appropriate.None\nPDUSB Hub Shall be used when the Product is a PDUSB Hub .DFP VDO Section 6.4.4.3.1.7\nPDUSB HostShall be used when the Product is a PDUSB Host\nor a PDUSB host that supports one or more\nAlternate Mode s as an AMC.DFP VDO Section 6.4.4.3.1.6\nCharger Shall be used when the Product is a Charger . DFP VDO Section 6.4.4.3.1.9\nPage 172 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1.1.8 Vendor ID\nManufacturers Shall set the USB Vendor ID field to the value of the Vendor ID assigned to them by USB-IF. For USB\nDevice s or Hub s which support USB Communication s the USB Vendor ID field Shall be identical to the Vendor ID\nfield defined in the product's USB Device Descriptor (see [USB 2.0] and [USB 3.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.2",
    "title": "Cert Stat VDO",
    "full_path": "6.4.4.3.1.2 Cert Stat VDO",
    "page": 172,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Cert Stat VDO Shall contain the XID assigned by USB-IF to the product before certification in binary format.\nThe fields in the Cert Stat VDO Shall be as defined in Table 6.37, \"Cert Stat VDO\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.3",
    "title": "Product VDO",
    "full_path": "6.4.4.3.1.3 Product VDO",
    "page": 172,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Product VDO contains identity information relating to the product. The fields in the Product VDO Shall be as\ndefined in Table 6.38, \"Product VDO\" .\nManufacturers Should set the USB Product ID field to a unique value identifying the product and Should set the\nbcdDevice field to a version number relevant to the release version of the product."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4",
    "title": "UFP VDO",
    "full_path": "6.4.4.3.1.4 UFP VDO",
    "page": 172,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The UFP VDO defined in this section Shall be returned by Ports capable of operating as a UFP including traditional\nUSB peripherals, USB Hub 's upstream Port and DRD capable host Ports. The UFP VDO defined in this section Shall\nbe sent when the Product Type (UFP ) field in the ID Header VDO is given as a PDUSB Peripheral or PDUSB Hub .\nTable 6.39, \"UFP VDO\" defines the UFP VDO that Shall be sent based on the Product Type .\nA [USB4] UFP Shall support the Structured VDM Discover Identity Command .Table 6.37 Cert Stat VDO\nBit(s) Description Reference\nB31...0 32-bit unsigned integer, XID Assigned by USB-IF\nTable 6.38 Product VDO\nBit(s) Description Reference\nB31...16 16-bit unsigned integer, USB Product ID [USB 2.0] /[USB 3.2]\nB15...0 16-bit unsigned integer, bcdDevice [USB 2.0] /[USB 3.2]\nTable 6.39 UFP VDO\nBit(s) Description Reference\nB31…29 UFP VDO VersionVersion Number of the VDO (not this specification Version ):\nVersion 1.3 = 011b\nValues 100b…111b are Reserved , Shall Not be used.\nB28 Reserved Shall be set to zero.\nB27…24 Device CapabilityBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "[USB 2.0] Device Capable",
    "full_path": "0 [USB 2.0] Device Capable",
    "page": 172,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "[USB 2.0] Device Capable (Billboard only)",
    "full_path": "1 [USB 2.0] Device Capable (Billboard only)",
    "page": 172,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "[USB 3.2] Device Capable",
    "full_path": "2 [USB 3.2] Device Capable",
    "page": 172,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "[USB4] Device Capable",
    "full_path": "3 [USB4] Device Capable",
    "page": 172,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "B23…22 Connector Type (Legacy) Deprecated , Shall be set to 00b.\nB21…11 Reserved Shall be set to zero.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1736.4.4.3.1.4.1 VDO Version Field\nThe UFP VDO Version field contains a VDO Version for this VDM Version number. This field indicates the expected\ncontent for the UFP VDO s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.2",
    "title": "Device Capability Field",
    "full_path": "6.4.4.3.1.4.2 Device Capability Field",
    "page": 173,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "The Device Capability bit-field describes the UFP 's Capabilities when operating as either a PDUSB Device or PDUSB\nHub .B10…8 VCONN PowerWhen the VCONN Required field is set to “Yes” the VCONN\nPower Field indicates the VCONN power needed by the AMA for\nfull functionality:\n000b = 1W\n001b = 1.5W\n010b = 2W\n011b = 3W\n100b = 4W\n101b = 5W\n110b = 6W\n111b = Reserved , Shall Not be used.\nWhen the VCONN Required field is set to “No” the VCONN Power\nfield is Reserved and Shall be set to zero.\nB7 VCONN RequiredIndicates whether the AMA requires VCONN in order to\nfunction.\n0 = No\n1 = Yes\nWhen the Alternate Modes field indicates no modes are\nsupported, the VCONN Required field is Reserved and Shall be\nset to zero.\nB6 VBUS RequiredIndicates whether the AMA requires VBUS in order to function.\n0 = Yes\n1 = No\nWhen the Alternate Modes field indicates no modes are\nsupported, the VBUS Required field is Reserved and Shall be\nset to zero.\nB5…3 Alternate ModesBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Supports [TBT3] Alternate Mode",
    "full_path": "0 Supports [TBT3] Alternate Mode",
    "page": 173,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1Supports Alternate Mode s that reconfigure the\nsignals on the [USB Type-C 2.4] connector –\nexcept for [TBT3] .\n2Supports Alternate Mode s that do not reconfigure\nthe signals on the [USB Type-C 2.4] connector.\nB2…0 USB Highest Speed000b = [USB 2.0] only, no SuperSpeed support\n001b = [USB 3.2] Gen1\n010b = [USB 3.2] /[USB4] Gen2\n011b = [USB4] Gen3\n100b = [USB4] Gen4\n101b…111b = Reserved and Shall be set to zero.Table 6.39 UFP VDO (Continued)\nBit(s) Description Reference\nPage 174 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The bits in the bit-field Shall be non-zero when the corresponding USB Device speed is supported and Shall be set\nto zero when the corresponding USB Device speed is not supported.\n[USB 2.0] \"Device capable\" and \"Device capable Billboard only\" (bits 0 and 1) Shall Not be simultaneously set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.3",
    "title": "Connector Type Field",
    "full_path": "6.4.4.3.1.4.3 Connector Type Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "Th Connector Type (Legacy) field was previously used for the UFP VDO 's Connector Type. Shall be set to 00b by\nthe Cable Plug and Shall be Ignored by the receiver. The receiver can find this information in the Connector Type\nfield in the ID Header VDO ( Section 6.4.4.3.1.1.7, \"Connector Type Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.4",
    "title": "VCONN Power Field",
    "full_path": "6.4.4.3.1.4.4 VCONN Power Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "When the VCONN Required field indicates that VCONN is required the VCONN Power field Shall indicate how much\npower an AMA needs in order to fully operate. When the VCONN Required field is set to \"No\" the VCONN Power field\nis Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.5",
    "title": "VCONN Required Field",
    "full_path": "6.4.4.3.1.4.5 VCONN Required Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "The VCONN Required field Shall indicate whether VCONN is needed for the AMA to operate. The VCONN Required field\nShall only be used if the Alternate Modes field indicates that an Alternate Mode is supported. If no Alternate Mode s\nare supported, this field is Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.6",
    "title": "VBUS Required Field",
    "full_path": "6.4.4.3.1.4.6 VBUS Required Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "The V BUS Required field Shall indicate whether VBUS is needed for the AMA to operate. The VBUS required field\nShall only be used if the Alternate Modes field indicates that an Alternate Mode is supported. If no Alternate Mode s\nare supported, this field is Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.7",
    "title": "Alternate Modes Field",
    "full_path": "6.4.4.3.1.4.7 Alternate Modes Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "The Alternate Modes field Shall be used to identify all the types of Alternate Mode s, if any, a device supports."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.4.8",
    "title": "USB Highest Speed Field",
    "full_path": "6.4.4.3.1.4.8 USB Highest Speed Field",
    "page": 174,
    "level": 7,
    "parent_id": "6.4.4.3.1.4",
    "tags": [],
    "content": "The USB Highest Speed field Shall indicate the Port 's highest speed capability. The DFP Shall consider all values\nindicated in this field that are higher than the highest value that the DFP recognizes as being Valid and functionally\ncompatible with the highest speed that the DFP supports.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1756.4.4.3.1.5 DFP VDO\nThe DFP VDO Shall be returned by Ports capable of operating as a DFP ; including those implemented by Host s, Hub s\nand Power Bricks. The DFP VDO Shall be returned when the Product Type (DFP ) field in the ID Header VDO is given\nas Power Brick, PDUSB Host or PDUSB Hub . Table 6.40, \"DFP VDO\" defines the DFP VDO that Shall be sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.5.1",
    "title": "VDO Version Field",
    "full_path": "6.4.4.3.1.5.1 VDO Version Field",
    "page": 175,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The DFP VDO Version field Shall contain a VDO Version for this VDM Version number. This field indicates the\nexpected content for the DFP VDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.5.2",
    "title": "Host Capability Field",
    "full_path": "6.4.4.3.1.5.2 Host Capability Field",
    "page": 175,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Host Capability bit-field Shall describe whether the DFP can operate as a PDUSB Host and the DFP 's\nCapabilities when operating as a PDUSB Host .\nPower Bricks and PDUSB Hub s Shall set the Host Capability bits to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.5.3",
    "title": "Connector Type Field",
    "full_path": "6.4.4.3.1.5.3 Connector Type Field",
    "page": 175,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Connector Type (Legacy) field was previously used for the UFP VDO 's Connector Type. Shall be set to 00b by\nthe Cable Plug and Shall be Ignored by the receiver. The receiver can find this information in the Connector Type\nfield in the ID Header VDO ( Section 6.4.4.3.1.1.7, \"Connector Type Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.5.4",
    "title": "Port Number Field",
    "full_path": "6.4.4.3.1.5.4 Port Number Field",
    "page": 175,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Port Number field Shall be a Static unique number that unambiguously identifies each [USB Type-C 2.4] DFP ,\nincluding DRP s, on the device.\nNote: This number is independent of the USB Port number.Table 6.40 DFP VDO\nBit(s) Field Description\nB31…29 DFP VDO VersionVersion Number of the VDO (not this specification Version ):\nVersion 1.2 = 010b\nValues 011b…111b are Reserved and Shall Not be used\nB28…27 Reserved Shall be set to zero.\nB26…24 Host Capability Bit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "[USB 2.0] Host Capable",
    "full_path": "0 [USB 2.0] Host Capable",
    "page": 175,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "[USB 3.2] Host Capable",
    "full_path": "1 [USB 3.2] Host Capable",
    "page": 175,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "[USB4] Host Capable",
    "full_path": "2 [USB4] Host Capable",
    "page": 175,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "B23…22Connector Type\n(Legacy)Shall be set to 00b.\nB21…5 Reserved Shall be set to zero.\nB4…0 Port Number Unique Port number to identify a specific Port on a multi- Port device.\nPage 176 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1.6 Passive Cable VDO\nThe Passive Cable VDO defined in this section Shall be sent when the Product Type is given as Passive Cable .\nTable 6.41, \"Passive Cable VDO\" defines the Cable VDO which Shall be sent.\nA Passive Cable has a USB Plug on each end at least one of which is a Cable Plug supporting SOP’ Communication . A\nPassive Cable Shall Not incorporate data bus signal conditioning circuits and hence has no concept of Super Speed\nDirectionality. A Passive Cable Shall include a VBUS wire and Shall only respond to SOP’ Communication . Passive\nCable s Shall support the Structured VDM Discover Identity Command and Shall return the Passive Cable VDO in a\nDiscover Identity Command ACK as shown in Table 6.41, \"Passive Cable VDO\" .\nTable 6.41 Passive Cable VDO\nBit(s) Field Description\nB31…28 HW Version 0000b…1111b assigned by the VID owner\nB27…24 Firmware Version 0000b…1111b assigned by the VID owner\nB23…21 VDO VersionVersion Number of the VDO (not this specification Version ):\nVersion 1.0 = 000b\nValues 001b…111b are Reserved and Shall Not be used.\nB20 Reserved Shall be set to zero.\nB19…18USB Type-C plug to USB\nType-C/Captive\n(Passive Cable)00b = Reserved and Shall Not be used\n01b = Reserved and Shall Not be used\n10b = USB Type-C\n11b = Captive\nB17EPR Capable (Passive\nCable)0b – Cable is not EPR Capable\n1b = Cable is EPR Capable\nB16…13Cable Latency (Passive\nCable)0000b – Reserved and Shall Not be used\n0001b – <10ns (~1m)\n0010b – 10ns to 20ns (~2m)\n0011b – 20ns to 30ns (~3m)\n0100b – 30ns to 40ns (~4m)\n0101b – 40ns to 50ns (~5m)\n0110b – 50ns to 60ns (~6m)\n0111b – 60ns to 70ns (~7m)\n1000b – > 70ns (>~7m)\nNote: 1001b ….1111b Reserved and Shall Not be used\nB12…11Cable Termination Type\n(Passive Cable)00b = VCONN not required. Cable Plug s that only support Discover Identity\nCommand s Shall set these bits to 00b.\n01b = VCONN required\n10b…11b = Reserved and Shall Not be used\nB10…9Maximum V BUS Voltage\n(Passive Cable)Maximum Cable VBUS Voltage2:\n00b – 20V\n01b – 30V1 (Deprecated )\n10b – 40V1 (Deprecated )\n11b – 50V\nB8…7 Reserved Shall be set to zero.\n1) Values no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2) EPR Sink s with a captive cable Shall report 50V.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1776.4.4.3.1.6.1 HW Version Field\nThe HW Version (B31…28) contains a HW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.2",
    "title": "FW Version Field",
    "full_path": "6.4.4.3.1.6.2 FW Version Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Firmware Version field (B27…24) contains a FW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.3",
    "title": "VDO Version Field",
    "full_path": "6.4.4.3.1.6.3 VDO Version Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the\nexpected content for this VDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.4",
    "title": "USB Type-C plug to USB Type-C/Captive Field",
    "full_path": "6.4.4.3.1.6.4 USB Type-C plug to USB Type-C/Captive Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Type-C plug to USB Type-C/Captive (Passive Cable) field (B19…18) Shall contain a value indicating\nwhether the opposite end from the USB Type-C plug is another USB Type-C plug (i.e., a detachable Standard USB\nType-C Cable Assembly) or is a Captive Cable Assembly."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.5",
    "title": "EPR Mode Capable",
    "full_path": "6.4.4.3.1.6.5 EPR Mode Capable",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The EPR Capable (Passive Cable) bit is a Static bit which Shall only be set when the cable is specifically designed\nfor safe operation when carrying up to 48 volts at 5 amps."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.6",
    "title": "Cable Latency Field",
    "full_path": "6.4.4.3.1.6.6 Cable Latency Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Cable Latency (Passive Cable) field (B16…13) Shall contain a value corresponding to the signal latency\nthrough the cable which can be used as an approximation for its length."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.7",
    "title": "Cable Termination Type Field",
    "full_path": "6.4.4.3.1.6.7 Cable Termination Type Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Cable Termination Type (Passive Cable) field (B12…11) Shall contain a value indicating whether the Passive\nCable needs VCONN only initially in order to support the Discover Identity Command , after which it can be removed,\nor the Passive Cable needs VCONN to be continuously applied in order to power some feature of the Cable Plug ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.8",
    "title": "Maximum V BUS Voltage Field",
    "full_path": "6.4.4.3.1.6.8 Maximum V BUS Voltage Field",
    "page": 177,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Maximum V BUS Voltage (Passive Cable) field (B10…9) Shall contain the maximum voltage that Shall be\nNegotiated using a Fixed Supply over the cable as part of an Explicit Contract where the maximum voltage that Shall\nbe applied to the cable is vSrcNew max + vSrcValid max. For example, when the Maximum V BUS Voltage (Passive\nCable) field is 20V, a Fixed Supply of 20V can be Negotiated as part of an Explicit Contract where the absolute\nmaximum voltage that can be applied to the cable is 21.55V. Similarly, when the Maximum V BUS Voltage (Passive B6…5VBUS Current Handling\nCapability (Passive\nCable)00b = Reserved and Shall Not be used\n01b = 3A\n10b = 5A\n11b = Reserved and Shall Not be used\nB4…3 Reserved Shall be set to zero.\nB2…0USB Highest Speed\n(Passive Cable)000b = [USB 2.0] only, no SuperSpeed support\n001b = [USB 3.2] Gen1\n010b = [USB 3.2] /[USB4] Gen2\n011b = [USB4] Gen3\n100b = [USB4] Gen4\n101b…111b = Reserved and Shall Not be usedTable 6.41 Passive Cable VDO (Continued)\nBit(s) Field Description\n1) Values no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2) EPR Sink s with a captive cable Shall report 50V.\nPage 178 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Cable) field is 50V, a Fixed Supply of 48V can be Negotiated as part of an Explicit Contract where the absolute\nmaximum voltage that can be applied to the cable is 50.9V. Maximum V BUS Voltage (Passive Cable) field values of\n01b and 10b (formerly 30V and 40V) Shall be treated if they were 00b (20V)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.9",
    "title": "VBUS Current Handling Capability Field",
    "full_path": "6.4.4.3.1.6.9 VBUS Current Handling Capability Field",
    "page": 178,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The V BUS Current Handling Capability (Passive Cable) field (B6…5) Shall indicate whether the cable is capable\nof carrying 3A or 5A."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.6.10",
    "title": "USB Highest Speed Field",
    "full_path": "6.4.4.3.1.6.10 USB Highest Speed Field",
    "page": 178,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Highest Speed (Passive Cable) field (B2…0) Shall indicate the highest rate the cable supports. The DFP\nShall consider all values indicated in this field that are higher than the highest value that the DFP recognizes as\nbeing Valid and functionally compatible with the highest speed that the DFP supports.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1796.4.4.3.1.7 Active Cable VDOs\nAn Active Cable has a USB Plug on each end at least one of which is a Cable Plug supporting SOP’ Communication .\nAn Active Cable Shall incorporate data bus signal conditioning circuits and May have a concept of Super Speed\nDirectionality on its Super Speed wires. An Active Cable May include a VBUS wire.\nAn Active Cable :\n Shall respond to SOP’ Communication .\n May respond to SOP’’ Communication .\n Shall support the Structured VDM Discover Identity Command .\n In the Discover Identity Command ACK :\n Shall set the Product Type in the ID Header VDO to Active Cable .\n Shall return the Active Cable VDO s defined in Table 6.42, \"Active Cable VDO1\" and Table 6.43, \"Active\nCable VDO2\" ..\nTable 6.42 Active Cable VDO1\nBit(s) Field Description\nB31…28 HW Version 0000b…1111b assigned by the VID owner\nB27…24 Firmware Version 0000b…1111b assigned by the VID owner\nB23…21 VDO VersionVersion Number of the VDO (not this specification Version ):\nVersion 1.0 = 000b\nValues 001b…111b are Reserved and Shall Not be used.\nB20 Reserved Shall be set to zero.\nB19…18USB Type-C plug to USB\nType-C/Captive00b = Reserved and Shall Not be used\n01b = Reserved and Shall Not be used\n10b = USB Type-C\n11b = Captive\nB17EPR Capable (Active\nCable)0b – Cable is not EPR Capable\n1b = Cable is EPR Capable\nB16…13 Cable Latency0000b – Reserved and Shall Not be used\n0001b – <10ns (~1m)\n0010b – 10ns to 20ns (~2m)\n0011b – 20ns to 30ns (~3m)\n0100b – 30ns to 40ns (~4m)\n0101b – 40ns to 50ns (~5m)\n0110b – 50ns to 60ns (~6m)\n0111b – 60ns to 70ns (~7m)\n1000b –1000ns (~100m)\n1001b –2000ns (~200m)\n1010b – 3000ns (~300m)\n1001b ….1111b Reserved and Shall Not be used\nNote: Includes latency of electronics in Active Cable .\nB12…11Cable Termination Type\n(Active Cable)00b…01b = Reserved and Shall Not be used\n10b = One end Active, one end passive, VCONN required\n11b = Both ends Active, VCONN required\n1) Values no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2) EPR Sink s with a captive cable Shall report 50V.\nPage 180 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10B10…9Maximum V BUS Voltage\n(Active Cable)Maximum Cable VBUS voltage2:\n00b – 20V\n01b – 30V1 (Deprecated )\n10b – 40V1 (Deprecated )\n11b – 50V\nB8…7 Reserved Shall be set to zero.\nB8 SBU Supported0 = SBU connections supported\n1 = SBU connections are not supported\nB7 SBU TypeWhen SBU Supported = 1 this bit Shall be Ignored\nWhen SBU Supported = 0:\n0 = SBU is passive\n1 = SBU is active\nB6…5VBUS Current Handling\nCapability (Active\nCable)When VBUS Through Cable is “No”, this field Shall be Ignored .\nWhen VBUS Through Cable is “Yes”:\n00b = Reserved and Shall Not be used\n01b = 3A\n10b = 5A\n11b = Reserved and Shall Not be used\nB4 VBUS Through Cable0 = No\n1 = Yes\nB3 SOP’’ Controller Present0 = No SOP’’ controller present\n1 = SOP’’ controller present\nB2…0USB Highest Speed\n(Active Cable)000b = [USB 2.0] only, no SuperSpeed support\n001b = [USB 3.2] Gen1\n010b = [USB 3.2] /[USB4] Gen2\n011b = [USB4] Gen3\n100b = [USB4] Gen4\n101b…111b = Reserved and Shall Not be used\nTable 6.43 Active Cable VDO2\nBit(s) Field Description\nB31…24Maximum Operating\nTemperatureThe maximum internal operating temperature in °C. It might or might not reflect the\nplug’s skin temperature.\nB23…16 Shutdown TemperatureThe temperature, in °C, at which the cable will go into thermal shutdown so as not to\nexceed the allowable plug skin temperature.\nB15 Reserved Shall be set to zero.\nB14…12 U3/CLd Power000b: >10mW\n001b: 5-10mW\n010b: 1-5mW\n011b: 0.5-1mW\n100b: 0.2-0.5mW\n101b: 50-200µW\n110b: <50µW\n111b: Reserved and Shall Not be usedTable 6.42 Active Cable VDO1 (Continued)\nBit(s) Field Description\n1) Values no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2) EPR Sink s with a captive cable Shall report 50V.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1816.4.4.3.1.7.1 HW Version Field\nThe HW Version field (B31…28) contains a HW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.2",
    "title": "FW Version Field",
    "full_path": "6.4.4.3.1.7.2 FW Version Field",
    "page": 181,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Firmware Version field (B27…24) contains a FW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.3",
    "title": "VDO Version Field",
    "full_path": "6.4.4.3.1.7.3 VDO Version Field",
    "page": 181,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the\nexpected content for the Active Cable VDO s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.4",
    "title": "Connector Type Field",
    "full_path": "6.4.4.3.1.7.4 Connector Type Field",
    "page": 181,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Type-C plug to USB Type-C/Captive field (B19…18) Shall contain a value indicating whether the opposite\nend from the USB Type-C plug is another USB Type-C plug (i.e., a detachable Standard USB Type-C Cable Assembly)\nor is a Captive Cable Assembly."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.5",
    "title": "EPR Mode Capable",
    "full_path": "6.4.4.3.1.7.5 EPR Mode Capable",
    "page": 181,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The EPR Capable (Active Cable) is a Static bit which Shall only be set when the cable is specifically designed for\nsafe operation when carrying up to 48 volts at 5 amps."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.6",
    "title": "Cable Latency Field",
    "full_path": "6.4.4.3.1.7.6 Cable Latency Field",
    "page": 181,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Cable Latency field (B16…13) Shall contain a value corresponding to the signal latency through the cable\nwhich can be used as an approximation for its length.B11U3 to U0 transition\nmode0b: U3 to U0 direct\n1b: U3 to U0 through U3S\nB10 Physical connection0b = Copper\n1b = Optical\nB9 Active element0b = Active Re-driver\n1b = Active Re-timer\nB8 USB4 Supported0b = [USB4] supported\n1b = [USB4] not supported\nB7…6USB 2.0 Hub Hops\nConsumedNumber of [USB 2.0] ‘hub hops’ cable consumes.\nShall be set to zero if USB 2.0 not supported.\nB5 USB 2.0 Supported0b = [USB 2.0] supported\n1b = [USB 2.0] not supported\nB4 USB 3.2 Supported0b = [USB 3.2] SuperSpeed supported\n1b = [USB 3.2] SuperSpeed not supported\nB3 USB Lanes Supported0b = One lane\n1b = Two lanes\nB2Optically Isolated\nActive Cable0b = No\n1b = Yes\nB1USB4 Asymmetric Mode\nSupported0b = No\n1b = Yes\nShall be set to zero if asymmetry is not supported.\nB0 USB Gen0b = Gen 1\n1b = Gen 2 or higher\nNote: See VDO1 USB Highest Speed for details of Gen supported.Table 6.43 Active Cable VDO2 (Continued)\nBit(s) Field Description\nPage 182 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1.7.7 Cable Termination Type Field\nThe Cable Termination Type (Active Cable) field (B12…11) Shall contain a value corresponding to whether the\nActive Cable has one or two Cable Plug s requiring power from VCONN ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.8",
    "title": "Maximum V BUS Voltage Field",
    "full_path": "6.4.4.3.1.7.8 Maximum V BUS Voltage Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Maximum V BUS Voltage (Active Cable) field (B10…9) Shall contain the maximum voltage that Shall be\nNegotiated as part of an Explicit Contract where the maximum voltage that Shall be applied to the cable is vSrcNew\nmax + vSrcValid max. When this field is set to 20V, the cable will safely carry a Programmable Power Supply APDO\nof 20V where the absolute maximum voltage that can be applied to the cable is 21.55V. Similarly, when the\nMaximum V BUS Voltage (Active Cable) field is 50V, a Fixed Supply of 48V can be Negotiated as part of an Explicit\nContract where the absolute maximum voltage that can be applied to the cable is 50.9V. Maximum V BUS Voltage\n(Active Cable) field values of 01b and 10b (formerly 30V and 40V) Shall be treated if they were 00b (20V)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.9",
    "title": "SBU Supported Field",
    "full_path": "6.4.4.3.1.7.9 SBU Supported Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The SBU Supported field (B8) Shall indicate whether the cable supports the SBUs in the cable."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.10",
    "title": "SBU Type Field",
    "full_path": "6.4.4.3.1.7.10 SBU Type Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The SBU Type field (B7) Shall indicate whether the SBUs are passive or active (e.g., digital)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.11",
    "title": "V BUS Current Handling Capability Field",
    "full_path": "6.4.4.3.1.7.11 V BUS Current Handling Capability Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The VBUS Current Handling Capability (Active Cable) field (B6…5) Shall indicate whether the cable is capable of\ncarrying 3A or 5A. The VBUS Current Handling Capability (Active Cable) field Shall only be Valid when the VBUS\nCurrent Handling Capability (Active Cable) field indicates an end-to-end VBUS wire."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.12",
    "title": "V BUS Through Cable Field",
    "full_path": "6.4.4.3.1.7.12 V BUS Through Cable Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The V BUS Through Cable field (B4) Shall indicate whether the cable contains an end-to-end VBUS wire."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.13",
    "title": "SOP'' Controller Present Field",
    "full_path": "6.4.4.3.1.7.13 SOP'' Controller Present Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The SOP’’ Controller Present field (B3) Shall indicate whether one of the Cable Plug s is capable of SOP’’\nCommunication in addition to the Normative SOP’ Communication ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.14",
    "title": "USB Highest Speed Field",
    "full_path": "6.4.4.3.1.7.14 USB Highest Speed Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Highest Speed (Active Cable) field (B2…0) Shall indicate the highest rate the cable supports. The DFP\nShall consider all values indicated in this field that are higher than the highest value that the DFP recognizes as\nbeing Valid and functionally compatible with the highest speed that the DFP supports."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.15",
    "title": "Maximum Operating Temperature Field",
    "full_path": "6.4.4.3.1.7.15 Maximum Operating Temperature Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "Maximum Operating Temperature field (B31…24) Shall report the maximum allowable operating temperature\ninside the plug in °C."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.16",
    "title": "Shutdown Temperature Field",
    "full_path": "6.4.4.3.1.7.16 Shutdown Temperature Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "Shutdown Temperature field (B23…16) Shall indicate the temperature inside the plug, in °C, at which the plug\nwill shut down its active signaling components. When this temperature is reached, it will be reported in the Active\nCable Status Message through the Thermal Shutdown bit."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.17",
    "title": "U3/CLd Power Field",
    "full_path": "6.4.4.3.1.7.17 U3/CLd Power Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The U3/CLd Power field (B14…12) Shall indicate the power the cable consumes while in [USB 3.2] U3 or [USB4]\nCLd."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.18",
    "title": "U3 to U0 Transition Mode Field",
    "full_path": "6.4.4.3.1.7.18 U3 to U0 Transition Mode Field",
    "page": 182,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The U3 to U0 transition mode field (B11) Shall indicate which U3 to U0 mode the cable supports. This does not\ninclude the power in U3S if supported.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1836.4.4.3.1.7.19 Physical Connection Field\nThe Physical connection field (B10) Shall indicate the cable's construction, whether the connection between the\nactive elements is copper or optical."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.20",
    "title": "Active element Field",
    "full_path": "6.4.4.3.1.7.20 Active element Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Active element field (B9) Shall indicate the cable's active element, whether the active element is a re-timer or\na re-driver."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.21",
    "title": "USB4 Supported Field",
    "full_path": "6.4.4.3.1.7.21 USB4 Supported Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB4 Supported field (B8) Shall indicate whether or not the cable supports [USB4] operation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.22",
    "title": "USB 2.0 Hub Hops Consumed field",
    "full_path": "6.4.4.3.1.7.22 USB 2.0 Hub Hops Consumed field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB 2.0 Hub Hops Consumed field (B7…6) Shall indicate the number of USB 2.0 'hub hops' that are lost due\nto the transmission time of the cable."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.23",
    "title": "USB 2.0 Supported Field",
    "full_path": "6.4.4.3.1.7.23 USB 2.0 Supported Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB 2.0 Supported field (B5) Shall indicate whether or not the cable supports [USB 2.0] only signaling."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.24",
    "title": "USB 3.2 Supported Field",
    "full_path": "6.4.4.3.1.7.24 USB 3.2 Supported Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB 3.2 Supported field (B4) Shall , indicate whether or not the cable supports [USB 3.2] SuperSpeed\nsignaling."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.25",
    "title": "USB Lanes Supported Field",
    "full_path": "6.4.4.3.1.7.25 USB Lanes Supported Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Lanes Supported field (B3) Shall indicate whether the cable supports one or two lanes of [USB 3.2]\nSuperSpeed signaling."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.26",
    "title": "Optically Isolated Active Cable Field",
    "full_path": "6.4.4.3.1.7.26 Optically Isolated Active Cable Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Optically Isolated Active Cable field (B2) Shall indicate whether this cable is an optically isolated Active Cable\nor not (as defined in [USB Type-C 2.4] ). Optically Isolated Active Cable s Shall have a re-timer or linear re-driver\n(LRD) as the active element and do not support [USB 2.0] or carry VBUS."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.27",
    "title": "USB4 Asymmetric Mode Supported Field",
    "full_path": "6.4.4.3.1.7.27 USB4 Asymmetric Mode Supported Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB4 Asymmetric Mode Supported field (B1) Shall indicate that the Active Cable supports asymmetric mode\nas defined in [USB4] and [USB Type-C 2.4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.7.28",
    "title": "USB Gen Field",
    "full_path": "6.4.4.3.1.7.28 USB Gen Field",
    "page": 183,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The USB Gen field (B0) Shall indicate the signaling Gen the cable supports. Gen 1 Shall only be used by [USB 3.2]\ncables as indicated by the USB 3.2 Supported field. Gen 2 or higher May be used by either [USB 3.2] or [USB4]\ncables as indicated by their respective supported fields. When Gen 2 or higher is indicated the USB Highest Speed\n(Active Cable) field in VDO1 Shall indicate the actual Gen supported."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.8",
    "title": "Alternate Mode Adapter VDO",
    "full_path": "6.4.4.3.1.8 Alternate Mode Adapter VDO",
    "page": 183,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Alternate Mode Adapter (AMA ) VDO has been Deprecated . PDUSB Device s which support one or more Alternate\nMode s Shall set an appropriate Product Type (UFP ), and Shall set the Modal Operation Supported bit to '1'.\nPage 184 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.1.9 V CONN Powered USB Device VDO\nThe V CONN Powered USB Device (VPD ) VDO defined in this section Shall be sent when the Product Type is given as\nVCONN Powered USB Device . Table 6.44, \"VPD VDO\" defines the VPD VDO which Shall be sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.1",
    "title": "HW Version Field",
    "full_path": "6.4.4.3.1.9.1 HW Version Field",
    "page": 184,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The HW Version field (B31…28) contains a HW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.2",
    "title": "FW Version Field",
    "full_path": "6.4.4.3.1.9.2 FW Version Field",
    "page": 184,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Firmware Version field (B27…24) contains a FW version assigned by the VID owner."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.3",
    "title": "VDO Version Field",
    "full_path": "6.4.4.3.1.9.3 VDO Version Field",
    "page": 184,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the\nexpected content for this VDO."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.4",
    "title": "Maximum V BUS Voltage Field",
    "full_path": "6.4.4.3.1.9.4 Maximum V BUS Voltage Field",
    "page": 184,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Maximum V BUS Voltage field (B16…15) Shall contain the maximum voltage that a Sink Shall Negotiate\nthrough the VPD Charge Through Port as part of an Explicit Contract .\nNote: The maximum voltage that will be applied to the cable is vSrcNew max + vSrcValid max. For example,\nwhen the Maximum V BUS Voltage field is 20V, a Fixed Supply of 20V can be Negotiated as part of an Table 6.44 VPD VDO\nBit(s) Field Description\nB31…28 HW Version 0000b…1111b assigned by the VID owner\nB27…24 Firmware Version 0000b…1111b assigned by the VID owner\nB23…21 VDO VersionVersion Number of the VDO (not this specification Version ):\nVersion 1.0 = 000b\nValues 001b…111b are Reserved and Shall Not be used.\nB20...17 Reserved Shall be set to zero.\nB16…15 Maximum V BUS VoltageMaximum VPD VBUS Voltage:\n00b – 20V\n01b – 30V1 (Deprecated )\n10b – 40V1 (Deprecated )\n11b – 50V1 (Deprecated )\nB14Charge Through\nCurrent SupportCharge Through Current Support bit=1b:\n0b - 3A capable.\n1b - 5A capable\nCharge Through Current Support bit = 0b:\nReserved and Shall be set to zero.\nB13 Reserved Shall be set to zero.\nB12…7 VBUS ImpedanceCharge Through Current Support bit = 1b: VBUS impedance through the VPD in 2\nmΩ increments. Values less than 10 mΩ are Reserved and Shall Not be used.\nCharge Through Current Support bit = 0b: Reserved and Shall be set to zero.\nB6…1 Ground ImpedanceCharge Through Current Support bit = 1b: Ground impedance through the VPD in"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "mΩ increments. Values less than 10 mΩ are Reserved and Shall Not be used.",
    "full_path": "1 mΩ increments. Values less than 10 mΩ are Reserved and Shall Not be used.",
    "page": 184,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Charge Through Current Support bit = 0b: Shall be set to zero.\nB0Charge Through\nSupport1b – the VPD supports Charge Through\n0b – the VPD does not support Charge Through\n1) Values no longer allowed. When present the field Shall be interpreted as if it was 00b.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 185Explicit Contract where the absolute maximum voltage that can be applied to the cable is 21.55V.\nMaximum V BUS Voltage field values of 01b and 10b (formerly 30V and 40V) Shall be treated if they were\n00b (20V)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.5",
    "title": "VBUS Impedance Field",
    "full_path": "6.4.4.3.1.9.5 VBUS Impedance Field",
    "page": 185,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The VBUS Impedance field (B12…7) Shall contain the impedance the VPD adds in series between the Source and the\nSink . The Sink Shall take this value into account when requesting current so as to not to exceed the VBUS IR Drop\nlimit of 0.5V between the Source and itself. If the Sink can tolerate a larger IR Drop on VBUS it May do so."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.6",
    "title": "Ground Impedance Field",
    "full_path": "6.4.4.3.1.9.6 Ground Impedance Field",
    "page": 185,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Ground Impedance field (B6…1) Shall contain the impedance the VPD adds in series between the Source and\nthe Sink . The Sink Shall take this value into account when requesting current so as to not to exceed the Ground IR\nDrop limit of 0.25V between the Source and itself."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.1.9.7",
    "title": "Charge Through Field",
    "full_path": "6.4.4.3.1.9.7 Charge Through Field",
    "page": 185,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Firmware Version field (B0) Shall be set to 1b when the VPD supports Charge Through and 0b otherwise.\nPage 186 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.2 Discover SVIDs\nThe Discover SVIDs Command is used by an Initiator to determine the SVID s for which a Responder has Modes. The\nDiscover SVIDs Command is used in conjunction with the Discover Modes Command in the Discovery Process to\ndetermine which Modes a device supports. The list of SVID s is always terminated with one or two 0x0000 SVID s.\nThe SVID in the Discover SVIDs Command Shall be set to the PD SID (see \" Table 6.31, \"SVID Values\" ) by both the\nInitiator and the Responder for this Command .\nThe Number of Data Objects field in the Message Header in the Discover SVIDs Command request Shall be set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "since the Discover SVIDs Command request Shall Not contain any VDOs.",
    "full_path": "1 since the Discover SVIDs Command request Shall Not contain any VDOs.",
    "page": 186,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "The Discover SVIDs Command ACK sent back by the Responder Shall contain one or more SVID s. The SVID s are\nreturned 2 per VDO (see Table 6.45, \"Discover SVIDs Responder VDO\" ). If there are an odd number of supported\nSVID s, the Discover SVIDs Command is returned ending with a SVID value of 0x0000 in the last part of the last VDO.\nIf there are an even number of supported SVID s, the Discover SVIDs Command is returned ending with an\nadditional VDO containing two SVID s with values of 0x0000. A Responder Shall only return SVID s for which a\nDiscover Modes Command request for that SVID will return at least one Alternate Mode .\nA Responder that does not support any SVID s Shall return a NAK .\nThe Number of Data Objects field in the Message Header in the Discover SVIDs Command NAK and BUSY\nresponses Shall be set to 1 since they Shall Not contain any VDOs.\nIf the Responder supports 12 or more SVID s then the Discover SVIDs Command Shall be executed multiple times\nuntil a Discover SVIDs VDO is returned ending either with a SVID value of 0x0000 in the last part of the last VDO\nor with a VDO containing two SVID s with values of 0x0000. Each Discover SVID ACK Message , other than the one\ncontaining the terminating 0x0000 SVID , Shall convey 12 SVID s. The Responder Shall restart the list of SVID s each\ntime a Discover Identity Command request is received from the Initiator .\nNote: Since a Cable Plug does not retry Message s if the GoodCRC Message from the Initiator becomes corrupted\nthe Cable Plug will consider the Discover SVIDs Command ACK unsent and will send the same list of\nSVID s again.\nFigure 6.18, \"Example Discover SVIDs response with 3 SVIDs\" shows an example response to the Discover SVIDs\nCommand request with two VDOs containing three SVID s. Figure 6.19, \"Example Discover SVIDs response with 4\nSVIDs\" shows an example response with two VDOs containing four SVID s followed by an empty VDO to terminate\nthe response. Figure 6.20, \"Example Discover SVIDs response with 12 SVIDs followed by an empty response\" shows an\nexample response with six VDOs containing twelve SVID s followed by an additional request that returns an empty\nVDO indicating there are no more SVID s to return.\nFigure 6.18 Example Discover SVIDs response with 3 SVIDsTable 6.45 Discover SVIDs Responder VDO\nBit(s) Field Description\nB31…16 SVID n16-bit unsigned integer, assigned by the USB-IF or 0x0000 if this is the\nlast VDO and the Responder supports an even number of SVID s.\nB15…0 SVID n+116-bit unsigned integer, assigned by the USB-IF or 0x0000 if this is the\nlast VDO and the Responder supports an odd or even number of SVID s.\nHeader\nNo. of Data Objects = 3\nVDM HeaderVDO 1\nSVID 0\n(B31..16)SVID 1\n(B15..0)VDO 2\nSVID 2\n(B31..16)0x0000\n(B15..0)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 187Figure 6.19 Example Discover SVIDs response with 4 SVIDs\nFigure 6.20 Example Discover SVIDs response with 12 SVIDs followed by an empty responseHeader\nNo. of Data Objects = 4\nVDM HeaderVDO 1\nSVID 0\n(B31..16)SVID 1\n(B15..0)VDO 2\nSVID 2\n(B31..16)SVID 3\n(B15..0)VDO 3\n0x0000\n(B31..16)0x0000\n(B15..0)\nHeader\nNo. of Data Objects = 7\nVDM HeaderVDO 1\nSVID 0\n(B31..16)SVID 1\n(B15..0)VDO 2\nSVID 2\n(B31..16)SVID 3\n(B15..0)VDO 3\nSVID 4\n(B31..16)SVID 5\n(B15..0)VDO 4\nSVID 6\n(B31..16)SVID 7\n(B15..0)VDO 5\nSVID 8\n(B31..16)SVID 9\n(B15..0)\nHeader\nNo. of Data Objects = 2\nVDM HeaderVDO 1\n0x0000\n(B31..16)0x0000\n(B15..0)VDO 6\nSVID 10\n(B31..16)SVID 11\n(B15..0)\nPage 188 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.4.3.3 Discover Modes\nThe Discover Modes Command is used by an Initiator to determine the Modes a Responder supports for a given\nSVID .\nThe SVID in the Discover Modes Command Shall be set to the SVID for which Modes are being requested by both\nthe Initiator and the Responder for this Command .\nThe Number of Data Objects field in the Message Header in the Discover Modes Command request Shall be set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "since the Discover Modes Command request Shall Not contain any VDOs.",
    "full_path": "1 since the Discover Modes Command request Shall Not contain any VDOs.",
    "page": 188,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "The Discover Modes Command ACK sent back by the Responder Shall contain one or more Modes. The Discover\nModes Command ACK Shall contain a Message Header with the Number of Data Objects field set to a value of 2 to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "(the actual value is the number of Alternate Mode objects plus one). If the ID is a VID, the structure and content",
    "full_path": "7 (the actual value is the number of Alternate Mode objects plus one). If the ID is a VID, the structure and content",
    "page": 188,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "of the VDO is left to the Vendor. If the ID is a SID, the structure and content of the VDO is defined by the relevant\nstandard’s body.\nA Responder that does not support any Modes Shall return a NAK .\nThe Number of Data Objects field in the Message Header in the Discover Modes Command NAK and BUSY\nresponses Shall be set to 1 since they Shall Not contain any VDOs.\nFigure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\" shows an example of a Discover\nModes Command response from a Responder which supports three Modes for a given SVID .\nFigure 6.21 Example Discover Modes response for a given SVID with 3 Modes"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.4",
    "title": "Enter Mode Command",
    "full_path": "6.4.4.3.4 Enter Mode Command",
    "page": 188,
    "level": 5,
    "parent_id": "6.4.4.3",
    "tags": [],
    "content": "The Enter Mode Command is used by an Initiator (DFP ) to command a Responder (UFP or Cable Plug ) to enter a\nspecified Alternate Mode of operation. Only a DFP Shall initiate the Enter Mode Process which it starts after it has\nsuccessfully completed the Discovery Process .\nThe value in the Object Position field in the VDM Header Shall indicate to which Alternate Mode in the Discover\nModes Command the VDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3\nModes\" ). The value 1 always indicates the first Alternate Mode as it is the first object following the VDM Header . The\nvalue 2 refers to the next Alternate Mode and so forth.\nThe Number of Data Objects field in the Message Header in the Command request Shall be set to either 1 or 2 since\nthe Enter Mode Command request Shall Not contain more than 1 VDO. When a VDO is included in an Enter Mode\nCommand request the contents of the 32-bit VDO is defined by the Alternate Mode .\nThe Number of Data Objects field in the Command response Shall be set to 1 since an Enter Mode Command\nresponse ( ACK , NAK ) Shall Not contain any VDOs.\nBefore entering a Alternate Mode , by sending the Enter Mode Command request that requires the reconfiguring of\nany pins on entry to that Alternate Mode , the Initiator Shall ensure that those pins being reconfigured are placed\ninto the USB Safe State . Before entering an Alternate Mode that requires the reconfiguring of any pins, the\nResponder Shall ensure that those pins being reconfigured are placed into either USB operation or the USB Safe\nState .\nA device May support multiple Modes with one or more active at any point in time. Any interactions between them\nare the responsibility of the Standard or Vendor. Where there are multiple Active Mode s at the same time Modal\nOperation Shall start on entry to the first Alternate Mode .Header\nNo. of Data Objects = 4\nVDM Header Mode 1 Mode 2 Mode 3\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 189On receiving an Enter Mode Command requests the Responder Shall respond with either an ACK or a NAK\nresponse. The Responder is not allowed to return a BUSY response. The value in the Object Position field of the\nEnter Mode Command response Shall contain the same value as the received Enter Mode Command request.\nIf the Responder responds to the Enter Mode Command request with an ACK , the Responder Shall enter the\nAlternate Mode before sending the ACK . The Initiator Shall enter the Alternate Mode on reception of the ACK .\nSuccessful transmission of the Message confirms to the Responder that the Initiator will enter an Active Mode .\nSee Figure 8.111, \"DFP to UFP Enter Mode\" for more details.\nIf the Responder responds to the Enter Mode Command request with a NAK , the Alternate Mode is not entered. If\nnot presently in Modal Operation the Initiator Shall return to USB operation. If not presently in Modal Operation\nthe Responder Shall remain in either USB operation or the USB Safe State .\nIf the Initiator fails to receive a response within tVDMWaitModeEntry it Shall Not enter the Alternate Mode but\nreturn to USB operation.\nFigure 6.22, \"Successful Enter Mode sequence\" shows the sequence of events during the transition between USB\noperation and entering an Alternate Mode . It illustrates when the Responder 's Alternate Mode changes and when\nthe Initiator 's Alternate Mode changes. Figure 6.23, \"Unsuccessful Enter Mode sequence due to NAK\" illustrates that\nwhen the Responder returns a NAK the transition to an Alternate Mode do not take place and the Responder and\nInitiator remain in their default USB roles.\nFigure 6.22 Successful Enter Mode sequence\nDFP (Initiator) UFP (Responder)\nEnter Mode\nGoodCRCGoodCRC\nACKUSB Safe StateUSB\nUSB or USB Safe State\nNew\nMode\nNew\nMode\nPage 190 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.23 Unsuccessful Enter Mode sequence due to NAK\nOnce the Alternate Mode is entered, the device Shall remain in that Active Mode until the Exit Mode Command is\nsuccessful (see Section 6.4.4.3.5, \"Exit Mode Command\" ).\nThe following events Shall also cause the Port Partner s and Cable Plug (s) to exit all Active Mode s:\n A PD Hard Reset .\n Error Recovery .\n The Port Partner s or Cable Plug (s) are Detached .\n A Cable Reset (only exits the Cable Plug 's Active Mode s).\n A Data Reset (removing power briefly resets all the Active Mode s in the Cable Plug ).\nThe Initiator Shall return to USB Operation within tVDMExitMode of a disconnect, of Hard Reset Signaling being\ndetected or Error Recovery .\nThe Responder Shall return to either USB operation or USB Safe State within tVDMExitMode of a disconnect, of\nHard Reset Signaling being detected or Error Recovery .\nA DR_Swap Message Shall Not be sent during Modal Operation between the Port Partner s (see Section 6.3.9,\n\"DR_Swap Message\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.5",
    "title": "Exit Mode Command",
    "full_path": "6.4.4.3.5 Exit Mode Command",
    "page": 190,
    "level": 5,
    "parent_id": "6.4.4.3",
    "tags": [],
    "content": "The Exit Mode Command is used by an Initiator (DFP ) to command a Responder (UFP or Cable Plug ) to exit its Active\nMode and return to normal USB operation. Only the DFP Shall initiate the Exit Mode Process.\nThe value in the Object Position field Shall indicate to which Alternate Mode in the Discover Modes Command the\nVDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\" ) and Shall have been\nused previously in an Enter Mode Command request for an Active Mode . The value 1 always indicates the first DFP (Initiator) UFP (Responder)\nEnter Mode\nGoodCRCGoodCRC\nNAKUSB Safe StateUSB\nUSB or USB Safe State\nUSB\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 191Alternate Mode as it is the first object following the VDM Header . The value 2 refers to the next Alternate Mode and\nso forth. A value of 111b in the Object Position field Shall indicate that all Active Mode s Shall be exited.\nThe Number of Data Objects field in both the Command request and Command response (ACK , NAK ) Shall be set\nto 1 since an Exit Mode Command Shall Not contain any VDOs.\nThe Responder Shall exit its Active Mode before sending the response Message . The Initiator Shall exit its Active\nMode when it receives the ACK . The Responder Shall Not return a BUSY acknowledgment and Shall only return a\nNAK acknowledgment to a request not containing an Active Mode (i.e., Invalid object position). An Initiator which\nfails to receive an ACK within tVDMWaitModeExit or receives a NAK or BUSY response Shall exit its Active Mode .\nSee Figure 8.112, \"DFP to UFP Exit Mode\" for more details.\nFigure 6.24, \"Exit Mode sequence\" shows the sequence of events during the transition between exiting an Active\nMode and USB operation. It illustrates when the Responder 's Alternate Mode changes and when the Initiator 's\nAlternate Mode changes.\nFigure 6.24 Exit Mode sequence"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.3.6",
    "title": "Attention",
    "full_path": "6.4.4.3.6 Attention",
    "page": 191,
    "level": 5,
    "parent_id": "6.4.4.3",
    "tags": [],
    "content": "The Attention Command May be used by the Initiator to notify the Responder that it requires service.\nThe value in the Object Position field Shall indicate to which Alternate Mode in the Discover Modes Command the\nVDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\" ) and Shall have been\nused previously in an Enter Mode Command request for an Active Mode . The value 1 always indicates the first\nAlternate Mode as it is the first object following the VDM Header . The value 2 refers to the next Alternate Mode and\nso forth. A value of 000b or 111b in the Object Position field Shall Not be used by the Attention Command .DFP (Initiator) UFP (Responder)\nExit Mode\nGoodCRCGoodCRC\nACKUSB Safe State\nUSB or USB Safe\nStateModeMode\nUSB\nPage 192 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Number of Data Objects field in the Message Header Shall be set to 1 or 2 since the Attention Command Shall\nNot contain more than 1 VDO. When a VDO is included in an Attention Command the contents of the 32-bit VDO is\ndefined by the Alternate Mode .\nFigure 6.24, \"Exit Mode sequence\" shows the sequence of events when an Attention Command is received.\nFigure 6.25 Attention Command request/response sequence"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.4",
    "title": "Command Processes",
    "full_path": "6.4.4.4 Command Processes",
    "page": 192,
    "level": 4,
    "parent_id": "6.4.4",
    "tags": [],
    "content": "The Message flow of Command s during a Process is a query followed by a response. Every Command request sent\nhas to be responded to with a GoodCRC Message . The GoodCRC Message only indicates the Command request was\nreceived correctly; it does not mean that the Responder understood or even supports a particular SVID . Figure 6.26,\n\"Command request/response sequence\" shows the request/response sequence including the GoodCRC Message s.Initiator Responder\nGoodCRCCommand (Attention)\nCommand Complete\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 193Figure 6.26 Command request/response sequence\nIn order for the Initiator to know that the Command request was actually consumed, it needs an acknowledgment\nfrom the Responder . There are three responses that indicate the Responder received and processed the Command\nrequest:\n ACK\n NAK\n BUSY\nThe Responder Shall complete:\n Enter Mode requests within tVDMEnterMode .\n Exit Mode requests within tVDMExitMode .\n Other requests within tVDMReceiverResponse .\nAn Initiator not receiving a response within the following times Shall timeout and return to either the\nPE_SRC_Ready or PE_SNK_Ready state (as appropriate):\n Enter Mode requests within tVDMWaitModeEntry .\n Exit Mode requests within tVDMWaitModeExit .\n Other requests within tVDMSenderResponse .\nThe Responder Shall respond with:\n ACK if it recognizes the SVID and can process it at this time.\n NAK :\n if it recognizes the SVID but cannot process the Command requestInitiator Responder\nCommand (request)\nGoodCRCGoodCRC\nCommand (response)\nCommand Complete\nPage 194 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 or if it does not recognize the SVID\n or if it does not support the Command\n or if a VDO contains a field which is Invalid .\n BUSY if it recognizes the SVID and the Command but cannot process the Command request at this time.\nThe ACK , NAK or BUSY response Shall contain the same SVID as the Command request."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.4.1",
    "title": "Discovery Process",
    "full_path": "6.4.4.4.1 Discovery Process",
    "page": 194,
    "level": 5,
    "parent_id": "6.4.4.4",
    "tags": [],
    "content": "The Initiator (usually the DFP ) always begins the Discovery Process . The Discovery Process has two phases. In the\nfirst phase, the Discover SVIDs Command request is sent by the Initiator to get the list of SVID s the Responder\nsupports. In the second phase, the Initiator sends a Discover Modes Command request for each SVID supported by\nboth the Initiator and Responder ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.4.2",
    "title": "Enter Vendor Mode / Exit Vendor Mode Processes",
    "full_path": "6.4.4.4.2 Enter Vendor Mode / Exit Vendor Mode Processes",
    "page": 194,
    "level": 5,
    "parent_id": "6.4.4.4",
    "tags": [],
    "content": "The result of the Discovery Process is that both the Initiator and Responder identify the Modes they mutually\nsupport. The Initiator (DFP ), upon finding a suitable Alternate Mode , uses the Enter Mode Command to enable the\nAlternate Mode .\nThe Responder (UFP or Cable Plug ) and Initiator continue using the Active Mode until the Active Mode is exited.\nIn a managed termination, using the Exit Mode Command , the Active Mode Shall be exited in a controlled manner\nas described in Section 6.4.4.3.5, \"Exit Mode Command\" .\nIn an unmanaged termination, triggered by:\n A Power Delivery Hard Reset (i.e. Hard Reset Signaling sent by either Port Partner ) or\n By cable Detach (device unplugged) or\n By Error Recovery\nthe Active Mode Shall still be exited but there Shall Not be a transition through the USB Safe State .\nIn both the managed and unmanaged terminations, the Initiator and Responder return to USB operation as defined\nin [USB Type-C 2.4] following an exit from an Alternate Mode .\nThe overall Message flow is illustrated in Figure 6.27, \"Enter/Exit Mode Process\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 195Figure 6.27 Enter/Exit Mode Process"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.4.5",
    "title": "VDM Message Timing and Normal PD Messages",
    "full_path": "6.4.4.5 VDM Message Timing and Normal PD Messages",
    "page": 195,
    "level": 4,
    "parent_id": "6.4.4",
    "tags": [],
    "content": "The timing and interspersing of VDM s between regular PD Message s Shall be done without perturbing the PD\nAMS s. This requirement Shall apply to both Unstructured VDM s and Structured VDM s.Initiator (DFP) Responder (UFP or Cable Plug)\nDiscover SVIDs\nList of SVIDs\nFor every DFP supported SVID\nModes Supported? N Stay in USB mode\nY\nEnter Mode\nACK (Responder switched to Mode)\nInitiator and Responder operate using Mode\nReturn to USB modeEstablish PD Contract\nExit Mode or PD Hard Reset or cable\nunplugged or power removed?\nY N USB\nUSB or USB Safe\nState\nUSB Safe State\nUSBAlternate ModeUSB or USB Safe\nState\nAlternate Mode\nUSBDiscover Modes (SVID)\nModes for SVID\nPage 196 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The use of Structured VDM s by an Initiator Shall Not interfere with the normal PD Message timing requirements\nnor Shall either the Initiator or Responder interrupt a PD AMS (e.g., Negotiation , Power Role Swap , Data Role Swap\netc.). The use of Unstructured VDM s Shall Not interfere with normal PD Message timing."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5",
    "title": "Battery_Status Message",
    "full_path": "6.4.5 Battery_Status Message",
    "page": 196,
    "level": 3,
    "parent_id": "6.4",
    "tags": [],
    "content": "The Battery_Status Message Shall be sent in response to a Get_Battery_Status Message . The Battery_Status\nMessage contains one Battery Status Data Object (BSDO) for one of the Batteries it supports as reported by Number\nof Batteries/Battery Slots field in the Source_Capabilities_Extended Message . The returned BSDO Shall\ncorrespond to the Battery requested in the Battery Status Ref field contained in the Get_Battery_Status Message .\nThe Battery_Status Message returns a BSDO whose format Shall be as shown in Figure 6.28, \"Battery_Status\nMessage\" and Table 6.46, \"Battery Status Data Object (BSDO)\" . The Number of Data Objects field in the\nBattery_Status Message Shall be set to 1.\nFigure 6.28 Battery_Status Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5.1",
    "title": "Battery Present Capacity",
    "full_path": "6.4.5.1 Battery Present Capacity",
    "page": 196,
    "level": 4,
    "parent_id": "6.4.5",
    "tags": [],
    "content": "The Battery Present Capacity field Shall return either the Battery 's State of Charge (SoC) in tenths of WH or\nindicate that the Battery 's present State of Charge (SOC) is unknown.Table 6.46 Battery Status Data Object (BSDO)\nBit(s) Field Description\nB31…16Battery Present\nCapacityBattery ’s State of Charge (SoC) in 0.1 WH increments\nNote: 0xFFFF = Battery ’s SOC unknown\nB15…8 Battery InfoBit Description\n0Invalid Battery Reference\nInvalid Battery reference\n1Battery Present\nBattery is present when set\n3…2Battery Charging Status\nWhen Battery Present is ‘1’ Shall contain the Battery charging status:\n00b: Battery is Charging.\n01b: Battery is Discharging.\n10b: Battery is Idle.\n11b: Reserved, Shall Not be used.\nWhen Battery Present is ‘0’:\n11b…00b: Reserved, Shall Not be used.\n7…4 Reserved, Shall Not be used.\nB7…0 Reserved Shall be set to zeroHeader\nNo. of Data Objects = 1\nBSDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1976.4.5.2 Battery Info\nThe Battery Info field Shall be used to report additional information about the Battery 's present status. The\nBattery Info field's bits Shall reflect the present conditions under which the Battery is operating in the systems."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5.2.1",
    "title": "Invalid Battery Reference",
    "full_path": "6.4.5.2.1 Invalid Battery Reference",
    "page": 197,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Invalid Battery Reference bit Shall be set when the Get_Battery_Status Message contains a reference to a\nBattery or Battery Slot (see Section 6.5.1.13, \"Number of Batteries/Battery Slots Field\" ) that does not exist."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5.2.2",
    "title": "Battery Present",
    "full_path": "6.4.5.2.2 Battery Present",
    "page": 197,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Battery Present bit Shall be set whenever the Battery is present. It Shall always be set for Batteries that are\nnot Hot Swappable Batteries. For Hot Swappable Batteries, the Battery Present bit Shall indicate whether the\nBattery is Attached or Detached ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.5.2.3",
    "title": "Battery Charging Status",
    "full_path": "6.4.5.2.3 Battery Charging Status",
    "page": 197,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Battery Charging Status bits indicate whether the Battery is being charged, discharged or is idle (neither\ncharging nor discharging). These bits Shall be set when the Battery Present bit is set. Otherwise, when the Battery\nPresent bit is zero the Battery Charging Status bits Shall also be zero.\nPage 198 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.6 Alert Message\nThe Alert Message is provided to allow Port Partner s to inform each other when there is a status change event.\nSome of the events are critical such as OCP , OVP and OTP , while others are informational such as change in a\nBattery 's status from charging to neither charging nor discharging.\nThe Alert Message Shall only be sent when the Source or Sink detects a status change.\nThe Alert Message Shall contain exactly one Alert Data Object (ADO) and the format Shall be as shown in Figure\n6.29, \"Alert Message\" and Table 6.47, \"Alert Data Object (ADO)\" .\nFigure 6.29 Alert Message\nTable 6.47 Alert Data Object (ADO)\nBit(s) Field Description\nB31…24 Type of AlertBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero.",
    "full_path": "0 Reserved and Shall be set to zero.",
    "page": 198,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1Battery Status Change Event\nBattery Status Change Event ( Attach /Detach /charging/discharging/\nidle)\n2OCP Event\nOCP event when set ( Source only, for Sink Reserved and Shall be set to\nzero).\n3OTP Event\nOTP event when set\n4Operating Condition Change\nOperating Condition Change when set\n5Source Input Change Event\nSource Input Change Event when set\n6OVP Event\nOVP event when set\n7Extended Alert Event\nExtended Alert Event when set\nB23…20 Fixed BatteriesWhen Battery Status Change Event bit set indicates which Fixed Batteries have had\na status change. B20 corresponds to Battery 0 and B23 corresponds to Battery 3.\nB19…16Hot Swappable\nBatteriesWhen Battery Status Change Event bit set indicates which Hot Swappable\nBatteries have had a status change. B16 corresponds to Battery 4 and B19\ncorresponds to Battery 7.Header\nNo. of Data Objects = 1\nADO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1996.4.6.1 Type of Alert\nThe Type of Alert field Shall be used to report Source or Sink status changes. Only one Alert Message Shall be\ngenerated for each Event or Change; however multiple Type of Alert bits May be set in one Alert Message . Once the\nAlert Message has been sent the Type of Alert field Shall be cleared.\nA Get_Battery_Status Message Should be sent in response to a Battery status change in an Alert Message to get the\ndetails of the change.\nA Get_Status Message Should be sent in response to a non- Battery status change in an Alert Message from to get\nthe details of the change."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.1",
    "title": "Battery Status Change",
    "full_path": "6.4.6.1.1 Battery Status Change",
    "page": 199,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Battery Status Change Event bit Shall be set when any Battery 's power state changes between charging,\ndischarging, neither. For Hot Swappable Batteries, it Shall also be set when a Battery is Attached or Detached ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.2",
    "title": "Over-Current Protection Event",
    "full_path": "6.4.6.1.2 Over-Current Protection Event",
    "page": 199,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The OCP Event bit Shall be set when a Source detects its output current exceeds its limits triggering its protection\ncircuitry. This bit is Reserved for a Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.3",
    "title": "Over- Temperature Protection Event",
    "full_path": "6.4.6.1.3 Over- Temperature Protection Event",
    "page": 199,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The OTP Event bit Shall be set when a Source or Sink shuts down due to over-temperature triggering its protection\ncircuitry."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.4",
    "title": "Operating Condition Change",
    "full_path": "6.4.6.1.4 Operating Condition Change",
    "page": 199,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Operating Condition Change bit Shall be set when a Source or Sink detects its Operating Condition enters or\nexits either the 'warning' or 'over temperature' temperature states.\nThe Operating Condition Change bit Shall be set when the Source operating in the Programmable Power Supply\nmode detects it has changed its operating condition between Constant Voltage (CV) and Current Limit (CL)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.5",
    "title": "Source Input Change Event",
    "full_path": "6.4.6.1.5 Source Input Change Event",
    "page": 199,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Source Input Change Event bit Shall be set when the Source /Sink 's input changes. For example, when the AC\ninput is removed, and the Source /Sink continues to be powered from one or more of its batteries or when AC\nreturns and the Source /Sink transitions from Battery to AC operation or when the Source /Sink changes operation\nfrom one (or more) Battery to another (or more) Battery . B15…4 Reserved Shall be set to zero\nB3…0Extended Alert Event\nTypeWhen the Extended Alert Event bit in the Type of Alert field equals ‘1’, then the\nExtended Alert Event Type field indicates the event which has occurred:\n0 = Reserved .\n1 = Power state change ( DFP only)\n2 = Power button press ( UFP only)\n3 = Power button release ( UFP only)\n4 = Controller initiated wake e.g., Wake on LAN ( UFP only)\n5-15 = Reserved\nWhen the Extended Alert Event bit in the Type of Alert field equals ‘0’, then the\nExtended Alert Event Type field is Reserved and Shall be set to zero.Table 6.47 Alert Data Object (ADO) (Continued)\nBit(s) Field Description\nPage 200 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.6.1.6 Over-Voltage Protection Event\nThe OVP Event bit Shall be set when the Sink detects its output voltage exceeds its limits triggering its protection\ncircuitry.\nThe OVP Event bit May be set when the Source detects its output voltage exceeds its limits triggering its protection\ncircuitry."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.1.7",
    "title": "Extended Alert Event",
    "full_path": "6.4.6.1.7 Extended Alert Event",
    "page": 200,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Extended Alert Event bit Shall be set when the event is defined as an Extended Alert Type."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.2",
    "title": "Fixed Batteries",
    "full_path": "6.4.6.2 Fixed Batteries",
    "page": 200,
    "level": 4,
    "parent_id": "6.4.6",
    "tags": [],
    "content": "The Fixed Batteries field indicates which Fixed Batteries have had a status change. B20 corresponds to Battery 0\nand B23 corresponds to Battery 3.\nOnce the Alert Message has been sent the Fixed Batteries field Shall be cleared."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.3",
    "title": "Hot Swappable Batteries",
    "full_path": "6.4.6.3 Hot Swappable Batteries",
    "page": 200,
    "level": 4,
    "parent_id": "6.4.6",
    "tags": [],
    "content": "The Hot Swappable Batteries field indicates which Hot Swappable Batteries have had a status change. B16\ncorresponds to Battery 0 and B19 corresponds to Battery 3.\nOnce the Alert Message has been sent the Hot Swappable Batteries field Shall be cleared."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.4",
    "title": "Extended Alert Event Types",
    "full_path": "6.4.6.4 Extended Alert Event Types",
    "page": 200,
    "level": 4,
    "parent_id": "6.4.6",
    "tags": [],
    "content": "The Extended Alert Event Type field provides extensions to the available types for the Alert Message . If the\nExtended Alert Event Type bit is not set, then the Extended Alert Event Type is Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.4.1",
    "title": "Power State Change",
    "full_path": "6.4.6.4.1 Power State Change",
    "page": 200,
    "level": 5,
    "parent_id": "6.4.6.4",
    "tags": [],
    "content": "The Power state change event value May be set when the DFP transitions into a new power state. The new power\nstate Shall be communicated via the Power state change byte in the Status Message . This Message Should be sent\nby the host in response to any system power state change."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.4.2",
    "title": "Power Button Press",
    "full_path": "6.4.6.4.2 Power Button Press",
    "page": 200,
    "level": 5,
    "parent_id": "6.4.6.4",
    "tags": [],
    "content": "The Power button press event value May be set when the power button on the UFP is pressed. The press and\nrelease events are separated into two different events so that devices that respond differently to a long button\npress will see a long button press. On the host-side, the power button press event typically initiates the same\nbehavior as a power button press of the host's power button."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.4.3",
    "title": "Power Button Release",
    "full_path": "6.4.6.4.3 Power Button Release",
    "page": 200,
    "level": 5,
    "parent_id": "6.4.6.4",
    "tags": [],
    "content": "If a Power button press event was sent, then the Power button release event value Shall be sent by the UFP\nfollowing the Power button press event. If a physical power button press initiated the Power button press event,\nthen the Power button release event Should be sent when the physical button is released."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.6.4.4",
    "title": "Controller Initiated Wake",
    "full_path": "6.4.6.4.4 Controller Initiated Wake",
    "page": 200,
    "level": 5,
    "parent_id": "6.4.6.4",
    "tags": [],
    "content": "The Controller initiated wake is used to communicate a wake event from the UFP to the DPF such as Wake on LAN\nfrom a NIC or another controller. This event doesn't need the press/release form of the Power button press,\nbecause it only needs to communicate the presence of the event, and not the timing.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2016.4.7 Get_Country_Info Message\nThe Get_Country_Info Message Shall be sent by a Port to get country specific information from its Port Partner\nusing the country's Alpha-2 Country Code defined by [ISO 3166] . The Port Partner responds with a Country_Info\nMessage that contains the country specific information. The Get_Country_Info Message Shall be as shown in Figure\n6.30, \"Get_Country_Info Message\" and Table 6.48, \"Country Code Data Object (CCDO)\" .\nFor example, if the request is for China information, then the Country Code Data Object (CCDO) would be CCDO\n[31:0] = 434E0000h for \"CN\" country code.\nFigure 6.30 Get_Country_Info Message\nTable 6.48 Country Code Data Object (CCDO)\nBit(s) Description\nB31…24 First character of the Alpha-2 Country Code defined by [ISO 3166]\nB23…16 Second character of the Alpha-2 Country Code defined by [ISO 3166]\nB15…0 Reserved , Shall be set to zero.Header\nNo. of Data Objects = 1\nCCDO\nPage 202 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.8 Enter_USB Message\nThe Enter_USB Message Shall be sent by the DFP to its UFP Port Partner and to the Cable Plug (s) of an Active Cable ,\nwhen in an Explicit Contract , to enter a specified USB Mode of operation. The recipient of the Message Shall respond\nby sending an Accept Message , a Wait Message or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\" ).\nWhen entering [USB4] operation, the Enter_USB Message Shall be sent by a [USB4] PDUSB Hub 's DFP (s) or [USB4]\nPDUSB Host 's DFP (s) within tEnterUSB :\n following a PD Connection.\n after a Data Reset to enter [USB4] operation is completed.\n after a Data Role Swap is completed.\nThe Enter_USB Message May be sent by a PDUSB Hub 's DFP (s) or PDUSB Host 's DFP (s) within tEnterUSB following\na PD Connection or after a Data Reset to enter [USB 3.2] or [USB 2.0] operation.\nThe Enter_USB Message Shall be used by a PDUSB Hub 's DFP (s) to speculatively train the USB links or enter\n[DPTC2.1] or [TBT3] Alternate Mode s prior to the presence of a host. In this case, the Host Present bit Shall be\ncleared. When the Host is Connected the Enter_USB Message Shall be resent with the Host Present bit set. The\nEnter_USB Message 's Enter USB Data Object (EUDO), received from the Root Hub when the USB Host is connected,\nShall be propagated down through the Hub tree.\nSee [USB Type-C 2.4] USB4® Hub Connection Requirements.\nThe Enter_USB Message Shall be as shown in Figure 6.31, \"Enter_USB Message\" and Table 6.49, \"Enter_USB Data\nObject (EUDO)\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 203Figure 6.31 Enter_USB Message\nTable 6.49 Enter_USB Data Object (EUDO)\nBit(s) Field Description\nB31 Reserved Shall be set to zero.\nB30…28 USB Mode1000b:\n001b:\n010b:\n111b…011b: Reserved, Shall Not be used.\nB27 Reserved Shall be set to zero.\nB26 USB4 DRD20b: Not capable of operating as a [USB4] Device\n1b: Capable of operating as a [USB4] Device\nB25 USB3 DRD20b: Not capable of operating as a [USB 3.2] Device\n1b: Capable of operating as a [USB 3.2] Device\nB24 Reserved Shall be set to zero.\nB23…21 Cable Speed2,3000b: [USB 2.0] only, no SuperSpeed support\n001b: [USB 3.2] Gen1\n010b: [USB 3.2] Gen2 and [USB4] Gen2\n011b: [USB4] Gen3\n100b: [USB4] Gen4\n101b…111b: Reserved, Shall Not be used.\nB20…19 Cable Type2,300b: Passive\n01b: Active Re-timer\n10b: Active Re-driver\n11b: Optically Isolated\nB18…17 Cable Current200b = VBUS is not supported\n01b = Reserved\n10b = 3A\n11b = 5A\nB16 PCIe Support2[USB4] PCIe tunneling supported by the host\nB15 DP Support2[USB4] DP tunneling supported by the host\nB14 TBT Support2[TBT3] is supported by the host’s USB4® Connection Manager\nB13 Host Present2A Host is present at the top of the USB tree.\nWhen this bit is set PCIe Support , DP Support and TBT Support\nrepresent the Host ’s Capabilities that Shall be propagated down the Hub\ntree.\nB12…0 Reserved Shall be set to zero.\n1) Entry into [USB 3.2] and [USB4] include entry into [USB 2.0] .\n2) Shall be Ignored when received by a Cable Plug (e.g., SOP’ or SOP’’ ).\n3) The DFP Shall interpret the Cable Plug ’s reported capability as defined in [USB Type-C 2.4] in the USB4\nDiscovery and Entry Section.Header\nNo. of Data Objects = 1\nEUDO\nPage 204 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.8.1 USB Mode Field\nThe USB Mode field Shall be used by the DFP to direct the USB Mode the Port Partner is to enter."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.2",
    "title": "USB4® DRD Field",
    "full_path": "6.4.8.2 USB4® DRD Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The USB4 DRD field Shall be set when the Host DFP is capable of operating as a [USB4] Device . A [USB4] Host DFP\nthat sets the USB4 DRD field Shall also be capable of operating as a [USB 2.0] Device ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.3",
    "title": "USB3 DRD Field",
    "full_path": "6.4.8.3 USB3 DRD Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The USB3 DRD field Shall be set when the Host DFP is capable of operating as a [USB 3.2] Device . A [USB 3.2] Host\nDFP that sets the USB3 DRD field Shall also be capable of operating as a [USB 2.0] Device ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.4",
    "title": "Cable Speed Field",
    "full_path": "6.4.8.4 Cable Speed Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The Cable Speed field Shall be used to indicate the cable's maximum speed. The value is read from the Cable Plug\nand interpreted by the DFP as defined by [USB Type-C 2.4] in the USB4 Discovery and Entry Section."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.5",
    "title": "Cable Type Field",
    "full_path": "6.4.8.5 Cable Type Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The Cable Type field Shall be used to indicate whether the cable is passive or active. Further if the cable is active,\nit indicates the type of active circuits in the cable and if the cable is optically isolated. The value is read from the\nCable Plug and interpreted by the DFP as defined by [USB Type-C 2.4] in the USB4 Discovery and Entry Section."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.6",
    "title": "Cable Current Field",
    "full_path": "6.4.8.6 Cable Current Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The Cable Current field Shall be used to indicate the cable's current carrying capability. The value is reported by\nthe Cable Plug in the VBUS Current Handling Capability (Passive Cable) /VBUS Current Handling Capability\n(Active Cable) field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.7",
    "title": "PCIe Support Field",
    "full_path": "6.4.8.7 PCIe Support Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The PCIe Support field Shall be set when the Host DFP is capable of tunneling PCIe over [USB4] .\nThe PCIe Support field May be set speculatively when the Hub 's DFP is capable of tunneling PCIe over [USB4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.8",
    "title": "DP Support Field",
    "full_path": "6.4.8.8 DP Support Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The DP Support field Shall be set when the Host DFP is capable of tunneling DP over [USB4] .\nThe DP Support field May be set speculatively when the Hub 's DFP is capable of tunneling DP over [USB4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.9",
    "title": "TBT Support Field",
    "full_path": "6.4.8.9 TBT Support Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The TBT Support field Shall be set when the Host DFP is capable of tunneling ThunderboltTM over [USB4] and that\nthe Connection Manager (CM) supports discovery and configuration of Thunderbolt 3 devices connected to the\nDFP of [USB4] Hub s.\nThe TBT Support field May be set speculatively when the Hub 's DFP is capable of tunneling Thunderbolt over\n[USB4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.8.10",
    "title": "Host Present Field",
    "full_path": "6.4.8.10 Host Present Field",
    "page": 204,
    "level": 4,
    "parent_id": "6.4.8",
    "tags": [],
    "content": "The Host Present field Shall be set to indicate that a Host is present upstream.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2056.4.9 EPR_Request Message\nAn EPR_Request Message Shall be sent by a Sink , operating in EPR Mode , to request power, typically during the\nrequest phase of a power Negotiation . The EPR_Request Message Shall be sent in response to the most recent\nEPR_Source_Capabilities Message . The EPR_Request Message Shall return a Sink Request Data Object ( RDO ) that\nShall identify the Power Data Object being requested followed by a copy of the Power Data Object being requested.\nNote: The requested Power Data Object May be either an EPR (A)PDO or SPR (A)PDO .\nThe EPR_Request Message Shall be as shown in Figure 6.32, \"EPR_Request Message\" .\nFigure 6.32 EPR_Request Message\nThe Source Shall verify the PDO in the EPR_Request Message exactly matches the PDO in the latest\nEPR_Source_Capabilities Message pointed to by the Object Position field in the RDO .\nThe Source Shall respond to an EPR_Request Message in the same manner as it responds to a Request Message with\nan Accept Message , or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\" ). The Explicit Contract\nNegotiation process for EPR is the same as the process for SPR Mode except that the Source_Capabilities Message\nis replaced by the EPR_Source_Capabilities and the Request Message is replaced by the EPR_Request Message .\nAn EPR Source operating in SPR Mode that receives a EPR_Request Message Shall initiate a Hard Reset .\nThe RDO takes a different form depending on the kind of power requested. The PDO and APDO formats are detailed\nin Section 6.4.2, \"Request Message\" .Header\nNo. of Data Objects = 2RDO Copy of PDO\nPage 206 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.10 EPR_Mode Message\nThe EPR_Mode Message is used to enter, acknowledge, and exit the EPR Mode . The Action field is used to describe\nthe action that is to be taken by the recipient of the EPR_Mode Message . The Data field provides additional\ninformation for the Message recipient in the EPR Mode Data Object (ERMDO).\nThe EPR_Mode Message Shall be as shown in Figure 6.33, \"EPR Mode DO Message\" and Table 6.50, \"EPR Mode Data\nObject (EPRMDO)\" .\nFigure 6.33 EPR Mode DO Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.1",
    "title": "Process to enter EPR Mode",
    "full_path": "6.4.10.1 Process to enter EPR Mode",
    "page": 206,
    "level": 4,
    "parent_id": "6.4.10",
    "tags": [],
    "content": "An EPR Source Shall enter EPR Mode upon request by an EPR Sink connected with an EPR Cable when able to offer\nthe Source Capabilities as defined in the Power Rules (See Table 10.12, \"EPR Source Capabilities based on the Port\nMaximum PDP and using an EPR Capable Cable\" and Table 10.13, \"EPR Source Capabilities when Port Present PDP is\nless than Port Maximum PDP and using an EPR-capable cable\" ).\nFor Port Partner s to successfully enter EPR Mode , the following conditions must be met:\n The Sink Shall request entry into the EPR Mode .Table 6.50 EPR Mode Data Object (EPRMDO)\nBit(s) Field Description\nB31…24 ActionValue Action Sent By\n0x00 Reserved and Shall Not be used.\n0x01 Enter Sink only\n0x02 Enter Acknowledged Source only\n0x03 Enter Succeeded Source only\n0x04 Enter Failed Source only\n0x05 Exit Sink or Source\n0x06…0xFF Reserved and Shall Not be used.\nB23...16 DataAction Field Data Field Value\nEnter Shall be set to the EPR Sink Operational PDP\nEnter Acknowledged Shall be set to zero\nEnter Succeeded Shall be set to zero\nEnter FailedShall be one of the following values:\n0x00 - Unknown cause\n0x01 - Cable not EPR Capable\n0x02 – Source failed to become VCONN Source .\n0x03 – EPR Capable bit not set in RDO .\n0x04 – Source unable to enter EPR Mode1.\n0x05 - EPR Capable bit not set in PDO .\nAll other values are Reserved and Shall Not be used\nExit Shall be set to zero\nB15...0 Reserved Shall be set to zero\n1) The Sink May retry entering EPR Mode after receiving this Enter Failed response.Header\nNo. of Data Objects = 1\nEPRMDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 207 The Source Shall verify the cable is EPR Capable .\n A Sink Shall Not be Connected to the Source through a Charge Through VPD (CT-VPD ).\n The Source and Sink Shall already be in an SPR Explicit Contract .\n The EPR Capable bit Shall be set in the Fixed Supply 5V PDO.\n The EPR Capable bit Shall have been set in the RDO in the last Request Message received by the Source .\nTo verify the cable is EPR Capable , the EPR Source Shall have already done the following (see Section 6.6.21.4,\n\"tEPRSourceCableDiscovery\" ):\n Discover the cable prior to entering its First Explicit Contract\n Alternatively, within tEPRSourceCableDiscovery of entry into the First Explicit Contract\n If it is the VCONN Source , discover the cable.\n If not the VCONN Source , do a VCONN Swap then discover the cable.\nand can verify the cable is EPR Capable by completing steps 5 and 6 in the entry process in Figure 6.34, \"Illustration\nof process to enter EPR Mode\" .\nThe EPR Mode entry process is a Non-interruptible multi- Message AMS . An illustration of this AMS is shown in\nFigure 6.34, \"Illustration of process to enter EPR Mode\" .\nNote: Figure 6.34, \"Illustration of process to enter EPR Mode\" is not Normative but is Informative only.\nPage 208 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.34 Illustration of process to enter EPR Mode\nThe entry process Shall follow these steps in order:\n1) The Sink Shall send the EPR_Mode Message with the Action field set to 1 ( Enter ) and the Data field set\nto its Operational PDP. If the EPR Source receives an EPR_Mode Message with the Action field not set to\nEnter it Shall initiate a Soft Reset .\n2) The Source Shall do the following:EPR_Mode\nEnter#1\nStartSPR Mode\nEPR ModeSink Source Cable\nEPR Entry process\nSPR contract in place#2.a\nSink EPR Capable?Abort EPR Entry\nSend Entry Failed\n– Sink not EPR\nCapable\n#2.b\nSource EPR\nCapable?Abort EPR Entry\nSend Entry Failed\n– Source not EPR\nCapable\n#2.c\nSource EPR\nCapable Now?Abort EPR Entry\nSend Entry Failed\n– Source unable\nto enter EPR\n#2.d\nSend EPR Ack#3\nReceived EPR\nAck?\n#4\nKnown Cable?\n#7\nSend Enter\nSucceededN\nN\nNNN\n#5\nIs V CONN Source?\n#8\nReceived Enter\nsuccessful?NError\nSend\nSoft Reset\n#6.a-d\nEPR Cable?Abort EPR Entry\nSend Entry Failed\n– Source not\nVCONN Source\nNYY\nY\nY\nEPR_MODE\nEnter SucceededY\nYY #5\nIs V CONN Source?\nN#5 V CONN SwapN\nAbort EPR Entry\nSend Entry Failed\n– Not EPR CableY\nY\n#4\nEPR Capable?\nYN\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 209a) Verify the EPR Capable bit was set in the most recent RDO . If not set, the Source Shall do the\nfollowing:\ni) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and the Data field set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "(\"EPR Mode Capable bit not set in the RDO\").",
    "full_path": "3 (\"EPR Mode Capable bit not set in the RDO\").",
    "page": 209,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "ii) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract .\nb) Verify the EPR Capable bit was set in the most recent 5V Fixed Supply PDO. If not set, the Source\nShall do the following:\ni) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and the Data field set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "(\"EPR Mode Capable bit not set in the Fixed Supply 5V PDO\").",
    "full_path": "5 (\"EPR Mode Capable bit not set in the Fixed Supply 5V PDO\").",
    "page": 209,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "ii) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract .\nc) Verify the Source is still able to support EPR Mode . If not, the Source Shall do the following:\ni) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and Data field set to 4\n(\"Unable at this time\").\nii) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract . The Sink May\nat some time in the future send another request to enter EPR Mode .\nd) Send an EPR_Mode Message with the Action field set to 2 ( Enter Acknowledged ).\n3) If the Sink receives any Message , other than an EPR_Mode Message with the Action Field set to 2, the\nSink Shall initiate a Soft Reset .\n4) When the EPR Source has used the Discover Identity Command to determine and remembers the Cable\nCapabilities or the EPR Source is connected with a captive cable:\na) If the cable is EPR Capable it Should go directly to Step 7, but May continue to Step 5.\nb) If the cable is not EPR Capable it Shall do the following:\nc) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and the Data field set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "(\"Cable not EPR capable\").",
    "full_path": "1 (\"Cable not EPR capable\").",
    "page": 209,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "d) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract .\n5) If the Source is not the VCONN Source , it Shall send a VCONN _Swap Message\na) If the Source fails to become the VCONN Source , it Shall :\ni) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and the Data field set to"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "(not VCONN Source ).",
    "full_path": "2 (not VCONN Source ).",
    "page": 209,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "ii) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract .\n6) The Source Shall use the Discover Identity Command to read the cable's e-Marker and verify the\nfollowing:\na) Cable VDO - Maximum V BUS Voltage (Passive Cable) /Maximum V BUS Voltage (Active Cable)\nfield is 11b (50V)\nb) Cable VDO - V BUS Current Handling Capability (Passive Cable) /VBUS Current Handling\nCapability (Active Cable) field is 10b (5A)\nc) Cable VDO - EPR Capable (Passive Cable) /EPR Capable (Active Cable) field is 1b ( EPR Capable )\nd) If the cable fails to respond to the Discover Identity Command or is not EPR Capable , the Source\nShall do the following:\ni) Send an EPR_Mode Message with the Action field set to 4 ( Enter Failed ) and the Data field to1\n(\"Cable not EPR capable\").\nPage 210 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10ii) Abort the EPR Mode entry process and remain in the existing SPR Explicit Contract .\n7) The Source Shall send the EPR_Mode Message with the Action field set to 3 ( Enter Succeeded ) and Shall\nenter EPR Mode .\n8) If the Sink receives an EPR_Mode Message with the Action field set to 3 ( Enter Succeeded ) it Shall enter\nEPR Mode , otherwise it Shall initiate a Soft Reset .\nIf the EPR Mode entry process successfully completes within tEnterEPR of the last bit of the GoodCRC Message sent\nin response to the EPR_Mode Message with the Action field set to 1 ( Enter ), the Source Shall send an\nEPR_Source_Capabilities Message within tFirstSourceCap .\nIf the EPR Mode entry process has not been aborted or does not complete within tEnterEPR of the last bit of the\nGoodCRC Message sent in response to the EPR_Mode Message with the Action field set to 1 ( Enter ), the Sink Shall\ninitiate a Soft Reset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.2",
    "title": "Operation in EPR Mode",
    "full_path": "6.4.10.2 Operation in EPR Mode",
    "page": 210,
    "level": 4,
    "parent_id": "6.4.10",
    "tags": [],
    "content": "While operating in EPR Mode , the Source Shall only send EPR_Source_Capabilities Message s to Advertise its power\nCapabilities and the Sink Shall only respond with EPR_Request Message s to Negotiate Explicit Contract s. The\nEPR_Request Message May be for either an SPR or EPR (A)PDO .\nIf the Source sends a Source_Capabilities Message , that is not in response to a Sink Get_Source_Cap Message , the\nSink Shall initiate a Hard Reset . If the Sink sends a Request Message , the Source Shall initiate a Hard Reset .\nThe Source Shall monitor the CC communications path to ensure that there is periodic traffic. The Sink Shall send\nan EPR_KeepAlive Message when it has not sent any Message s for more than tSinkEPRKeepAlive to ensure there\nis timely periodic traffic. If there is no traffic for more than tSourceEPRKeepAlive , the Source Shall initiate a Hard\nReset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.3",
    "title": "Exiting EPR Mode",
    "full_path": "6.4.10.3 Exiting EPR Mode",
    "page": 210,
    "level": 4,
    "parent_id": "6.4.10",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.3.1",
    "title": "Commanded Exit",
    "full_path": "6.4.10.3.1 Commanded Exit",
    "page": 210,
    "level": 5,
    "parent_id": "6.4.10.3",
    "tags": [],
    "content": "While in EPR Mode , either the Source or Sink May exit EPR Mode by sending an EPR_Mode Message with the Action\nfield set to 5 ( Exit ).\nThe ports Shall be in an Explicit Contract with an SPR (A)PDO prior to the EPR Mode exit process by either:\n The Source sending an EPR_Source_Capabilities Message with no EPR (A)PDO s (e.g., only SPR (A)PDO\ns) or\n The Sink negotiating a new Explicit Contract with bit 31 in the RDO set to zero (e.g., only SPR (A)PDO s)).\nThe process to exit EPR Mode is a Non-interruptible multi- Message AMS and Shall follow these steps in order:\n1) The Port Partner s Shall be in an Explicit Contract with an SPR (A)PDO .\n2) Either the Source or Sink Shall send an EPR_Mode Message with the Action field set to 5 ( Exit ) to exit\nthe EPR Mode\n3) The Source Shall send a Source_Capabilities Message within tFirstSourceCap of the GoodCRC Message\nin response to the EPR_Mode Message with the Action field set to 5 ( Exit ).\n4) If the Sink does not receive a Source_Capabilities Message within tTypeCSinkWaitCap of the last bit of\nthe GoodCRC Message in response to the EPR_Mode Message with the Action field set to 5 ( Exit ), Sink\nShall initiate a Hard Reset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.3.2",
    "title": "Implicit Exit",
    "full_path": "6.4.10.3.2 Implicit Exit",
    "page": 210,
    "level": 5,
    "parent_id": "6.4.10.3",
    "tags": [],
    "content": "EPR Mode Shall be exited as the side-effect of the Power Role Swap and Fast Role Swap processes. This is because\nat the end of these processes VBUS will be at vSafe5V and the Ports will be in an Implicit Contract . The New Source\nwill then send a Source_Capabilities Message (not an EPR_Source_Capabilities Message ) to begin the process of\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 211negotiating an SPR Explicit Contract . Once an SPR Explicit Contract is entered, the Source and Sink can then enter\nEPR Mode if needed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.10.3.3",
    "title": "Exits due to errors",
    "full_path": "6.4.10.3.3 Exits due to errors",
    "page": 211,
    "level": 5,
    "parent_id": "6.4.10.3",
    "tags": [],
    "content": "Other critical errors can occur while in EPR Mode ; these errors Shall result in Hard Reset being initiated by the Port\nthat detects the error. Some of these errors include:\n An EPR_Mode Message with the Action field set to 5 ( Exit ) to exit EPR Mode is received by a Port in an\nExplicit Contract with an EPR (A)PDO .\n The Sink receives an EPR_Source_Capabilities Message with an EPR (A)PDO in any of the first seven\nobject positions.\n The (A)PDO in the EPR_Request Message does not match the (A)PDO in the latest\nEPR_Source_Capabilities Message pointed to by the Object Position field in the RDO .\n The Source receives a Request Message .\n The Sink receives a Source_Capabilities Message not in response to a Get_Source_Cap Message .\nPage 212 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.11 Source_Info Message\nThe Source_Info Message Shall be sent in response to a Get_Source_Info Message . The Source_Info Message\ncontains one Source Information Data Object (SIDO).\nThe Source_Info Message returns a SIDO whose format Shall be as shown in Figure 6.35, \"Source_Info Message\" and\nTable 6.51, \"Source_Info Data Object (SIDO)\" . The Number of Data Objects field in the Source_Info Message Shall\nbe set to 1.\nThe Port Maximum PDP , Port Present PDP , Port Reported PDP and the Port Type are used to identify Capabilities\nof a Source Port .\nFigure 6.35 Source_Info Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.11.1",
    "title": "Port Type Field",
    "full_path": "6.4.11.1 Port Type Field",
    "page": 212,
    "level": 4,
    "parent_id": "6.4.11",
    "tags": [],
    "content": "Port Type is a Static field that Shall be used to indicate whether the amount of power the Port can provide is fixed\nor can change dynamically.\nFor Port s that are part of a Shared Capacity Group , the Port Type field Shall be set to Managed Capability Port .\nFor Port s not part of a Shared Capacity Group , the Port Type field May be set to either Managed Capability Port or\nGuaranteed Capability Port ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.11.2",
    "title": "Port Maximum PDP Field",
    "full_path": "6.4.11.2 Port Maximum PDP Field",
    "page": 212,
    "level": 4,
    "parent_id": "6.4.11",
    "tags": [],
    "content": "Port Maximum PDP is a Static field that Shall report the integer portion of the PDP Rating of the Port . A\nGuaranteed Capability Port (as indicated by the Port Type field being set to '1') Shall always be capable of\nsupplying this amount of power. A Managed Capability Port (as indicated by the Port Type field being set to '0')\nShall be able to offer this amount of power at some time.\nThe Port Maximum PDP Shall be the same as the larger of the SPR Source PDP Rating and the EPR Source PDP\nRating in the Source_Capabilities_Extended Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.11.3",
    "title": "Port Present PDP Field",
    "full_path": "6.4.11.3 Port Present PDP Field",
    "page": 212,
    "level": 4,
    "parent_id": "6.4.11",
    "tags": [],
    "content": "The Port Present PDP field Shall indicate the integer part of the amount of power the Port is presently capable of\nsupplying including limitations due to Cable Capabilities or abnormal operating conditions (e.g., elevated\ntemperature, low input voltage, etc.).\nA Guaranteed Capability Port Shall always set its Port Present PDP to be the same as its Port Maximum PDP or\nthe highest possible value when limited.Table 6.51 Source_Info Data Object (SIDO)\nBit(s) Field Description\nB31 Port Type0 = Managed Capability Port\n1 = Guaranteed Capability Port\nB30…24 Reserved Shall be set to zero\nB23...16 Port Maximum PDP Power the Port is designed to supply\nB15…8 Port Present PDP Power the Port is presently capable of supplying\nB7…0 Port Reported PDP Power the Port is actually advertisingHeader\nNo. of Data Objects = 1\nSIDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 213A Managed Capability Port that is part of a Shared Capacity Group Shall set its Port Present PDP to Shared Port\nPower Available as defined in [USB Type-C 2.4] or to a lower value when limited.\nA Managed Capability Port that is part of an Assured Capacity Group Shall set its Port Present PDP to the Port\nMaximum PDP or the highest value possible when limited."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.4.11.4",
    "title": "Port Reported PDP Field",
    "full_path": "6.4.11.4 Port Reported PDP Field",
    "page": 213,
    "level": 4,
    "parent_id": "6.4.11",
    "tags": [],
    "content": "The Port Reported PDP field Shall track the amount of power the Port is offering in its Source_Capabilities\nMessage or EPR_Source_Capabilities Message . The Port Reported PDP field May be dynamic or Static depending\non the Port 's other characteristics such as Managed/Guaranteed Capability, SPR/ EPR Mode , its power policy etc.\nNote: The Port Reported PDP field is computed as the integer part of, the largest of the products of the voltage\ntimes current of the Fixed Supply PDOs returned in the Source_Capabilities Message or\nEPR_Source_Capabilities Message s.\nPage 214 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.4.12 Revision Message\nThe Revision Message Shall be sent in response to the Get_Revision Message sent by the Port Partner . This Message\nis used to identify the highest Revision the Port is capable of operating at. The Revision Message contains one\nRevision Message Data Object (RMDO).\nThe Revision Message returns an RMDO whose format Shall be as shown in Figure 6.36, \"Revision Message Data\nObject\" and Table 6.52, \"Revision Message Data Object (RMDO)\" . The Number of Data Objects field in the Revision\nMessage Shall be set to 1.\nFigure 6.36 Revision Message Data Object\nE.g., for Revision 3.2, Version 1.1 the fields would be the following:\n Revision .major = 0011b\n Revision .minor = 0010b\n Version .major = 0001b\n Version .minor = 0001bTable 6.52 Revision Message Data Object (RMDO)\nBit(s) Description\nB31…28 Revision.major\nB27…24 Revision.minor\nB23...20 Version .major\nB19...16 Version .minor\nB15...0 Reserved , Shall be set to zero.Header\nNo. of Data Objects = 1\nRMDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2156.5 Extended Message\nAn Extended Message Shall contain an Extended Message Header (indicated by the Extended field in the Message\nHeader being set) and be followed by zero or more data bytes. Additional bytes that might be added to existing\nMessage s in future Revision of this specification Shall be Ignored .\nThe format of the Extended Message is defined by the Message Header 's Message Type field and is summarized in\nTable 6.53, \"Extended Message Types\" . The Sent by column indicates entities which May send the given Message\n(Source , Sink or Cable Plug ); entities not listed Shall Not issue the corresponding Message . The \"Valid Start of\nPacket\" column indicates the Message s which Shall only be issued in SOP Packet s and the Message s which May be\nissued in SOP* Packet s.\nTable 6.53 Extended Message Types\nBits\n4…0Type Sent by DescriptionValid\nStart of\nPacket"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0000 ReservedAll values not explicitly defined are",
    "full_path": "0 0000 ReservedAll values not explicitly defined are",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0001 Source_Capabilities_Extended Source or Dual-Role Power See Section 6.5.1 SOP only",
    "full_path": "0 0001 Source_Capabilities_Extended Source or Dual-Role Power See Section 6.5.1 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0010 Status Source , Sink or Cable Plug See Section 6.5.2 SOP*",
    "full_path": "0 0010 Status Source , Sink or Cable Plug See Section 6.5.2 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0011 Get_Battery_Cap Source or Sink See Section 6.5.3 SOP only",
    "full_path": "0 0011 Get_Battery_Cap Source or Sink See Section 6.5.3 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0100 Get_Battery_Status Source or Sink See Section 6.5.4",
    "full_path": "0 0100 Get_Battery_Status Source or Sink See Section 6.5.4",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0101 Battery_Capabilities Source or Sink See Section 6.5.5 SOP only",
    "full_path": "0 0101 Battery_Capabilities Source or Sink See Section 6.5.5 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0110 Get_Manufacturer_Info Source or Sink See Section 6.5.6 SOP*",
    "full_path": "0 0110 Get_Manufacturer_Info Source or Sink See Section 6.5.6 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "0111 Manufacturer_Info Source , Sink or Cable Plug See Section 6.5.7 SOP*",
    "full_path": "0 0111 Manufacturer_Info Source , Sink or Cable Plug See Section 6.5.7 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1000 Security_Request Source or Sink See Section 6.5.8.1 SOP*",
    "full_path": "0 1000 Security_Request Source or Sink See Section 6.5.8.1 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1001 Security_Response Source , Sink or Cable Plug See Section 6.5.8.2 SOP*",
    "full_path": "0 1001 Security_Response Source , Sink or Cable Plug See Section 6.5.8.2 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1010 Firmware_Update_Request Source or Sink See Section 6.5.9.1 SOP*",
    "full_path": "0 1010 Firmware_Update_Request Source or Sink See Section 6.5.9.1 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1011 Firmware_Update_Response Source , Sink or Cable Plug See Section 6.5.9.2 SOP*",
    "full_path": "0 1011 Firmware_Update_Response Source , Sink or Cable Plug See Section 6.5.9.2 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1100 PPS_Status Source See Section 6.5.10 SOP only",
    "full_path": "0 1100 PPS_Status Source See Section 6.5.10 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1101 Country_Info Source or Sink See Section 6.5.12 SOP only",
    "full_path": "0 1101 Country_Info Source or Sink See Section 6.5.12 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1110 Country_Codes Source or Sink See Section 6.5.11 SOP only",
    "full_path": "0 1110 Country_Codes Source or Sink See Section 6.5.11 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1111 Sink_Capabilities_Extended Sink or Dual-Role Power See Section 6.5.13 SOP only",
    "full_path": "0 1111 Sink_Capabilities_Extended Sink or Dual-Role Power See Section 6.5.13 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "0000 Extended_Control Source or Sink See Section 6.5.14 SOP only",
    "full_path": "1 0000 Extended_Control Source or Sink See Section 6.5.14 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "0001 EPR_Source_Capabilities Source or Dual-Role Power See Section 6.5.15.2 SOP only",
    "full_path": "1 0001 EPR_Source_Capabilities Source or Dual-Role Power See Section 6.5.15.2 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "0010 EPR_Sink_Capabilities Sink or Dual-Role Power See Section 6.5.15.3 SOP only",
    "full_path": "1 0010 EPR_Sink_Capabilities Sink or Dual-Role Power See Section 6.5.15.3 SOP only",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "0011...",
    "full_path": "1 0011...",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "1101ReservedAll values not explicitly defined are",
    "full_path": "1 1101ReservedAll values not explicitly defined are",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "1110 Vendor_Defined_Extended Source , Sink or Cable Plug See Section 6.5.16 SOP*",
    "full_path": "1 1110 Vendor_Defined_Extended Source , Sink or Cable Plug See Section 6.5.16 SOP*",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "1111 ReservedAll values not explicitly defined are",
    "full_path": "1 1111 ReservedAll values not explicitly defined are",
    "page": 215,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Reserved and Shall Not be used.\nPage 216 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.1 Source_Capabilities_Extended Message\nThe Source_Capabilities_Extended Message Should be sent in response to a Get_Source_Cap_Extended Message .\nThe Source_Capabilities_Extended Message enables a Source or a DRP to inform the Sink about its Capabilities as a\nSource .\nThe Source_Capabilities_Extended Message Shall return a 25-byte Source Capabilities Extended Data Block\n(SCEDB) whose format Shall be as shown in Figure 6.37, \"Source_Capabilities_Extended Message\" and Table 6.54,\n\"Source Capabilities Extended Data Block (SCEDB)\" .\nFigure 6.37 Source_Capabilities_Extended Message\nTable 6.54 Source Capabilities Extended Data Block (SCEDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "VID Vendor ID (assigned by the USB-IF)",
    "full_path": "0 VID Vendor ID (assigned by the USB-IF)",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "PID Product ID (assigned by the manufacturer)",
    "full_path": "2 PID Product ID (assigned by the manufacturer)",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "XID Value provided by the USB-IF assigned to the product",
    "full_path": "4 XID Value provided by the USB-IF assigned to the product",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "FW Version Firmware version number",
    "full_path": "8 FW Version Firmware version number",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "HW Version Hardware version number",
    "full_path": "9 HW Version Hardware version number",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Voltage RegulationBit Description",
    "full_path": "10 Voltage RegulationBit Description",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1…000b: 150mA/µs Load Step (default)\n01b: 500mA/µs Load Step\n11b…10b: Reserved and Shall Not be used.\n20b: 25% IoC (default)\n1b: 90% IoC\n3…7 Reserved and Shall Not be used"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Holdup TimeOutput will stay with regulated limits for this number of milliseconds after removal of",
    "full_path": "11 Holdup TimeOutput will stay with regulated limits for this number of milliseconds after removal of",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the AC from the input.\n0x00 = feature not supported\nNote: A value of at least 3ms Should be used (see Section 7.1.12.2, \"Holdup Time Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "ComplianceCompliance in SPR Mode :",
    "full_path": "12 ComplianceCompliance in SPR Mode :",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Bit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "LPS compliant when set",
    "full_path": "0 LPS compliant when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "PS1 compliant when set",
    "full_path": "1 PS1 compliant when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "PS2 compliant when set",
    "full_path": "2 PS2 compliant when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "3…7 Reserved and Shall Not be used"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "13",
    "title": "Touch CurrentBit Description",
    "full_path": "13 Touch CurrentBit Description",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Low touch current EPS when set",
    "full_path": "0 Low touch current EPS when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Ground pin supported when set",
    "full_path": "1 Ground pin supported when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Ground pin intended for protective earth when set",
    "full_path": "2 Ground pin intended for protective earth when set",
    "page": 216,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "3...7 Reserved and Shall Not be usedExtended Header\nData Size = 25\nSCEDB\n(25-byte Data Block)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2176.5.1.1 Vendor ID (VID) Field\nThe VID field Shall contain the 16-bit Vendor ID (VID) assigned to the Source 's vendor by the USB-IF. If the vendor\ndoes not have a VID, the VID field Shall be set to 0xFFFF. Device s that have a USB data interface Shall report the\nsame VID as the idVendor in the Standard Device Descriptor (see [USB 2.0] and [USB 3.2] ).14 Peak Current1Bit Description\n0...4Percent overload in 10% increments Values higher than 25 (11001b) are\nclipped to 250%.\n5...10 Overload period in 20ms\n11...14 Duty cycle in 5% increments"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "VBUS voltage droop",
    "full_path": "15 VBUS voltage droop",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "Peak Current2Bit Description",
    "full_path": "16 Peak Current2Bit Description",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "0...4Percent overload in 10% increments Values higher than 25 (11001b) are\nclipped to 250%.\n5...10 Overload period in 20ms\n11...14 Duty cycle in 5% increments"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "VBUS voltage droop",
    "full_path": "15 VBUS voltage droop",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "18",
    "title": "Peak Current3Bit Description",
    "full_path": "18 Peak Current3Bit Description",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "0...4Percent overload in 10% increments Values higher than 25 (11001b) are\nclipped to 250%.\n5...10 Overload period in 20ms\n11...14 Duty cycle in 5% increments"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "VBUS voltage droop",
    "full_path": "15 VBUS voltage droop",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "20",
    "title": "Touch TempTemperature conforms to:",
    "full_path": "20 Touch TempTemperature conforms to:",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "0 = [IEC 60950-1] (default)\n1 = [IEC 62368-1] TS1\n2 = [IEC 62368-1] TS2\nNote: All other values Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "21",
    "title": "Source InputsBit Description",
    "full_path": "21 Source InputsBit Description",
    "page": 217,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "00b: No external supply\n1b: External supply present\n1If bit 0 is set:\n0b: External supply is constrained.\n1b: External supply is unconstrained.\nIf bit 0 is not set Reserved and Shall be set to zero\n20b: No internal Battery\n1b: Internal Battery present\n3...7 Reserved and Shall be set to zero\n22Number of Batteries/\nBattery SlotsUpper Nibble = Number of Hot Swappable Battery Slot s (0…4)\nLower Nibble = Number of Fixed Batteries (0…4)\n23SPR Source PDP\nRating0…6: Source PDP Rating (EPR Source ’s PDP Rating when operating in SPR Mode .\n7: Reserved and Shall be set to zero\n24EPR Source PDP\nRating0…7: EPR Source PDP RatingTable 6.54 Source Capabilities Extended Data Block (SCEDB) (Continued)\nOffset Field Description\nPage 218 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.1.2 Product ID (PID) Field\nThe PID field Shall contain the 16-bit Product ID (PID) assigned by the Source 's vendor. Device s that have a USB\ndata interface Shall report the same PID as the idProduct in the Standard Device Descriptor (see [USB 2.0] and\n[USB 3.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.3",
    "title": "XID Field",
    "full_path": "6.5.1.3 XID Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The XID field Shall contain the 32-bit XID provided by the USB-IF to the vendor who in turns assigns it to a product.\nIf the vendor does not have an XID, then it Shall return zero in this field (see [USB 2.0] and [USB 3.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.4",
    "title": "Firmware Version Field",
    "full_path": "6.5.1.4 Firmware Version Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The FW Version field Shall contain an 8-bit firmware version number assigned to the device by the vendor."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.5",
    "title": "Hardware Version Field",
    "full_path": "6.5.1.5 Hardware Version Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The HW Version field Shall contain an 8-bit hardware version number assigned to the device by the vendor."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.6",
    "title": "Voltage Regulation Field",
    "full_path": "6.5.1.6 Voltage Regulation Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Voltage Regulation field contains bits covering Load Step Slew Rate and Magnitude.\nSee Section 7.1.12.1, \"Voltage Regulation Field\" for further details."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.6.1",
    "title": "Load Step Slew Rate",
    "full_path": "6.5.1.6.1 Load Step Slew Rate",
    "page": 218,
    "level": 5,
    "parent_id": "6.5.1.6",
    "tags": [],
    "content": "The Source Shall report its load step response capability in bits 0…1 of the Voltage Regulation bit field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.6.2",
    "title": "Load Step Magnitude",
    "full_path": "6.5.1.6.2 Load Step Magnitude",
    "page": 218,
    "level": 5,
    "parent_id": "6.5.1.6",
    "tags": [],
    "content": "The Source Shall report its load step magnitude rate as a percentage of IoC in bit 2 of the Voltage Regulation field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.7",
    "title": "Holdup Time Field",
    "full_path": "6.5.1.7 Holdup Time Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Holdup Time field Shall contain the Source 's holdup time (see Section 7.1.12.2, \"Holdup Time Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.8",
    "title": "Compliance Field",
    "full_path": "6.5.1.8 Compliance Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Compliance is Static and Shall contain the standards the Source is compliant with in SPR (see Section 7.1.12.3,\n\"Compliance Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.9",
    "title": "Touch Current Field",
    "full_path": "6.5.1.9 Touch Current Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Touch Current field reports whether the Source meets certain leakage current levels and if it has a ground pin.\nA Source Shall set the Touch Current bit (bit 0) when their leakage current is less than 65µA rms when Source 's\nmaximum capability is less than or equal to 30W, or when their leakage current is less than 100 µA rms when its\npower capability is between 30W and 100W. The total combined leakage current Shall be measured in accordance\nwith [IEC 60950-1] when tested at 250VAC rms at 50 Hz.\nA Source with a ground pin Shall set the Ground pin bit (bit 1).\nA Source whose Ground pin is intended to be connected to a protective earth Shall set both bit1 and bit 2."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.10",
    "title": "Peak Current Field",
    "full_path": "6.5.1.10 Peak Current Field",
    "page": 218,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Peak Current1 /Peak Current2 /Peak Current3 fields Shall contain the combinations of Peak Current that the\nSource supports (see Section 7.1.12.4, \"Peak Current\" ).\nPeak Current provides a means for Source report its ability to provide current in excess of the Negotiated amount\nfor short periods. The Peak Current descriptor defines up to three combinations of% overload, duration and duty\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 219cycle defined as Peak Current1 , Peak Current2 and Peak Current3 that the Source supports. A Source May offer\nno Peak Current capability. A Source Shall populate unused Peak Current bit fields with zero.\nThe Bit Fields within Peak Current1 , Peak Current2 and Peak Current3 contain the following subfields:\n Percentage Overload\n Shall be the maximum peak current reported in 10% increments as a percentage of the Negotiated\noperating current ( IoC) offered by the Source . Values higher than 25 (11001b) are clipped to 250%.\n Overload Period\n Shall be the minimum rolling average time window in 20ms increments, where a value of 20ms is\nrecommended.\n Duty Cycle\n Shall be the maximum percentage of overload period reported in 5% increments. The values\nShould be 5%, 10% and 50% for PeakCurrent1, PeakCurrent2, and PeakCurrent3, respectively.\n VBUS Droop\n Shall be set to one to indicate there is an additional 5% voltage droop on VBUS when the overload\nconditions occur as defined by vSrcPeak . However, it is recommended that the Source Should pro -\nvide V BUS in the range of vSrcNew when overload conditions occur and set this bit to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.11",
    "title": "Touch Temp Field",
    "full_path": "6.5.1.11 Touch Temp Field",
    "page": 219,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Touch Temp field Shall report the IEC standard used to determine the surface temperature of the Source 's\nenclosure. Safety limits for the Source 's touch temperature are set in applicable product safety standards (e.g., [IEC\n60950-1] or [IEC 62368-1] ). The Source May report when its touch temperature performance conforms to the TS1\nor TS2 limits described in [IEC 62368-1] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.12",
    "title": "Source Inputs Field",
    "full_path": "6.5.1.12 Source Inputs Field",
    "page": 219,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Source Inputs field Shall identify the possible inputs that provide power to the Source :\n When bit 0 is set, the Source can be sourced by an external power supply.\n When bits 0 and 1 are set, the Source can be sourced by an external power supply which is assumed to\nbe effectively \"infinite\" i.e., it won't run down over time.\n When bit 2 is set the Source can be sourced by an internal Battery .\nNote: Some Source s are only powered by a Battery (e.g., an automobile) rather than the more common AC\nSupply .\nNote: Bit 2 May be set independently of bits 0 and 1."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.13",
    "title": "Number of Batteries/Battery Slots Field",
    "full_path": "6.5.1.13 Number of Batteries/Battery Slots Field",
    "page": 219,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "The Number of Batteries/Battery Slots field Shall report the number of Fixed Batteries and Hot Swappable\nBattery Slots the Source supports. This field Shall independently report the number of Battery Slots and the\nnumber of Fixed Batteries .\nA Source Shall have no more than 4 Fixed Batteries and no more than 4 Battery Slots.\nFixed Batteries Shall be numbered consecutively from 0 to 3. The number assigned to a given Fixed Battery Shall\nNot change between Attach and Detach .\nBattery Slot s Shall be numbered consecutively from 4 to 7. The number assigned to a given Battery Slot Shall Not\nchange between Attach and Detach .\nPage 220 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.1.14 SPR Source PDP Rating Field\nFor an SPR Source the SPR Source PDP Rating field Shall report the integer portion of the PDP Rating of the Port .\nFor an EPR Source , the SPR Source PDP Rating field Shall report the integer portion of the maximum amount of\npower that the Port is designed to deliver in SPR Mode.\nThe SPR Source PDP Rating field that is reported Shall be Static ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.1.15",
    "title": "EPR Source PDP Rating Field",
    "full_path": "6.5.1.15 EPR Source PDP Rating Field",
    "page": 220,
    "level": 4,
    "parent_id": "6.5.1",
    "tags": [],
    "content": "For an EPR Source the EPR Source PDP Rating field Shall report the integer portion of the PDP Rating of the Port .\nFor an SPR Source this field Shall be set to zero.\nThe EPR Source PDP Rating field that is reported Shall be Static .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2216.5.2 Status Message\nThe Status Message Shall be sent in response to a Get_Status Message . The content of the Status Message depends\non the target of the Get_Status Message . When sent to SOP the Status Message returns the status of the Port 's Port\nPartner . When sent to SOP’ or SOP’’ the Status Message returns the status of one of the Active Cable 's Cable Plug s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1",
    "title": "SOP Status Message",
    "full_path": "6.5.2.1 SOP Status Message",
    "page": 221,
    "level": 4,
    "parent_id": "6.5.2",
    "tags": [],
    "content": "A Status Message , sent in response to Get_Status Message to SOP , enables a Port to inform its Port Partner about\nthe present status of the Source or Sink . Typically, a Get_Status Message will be sent by the Port after receipt of an\nAlert Message . Some of the reported events are critical such as OCP , OVP and OTP , while others are informational\nsuch as change in a Battery 's status from charging to neither charging nor discharging.\nThe Status Message returns a 7-byte Status Data Block (SDB) whose format Shall be as shown in Figure 6.38, \"SOP\nStatus Message\" and Table 6.55, \"SOP Status Data Block (SDB)\" .\nFigure 6.38 SOP Status Message\nTable 6.55 SOP Status Data Block (SDB)\nOffset (Byte) Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Internal TempSource or Sink ’s internal temperature in °C",
    "full_path": "0 Internal TempSource or Sink ’s internal temperature in °C",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "0 = feature not supported\n1 = temperature is less than 2°C.\n2-255 = temperature in °C."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Present InputBit Description",
    "full_path": "1 Present InputBit Description",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero",
    "full_path": "0 Reserved and Shall be set to zero",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "External Power when set",
    "full_path": "1 External Power when set",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "2External Power AC/DC ( Valid when Bit 1 set)\n0: DC\n1: AC\nReserved when Bit 1 is zero"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Internal Power from Battery when set",
    "full_path": "3 Internal Power from Battery when set",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Internal Power from non-Battery power source when set",
    "full_path": "4 Internal Power from non-Battery power source when set",
    "page": 221,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "5...7 Reserved and Shall be set to zero\n2Present Battery\nInputWhen Present Input field bit 3 set Shall contain the bit corresponding\nto the Battery or Batteries providing power:\nUpper nibble = Hot Swappable Battery (b7…4)\nLower nibble = Fixed Battery (b3…0)\nWhen Present Input field bit 3 is not set this field is Reserved and\nShall be set to zero.Extended Header\nData Size = 7\nSDB\n(7-byte block)\nPage 222 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-103 Event FlagsBit Flag Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero",
    "full_path": "0 Reserved and Shall be set to zero",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "OCP Event OCP event when set",
    "full_path": "1 OCP Event OCP event when set",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "OTP Event OTP event when set",
    "full_path": "2 OTP Event OTP event when set",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "OVP Event OVP event when set",
    "full_path": "3 OVP Event OVP event when set",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "CL/CV ModeIn PPS Mode only: CL mode when set, CV",
    "full_path": "4 CL/CV ModeIn PPS Mode only: CL mode when set, CV",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "mode when cleared\n5...7 Reserved and Shall be set to zero\n4Temperature\nStatusBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero",
    "full_path": "0 Reserved and Shall be set to zero",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1...200 – Not Supported.\n01 – Normal\n10 – Warning\n11 – Over temperature\n3...7 Reserved and Shall be set to zero"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Power StatusBit Description",
    "full_path": "5 Power StatusBit Description",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero",
    "full_path": "0 Reserved and Shall be set to zero",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Source power limited due to cable supported current",
    "full_path": "1 Source power limited due to cable supported current",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "2Source power limited due to insufficient power available\nwhile sourcing other ports"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Source power limited due to insufficient external power",
    "full_path": "3 Source power limited due to insufficient external power",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "4Source power limited due to Event Flags in place (Event\nFlags must also be set)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Source power limited due to temperature",
    "full_path": "5 Source power limited due to temperature",
    "page": 222,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "6...7 Reserved and Shall be set to zeroTable 6.55 SOP Status Data Block (SDB) (Continued)\nOffset (Byte) Field Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2236.5.2.1.1 Internal Temp Field\nThe Internal Temp field reports the instantaneous temperature of a portion of the Source or Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.2",
    "title": "Present Input Field",
    "full_path": "6.5.2.1.2 Present Input Field",
    "page": 223,
    "level": 5,
    "parent_id": "6.5.2.1",
    "tags": [],
    "content": "The Present Input field indicates which supplies are presently powering the Source or Sink .\nThe following bits are defined:\n Bit 1: indicates that an external power source is present.\n Bit 2: indicates whether the external unconstrained power source is AC or DC.\n Bit 3: indicates that power is being provided from Battery .\n Bit4: indicates an alternative internal source of power that is not a Battery ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.3",
    "title": "Present Battery Input Field",
    "full_path": "6.5.2.1.3 Present Battery Input Field",
    "page": 223,
    "level": 5,
    "parent_id": "6.5.2.1",
    "tags": [],
    "content": "The Present Battery Input field indicates which Battery or Batteries are presently supplying power to the Source\nor Sink . The Present Battery Input field is only Valid when the Present Input field indicates that there is Internal\nPower from Battery .\nThe upper nibble of the field indicates which Hot Swappable Battery /Batteries are supplying power with bit 4 in\nupper nibble corresponding to Battery 4 and bit 7 in the upper nibble corresponding to Battery 7 (see Section 6.5.3,\n\"Get_Battery_Cap Message\" and Section 6.5.4, \"Get_Battery_Status Message\" ).\nThe lower nibble of the field indicates which Fixed Battery /Batteries are supplying power with bit 0 in lower nibble\ncorresponding to Battery 0 and bit 3 in the lower nibble corresponding to Battery 3 (see Section 6.5.3,\n\"Get_Battery_Cap Message\" and Section 6.5.4, \"Get_Battery_Status Message\" ).6Power State\nChangeBit Description\n0...2New Power State\nValue Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Status not supported",
    "full_path": "0 Status not supported",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "S0",
    "full_path": "1 S0",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Modern Standby",
    "full_path": "2 Modern Standby",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "S3",
    "full_path": "3 S3",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "S4",
    "full_path": "4 S4",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "5S5 (Off with battery, wake events\nsupported)\n6G3 (Off with no battery, wake events not\nsupported)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Reserved and Shall be set to zero",
    "full_path": "7 Reserved and Shall be set to zero",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "3...5New Power State indicator\nValue Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Off LED",
    "full_path": "0 Off LED",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "On LED",
    "full_path": "1 On LED",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Blinking LED",
    "full_path": "2 Blinking LED",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Breathing LED",
    "full_path": "3 Breathing LED",
    "page": 223,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "4...7 Reserved and Shall be set to zero\n6...7 Reserved and Shall be set to zeroTable 6.55 SOP Status Data Block (SDB) (Continued)\nOffset (Byte) Field Description\nPage 224 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.2.1.4 Event Flags Field\nThe Event Flags field returns event flags. The OTP , OVP and OCP event flags Shall be set when there is an event and\nShall only be cleared when read with the Get_Status Message .\nWhen the OTP Event flag is set the Temperature Status field Shall also be set to over temperature.\nThe CL/CV Mode flag is only Valid when operating as a Programmable Power Supply and Shall be Ignored\notherwise. When the Source is operating as a Programmable Power Supply the CL/CV Mode flag Shall be set when\noperating in Current Limit mode ( CL) and Shall be cleared when operating in Constant Voltage mode ( CV)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.5",
    "title": "Temperature Status Field",
    "full_path": "6.5.2.1.5 Temperature Status Field",
    "page": 224,
    "level": 5,
    "parent_id": "6.5.2.1",
    "tags": [],
    "content": "The Temperature Status field returns the current temperature status of the device either: normal, warning or\nover temperature. When the Temperature Status field is set to over temperature the OTP Event flag Shall also be\nset."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.6",
    "title": "Power Status Field",
    "full_path": "6.5.2.1.6 Power Status Field",
    "page": 224,
    "level": 5,
    "parent_id": "6.5.2.1",
    "tags": [],
    "content": "The Power Status field indicates the current status of a Source . A non-zero return of the field indicates Advertised\nSource power is being reduced for either:\n The cable does not support the full Source current.\n The Source is supplying power to other ports and is unable to provide its full power.\n The external power to the Source is insufficient to support full power.\n An Event has occurred that is causing the Source to reduce its Advertised power.\nA Sink Shall set this field to zero.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2256.5.2.1.7 Power state change\nThe Power State Change field contains two status bytes; the New Power State and New Power State indicator status\nbytes."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.7.1",
    "title": "New power state",
    "full_path": "6.5.2.1.7.1 New power state",
    "page": 225,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The New Power State status byte indicates a power state change to one of the specified power states. Any device\nthat supports the ACPI standard system power states Shall use the ACPI states. For devices that do not support the\nACPI power states, the following mapping Should be used:\n High power (on) state -> S0\n Sleep state -> S3\n Low power (off) state -> S5 or G3"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.1.7.2",
    "title": "New power state indicator",
    "full_path": "6.5.2.1.7.2 New power state indicator",
    "page": 225,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The New Power State indicator status byte defines the host's desired indicator for the specified power state. This\nindicator allows several possibilities for predefined behaviors that the host can specify to indicate its system\npower state to the user via the downstream device. The New Power State indicator is a \"best effort\" indicator. If\nthe device cannot provide the requested indicator, then it provides the best indicator that it can. If a Breathing\nindicator cannot be provided, then a Blinking indicator Should be provided. If a Blinking indicator cannot be\nprovided, then a constant on indicator Should be provided.\nNew Power State indicator s in decreasing precedence:\n Breathing\n Blinking\n Constant on\n No indicator\nPage 226 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.2.2 SOP'/SOP'' Status Message\nA Status Message , sent in response to a Get_Status Message to SOP’ or SOP’’ , enables a Source or Sink to get the\npresent status of the Cable's Cable Plug (s). Typically, a Get_Status Message will be used by the USB Host and/or USB\nDevice to manage the Cable's Cable Plug (s) temperature. The Status Message returns a 2-byte Status Data Block\n(SDB) whose format Shall be as shown in Figure 6.39, \"SOP'/SOP'' Status Message\" and Table 6.56, \"“SOP’/SOP’’\nStatus Data Block (SPDB)”\" .\nPassive Cable Plug s Shall Not indicate Thermal Shutdown.\nFigure 6.39 SOP'/SOP'' Status Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.2.1",
    "title": "Internal Temp Field",
    "full_path": "6.5.2.2.1 Internal Temp Field",
    "page": 226,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Internal Temp field reports the instantaneous temperature of the plug in °C. The internal temperature Shall\nbe monotonic. The Cable Plug Shall report its internal temperature every tACTempUpdate ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.2.2.2",
    "title": "Thermal Shutdown Field",
    "full_path": "6.5.2.2.2 Thermal Shutdown Field",
    "page": 226,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Flags flag Shall also be set when the plug's internal temperature exceeds the Internal Maximum Temperature\nreported in the Active Cable VDO. Once this bit has been set, it Shall remain set and the plug Shall remain in\nThermal Shutdown until there is a Hard Reset or the Active Cable 's power is removed. The Thermal Shutdown flag\nShall Not be cleared by a Cable Reset .Table 6.56 “SOP’/SOP’’ Status Data Block (SPDB)”\nOffset (Byte) Field Value Description\n0Internal\nTempUnsigned IntCable Plug ’s internal temperature in °C.\n0 = feature not supported\n1 = temperature is less than 2°C.\n2…255 = temperature in °C."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Flags Bit FieldBit Description",
    "full_path": "1 Flags Bit FieldBit Description",
    "page": 226,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Thermal Shutdown",
    "full_path": "0 Thermal Shutdown",
    "page": 226,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1...7 Reserved and Shall be set to zeroExtended Header\nData Size = 2\nSPDB\n(2-byte block)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2276.5.3 Get_Battery_Cap Message\nThe Get_Battery_Cap (Get Battery Capabilities ) Message is used to request the capability of a Battery present in its\nPort Partner . The Port Shall respond by returning a Battery_Capabilities Message (see Section 6.5.5,\n\"Battery_Capabilities Message\" ) containing a Battery Capabilities Data Block (BCDB) for the targeted Battery .\nThe Get_Battery_Cap Message contains a 1-byte Get Battery Cap Data Block (GBCDB), whose format Shall be as\nshown in Figure 6.40, \"Get_Battery_Cap Message\" and Table 6.57, \"Get Battery Cap Data Block (GBCDB)\" . This block\ndefines for which Battery the request is being made.\nThe Data Size field in the Get_Battery_Cap Message Shall be set to 1.\nFigure 6.40 Get_Battery_Cap Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.4",
    "title": "Get_Battery_Status Message",
    "full_path": "6.5.4 Get_Battery_Status Message",
    "page": 227,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": "The Get_Battery_Status (Get Battery Status) Message is used to request the status of a Battery present in its Port\nPartner . The Port Shall respond by returning a Battery_Status Message (see Section 6.4.5, \"Battery_Status\nMessage\" ) containing a Battery Status Data Object (BSDO) for the targeted Battery .\nThe Get_Battery_Status Message contains a 1-byte Get Battery Status Data Block (GBSDB) whose format Shall be\nas shown in Figure 6.41, \"Get_Battery_Status Message\" and Table 6.58, \"Get Battery Status Data Block (GBSDB)\" . This\nblock contains details of the requested Battery . The Data Size field in the Get_Battery_Status Message Shall be set\nto 1.\nFigure 6.41 Get_Battery_Status MessageTable 6.57 Get Battery Cap Data Block (GBCDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery Cap RefNumber of the Battery indexed from zero:",
    "full_path": "0 Battery Cap RefNumber of the Battery indexed from zero:",
    "page": 227,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Values 0…3 represent the Fixed Batteries .\nValues 4…7 represent the Hot Swappable Batteries.\nValues 8…255 are Reserved and Shall Not be used.\nTable 6.58 Get Battery Status Data Block (GBSDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery Status RefNumber of the Battery indexed from zero:",
    "full_path": "0 Battery Status RefNumber of the Battery indexed from zero:",
    "page": 227,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Values 0…3 represent the Fixed Batteries .\nValues 4…7 represent the Hot Swappable Batteries.\nValues 8…255 are Reserved and Shall Not be used.Extended Header\nData Size = 1\nGBCDB\nExtended Header\nData Size = 1\nGBSDB\nPage 228 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.5 Battery_Capabilities Message\nThe Battery_Capabilities Message is sent in response to a Get_Battery_Cap Message . The Battery_Capabilities\nMessage contains one Battery Capability Data Block (BCDB) for one of the Batteries its supports as reported by\nNumber of Batteries/Battery Slots field in the Source_Capabilities_Extended Message . The returned BCDB Shall\ncorrespond to the Battery requested in the Battery Cap Ref field contained in the Get_Battery_Cap Message .\nThe Battery_Capabilities Message returns a 9-byte BCDB whose format Shall be as shown in Figure 6.42,\n\"Battery_Capabilities Message\" and Table 6.59, \"Battery Capability Data Block (BCDB)”\" .\nFigure 6.42 Battery_Capabilities Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.1",
    "title": "Vendor ID (VID)",
    "full_path": "6.5.5.1 Vendor ID (VID)",
    "page": 228,
    "level": 4,
    "parent_id": "6.5.5",
    "tags": [],
    "content": "The VID field Shall contain the manufacturer VID associated with the Battery , as assigned by the USB-IF, or 0xFFFF\nin the case that no such VID exists.\nIf the Battery Cap Ref field in the Get_Battery_Cap Message is Invalid , the VID field Shall be 0xFFFF."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.2",
    "title": "Product ID (PID)",
    "full_path": "6.5.5.2 Product ID (PID)",
    "page": 228,
    "level": 4,
    "parent_id": "6.5.5",
    "tags": [],
    "content": "The following rules apply to the PID field. When the VID:Table 6.59 Battery Capability Data Block (BCDB)”\nOffset\n(Byte)Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "VID Vendor ID (assigned by the USB-IF)",
    "full_path": "0 VID Vendor ID (assigned by the USB-IF)",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "PID Product ID (assigned by the manufacturer)",
    "full_path": "2 PID Product ID (assigned by the manufacturer)",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Battery Design CapacityBattery ’s design capacity in 0.1 WH",
    "full_path": "4 Battery Design CapacityBattery ’s design capacity in 0.1 WH",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Note:\n0x0000 = Battery not present\n0xFFFF = design capacity unknown"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Battery Last Full Charge CapacityBattery ’s last full charge capacity in 0.1 WH",
    "full_path": "6 Battery Last Full Charge CapacityBattery ’s last full charge capacity in 0.1 WH",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Note:\n0x0000 = Battery not present\n0xFFFF = last full charge capacity unknown"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Battery TypeBit Field Description",
    "full_path": "8 Battery TypeBit Field Description",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Invalid Battery ReferenceInvalid Battery reference when",
    "full_path": "0 Invalid Battery ReferenceInvalid Battery reference when",
    "page": 228,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "set.\n1...7 --- ReservedExtended Header\nData Size = 9\nBCDB\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 229 Belongs to the Battery vendor the PID field Shall contain the Battery 's 16-bit product identifier\ndesignated by the Battery vendor.\n Belongs to the Device vendor the PID field Shall contain the Battery 's 16-bit product identifier\ndesignated by the Device vendor.\n Is 0xFFFF the PID field Shall be set to 0x0000."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.3",
    "title": "Battery Design Capacity Field",
    "full_path": "6.5.5.3 Battery Design Capacity Field",
    "page": 229,
    "level": 4,
    "parent_id": "6.5.5",
    "tags": [],
    "content": "The Battery Design Capacity field Shall return the Battery 's design capacity in tenths of WH. If the Battery is Hot\nSwappable and is not present, the Battery Design Capacity field Shall be set to zero. If the Battery is unable to\nreport its Design Capacity, the Battery Design Capacity field Shall be set to 0xFFFF."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.4",
    "title": "Battery Last Full Charge Capacity Field",
    "full_path": "6.5.5.4 Battery Last Full Charge Capacity Field",
    "page": 229,
    "level": 4,
    "parent_id": "6.5.5",
    "tags": [],
    "content": "The Battery Last Full Charge Capacity field Shall contain the Battery 's last full charge capacity in tenths of WH. If\nthe Battery is Hot Swappable and is not present, the Battery Last Full Charge Capacity field Shall be set to zero.\nIf the Battery is unable to report its Design Capacity, the Battery Last Full Charge Capacity field Shall be set to\n0xFFFF."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.5",
    "title": "Battery Type Field",
    "full_path": "6.5.5.5 Battery Type Field",
    "page": 229,
    "level": 4,
    "parent_id": "6.5.5",
    "tags": [],
    "content": "The Battery Type field is used to report additional information about the Battery 's Capabilities ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.5.5.1",
    "title": "Invalid Battery Reference",
    "full_path": "6.5.5.5.1 Invalid Battery Reference",
    "page": 229,
    "level": 5,
    "parent_id": "6.5.5.5",
    "tags": [],
    "content": "The Invalid Battery Reference bit Shall be set when the Get_Battery_Cap Message contains a reference to a\nBattery that does not exist.\nPage 230 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.6 Get_Manufacturer_Info Message\nThe Get_Manufacturer_Info (Get Manufacturer Info) Message is sent by a Port to request manufacturer specific\ninformation relating to its Port Partner , Cable Plug or of a Battery behind a Port . The Port Shall respond by\nreturning a Manufacturer_Info Message (Section 6.5.7, \"Manufacturer_Info Message\" ) containing a Manufacturer\nInfo Data Block (MIDB). Support for this feature by the Cable Plug is Optional Normative .\nThe Get_Manufacturer_Info Message contains a 2-byte Get Manufacturer Info Data Block (GMIDB). This block\ndefines whether it is the Device or Battery manufacturer information being requested and for which Battery the\nrequest is being made.\nThe Get_Manufacturer_Info Message returns a GMIDB whose format Shall be as shown in Figure 6.43,\n\"Get_Manufacturer_Info Message\" and Table 6.60, \"Get Manufacturer Info Data Block (GMIDB)\" .\nFigure 6.43 Get_Manufacturer_Info Message\nTable 6.60 Get Manufacturer Info Data Block (GMIDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Manufacturer Info Target0: Port/ Cable Plug",
    "full_path": "0 Manufacturer Info Target0: Port/ Cable Plug",
    "page": 230,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1: Battery\n255…2: Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Manufacturer Info RefIf the Manufacturer Info Target field is Battery (01b) the Manufacturer Info",
    "full_path": "1 Manufacturer Info RefIf the Manufacturer Info Target field is Battery (01b) the Manufacturer Info",
    "page": 230,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Ref field Shall contain the Battery number reference which is the number of the\nBattery indexed from zero:\nValues 0…3 represent the Fixed Batteries .\nValues 4…7 represent the Hot Swappable Batteries.\nOtherwise, this field is Reserved and Shall be set to zero.Extended Header\nData Size = 2\nGMIDB\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2316.5.7 Manufacturer_Info Message\nThe Manufacturer_Info Message Shall be sent in response to a Get_Manufacturer_Info Message . The\nManufacturer_Info Message contains the USB VID and the Vendor's PID to identify the device or Battery and the\ndevice or Battery 's manufacturer byte array in a variable length Data Block of up to MaxExtendedMsgLegacyLen .\nThe Manufacturer_Info Message returns a Manufacturer Info Data Block (MIDB) whose format Shall be as shown\nin Figure 6.44, \"Manufacturer_Info Message\" and Table 6.61, \"Manufacturer Info Data Block (MIDB)\" .\nFigure 6.44 Manufacturer_Info Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.7.1",
    "title": "Vendor ID (VID)",
    "full_path": "6.5.7.1 Vendor ID (VID)",
    "page": 231,
    "level": 4,
    "parent_id": "6.5.7",
    "tags": [],
    "content": "If the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with this Port /Cable\nPlug , the VID field Shall contain:\n The manufacturer's VID associated with the Port /Cable Plug , as defined by the USB-IF, or\n 0xFFFF in the case that the vendor does not have a VID.\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a Device that has\na USB data interface, the Device Shall report the same VID as the idVendor in the Standard Device Descriptor (see\n[USB 2.0] and [USB 3.2] ).\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a Battery , the\nVID field Shall contain:\n The manufacturer VID associated with the Battery specified, as defined by the USB-IF, or\n 0xFFFF in the case that the vendor does not have a VID.\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message :\n Is Invalid , this VID field Shall be 0xFFFF.\n Is Battery (01b) and the Manufacturer Info Ref field is Invalid , the VID field Shall be 0xFFFF."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.7.2",
    "title": "Product ID (PID)",
    "full_path": "6.5.7.2 Product ID (PID)",
    "page": 231,
    "level": 4,
    "parent_id": "6.5.7",
    "tags": [],
    "content": "If the VID is 0xFFFF, the PID field Shall contain 0x0000.\nOtherwise:Table 6.61 Manufacturer Info Data Block (MIDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "VID Vendor ID (assigned by the USB-IF)",
    "full_path": "0 VID Vendor ID (assigned by the USB-IF)",
    "page": 231,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "PID Product ID (assigned by the manufacturer)",
    "full_path": "2 PID Product ID (assigned by the manufacturer)",
    "page": 231,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Manufacturer StringVendor defined null terminated string of 0…21 characters.",
    "full_path": "4 Manufacturer StringVendor defined null terminated string of 0…21 characters.",
    "page": 231,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "If the Manufacturer Info Target field or Manufacturer Info\nRef field in the Get_Manufacturer_Info Message is\nunrecognized the field Shall return a null terminated ASCII\ntext string “Not Supported”.Extended Header\nData Size = 5..26\nMIDB\nPage 232 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 If the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with this\nPort /Cable Plug , the PID field Shall contain the device's 16-bit product identifier designated by the\ndevice vendor.\n If the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a\nBattery :\n And the VID belongs to the Battery vendor, the PID field Shall contain the Battery 's 16-bit product\nidentifier designated by the Battery vendor.\n And the VID belongs to the Device vendor, the PID field Shall contain the Battery 's 16-bit product\nidentifier designated by the Device vendor."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.7.3",
    "title": "Manufacturer String",
    "full_path": "6.5.7.3 Manufacturer String",
    "page": 232,
    "level": 4,
    "parent_id": "6.5.7",
    "tags": [],
    "content": "The Manufacturer String field Shall contain the device’s or Battery 's manufacturer string as defined by the\nvendor.\nIf the Manufacturer Info Target field or Manufacturer Info Ref field in the Get_Manufacturer_Info Message is\nunrecognized the field Shall return a null terminated ASCII text string \"Not Supported\".\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2336.5.8 Security Messages\nThe authentication process between Port Partner s or a Port and Cable Plug is fully described in\n[USBTypeCAuthentication 1.0] . This specification describes two Extended Message s used by the authentication\nprocess when applied to PD.\nIn the authentication process described in [USBTypeCAuthentication 1.0] there are three basic exchanges that\nserve to:\n Get the Port or Cable Plug 's certificates.\n Get the Port or Cable Plug 's digest.\n Challenge the Port Partner or Cable Plug .\nCertificates are used to convey information, attested to by a signer, which attests to the Port Partner 's or Cable\nPlug 's authenticity. The Port 's or Cable Plug 's certificates are needed when a Port encounters a Port Partner or\nCable Plug it has not been Attached to before. To minimize calculations after the initial Attachment , a Port can also\nuse a digest consisting of hashes of the certificates rather than the certificates themselves. Once the Port has the\ncertificates and has calculated the hashes, it stores the hashes and uses the digest in future exchanges. After the\nPort gets the certificates or digest, it challenges its Port Partner or the Cable Plug to detect replay attacks.\nFor further details refer to [USBTypeCAuthentication 1.0] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.8.1",
    "title": "Security_Request",
    "full_path": "6.5.8.1 Security_Request",
    "page": 233,
    "level": 4,
    "parent_id": "6.5.8",
    "tags": [],
    "content": "The Security_Request Message is used by a Port to pass a security data structure to its Port Partner or a Cable Plug .\nThe Security_Request Message contains a Security Request Data Block (SRQDB) whose format Shall be as shown\nin Figure 6.45, \"Security_Request Message\" . The contents of the SRQDB and its use are defined in\n[USBTypeCAuthentication 1.0] .\nFigure 6.45 Security_Request Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.8.2",
    "title": "Security_Response",
    "full_path": "6.5.8.2 Security_Response",
    "page": 233,
    "level": 4,
    "parent_id": "6.5.8",
    "tags": [],
    "content": "The Security_Response Message is used by a Port or Cable Plug to pass a security data structure to the Port that\nsent the Security_Request Message .\nThe Security_Response Message contains a Security Response Data Block (SRPDB) whose format Shall be as\nshown in Figure 6.46, \"Security_Response Message\" . The contents of the SRPDB and its use are defined in\n[USBTypeCAuthentication 1.0] .\nFigure 6.46 Security_Response MessageExtended Header\nData Size = 4..260\nSRQDB\nExtended Header\nData Size = 4..260\nSRPDB\nPage 234 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.9 Firmware Update Messages\nThe firmware update process between Port Partner s or a Port and Cable Plug is fully described in\n[USBPDFirmwareUpdate 1.0] . This specification describes two Extended Message s used by the firmware update\nprocess when applied to PD."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.9.1",
    "title": "Firmware_Update_Request",
    "full_path": "6.5.9.1 Firmware_Update_Request",
    "page": 234,
    "level": 4,
    "parent_id": "6.5.9",
    "tags": [],
    "content": "The Firmware_Update_Request Message is used by a Port to pass a firmware update data structure to its Port\nPartner or a Cable Plug .\nThe Firmware_Update_Request Message contains a Firmware Update Request Data Block (FRQDB) whose format\nShall be as shown in Figure 6.47, \"Firmware_Update_Request Message\" . The contents of the FRQDB and its use are\ndefined in [USBPDFirmwareUpdate 1.0] .\nFigure 6.47 Firmware_Update_Request Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.9.2",
    "title": "Firmware_Update_Response",
    "full_path": "6.5.9.2 Firmware_Update_Response",
    "page": 234,
    "level": 4,
    "parent_id": "6.5.9",
    "tags": [],
    "content": "The Firmware_Update_Response Message is used by a Port or Cable Plug to pass a firmware update data structure\nto the Port that sent the Firmware_Update_Request Message .\nThe Firmware_Update_Response Message contains a Firmware Update Response Data Block (FRPDB) whose\nformat Shall be as shown in Figure 6.48, \"Firmware_Update_Response Message\" . The contents of the FRPDB and its\nuse are defined in [USBPDFirmwareUpdate 1.0] .\nFigure 6.48 Firmware_Update_Response MessageExtended Header\nData Size = 4..260\nFRQDB\nExtended Header\nData Size = 4..260\nFRPDB\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2356.5.10 PPS_Status Message\nThe PPS_Status Message Shall be sent in response to a Get_PPS_Status Message . The PPS_Status Message enables\na Sink to query the Source to get additional information about its operational state. The Get_PPS_Status Message\nand the PPS_Status Message Shall only be supported when the Alert Message is also supported.\nThe PPS_Status Message Shall return a 4-byte PPS Status Data Block (PPSSDB) whose format Shall be as shown in\nFigure 6.49, \"PPS_Status Message\" and Table 6.62, \"PPS Status Data Block (PPSSDB)\" .\nFigure 6.49 PPS_Status Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.10.1",
    "title": "Output Voltage Field",
    "full_path": "6.5.10.1 Output Voltage Field",
    "page": 235,
    "level": 4,
    "parent_id": "6.5.10",
    "tags": [],
    "content": "The Output Voltage field Shall return the Source 's output voltage at the time of the request. The output voltage is\nmeasured either at the Source 's receptacle or, if the Source has a captive cable, where the voltage is applied to the\ncable.\nThe measurement accuracy Shall be +/-3% rounded to the nearest 20mV in SPR PPS Mode .\nIf the Source does not support the Output Voltage field, the field Shall be set to 0xFFFF."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.10.2",
    "title": "Output Current Field",
    "full_path": "6.5.10.2 Output Current Field",
    "page": 235,
    "level": 4,
    "parent_id": "6.5.10",
    "tags": [],
    "content": "The Output Current field Shall return the Source 's output current at the time of the request measured at the\nSource 's receptacle.\nThe measurement accuracy Shall be +/-150mA.\nIf the Source does not support the Output Current field, the field Shall be set to 0xFF.Table 6.62 PPS Status Data Block (PPSSDB)\nOffset (Byte) Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Output Voltage 2Source ’s output voltage in 20mV units.",
    "full_path": "0 Output Voltage 2Source ’s output voltage in 20mV units.",
    "page": 235,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "When set to 0xFFFF, the Source does not support this field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Output Current 1Source ’s output current in 50mA units.",
    "full_path": "2 Output Current 1Source ’s output current in 50mA units.",
    "page": 235,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "When set to 0xFF, the Source does not support this field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Real Time FlagsBit Description",
    "full_path": "3 Real Time FlagsBit Description",
    "page": 235,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved and Shall be set to zero",
    "full_path": "0 Reserved and Shall be set to zero",
    "page": 235,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1...2PTF\nPTF: 00 – Not Supported\nPTF: 01 – Normal\nPTF: 10 – Warning\nPTF: 11 – Over temperature\n3OMF\nOMF (Operating Mode Flag) is set when operating in Current\nLimit mode and cleared when operating in Constant Voltage\nmode.\n4...7 Reserved and Shall be set to zeroExtended Header\nData Size = 4\nPPSSDB\n(4-byte Data Block)\nPage 236 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.10.3 Real Time Flags Field\nReal Time flags provide a real-time indication of the Source 's operating state:\n The PTF (Present Temperature Flag) Shall provide a real-time indication of the Source 's internal\nthermal status. If the PTF is not supported, it will be set to zero:\n Normal indicates that the Source is operating within its normal thermal envelope.\n Warning indicates that the Source is over-heating but is not in imminent danger of shutting down.\n Over Temperature indicates that the Source is over heated and will shut down soon or has already\nshutdown and has sent the OTP Event flag in an Alert Message .\n The OMF (Operating Mode Flag) Shall provide a real-time indication of the SPR PPS Source 's operating\nmode. When set, the Source is operating in Current Limit mode; when cleared it is operating Constant\nVoltage mode. This bit Shall be set to zero when not in SPR PPS Mode .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2376.5.11 Country_Codes Message\nThe Country_Codes Message Shall be sent in response to a Get_Country_Codes Message . The Country_Codes\nMessage enables a Port to query its Port Partner to get a list of alpha-2 country codes as defined in [ISO 3166] for\nwhich the Port Partner has country specific information.\nThe Country_Codes Message Shall contain a 4…26-byte Country Code Data Block (CCDB) whose format Shall be as\nshown in Figure 6.50, \"Country_Codes Message\" and Table 6.63, \"Country Codes Data Block (CCDB)\" .\nFigure 6.50 Country_Codes Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.11.1",
    "title": "Country Code Field",
    "full_path": "6.5.11.1 Country Code Field",
    "page": 237,
    "level": 4,
    "parent_id": "6.5.11",
    "tags": [],
    "content": "The Country Code field Shall contain Length Country Codes in the Alpha-2 Country Code defined by [ISO 3166] .Table 6.63 Country Codes Data Block (CCDB)\nOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Length Number of country codes in the Message",
    "full_path": "0 Length Number of country codes in the Message",
    "page": 237,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Reserved Shall be set to zero.",
    "full_path": "1 Reserved Shall be set to zero.",
    "page": 237,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "2...\nLength * 2nCountry\nCodeOffset Field Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "1st Country CodeFirst character of the Alpha-2 Country Code defined by",
    "full_path": "2 1st Country CodeFirst character of the Alpha-2 Country Code defined by",
    "page": 237,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "[ISO 3166]\n3Second character of the Alpha-2 Country Code defined by\n[ISO 3166]"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "2nd Country Code First character of the Alpha-2 Country Code defined by",
    "full_path": "4 2nd Country Code First character of the Alpha-2 Country Code defined by",
    "page": 237,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "[ISO 3166]\n5Second character of the Alpha-2 Country Code defined by\n[ISO 3166]\n…\nLength * 2n nth Country CodeExtended Header\nData Size = 4-26\nCCDB\n(4-26 byte Data Block)\nPage 238 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.12 Country_Info Message\nThe Country_Info Message Shall be sent in response to a Get_Country_Info Message . The Country_Info Message\nenables a Port to get additional country specific information from its Port Partner .\nThe Country_Info Message Shall contain a 4…26-byte Country Info Data Block (CIDB) whose format Shall be as\nshown in Figure 6.51, \"Country_Info Message\" and Table 6.64, \"Country Info Data Block (CIDB)\" .\nFigure 6.51 Country_Info Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.12.1",
    "title": "Country Code Field",
    "full_path": "6.5.12.1 Country Code Field",
    "page": 238,
    "level": 4,
    "parent_id": "6.5.12",
    "tags": [],
    "content": "The Country Code field Shall contain the Alpha-2 Country Code received in the corresponding Get_Country_Info\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.12.2",
    "title": "Country Specific Data Field",
    "full_path": "6.5.12.2 Country Specific Data Field",
    "page": 238,
    "level": 4,
    "parent_id": "6.5.12",
    "tags": [],
    "content": "The Country Specific Data field Shall contain content defined by and formatted in a manner determined by an\nofficial agency of the country indicated in the Country Code field.\nIf the Country Code field in the Get_Country_Info Message is unrecognized then Country Specific Data field Shall\nreturn the null terminated ASCII text string \"Unsupported Code\".Table 6.64 Country Info Data Block (CIDB)\nOffset Field Size\n0\nCountry CodeFirst character of the Alpha-2 Country Code received in the corresponding\nGet_Country_Info Message .\n1Second character of the Alpha-2 Country Code received in the corresponding\nGet_Country_Info Message\n2…3 Reserved Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Country Specific Data 1…22 bytes of content defined by the country’s authority.Extended Header",
    "full_path": "4 Country Specific Data 1…22 bytes of content defined by the country’s authority.Extended Header",
    "page": 238,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Data Size = 4-26\nCIDB\n(4-26 byte Data Block)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2396.5.13 Sink_Capabilities_Extended Message\nThe Sink_Capabilities_Extended Message Shall be sent in response to a Get_Sink_Cap_Extended Message . The\nSink_Capabilities_Extended Message enables a Sink or a DRP to inform the Source about its Capabilities as a Sink .\nThe Sink_Capabilities_Extended Message Shall return a 24-byte Sink Capabilities Extended Data Block (SKEDB)\nwhose format Shall be as shown in Figure 6.52, \"Sink_Capabilities_Extended Message\" and Table 6.65, \"Sink\nCapabilities Extended Data Block (SKEDB)\" .\nFigure 6.52 Sink_Capabilities_Extended Message\nTable 6.65 Sink Capabilities Extended Data Block (SKEDB)\nOffset (Byte) FieldSize\n(Bytes)Type Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "VID 2 Numeric Vendor ID (assigned by the USB-IF)",
    "full_path": "0 VID 2 Numeric Vendor ID (assigned by the USB-IF)",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "PID 2 Numeric Product ID (assigned by the manufacturer)",
    "full_path": "2 PID 2 Numeric Product ID (assigned by the manufacturer)",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "XID 4 Numeric Value provided by the USB-IF assigned to the product",
    "full_path": "4 XID 4 Numeric Value provided by the USB-IF assigned to the product",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "FW Version 1 Numeric Firmware version number",
    "full_path": "8 FW Version 1 Numeric Firmware version number",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "HW Version 1 Numeric Hardware version number",
    "full_path": "9 HW Version 1 Numeric Hardware version number",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "SKEDB Version 1 NumericSKEDB Version (not the specification Version):",
    "full_path": "10 SKEDB Version 1 NumericSKEDB Version (not the specification Version):",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Version 1.0 = 1\nValues 0 and 2-255 are Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Load Step 1 Bit FieldBit Description",
    "full_path": "11 Load Step 1 Bit FieldBit Description",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "0...100b: 150mA/μs Load Step (default)\n01b: 500mA/μs Load Step\n11b…10b: Reserved and Shall Not be used.\n2...7 Reserved and Shall be set to zero\n12Sink Load\nCharacteristics2 Bit FieldBit Description\n0...4Percent overload in 10% increments.\nValues higher than 25 (11001b) are clipped to\n250%. 00000b is the default.\n5...10 Overload period in 20ms when bits 0...4 non-zero.\n1...14Duty cycle in 5% increments when bits 0...4 are\nnon-zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Can tolerate VBUS voltage droop",
    "full_path": "15 Can tolerate VBUS voltage droop",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "Compliance 1 Bit FieldBit Description",
    "full_path": "14 Compliance 1 Bit FieldBit Description",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Requires LPS Source when set",
    "full_path": "0 Requires LPS Source when set",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Requires PS1 Source when set",
    "full_path": "1 Requires PS1 Source when set",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Requires PS2 Source when set",
    "full_path": "2 Requires PS2 Source when set",
    "page": 239,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "3...7 Reserved and Shall be set to zeroExtended Header\nData Size = 24\nSKEDB\n(24 byte Data Block)\nPage 240 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.13.1 Vendor ID (VID) Field\nThe VID field Shall contain the 16-bit Vendor ID (VID) assigned to the Sink 's vendor by the USB-IF. If the vendor\ndoes not have a VID, the VID field Shall be set to 0xFFFF. Device s that have a USB data interface Shall report the\nsame VID as the idVendor in the Standard Device Descriptor (see [USB 2.0] and [USB 3.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.2",
    "title": "Product ID (PID) Field",
    "full_path": "6.5.13.2 Product ID (PID) Field",
    "page": 240,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The PID field Shall contain the 16-bit Product ID (PID) assigned by the Sink 's vendor. Device s that have a USB data\ninterface Shall report the same PID as the idProduct in the Standard Device Descriptor (see [USB 2.0] and [USB\n3.2] ).15 Touch Temp 1 ValueTemperature conforms to:\n0 = Not applicable\n1 = [IEC 60950-1] (default)\n2 = [IEC 62368-1] TS1\n3 = [IEC 62368-1] TS2\nNote: All other values Reserved"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "Battery Info 1 ByteUpper Nibble = Number of Hot Swappable Battery Slot s (0…4)",
    "full_path": "16 Battery Info 1 ByteUpper Nibble = Number of Hot Swappable Battery Slot s (0…4)",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Lower Nibble = Number of Fixed Batteries (0…4)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "17",
    "title": "Sink Modes 1 Bit FieldBit Description",
    "full_path": "17 Sink Modes 1 Bit FieldBit Description",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "PPS charging supported",
    "full_path": "0 PPS charging supported",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "VBUS powered",
    "full_path": "1 VBUS powered",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "AC Supply powered",
    "full_path": "2 AC Supply powered",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Battery powered",
    "full_path": "3 Battery powered",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Battery essentially unlimited",
    "full_path": "4 Battery essentially unlimited",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "AVS Support",
    "full_path": "5 AVS Support",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "6...7 Reserved and Shall be set to zero\n18SPR Sink Minimum\nPDP1 ByteBit Description\n0...6The PDP of the Source that the Sink requires to\noperate at its lowest functionality without\nconsuming power from its Battery if it has one."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Reserved and Shall be set to zero",
    "full_path": "7 Reserved and Shall be set to zero",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "19SPR Sink\nOperational PDP1 ByteBit Description\n0...6The PDP of the Source that the Sink requires to\noperate at its normal functionality."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Reserved and Shall be set to zero",
    "full_path": "7 Reserved and Shall be set to zero",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "20SPR Sink Maximum\nPDP1 ByteBit Description\n0...6 The maximum PDP the Sink will ever request."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Reserved and Shall be set to zero",
    "full_path": "7 Reserved and Shall be set to zero",
    "page": 240,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "21EPR Sink Minimum\nPDP1 ByteThe PDP of the Source that the EPR Sink requires to operate at\nits lowest functionality without consuming power from its\nBattery if it has one.\n22EPR Sink\nOperational PDP1 ByteThe PDP of the Source that the EPR Sink requires to operate at\nits normal functionality.\n23EPR Sink Maximum\nPDP1 Byte The maximum PDP that the EPR Sink will ever request.Table 6.65 Sink Capabilities Extended Data Block (SKEDB) (Continued)\nOffset (Byte) FieldSize\n(Bytes)Type Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2416.5.13.3 XID Field\nThe XID field Shall contain the 32-bit XID provided by the USB-IF to the vendor who in turns assigns it to a product.\nIf the vendor does not have an XID, then it Shall return zero in this field (see [USB 2.0] and [USB 3.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.4",
    "title": "Firmware Version Field",
    "full_path": "6.5.13.4 Firmware Version Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The FW Version field Shall contain an 8-bit firmware version number assigned to the device by the vendor."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.5",
    "title": "Hardware Version Field",
    "full_path": "6.5.13.5 Hardware Version Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The HW Version field Shall contain an 8-bit hardware version number assigned to the device by the vendor."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.6",
    "title": "SKEDB Version Field",
    "full_path": "6.5.13.6 SKEDB Version Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The SKEDB Version field contains the version level of the SKEDB. Currently only Version 1 is defined."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.7",
    "title": "Load Step Field",
    "full_path": "6.5.13.7 Load Step Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The Load Step field contains bits indicating the Load Step Slew Rate and Magnitude that this Sink prefers. See\nSection 7.1.12.1, \"Voltage Regulation Field\" for further details."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.8",
    "title": "Sink Load Characteristics Field",
    "full_path": "6.5.13.8 Sink Load Characteristics Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The Sink Shall report its preferred load characteristics in the Sink Load Characteristics field. Regardless of this\nvalue, in operation its load Shall Not exceed the Capabilities reported in the Source_Capabilities_Extended Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.9",
    "title": "Compliance Field",
    "full_path": "6.5.13.9 Compliance Field",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The Compliance field Shall contain the types of Source s the Sink has been tested and certified with (see Section\n7.1.12.3, \"Compliance Field\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.10",
    "title": "Touch Temp",
    "full_path": "6.5.13.10 Touch Temp",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The Touch Temp field Shall report the IEC standard used to determine the surface temperature of the Sink 's\nenclosure. Safety limits for the Sink 's touch temperature are set in applicable product safety standards (e.g., [IEC\n60950-1] or [IEC 62368-1] ). The Sink May report when its touch temperature performance conforms to the TS1\nor TS2 limits described in [IEC 62368-1] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.11",
    "title": "Battery Info",
    "full_path": "6.5.13.11 Battery Info",
    "page": 241,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The Battery Info field Shall report the number of Fixed Batteries and Hot Swappable Battery slots the Sink\nsupports. This field Shall independently report the number of Battery Slot s and the number of Fixed Batteries . The\ninformation reported in the Battery Info field Shall match that reported in the Number of Batteries/Battery Slots\nfield of the Source_Capabilities_Extended Message .\nA Sink Shall have no more than 4 Fixed Batteries and no more than 4 Battery Slot s.\nFixed Batteries Shall be numbered consecutively from 0 to 3. The number assigned to a given Fixed Battery Shall\nNot change between Attach and Detach .\nBattery Slot s Shall be numbered consecutively from 4 to 7. The number assigned to a given Battery Slot Shall Not\nchange between Attach and Detach .\nPage 242 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.13.12 Sink Modes\nThe Sink Modes bit field Shall identify the charging Capabilities and the power sources that can be used by the Sink .\nWhen bit 0 is set, the Sink has the ability to use a PPS Source for fast charging.\nThe source of power a Sink can use:\n When bit 1 is set, the Sink has the ability to be sourced by VBUS.\n When bit 2 is set, the Sink has the ability to be sourced by an AC Supply .\n When bit 3 is set, the Sink has the ability to be sourced by a Battery .\n When bit 4 is set, the Sink has the ability to be sourced by a Battery with essentially infinite energy (e.g.,\na car battery).\nBits 1-4 May be set independently of one another. The combination indicates what sources of power the Sink can\nutilize. For example, some Sink s are only powered by a Battery (e.g., an automobile battery) rather than the more\ncommon AC Supply and some Sink s are only powered from VBUS or VCONN .\nWhen bit 5 is set, the Sink has the ability to support AVS."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.13",
    "title": "SPR Sink Minimum PDP",
    "full_path": "6.5.13.13 SPR Sink Minimum PDP",
    "page": 242,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The SPR Sink Minimum PDP field Shall contain the minimum power Source PDP needed by the Sink , rounded up\nto the next integer, to operate at its lowest level of functionality without requiring power from its Battery if present.\nBattery charging may be an opportunistic feature, however this PDP Should be designed for basic functionality, not\nfor charging. The SPR Sink Minimum PDP field Shall be less than or equal to the SPR Sink Operational PDP . The\nvalue is used by the Source to determine whether or not it has sufficient power to minimally support the Attached\nSink . If the Sink is EPR Capable and is unable to operate at PDPs less than 100W, it Shall set this field to the\nminimum power to sustain PD communication.\nIf the Sink is self-powered, such that it doesn't need power from a Source , then it Shall set this field to zero.\nThe SPR Sink Minimum PDP is used to indicate to Shared Capacity Charger s the power that Should be delivered\nto the Sink to guarantee at least basic functionality for the end user.\nPossible examples of SPR Sink Minimum PDP could be:\n The minimum power a wireless Charger would require in order to detect, and deliver the minimum\nrequired amount of power to the attached device.\n The power required to have basic functionality by a Battery less Sink ,\n On a device with a Battery , it can power the minimum functionality of the device"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.14",
    "title": "SPR Sink Operational PDP",
    "full_path": "6.5.13.14 SPR Sink Operational PDP",
    "page": 242,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The SPR Sink Operational PDP field Shall contain the Source PDP that the manufacturer recommends for the\nnormal functionality of the Sink , rounded up to the next integer. This corresponds to the PDP Rating of Source s that\nthe Sink is designed to operate with (See Section 10.3.2, \"Normative Sink Rules\" ). The SPR Sink Operational PDP\nfield Shall be sufficient to operate all the Sink 's functional modes normally AND charge the Sink 's Battery if present.\nFor Sink s with a Battery (s), the SPR Sink Operational PDP field Shall correspond to the PDP Rating of the Charger\nshipped with the Sink or the recommended Charger 's PDP Rating . If the Sink is EPR Capable and is unable to operate\nat PDPs less than 100W, it Shall set the SPR Sink Minimum PDP field to the minimum power to sustain PD\ncommunication.\nIf the Sink is self-powered, such that it doesn't need power from a Source , then it Shall set this field to zero.\nThe SPR Sink Operational PDP is used to indicate to Shared Capacity Charger s that at this power level the user is\nnot expected to receive any performance warning related to the power being supplied to the Sink .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2436.5.13.15 SPR Sink Maximum PDP\nThe SPR Sink Maximum PDP field Shall contain the highest PDP the Sink will ever request under any operating\ncondition, rounded up to the next integer, including charging its Battery if present. The SPR Sink Maximum PDP\nfield Shall Not be less than the SPR Sink Operational PDP field, but May be the same. The value is used by the\nSource to determine the maximum amount of power it has to budget for the Attached Sink . If the Sink is EPR Capable\nand is unable to operate at PDPs less than 100W, it Shall set this field to the minimum power to sustain PD\ncommunication.\nIf the Sink is self-powered, such that it doesn't need power from a Source , then it Shall set this field to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.16",
    "title": "EPR Sink Minimum PDP",
    "full_path": "6.5.13.16 EPR Sink Minimum PDP",
    "page": 243,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The EPR Sink Minimum PDP field Shall contain the Source PDP needed by an EPR Sink , rounded up to the next\ninteger, to operate at its lowest level of functionality without requiring power from its Battery , if present. Battery\ncharging may be an opportunistic feature, however this PDP Should be designed for basic functionality, not for\ncharging. The EPR Sink Minimum PDP field Shall be less than or equal to the EPR Sink Operational PDP field\nvalue. The value is used by the Source to determine whether or not it has sufficient power to minimally support the\nAttached Sink . If the Sink is not EPR Capable , or if the Sink is self-powered, such that it doesn't need power from a\nSource , this field Shall be set to zero.\nThe EPR Sink Minimum PDP is used to indicate to Shared Capacity Charger s the power that Should be delivered\nto the Sink to guarantee at least basic functionality for the end user.\nPossible examples of EPR Sink Minimum PDP could be:\n The power required to have basic functionality by a Battery less Sink ,\n On a device with a Battery , it can power the minimum functionality of the device.\nNote: EPR Sink Minimum PDP can be the same as its SPR Sink Minimum PDP ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.17",
    "title": "EPR Sink Operational PDP",
    "full_path": "6.5.13.17 EPR Sink Operational PDP",
    "page": 243,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The EPR Sink Operational PDP field Shall contain the Source PDP that the manufacturer recommends for the\nnormal functionality of the Sink , rounded up to the next integer. This corresponds to the PDP Rating of EPR Source s\nthat the Sink is designed to operate with (See Section 10.3.2, \"Normative Sink Rules\" ). The EPR Sink Operational\nPDP Shall be sufficient to operate all the Sink 's functional modes normally AND charge the Sink 's Battery if present.\nFor Sink s with a Battery (s), it Shall correspond to the PDP Rating of the Charger shipped with the EPR Sink or the\nrecommended Charger 's PDP Rating . If the Sink is not EPR Capable, or if the Sink is self-powered, such that it doesn't\nneed power from a Source , this field Shall be set to zero.\nThe EPR Sink Operational PDP is used to indicate to Shared Capacity Charger s that at this power level the user is\nnot expected to receive any performance warning related to the power being supplied to the Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.13.18",
    "title": "EPR Sink Maximum PDP",
    "full_path": "6.5.13.18 EPR Sink Maximum PDP",
    "page": 243,
    "level": 4,
    "parent_id": "6.5.13",
    "tags": [],
    "content": "The EPR Sink Maximum PDP field Shall be highest PDP the EPR Sink will ever request under any operating\ncondition, rounded up to the next integer, including charging its Battery if present. The EPR Sink Maximum PDP\nfield Shall Not be less than the EPR Sink Operational PDP , but May be the same. The value is used by the Source\nto determine the maximum amount of power it has to budget for the Attached Sink . If the Sink is not EPR Capable ,\nor if the Sink is self-powered, such that it doesn't need power from a Source , this field Shall be set to zero.\nPage 244 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.14 Extended_Control Message\nThe Extended_Control Message extends the Control Message space. The Extended_Control Message includes one\nbyte of data. The Extended_Control Message Shall be as shown in Figure 6.53, \"Extended_Control Message\" and\nTable 6.66, \"Extended Control Data Block (ECDB)\" .\nFigure 6.53 Extended_Control Message\nThe Extended_Control Message types are specified in the Type field of the ECDB and are listed in Table 6.67,\n\"Extended Control Message Types\" . The Sent by column indicates entities which May send the given Message\n(Source , Sink or Cable Plug ); entities not listed Shall Not issue the corresponding Message . The \"Valid Start of\nPacket\" column indicates the Message s which Shall only be issued in SOP Packets."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.14.1",
    "title": "EPR_Get_Source_Cap Message",
    "full_path": "6.5.14.1 EPR_Get_Source_Cap Message",
    "page": 244,
    "level": 4,
    "parent_id": "6.5.14",
    "tags": [],
    "content": "The EPR_Get_Source_Cap (EPR Get Source Capabilities ) Message Shall only be sent by a Port capable of operating\nas a Sink and that supports EPR Mode to request the Source Capabilities and Dual-Role Power capability of its Port\nPartner . A Port that can operate as an EPR Source Shall respond by returning an EPR_Source_Capabilities Message\n(see Section 6.5.15.2, \"EPR_Source_Capabilities Message\" ). A Port that does not support EPR Mode as a Source Shall\nreturn the Not_Supported Message .\nAn EPR Capable Sink Port that is operating in SPR Mode Shall treat the EPR_Source_Capabilities Message as\ninformational only and Shall Not respond with an EPR_Request Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.14.2",
    "title": "EPR_Get_Sink_Cap Message",
    "full_path": "6.5.14.2 EPR_Get_Sink_Cap Message",
    "page": 244,
    "level": 4,
    "parent_id": "6.5.14",
    "tags": [],
    "content": "The EPR_Get_Sink_Cap (EPR Get Sink Capabilities ) Message Shall only be sent by a Port capable of operating as a\nSource and that supports EPR Mode to request the Sink Capabilities and Dual-Role Power capability of its Port\nPartner . A Port that is EPR Capable operating as a Sink Shall respond by returning an EPR_Sink_Capabilities\nMessage (see Section 6.5.15.3, \"EPR_Sink_Capabilities Message\" ). A Port that does not support EPR Mode as a Sink\nShall return the Not_Supported Message .Table 6.66 Extended Control Data Block (ECDB)\nOffset Field Value Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Type Unsigned Int Extended Control Message Type",
    "full_path": "0 Type Unsigned Int Extended Control Message Type",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Data Byte Shall be set to zero when not used.",
    "full_path": "1 Data Byte Shall be set to zero when not used.",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 6.67 Extended Control Message Types\nType Data Message Type Sent by DescriptionValid Start\nof Packet"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "ReservedAll values not explicitly defined are",
    "full_path": "0 ReservedAll values not explicitly defined are",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Reserved and Shall Not be used."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Not used EPR_Get_Source_Cap Sink or DRP See Section 6.5.14.1 SOP only",
    "full_path": "1 Not used EPR_Get_Source_Cap Sink or DRP See Section 6.5.14.1 SOP only",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Not used EPR_Get_Sink_Cap Source or DRP See Section 6.5.14.2 SOP only",
    "full_path": "2 Not used EPR_Get_Sink_Cap Source or DRP See Section 6.5.14.2 SOP only",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Not used EPR_KeepAlive Sink See Section 6.5.14.3 SOP only",
    "full_path": "3 Not used EPR_KeepAlive Sink See Section 6.5.14.3 SOP only",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Not Used EPR_KeepAlive_Ack Source See Section 6.5.14.4 SOP only",
    "full_path": "4 Not Used EPR_KeepAlive_Ack Source See Section 6.5.14.4 SOP only",
    "page": 244,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "5...255Reserved All values not explicitly defined are\nReserved and Shall Not be used.Extended Header\nData Size = 2\nECDB\n(2-byte block)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2456.5.14.3 EPR_KeepAlive Message\nThe EPR_KeepAlive Message May be sent by a Sink operating in EPR Mode to meet the requirement for periodic\ntraffic. The Source operating on EPR Mode responds by returning an EPR_KeepAlive_Ack Message to the Sink . See\nSection 6.4.9, \"EPR_Request Message\" for additional information."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.14.4",
    "title": "EPR_KeepAlive_Ack Message",
    "full_path": "6.5.14.4 EPR_KeepAlive_Ack Message",
    "page": 245,
    "level": 4,
    "parent_id": "6.5.14",
    "tags": [],
    "content": "The EPR_KeepAlive_Ack Message Shall be sent by a Source operating in EPR Mode in response to an EPR_KeepAlive\nMessage . See Section 6.4.9, \"EPR_Request Message\" for additional information."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.15",
    "title": "EPR Capabilities Message",
    "full_path": "6.5.15 EPR Capabilities Message",
    "page": 245,
    "level": 3,
    "parent_id": "6.5",
    "tags": [],
    "content": "The EPR Capabilities Message is an Extended Capabilities Message made of Power Data Object s (PDO) defined in\nSection 6.4.1, \"Capabilities Message\" . It is used to form EPR_Source_Capabilities Message s and\nEPR_Sink_Capabilities Message s. Source s expose their EPR power Capabilities by sending an\nEPR_Source_Capabilities Message . Sink s expose their EPR power requirements by returning an\nEPR_Sink_Capabilities Message when requested. Both are composed of a number of 32-bit Power Data Object s (see\nTable 6.7, \"Power Data Object\" ).\nAn EPR Capabilities Message Shall have a 5V Fixed Supply PDO containing the sending Port 's information in the first\nobject position followed by up to 10 additional PDOs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.15.1",
    "title": "EPR Capabilities Message Construction",
    "full_path": "6.5.15.1 EPR Capabilities Message Construction",
    "page": 245,
    "level": 4,
    "parent_id": "6.5.15",
    "tags": [],
    "content": "The EPR Capabilities Message s (EPR_Source_Capabilities and EPR_Sink_Capabilities ) are Extended Message s with\nthe first seven positions filled with the same SPR (A)PDO s returned by the SPR Capabilities Message s\n(Source_Capabilities and Sink_Capabilities ) followed by the EPR (A)PDO s starting in the eighth position. See\nFigure 6.54, \"Mapping SPR Capabilities to EPR Capabilities\" .\nFigure 6.54 Mapping SPR Capabilities to EPR Capabilities\nPower Data Object s in the EPR Capabilities Message s Shall be sent in the following order:\n1) The SPR (A)PDO s as reported in the SPR Capabilities Message . The Number of Data Objects field in the\nMessage Header of the EPR Capabilities Message is the same as the Number of Data Objects field in the\nMessage Header of the SPR Capabilities Message .\n2) If the SPR Capabilities Message contains fewer than 7 PDOs, the unused Data Object s Shall be zero filled.\n3) The EPR (A)PDO s as defined in Section 6.4.1, \"Capabilities Message\" Shall start at Data Object position 8\nand Shall be sent in the following order:\na) Fixed Supply PDOs that offer 28V, 36V or 48V, if present, Shall be sent in voltage order; lowest to\nhighest.\nb) One EPR AVS APDO Shall be sent.Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bytes",
    "full_path": "2 bytes",
    "page": 245,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Extended Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "bytesSPR PDO",
    "full_path": "4 bytesSPR PDO",
    "page": 245,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1SPR PDO\n2SPR PDO\n3SPR PDO\n4SPR PDO\n5SPR PDO\n6SPR PDO\n7\nEPR PDO\n8EPR PDO\n9SPR PDO\n1SPR PDO\n2SPR PDO\n3SPR PDO\n4SPR PDO\n5SPR PDO\n6SPR PDO\n7PDOs > 20V2\n001b 010b 011b 100b 101b 110b 111b 1000b 1001bCapabilities\nEPR Capabilities001b 010b 011b 100b 101b 110b 111b\nEPR PDO\n10EPR PDO\n111010b 1011bPDOs 20V1\n1)See Section 10 “Power Rules” for rules, on which SPR (A)PDOs are allowed to be used for a given PDP .\n2)See Section 10 “Power Rules” for rules, on which EPR (A)PDOs are allowed be used for a given PDP .\nPage 246 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.5.15.2 EPR_Source_Capabilities Message\nThe EPR_Source_Capabilities is an EPR Capabilities Message containing a list of Power Data Object s that the EPR\nSource is capable of supplying. It is sent by an EPR Source in order to convey its Capabilities to a Sink . An EPR Source\nShall send the EPR_Source_Capabilities Message :\n When entering EPR Mode\n While in EPR Mode s when its Capabilities change\n In response to an EPR_Get_Source_Cap Message\n After a Soft Reset while in EPR Mode\nAn EPR Sink operating in EPR Mode Shall evaluate every EPR_Source_Capabilities Message it receives and Shall\nrespond with a EPR_Request Message . If its power consumption exceeds the Source Capabilities , it Shall Re-\nnegotiate so as not to exceed the Source 's most recently Advertised Source Capabilities .\nWhile operating in SPR Mode , an EPR Sink receiving an EPR_Source_Capabilities Message in response to an\nEPR_Get_Source_Cap Message s Shall Not respond with an EPR_Request Message .\nThe (A)PDO s in an EPR_Source_Capabilities Message Shall only be requested using the EPR_Request Message and\nonly when in EPR Mode .\nWhen Source wants to exit EPR Mode , if not already in power contract with an SPR (A)PDO , it Shall send an\nEPR_Source_Capabilities Message with no EPR (A)PDO s (i.e. seven SPR (A)PDO s including any zero padded ones).\nSee Figure 6.55, \"EPR_Source_Capabilities message with no EPR PDOs\" .\nFigure 6.55 EPR_Source_Capabilities message with no EPR PDOs"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.5.15.3",
    "title": "EPR_Sink_Capabilities Message",
    "full_path": "6.5.15.3 EPR_Sink_Capabilities Message",
    "page": 246,
    "level": 4,
    "parent_id": "6.5.15",
    "tags": [],
    "content": "The EPR_Sink_Capabilities is an EPR Capabilities Message that contains a list of Power Data Object s that the EPR\nSink requires to operate. It is sent by an EPR Sink in order to convey its power requirements to an EPR Source . The\nEPR Sink Shall only send the EPR_Sink_Capabilities Message in response to an EPR_Get_Sink_Cap Message .Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bytes",
    "full_path": "2 bytes",
    "page": 246,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Extended Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "bytesSPR PDO",
    "full_path": "4 bytesSPR PDO",
    "page": 246,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1SPR PDO\n2SPR PDO\n3SPR PDO\n4SPR PDO\n5SPR PDO\n6SPR PDO\n7\nSPR PDO\n1SPR PDO\n2SPR PDO\n3SPR PDO\n4SPR PDO\n5SPR PDO\n6SPR PDO\n7001b 010b 011b 100b 101b 110b 111bCapabilities\nEPR Capabilities001b 010b 011b 100b 101b 110b 111b\nPDOs 20V1\n1)See Section 10 “Power Rules” for rules, on which SPR (A)PDOs are allowed to be used for a given PDP .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2476.5.16 Vendor_Defined_Extended Message\nThe Vendor_Defined_Extended Message (VDEM ) is provided to allow vendors to exchange information outside of\nthat defined by this specification using the Extended Message format.\nA Vendor_Defined_Extended Message Shall consist of at least one Vendor Data Object , the VDM Header , and May\ncontain up to a maximum of 256 additional data bytes.\nTo ensure vendor uniqueness of Vendor_Defined_Extended Message s, all Vendor_Defined_Extended Message s\nShall contain a Valid USB Standard or Vendor ID (SVID ) allocated by USB-IF in the VDM Header .\nA VDEM does not define any structure and Message s May be created in any manner that the vendor chooses.\nVendor_Defined_Extended Message s Shall Not be used for direct power Negotiation . They May however be used\nto alter Local Policy , affecting what is offered or consumed via the normal PD Message s. For example, a\nVendor_Defined_Extended Message could be used to enable the Source to offer additional power via a\nSource_Capabilities Message .\nVendor_Defined_Extended Message s Shall Not be used where equivalent functionality is contained in the PD\nSpecification e.g., authentication or firmware update.\nThe Message format Shall be as shown in Figure 6.56, \"Vendor_Defined_Extended Message\" .\nFigure 6.56 Vendor_Defined_Extended Message\nThe VDM Header Shall be the first 4-bytes in a Vendor Defined Extended Message . The VDM Header provides\nCommand space to allow vendors to customize Message s for their own purposes.\nThe VDM Header in the VDEM Shall follow the Unstructured VDM Header format as defined in Section 6.4.4.1,\n\"Unstructured VDM\" .\nVDEM s Shall only be sent and received after an Explicit Contract has been established.\nA VDEM AMS Shall Not interrupt any other PD AMS .\nThe VDEM does not define the contents of bits B14…0 in the VDM Header . Their definition and use are the sole\nresponsibility of the vendor indicated by the SVID . The Port Partner s and Cable Plug s Shall exit any states entered\nusing a VDEM according to the rules defined in Section 6.4.4.3.4, \"Enter Mode Command\" .\nThe following rules apply to the use of VDEM Message s:\n VDEM s Shall Not be initiated or responded to under any other circumstances than the following:\n VDEM s Shall only be used when an Explicit Contract is in place.\n Prior to establishing an Explicit Contract VDEM s Shall Not be sent and Shall be Ignored if received.\n Cable Plug s Shall Not initiate VDEM s.Extended Header\nData Size = 4...260\nVDM Header\nVDEDB\n(0...256-byte Data Block)\nPage 248 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 VDEM s Shall only be used during Modal Operation in the context of an Active Mode i.e., only after the\nUFP has Ack'ed the Enter Mode Command can VDEM s be sent or received. The Active Mode and the\nassociated VDEM s Shall use the same SVID .\n VDEM s May be used with SOP* Packet s.\n When a DFP or UFP does not support VDEM s or does not recognize the VID it Shall return a\nNot_Supported Message .\nNote: Usage of VDEM s with Chunking is not recommended since this is less efficient than using Unstructured\nVDM s.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2496.6 Timers\nAll the following timers are defined in terms of bits on the bus regardless of where they are implemented in terms\nof the logical architecture. This is to ensure a fixed reference for the starting and stopping of timers. It is left to the\nimplementer to ensure that this timing is observed in a real system."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.1",
    "title": "CRCReceiveTimer",
    "full_path": "6.6.1 CRCReceiveTimer",
    "page": 249,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "The CRCReceiveTimer Shall be used by the sender's Protocol Layer to ensure that a Message has not been lost.\nFailure to receive an acknowledgment of a Message (a GoodCRC Message ) whether caused by a bad GoodCRC\nMessage on the receiving end or by a garbled Message within tReceive is detected when the CRCReceiveTimer\nexpires.\nThe sender's Protocol Layer response when a CRCReceiveTimer expires Shall be to retry nRetryCount times.\nNote: Cable Plug s do not retry Message s and large Extended Message s that are not Chunked are not retried (see\nSection 6.7.2, \"Retry Counter\" ).\nSending of the Preamble corresponding to the retried Message Shall start within tRetry of the CRCReceiveTimer\nexpiring.\nThe CRCReceiveTimer Shall be started when the last bit of the Message EOP has been transmitted by the PHY\nLayer . The CRCReceiveTimer Shall be stopped when the last bit of the EOP corresponding to the GoodCRC Message\nhas been received by the PHY Layer .\nThe Protocol Layer receiving a Message Shall respond with a GoodCRC Message within tTransmit in order to\nensure that the sender's CRCReceiveTimer does not expire. The tTransmit time Shall be measured from when the\nlast bit of the Message EOP has been received by the PHY Layer until the first bit of the Preamble of the GoodCRC\nMessage has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.2",
    "title": "SenderResponseTimer",
    "full_path": "6.6.2 SenderResponseTimer",
    "page": 249,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "The SenderResponseTimer Shall be used by the sender's Policy Engine to ensure that a Message requesting a\nresponse (e.g., Get_Source_Cap Message ) is responded to within a bounded time of tSenderResponse . Failure to\nreceive the expected response is detected when the SenderResponseTimer expires.\nFor Extended Message s received as Chunk s, the SenderResponseTimer will also be started and stopped by the\nChunking Rx State Machine. See Section 8.3.3.1.1, \"SenderResponseTimer State Diagram\" for more details of the\nSenderResponseTimer operation.\nThe Policy Engine 's response when the SenderResponseTimer expires Shall be dependent on the Message sent\n(see Section 8.3, \"Policy Engine\" ).\nThe SenderResponseTimer Shall be started from the time the last bit of the GoodCRC Message EOP , corresponding\nto the Message requesting a response, has been received by the PHY Layer .\nThe SenderResponseTimer Shall be stopped when the last bit of the EOP of the GoodCRC Message , corresponding\nto the expected response Message , has been transmitted by the PHY Layer .\nThe receiver of a Message requiring a response Shall respond within tReceiverResponse in order to ensure that\nthe sender's SenderResponseTimer does not expire.\nThe tReceiverResponse time Shall be measured from the time the last bit of the GoodCRC Message EOP ,\ncorresponding to the expected request Message , has been transmitted by the PHY Layer until the first bit of the\nresponse Message Preamble has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.3",
    "title": "Capability Timers",
    "full_path": "6.6.3 Capability Timers",
    "page": 249,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "Source s and Sink s use Capability Timers to determine Attachment of a PD Capable device. By periodically sending\nor requesting Capabilities , it is possible to determine PD device Attachment when a response is received.\nPage 250 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.6.3.1 SourceCapabilityTimer\nPrior to the First Explicit Contract a Source Shall use the SourceCapabilityTimer to periodically send out a\nSource_Capabilities Message every tTypeCSendSourceCap while:\n The Port is Attached .\n The Source is not in an active connection with a PD Sink Port .\nWhenever there is a SourceCapabilityTimer timeout the Source Shall send a Source_Capabilities Message . It\nShall then re-initialize and restart the SourceCapabilityTimer . The SourceCapabilityTimer Shall be stopped\nwhen the last bit of the EOP corresponding to the GoodCRC Message has been received by the PHY Layer since a PD\nconnection has been established. At this point, the Source waits for a Request Message or a response timeout.\nNote: The Source can also stop sending Source_Capabilities Message after nCapsCount Message s have been\nsent without a GoodCRC Message response (see Section 6.7.4, \"Capabilities Counter\" ).\nSee Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" for more details of when Source_Capabilities\nMessage s are transmitted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.3.2",
    "title": "SinkWaitCapTimer",
    "full_path": "6.6.3.2 SinkWaitCapTimer",
    "page": 250,
    "level": 4,
    "parent_id": "6.6.3",
    "tags": [],
    "content": "The Sink Shall support the SinkWaitCapTimer .\nWhile in a Default Contract or an Implicit Contract when a Sink observes an absence of Source_Capabilities\nMessage s, after VBUS is present, for a duration of tTypeCSinkWaitCap the Sink May issue Hard Reset Signaling in\norder to restart the sending of Source_Capabilities Message s by the Source (see Section 6.7.4, \"Capabilities\nCounter\" ) or continue to operate at USB Type-C current.\nWhen a Sink , entering EPR Mode , observes an absence of EPR_Source_Capabilities Message s, after the GoodCRC\nMessage acknowledging the EPR_Mode Message with the Action field set to 3 ( Enter Succeeded ), for a duration of\ntTypeCSinkWaitCap the Sink Shall issue Hard Reset Signaling in order to exit EPR Mode (see Section 6.4.10,\n\"EPR_Mode Message\" ).\nWhen a Sink , exiting EPR Mode , observes an absence of Source_Capabilities Message s, after the GoodCRC Message\nacknowledging the EPR_Mode Message with the Action field set to 5 ( Exit ), for a duration of tTypeCSinkWaitCap\nthe Sink Shall issue Hard Reset Signaling in order to restart the sending of Source_Capabilities Message s by the\nSource (see Section 6.7.4, \"Capabilities Counter\" ).\nSee Section 8.3.3.3, \"Policy Engine Sink Port State Diagram\" for more details of when the SinkWaitCapTimer is run."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.3.3",
    "title": "tFirstSourceCap",
    "full_path": "6.6.3.3 tFirstSourceCap",
    "page": 250,
    "level": 4,
    "parent_id": "6.6.3",
    "tags": [],
    "content": "After Port Partner s are Attached or after a Hard Reset or after a Power Role Swap or after a Fast Role Swap a Source\nShall send its first Source_Capabilities Message within tFirstSourceCap of VBUS reaching vSafe5V .\nAfter Soft Reset , a Source Shall send its first Source Capabilities Message within tFirstSourceCap after last bit of the\nGoodCRC Message EOP corresponding to Accept Message .\nThis ensures that the Sink receives a Source Capabilities Message before the Sink 's SinkWaitCapTimer expires.\nA Source entering EPR Mode Shall send its first EPR_Source_Capabilities Message within tFirstSourceCap of the\nGoodCRC Message acknowledging the EPR_Mode Message with the Action field set to 3 ( Enter Succeeded ).\nA Source exiting EPR Mode Shall send its first Source_Capabilities Message within tFirstSourceCap of the\nGoodCRC Message acknowledging the EPR_Mode Message with the Action field set to 5 ( Exit ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2516.6.4 Wait Timers and Times"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.1",
    "title": "SinkRequestTimer",
    "full_path": "6.6.4.1 SinkRequestTimer",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The SinkRequestTimer is used to ensure that the time before the next Sink Request Message , after a Wait Message\nhas been received from the Source in response to a Sink Request Message , is a minimum of tSinkRequest min (see\nSection 6.3.12, \"Wait Message\" ).\nThe SinkRequestTimer Shall be started when the EOP of a Wait Message has been received and Shall be stopped\nif any other Message is received or during a Hard Reset .\nThe Sink Shall wait at least tSinkRequest , after receiving the EOP of a Wait Message sent in response to a Sink\nRequest Message , before sending a new Request Message . Whenever there is a SinkRequestTimer timeout the Sink\nMay send a Request Message . It Shall then re-initialize and restart the SinkRequestTimer."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.2",
    "title": "tPRSwapWait",
    "full_path": "6.6.4.2 tPRSwapWait",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time before the next PR_Swap Message , after a Wait Message has been received in response to a PR_Swap\nMessage is a minimum of tPRSwapWait min (see Section 6.3.12, \"Wait Message\" ). The Port Shall wait at least\ntPRSwapWait after receiving the EOP of a Wait Message sent in response to a PR_Swap Message , before sending a\nnew PR_Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.3",
    "title": "tDRSwapWait",
    "full_path": "6.6.4.3 tDRSwapWait",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time before the next DR_Swap Message , after a Wait Message has been received in response to a DR_Swap\nMessage is a minimum of tDRSwapWait min (see Section 6.3.12, \"Wait Message\" ). The Port Shall wait at least\ntDRSwapWait after receiving the EOP of a Wait Message sent in response to a DR_Swap Message , before sending\na new DR_Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.4",
    "title": "tV CONN SwapWait",
    "full_path": "6.6.4.4 tV CONN SwapWait",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time before the next VCONN _Swap Message , after a Wait Message has been received in response to a\nVCONN _Swap Message is a minimum of tVCONN SwapWait min (see Section 6.3.12, \"Wait Message\" ). The Port Shall\nwait at least tVCONN SwapWait after receiving the EOP of a Wait Message sent in response to a VCONN _Swap\nMessage , before sending a new VCONN _Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.5",
    "title": "tV CONN SwapDelayDFP",
    "full_path": "6.6.4.5 tV CONN SwapDelayDFP",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time delay for DFP after losing VCONN Source role due to an incoming VCONN Swap request from UFP and before\nsending the next VCONN _Swap Message . The DFP Shall wait at least tV CONN SwapDelayDFP after sending the EOP\nof the GoodCRC Message in response to PS_RDY Message received at the end of the previous VCONN Swap AMS ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.6",
    "title": "tV CONN SwapDelayUFP",
    "full_path": "6.6.4.6 tV CONN SwapDelayUFP",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time delay for UFP after losing VCONN Source role due to an incoming VCONN Swap request from DFP and before\nsending the next VCONN _Swap Message . The UFP Shall wait at least tV CONN SwapDelayUFP after sending the EOP\nof the GoodCRC Message in response to PS_RDY Message received at the end of the previous VCONN Swap AMS ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.4.7",
    "title": "tEnterUSBWait",
    "full_path": "6.6.4.7 tEnterUSBWait",
    "page": 251,
    "level": 4,
    "parent_id": "6.6.4",
    "tags": [],
    "content": "The time before the next Enter_USB Message , after a Wait Message has been received in response to a Enter_USB\nMessage is a minimum of tEnterUSBWait min (see Section 6.3.12, \"Wait Message\" ). The DFP Shall wait at least\ntEnterUSBWait after receiving the EOP of a Wait Message sent in response to an Enter_USB Message , before\nsending a new Enter_USB Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5",
    "title": "Power Supply Timers",
    "full_path": "6.6.5 Power Supply Timers",
    "page": 251,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "See Section 7.3, \"Transitions\" for diagrams showing the usage of the timers in this section.\nPage 252 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.6.5.1 PSTransitionTimer\nThe PSTransitionTimer is used by the Policy Engine to timeout on a PS_RDY Message . It is started when a request\nfor new Source Capabilities has been accepted and will timeout after tPSTransition if a PS_RDY Message has not\nbeen received. This condition leads to a Hard Reset and a return to USB Default Operation . The PSTransitionTimer\nrelates to the time taken for the Source to transition from one voltage, or current level, to another (see Section 7.1,\n\"Source Requirements\" ).\nThe PSTransitionTimer Shall be started when the last bit of the GoodCRC Message EOP , corresponding to an\nAccept Message , has been transmitted by the PHY Layer . The PSTransitionTimer Shall be stopped when the last\nbit of the GoodCRC Message EOP , corresponding to the PS_RDY Message , has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.2",
    "title": "PSSourceOffTimer",
    "full_path": "6.6.5.2 PSSourceOffTimer",
    "page": 252,
    "level": 4,
    "parent_id": "6.6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.2.1",
    "title": "Use during Power Role Swap",
    "full_path": "6.6.5.2.1 Use during Power Role Swap",
    "page": 252,
    "level": 5,
    "parent_id": "6.6.5.2",
    "tags": [],
    "content": "The PSSourceOffTimer is used by the Policy Engine in Dual-Role Power Device that is currently acting as a Sink to\ntimeout on a PS_RDY Message during a Power Role Swap AMS . This condition leads to USB Type-C Error Recovery .\nIf a PR_Swap Message request has been sent by the Dual-Role Power Device currently acting as a Source the Sink can\nrespond with an Accept Message . When the last bit of the GoodCRC Message EOP , corresponding to this transmitted\nAccept Message , is received by the Sink 's PHY Layer , then the PSSourceOffTimer Shall be started.\nIf a PR_Swap Message request has been sent by the Dual-Role Power Device currently acting as a Sink the Source can\nrespond with an Accept Message . When the last bit of the GoodCRC Message EOP , corresponding to this received\nAccept Message , is transmitted by the Sink 's PHY Layer , then the PSSourceOffTimer Shall be started.\nThe PSSourceOffTimer Shall be stopped when the last bit of the GoodCRC Message EOP , corresponding to the\nreceived PS_RDY Message , is transmitted by the PHY Layer .\nThe PSSourceOffTimer relates to the time taken for the remote Dual-Role Power Device to stop supplying power\n(see also Section 7.3.2.1, \"Sink Requested Power Role Swap\" and Section 7.3.2.2, \"Source Requested Power Role\nSwap\" ). The timer Shall time out if a PS_RDY Message has not been received from the remote Dual-Role Power\nDevice within tPSSourceOff indicating this has occurred."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.2.2",
    "title": "Use during Fast Role Swap",
    "full_path": "6.6.5.2.2 Use during Fast Role Swap",
    "page": 252,
    "level": 5,
    "parent_id": "6.6.5.2",
    "tags": [],
    "content": "The PSSourceOffTimer is used by the Policy Engine in Dual-Role Power Device that is the Initial Sink (currently\nproviding vSafe5V ) to timeout on a PS_RDY Message during a Fast Role Swap AMS . This condition leads to USB\nType-C Error Recovery .\nWhen the FR_Swap Message request has been sent by the Initial Sink , the Initial Source Shall respond with an\nAccept Message . When the last bit of the GoodCRC Message EOP , corresponding to this Accept Message is received\nby the Initial Sink 's PHY Layer , then the PSSourceOffTimer Shall be started.\nThe PSSourceOffTimer Shall be stopped when\nthe last bit of the GoodCRC Message EOP , corresponding to the received PS_RDY Message , is transmitted by the PHY\nLayer .\nThe PSSourceOffTimer relates to the time taken for the Initial Source to stop supplying power and for V BUS to\nrevert to vSafe5V (see also Section 7.2.10, \"Fast Role Swap\" and Section 7.3.4, \"Transitions Caused by Fast Role\nSwap\" ). The timer Shall time out if a PS_RDY Message has not been received from the Initial Source within\ntPSSourceOff indicating this has occurred."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.3",
    "title": "PSSourceOnTimer",
    "full_path": "6.6.5.3 PSSourceOnTimer",
    "page": 252,
    "level": 4,
    "parent_id": "6.6.5",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.3.1",
    "title": "Use during Power Role Swap",
    "full_path": "6.6.5.3.1 Use during Power Role Swap",
    "page": 252,
    "level": 5,
    "parent_id": "6.6.5.3",
    "tags": [],
    "content": "The PSSourceOnTimer is used by the Policy Engine in Dual-Role Power Device that has just stopped sourcing power\nand is waiting to start sinking power to timeout on a PS_RDY Message during a Power Role Swap . This condition\nleads to USB Type-C Error Recovery .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 253The PSSourceOnTimer Shall be started when:\n The last bit of the GoodCRC Message EOP , corresponding to the transmitted PS_RDY Message , is re -\nceived by the PHY Layer .\n The PSSourceOnTimer Shall be stopped when:\n The last bit of the GoodCRC Message EOP , corresponding to the received PS_RDY Message , is transmit -\nted by the PHY Layer .\nThe PSSourceOnTimer relates to the time taken for the remote Dual-Role Power Device to start sourcing power\n(see also Section 7.3.2.1, \"Sink Requested Power Role Swap\" and Section 7.3.2.2, \"Source Requested Power Role Swap\" )\nand will time out if a PS_RDY Message indicating this has not been received within tPSSourceOn ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.5.3.2",
    "title": "Use during Fast Role Swap",
    "full_path": "6.6.5.3.2 Use during Fast Role Swap",
    "page": 253,
    "level": 5,
    "parent_id": "6.6.5.3",
    "tags": [],
    "content": "The PSSourceOnTimer is used by the Policy Engine in Dual-Role Power Device that has just stopped sourcing power\nand is waiting to start sinking power to timeout on a PS_RDY Message during a Fast Role Swap . This condition leads\nto USB Type-C Error Recovery .\nThe PSSourceOnTimer Shall be started when:\n The last bit of the GoodCRC Message EOP , corresponding to the transmitted PS_RDY Message , is re -\nceived by the PHY Layer .\nThe PSSourceOnTimer Shall be stopped when:\n The last bit of the GoodCRC Message EOP , corresponding to the received PS_RDY Message , is transmit -\nted by the PHY Layer .\nThe PSSourceOnTimer relates to the time taken for the remote Dual-Role Power Device to start sourcing power\n(see also Section 7.2.10, \"Fast Role Swap\" and Section 7.3.4, \"Transitions Caused by Fast Role Swap\" ) and will time\nout if a PS_RDY Message indicating this has not been received within tPSSourceOn ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.6",
    "title": "NoResponseTimer",
    "full_path": "6.6.6 NoResponseTimer",
    "page": 253,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "The NoResponseTimer is used by the Policy Engine in a Source to determine that its Port Partner is not responding\nafter a Hard Reset . When the NoResponseTimer times out, the Policy Engine Shall issue up to nHardResetCount\nadditional Hard Reset s before determining that the Port Partner is non-responsive to USB Power Delivery\nmessaging.\nIf the Source fails to receive a GoodCRC Message in response to a Source_Capabilities Message within tNoResponse\nof:\n The last bit of a Hard Reset Signaling being sent by the PHY Layer if the Hard Reset Signaling was initi -\nated by the Sink .\n The last bit of a Hard Reset Signaling being received by the PHY Layer if the Hard Reset Signaling was\ninitiated by the Source .\nThen the Source Shall issue additional Hard Reset s up to nHardResetCount times (see Section 6.8.3, \"Hard Reset\" ).\nFor a non-responsive device, the Policy Engine in a Source May either decide to continue sending\nSource_Capabilities Message s or to go to non-USB Power Delivery operation and cease sending\nSource_Capabilities Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.7",
    "title": "BIST Timers",
    "full_path": "6.6.7 BIST Timers",
    "page": 253,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.7.1",
    "title": "tBISTCarrierMode",
    "full_path": "6.6.7.1 tBISTCarrierMode",
    "page": 253,
    "level": 4,
    "parent_id": "6.6.7",
    "tags": [],
    "content": "tBISTCarrierMode is used to define the maximum time that a UUT has to enter BIST Carrier Mode when requested\nby a Tester .\nPage 254 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10A UUT Shall enter BIST Carrier Mode within tBISTCarrierMode of the last bit of the GoodCRC Message EOP ,\ncorresponding to the received the BIST Message used to initiate the test, being transmitted by the PHY Layer . In\nBIST Carrier Mode when transmitting a continuous carrier signal transmission Shall start as soon as the UUT enters\nBIST Mode ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.7.2",
    "title": "BISTContModeTimer",
    "full_path": "6.6.7.2 BISTContModeTimer",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.7",
    "tags": [],
    "content": "The BISTContModeTimer is used by a UUT to ensure that a Continuous BIST Mode (i.e., BIST Carrier Mode ) is exited\nin a timely fashion. A UUT that has been put into a Continuous BIST Mode Shall return to normal operation (either\nPE_SRC_Transition_to_default , PE_SNK_Transition_to_default , or PE_CBL_Ready ) within tBISTContMode of\nstarting to transmit a continuous carrier signal."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.7.3",
    "title": "tBISTSharedTestMode",
    "full_path": "6.6.7.3 tBISTSharedTestMode",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.7",
    "tags": [],
    "content": "tBISTSharedTestMode is used to define the maximum time that a UUT has to enter BIST Shared Capacity Test Mode\nwhen requested by a Tester .\nA UUT Shall enter BIST Shared Capacity Test Mode and send a new Source_Capabilities Message from all Ports\nwithin the Shared Capacity Group within tBISTSharedTestMode of the last bit of the GoodCRC Message EOP ,\ncorresponding to the received the BIST Message used to initiate the test, being transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.8",
    "title": "Power Role Swap Timers",
    "full_path": "6.6.8 Power Role Swap Timers",
    "page": 254,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.8.1",
    "title": "SwapSourceStartTimer",
    "full_path": "6.6.8.1 SwapSourceStartTimer",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.8",
    "tags": [],
    "content": "The SwapSourceStartTimer Shall be used by the New Source , after a Power Role Swap or Fast Role Swap , to ensure\nthat it does not send Source_Capabilities Message before the New Sink is ready to receive the Source_Capabilities\nMessage . The New Source Shall Not send the Source_Capabilities Message earlier than tSwapSourceStart after the\nlast bit of the EOP of GoodCRC Message sent in response to the PS_RDY Message sent by the New Source indicating\nthat its power supply is ready. The Sink Shall be ready to receive a Source_Capabilities Message tSwapSinkReady\nafter having sent the last bit of the EOP of GoodCRC Message sent in response to the PS_RDY Message sent by the\nNew Source indicating that its power supply is ready."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.9",
    "title": "Soft Reset Timers",
    "full_path": "6.6.9 Soft Reset Timers",
    "page": 254,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.9.1",
    "title": "tSoftReset",
    "full_path": "6.6.9.1 tSoftReset",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.9",
    "tags": [],
    "content": "A failure to see a GoodCRC Message in response to any Message within tReceive (after nRetryCount retries), when\na Port Pair is Connected , is indicative of a communications failure. This Shall cause the Source or Sink to send a\nSoft_Reset Message , transmission of which Shall be completed within tSoftReset of the CRCReceiveTimer\nexpiring."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.9.2",
    "title": "tProtErrSoftReset",
    "full_path": "6.6.9.2 tProtErrSoftReset",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.9",
    "tags": [],
    "content": "If the Protocol Error occurs that causes the Source or Sink to send a Soft_Reset Message , the transmission of the\nSoft_Reset Message Shall be completed within tProtErrSoftReset of the EOP of the GoodCRC sent in response to\nthe Message that caused the Protocol Error ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.10",
    "title": "Data Reset Timers",
    "full_path": "6.6.10 Data Reset Timers",
    "page": 254,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.10.1",
    "title": "VCONNDischargeTimer",
    "full_path": "6.6.10.1 VCONNDischargeTimer",
    "page": 254,
    "level": 4,
    "parent_id": "6.6.10",
    "tags": [],
    "content": "The VCONN DischargeTimer is used by the Policy Engine in the DFP to ensure the UFP actively discharges VCONN in\na timely manner to ensure the cable will restore Ra. Once the UFP has discharged VCONN below vRaReconnect (see\n[USB Type-C 2.4] ) it sends a PS_RDY Message (see also Section 7.1.15, \"V CONN Power Cycle\" ).\nIf the DFP does not receive a PS_RDY Message from the UFP within tVCONN SourceDischarge of the last bit of the\nGoodCRC acknowledging the Accept Message in response to the Data_Reset Message , the VCONN DischargeTimer\nwill time out and the Policy Engine Shall enter the ErrorRecovery State.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2556.6.10.2 tDataReset\nThe DFP Shall complete the Data_Reset process (as defined in Section 6.3.14, \"Data_Reset Message\" ) within\ntDataReset of the last bit of the GoodCRC Message EOP , corresponding to the Accept Message , being transmitted\nby the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.10.3",
    "title": "DataResetFailTimer",
    "full_path": "6.6.10.3 DataResetFailTimer",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.10",
    "tags": [],
    "content": "The DataResetFailTimer Shall be used by the DFP 's Policy Engine to ensure the Data Reset process completes\nwithin tDataResetFail of the last bit of the GoodCRC acknowledging the Accept Message in response to the\nData_Reset Message . If the DFP 's DataResetFailTimer expires, the DFP Shall enter the ErrorRecovery State."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.10.4",
    "title": "DataResetFailUFPTimer",
    "full_path": "6.6.10.4 DataResetFailUFPTimer",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.10",
    "tags": [],
    "content": "The DataResetFailUFPTimer Shall be used by the UFP 's Policy Engine to ensure the Data Reset process completes\nwithin tDataResetFailUFP of the last bit of the GoodCRC acknowledging the Accept Message in response to the\nData_Reset Message . If the UFP 's DataResetFailUFPTimer expires, the UFP Shall enter the ErrorRecovery State."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11",
    "title": "Hard Reset Timers",
    "full_path": "6.6.11 Hard Reset Timers",
    "page": 255,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11.1",
    "title": "HardResetCompleteTimer",
    "full_path": "6.6.11.1 HardResetCompleteTimer",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.11",
    "tags": [],
    "content": "The HardResetCompleteTimer is used by the Protocol Layer in the case where it has asked the PHY Layer to send\nHard Reset Signaling and the PHY Layer is unable to send the Signaling within a reasonable time due to a non- Idle\nchannel. If the PHY Layer does not indicate that the Hard Reset Signaling has been sent within tHardResetComplete\nof the Protocol Layer requesting transmission, then the Protocol Layer Shall inform the Policy Engine that the Hard\nReset Signaling has been sent in order to ensure the power supply is reset in a timely fashion."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11.2",
    "title": "PSHardResetTimer",
    "full_path": "6.6.11.2 PSHardResetTimer",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.11",
    "tags": [],
    "content": "The PSHardResetTimer is used by the Policy Engine in a Source to ensure that the Sink has had sufficient time to\nprocess Hard Reset Signaling before turning off its power supply to VBUS.\nWhen a Hard Reset occurs the Source , stops driving VCONN , removes Rp from the CC pin and starts to transition the\nVBUS voltage to vSafe0V either:\n tPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink or\n tPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source .\nSee Section 7.1.5, \"Response to Hard Resets\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11.3",
    "title": "tDRSwapHardReset",
    "full_path": "6.6.11.3 tDRSwapHardReset",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.11",
    "tags": [],
    "content": "If a DR_Swap Message is received during Modal Operation then a Hard Reset Shall be initiated by the recipient of\nthe unexpected DR_Swap Message ; Hard Reset Signaling Shall be generated within tDRSwapHardReset of the EOP\nof the GoodCRC sent in response to the DR_Swap Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.11.4",
    "title": "tProtErrHardReset",
    "full_path": "6.6.11.4 tProtErrHardReset",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.11",
    "tags": [],
    "content": "If a Protocol Error occurs that directly leads to a Hard Reset , the transmission of the Hard Reset Signaling Shall be\ncompleted within tProtErrHardReset of the EOP of the GoodCRC sent in response to the Message that caused the\nProtocol Error ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.12",
    "title": "Structured VDM Timers",
    "full_path": "6.6.12 Structured VDM Timers",
    "page": 255,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.12.1",
    "title": "VDMResponseTimer",
    "full_path": "6.6.12.1 VDMResponseTimer",
    "page": 255,
    "level": 4,
    "parent_id": "6.6.12",
    "tags": [],
    "content": "The VDMResponseTimer Shall be used by the Initiator 's Policy Engine to ensure that a Structured VDM Command\nrequest needing a response (e.g. Discover Identity Command request) is responded to within a bounded time of\ntVDMSenderResponse . The VDMResponseTimer Shall be applied to all Structured VDM Command s except the\nPage 256 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Enter Mode and Exit Mode Command s which have their own timers ( VDMModeEntryTimer and\nVDMModeExitTimer respectively). Failure to receive the expected response is detected when the\nVDMResponseTimer expires.\nThe Policy Engine 's response when the VDMResponseTimer expires Shall be dependent on the Message sent (see\nSection 8.3, \"Policy Engine\" ).\nThe VDMResponseTimer Shall be started from the time the last bit of the GoodCRC Message EOP , corresponding\nto the VDM Command requesting a response, has been received by the PHY Layer . The VDMResponseTimer Shall\nbe stopped when the last bit of the EOP of the GoodCRC Message , corresponding to the expected VDM Command\nresponse, has been transmitted by the PHY Layer .\nThe receiver of a Message requiring a response Shall respond within tVDMReceiverResponse in order to ensure\nthat the sender's VDMResponseTimer does not expire.\nThe tVDMReceiverResponse time Shall be measured from the time the last bit of the Message EOP has been\ntransmitted by the PHY Layer until the first bit of the response Message Preamble has been transmitted by the PHY\nLayer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.12.2",
    "title": "VDMModeEntryTimer",
    "full_path": "6.6.12.2 VDMModeEntryTimer",
    "page": 256,
    "level": 4,
    "parent_id": "6.6.12",
    "tags": [],
    "content": "The VDMModeEntryTimer Shall be used by the Initiator 's Policy Engine to ensure that the response to a Structured\nVDM Enter Mode Command request ( ACK or NAK with ACK indicating that the requested Alternate Mode has been\nentered) arrives within a bounded time of tVDMWaitModeEntry . Failure to receive the expected response is\ndetected when the VDMModeEntryTimer expires.\nThe Policy Engine 's response when the VDMModeEntryTimer expires is to inform the Device Policy Manager (see\nSection 8.3.3.23.1, \"DFP Structured VDM Mode Entry State Diagram\" ).\nThe VDMModeEntryTimer Shall be started from the time the last bit of the EOP of the GoodCRC Message ,\ncorresponding to the VDM Command request, has been received by the PHY Layer . The VDMModeEntryTimer\nShall be stopped when the last bit of the EOP of the GoodCRC Message , corresponding to the expected Structured\nVDM Command response ( ACK , NAK or BUSY ), has been transmitted by the PHY Layer .\nThe receiver of a Message requiring a response Shall respond within tVDMEnterMode in order to ensure that the\nsender's VDMModeEntryTimer does not expire.\nThe tVDMEnterMode time Shall be measured from the time the last bit of the EOP of the GoodCRC Message ,\ncorresponding to VDM Command Request, has been transmitted by the PHY Layer until the first bit of the response\nMessage Preamble has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.12.3",
    "title": "VDMModeExitTimer",
    "full_path": "6.6.12.3 VDMModeExitTimer",
    "page": 256,
    "level": 4,
    "parent_id": "6.6.12",
    "tags": [],
    "content": "The VDMModeExitTimer Shall be used by the Initiator 's Policy Engine to ensure that the ACK response to a\nStructured VDM Exit Mode Command , indicating that the requested Alternate Mode has been exited, arrives within\na bounded time of tVDMWaitModeExit . Failure to receive the expected response is detected when the\nVDMModeExitTimer expires.\nThe Policy Engine 's response when the VDMModeExitTimer expires is to inform the Device Policy Manager (see\nSection 8.3.3.23.2, \"DFP Structured VDM Mode Exit State Diagram\" ).\nThe VDMModeExitTimer Shall be started from the time the last bit of the GoodCRC Message EOP , corresponding\nto the VDM Command requesting a response, has been received by the PHY Layer . The VDMModeExitTimer Shall\nbe stopped when the last bit of the GoodCRC Message EOP , corresponding to the expected Structured VDM\nCommand response ACK , has been transmitted by the PHY Layer .\nThe receiver of a Message requiring a response Shall respond within tVDMExitMode in order to ensure that the\nsender's VDMModeExitTimer does not expire.\nThe tVDMExitMode time Shall be measured from the time the last bit of the Message EOP has been received by the\nPHY Layer until the first bit of the response Message Preamble has been transmitted by the PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2576.6.12.4 tVDMBusy\nThe Initiator Shall wait at least tVDMBusy , after receiving a BUSY Command response, before repeating the\nStructured VDM request again."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.13",
    "title": "V CONN Timers",
    "full_path": "6.6.13 V CONN Timers",
    "page": 257,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.13.1",
    "title": "V CONN OnTimer",
    "full_path": "6.6.13.1 V CONN OnTimer",
    "page": 257,
    "level": 4,
    "parent_id": "6.6.13",
    "tags": [],
    "content": "The V CONN OnTimer is used during a VCONN Swap .\nThe V CONN OnTimer Shall be started when:\n The last bit of GoodCRC Message EOP , corresponding to the Accept Message , is transmitted or received\nby the PHY Layer .\nThe V CONN OnTimer Shall be stopped when:\n The last bit of the GoodCRC Message EOP , corresponding to the PS_RDY Message , is transmitted by the\nPHY Layer .\nPrior to sending the PS_RDY Message , the Port Shall have turned VCONN On."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.13.2",
    "title": "tV CONN SourceOff",
    "full_path": "6.6.13.2 tV CONN SourceOff",
    "page": 257,
    "level": 4,
    "parent_id": "6.6.13",
    "tags": [],
    "content": "The tVCONN SourceOff time applies during a VCONN Swap . The initial VCONN Source Shall cease sourcing VCONN within\ntVCONN SourceOff of the last bit of the GoodCRC Message EOP , corresponding to the PS_RDY Message , being\ntransmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.14",
    "title": "tCableMessage",
    "full_path": "6.6.14 tCableMessage",
    "page": 257,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "Ports compliant with Revision 3.x of the specification Shall Not wait tCableMessage before sending an SOP’ Packet\nor SOP’’ Packet even when communicating using [USBPD 2.0] with a Cable Plug . This specification defines Collision\nAvoidance mechanisms that obviate the need for this time.\nCable Plug s Shall only wait tCableMessage before sending an SOP’ Packet or SOP’’ Packet when operating at\n[USBPD 2.0] . When operating at Revisions higher than [USBPD 2.0] Cable Plug s Shall Not wait tCableMessage\nbefore sending an SOP’ Packet or SOP’’ Packet ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.15",
    "title": "DiscoverIdentityTimer",
    "full_path": "6.6.15 DiscoverIdentityTimer",
    "page": 257,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "The DiscoverIdentityTimer is used prior to or during an Explicit Contract when discovering whether a Cable Plug\nis PD Capable using SOP’ . When performing Cable Discovery during an Explicit Contract the Discover Identity\nCommand request Shall be sent every tDiscoverIdentity . No more than nDiscoverIdentityCount Discover\nIdentity Message s without a GoodCRC Message response Shall be sent. If no GoodCRC Message response is received\nafter nDiscoverIdentityCount Discover Identity Command requests have been sent by a Port , the Port Shall Not\nsend any further SOP’ /SOP’’ Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.16",
    "title": "Collision Avoidance Timers",
    "full_path": "6.6.16 Collision Avoidance Timers",
    "page": 257,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.16.1",
    "title": "SinkTxTimer",
    "full_path": "6.6.16.1 SinkTxTimer",
    "page": 257,
    "level": 4,
    "parent_id": "6.6.16",
    "tags": [],
    "content": "The SinkTxTimer is used by the Protocol Layer in a Source to allow the Sink to complete its transmission before\ninitiating an AMS .\nThe Source Shall wait a minimum of tSinkTx after changing Rp from SinkTxOK to SinkTxNG before initiating an\nAMS by sending a Message .\nA Sink Shall only initiate an AMS when it has determined that Rp is set to SinkTxOK .\nPage 258 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.6.16.2 tSrcHoldsBus\nIf a transition into the PE_SRC_Ready state will result in an immediate transition out of the PE_SRC_Ready state\nwithin tSrcHoldsBus e.g. it is due to a Protocol Error that has not resulted in a Soft Reset , then the notifications of\nthe end of AMS and first Message in an AMS May Not be sent to avoid changing the Rp value unnecessarily."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.17",
    "title": "Fast Role Swap Timers",
    "full_path": "6.6.17 Fast Role Swap Timers",
    "page": 258,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.17.1",
    "title": "tFRSwap5V",
    "full_path": "6.6.17.1 tFRSwap5V",
    "page": 258,
    "level": 4,
    "parent_id": "6.6.17",
    "tags": [],
    "content": "The tFRSwap5V time Shall be measured from:\n The later of:\n The last bit of the GoodCRC Message EOP , corresponding to the Accept Message or\n VBUS being within vSafe5V .\n Until the first bit of the response PS_RDY Message Preamble has been transmitted by the PHY Layer .\nDuring a Fast Role Swap , the Initial Source Shall start the PS_RDY Message within tFRSwap5V after both:\n The Initial Source has sent the Accept Message , and\n VBUS is at or below vSafe5V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.17.2",
    "title": "tFRSwapComplete",
    "full_path": "6.6.17.2 tFRSwapComplete",
    "page": 258,
    "level": 4,
    "parent_id": "6.6.17",
    "tags": [],
    "content": "During a fast-role swap, the Initial Sink Shall respond with a the PS_RDY Message within tFRSwapComplete after\nit has received the PS_RDY Message from the Initial Source . The tFRSwapComplete time Shall be measured from\nthe time the last bit of the GoodCRC Message EOP , corresponding to the PS_RDY Message , has been transmitted by\nthe PHY Layer until the first bit of the response PS_RDY Message Preamble has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.17.3",
    "title": "tFRSwapInit",
    "full_path": "6.6.17.3 tFRSwapInit",
    "page": 258,
    "level": 4,
    "parent_id": "6.6.17",
    "tags": [],
    "content": "That last bit of the EOP of the FR_Swap Message Shall be transmitted by the New Source no later than tFRSwapInit\nafter the Fast Role Swap Request has been detected (see Section 5.8.6.3, \"Fast Role Swap Detection\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.18",
    "title": "Chunking Timers",
    "full_path": "6.6.18 Chunking Timers",
    "page": 258,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.18.1",
    "title": "ChunkingNotSupportedTimer",
    "full_path": "6.6.18.1 ChunkingNotSupportedTimer",
    "page": 258,
    "level": 4,
    "parent_id": "6.6.18",
    "tags": [],
    "content": "The ChunkingNotSupportedTimer is used by a Source or Sink which does not support multi-chunk Chunking but\nhas received a Message Chunk .\nThe ChunkingNotSupportedTimer Shall be started when:\n The last bit of the GoodCRC Message EOP , corresponding to a Message Chunk of a multi-chunk Message ,\nis transmitted by the PHY Layer . The Policy Engine Shall Not send its Not_Supported Message before\nthe ChunkingNotSupportedTimer expires."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.18.2",
    "title": "ChunkSenderRequestTimer",
    "full_path": "6.6.18.2 ChunkSenderRequestTimer",
    "page": 258,
    "level": 4,
    "parent_id": "6.6.18",
    "tags": [],
    "content": "The ChunkSenderRequestTimer is used during a Chunked Message transmission.\nThe ChunkSenderRequestTimer Shall be used by the sender's Chunking state machine to ensure that a Chunk\nResponse is responded to within a bounded time of tChunkSenderRequest. Failure to receive the expected\nresponse is detected when the ChunkSenderRequestTimer expires.\nThe ChunkSenderRequestTimer Shall be started when:\n The last bit of the GoodCRC Message EOP , corresponding to the Chunk Response Message , is received by\nthe PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 259The ChunkSenderRequestTimer Shall be stopped when:\n The last bit of the EOP of the GoodCRC Message , corresponding to the Chunk Request Message , is trans -\nmitted by the PHY Layer .\n A Message other than a Chunk Request is received from the Protocol Layer Rx.\nThe receiver of a Chunk Response requiring a Chunk Request Shall respond with a Chunk Request within\ntChunkReceiverRequest in order to ensure that the sender's ChunkSenderRequestTimer does not expire.\nThe tChunkReceiverRequest time Shall be measured from the time the last bit of the EOP of the GoodCRC Message ,\ncorresponding to the Chunk Response Message , has been transmitted by the PHY Layer until the first bit of the\nresponse Message Preamble has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.18.3",
    "title": "ChunkSenderResponseTimer",
    "full_path": "6.6.18.3 ChunkSenderResponseTimer",
    "page": 259,
    "level": 4,
    "parent_id": "6.6.18",
    "tags": [],
    "content": "The ChunkSenderResponseTimer is used during a Chunked Message transmission.\nThe ChunkSenderResponseTimer Shall be used by the sender's Chunking state machine to ensure that a Chunk\nRequest is responded to within a bounded time of tChunkSenderResponse . Failure to receive the expected\nresponse is detected when the ChunkSenderResponseTimer expires.\nThe ChunkSenderResponseTimer Shall be started when:\n The last bit of the GoodCRC Message EOP , corresponding to the Chunk Request Message , is received by\nthe PHY Layer .\nThe ChunkSenderResponseTimer Shall be stopped when:\n The last bit of the GoodCRC Message EOP , corresponding to the Chunk Response Message , is transmitted\nby the PHY Layer .\n A Message other than a Chunk is received from the Protocol Layer .\nThe receiver of a Chunk Request requiring a Chunk Response Shall respond with a Chunk Response within\ntChunkReceiverResponse in order to ensure that the sender's ChunkSenderResponseTimer does not expire.\nThe tChunkReceiverResponse time Shall be measured from the time the last bit of the EOP of the GoodCRC\nMessage , corresponding to the Chunk Request Message , has been transmitted by the PHY Layer until the first bit of\nthe response Message Preamble has been transmitted by the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.19",
    "title": "Programmable Power Supply Timers",
    "full_path": "6.6.19 Programmable Power Supply Timers",
    "page": 259,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.19.1",
    "title": "SinkPPSPeriodicTimer",
    "full_path": "6.6.19.1 SinkPPSPeriodicTimer",
    "page": 259,
    "level": 4,
    "parent_id": "6.6.19",
    "tags": [],
    "content": "The SinkPPSPeriodicTimer Shall be used by the Sink 's Policy Engine to ensure that communication between the\nSink and Source occurs within a bounded time of tPPSRequest when in SPR PPS Mode . In the absence of any other\ntraffic, a Request Message requesting an SPR PPS APDO is sent periodically as a keep alive mechanism.\nSinkPPSPeriodicTimer Shall be re-initialized and restarted on transmission, by the PHY Layer , of the last bit of the\nGoodCRC Message EOP , corresponding to any received Message , that causes the Sink to enter the PE_SNK_Ready\nstate.\nThe Sink Shall stop the SinkPPSPeriodicTimer on transmission, by the PHY Layer , of the last bit of the GoodCRC\nMessage EOP , corresponding to any Message , or the last bit of any Signaling is received, by the PHY Layer , from the\nSource and by the Sink that causes the Sink to leave the PE_SNK_Ready state."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.19.2",
    "title": "SourcePPSCommTimer",
    "full_path": "6.6.19.2 SourcePPSCommTimer",
    "page": 259,
    "level": 4,
    "parent_id": "6.6.19",
    "tags": [],
    "content": "The SourcePPSCommTimer Shall be used by the Source 's Policy Engine to ensure that communication between\nthe Sink and Source occurs within a bounded time of tPPSTimeout when in SPR PPS Mode . In the absence of any\nother traffic, a Request Message requesting an SPR PPS APDO is received periodically as a keep alive mechanism.\nPage 260 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10SourcePPSCommTimer Shall be re-initialized and restarted when, after receiving any Message that causes the\nSource to enter the PE_SRC_Ready state, the last bit of the corresponding GoodCRC Message EOP is transmitted by\nthe PHY Layer .\nThe Source Shall stop the SourcePPSCommTimer when:\n After receiving any Message that causes the Source to leave the PE_SRC_Ready state, the last bit of the\nof the corresponding GoodCRC Message EOP is sent by the PHY Layer , or\n The last bit of any Signaling is received by the PHY Layer from the Sink by the Source that causes the\nSource to leave the PE_SRC_Ready state.\nWhen the SourcePPSCommTimer times out the Source Shall issue Hard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.20",
    "title": "tEnterUSB",
    "full_path": "6.6.20 tEnterUSB",
    "page": 260,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": "The DFP Shall send the Enter_USB Message within tEnterUSB of either:\n The last bit of the GoodCRC acknowledging the Data_Reset_Complete Message in response to the\nData_Reset Message or\n A PD Connection, specifically the last bit of the GoodCRC acknowledging the Source_Capabilities Mes-\nsage after the initial entry into the PE_SRC_Send_Capabilities state or\n The last bit of the GoodCRC acknowledging the Accept Message in response to the DR_Swap Message\nFailure by the DFP to meet this timeout parameter can result in the ports not transitioning into [USB4] operation.\nAny AMS initiated by the UFP prior to receiving the Enter_USB Message will delay reception of the Enter_USB\nMessage and [USB4] operation, therefore a USB4® -capable UFP Should Not initiate any AMS until the DFP has been\ngiven time to send the Enter_USB Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21",
    "title": "EPR Timers",
    "full_path": "6.6.21 EPR Timers",
    "page": 260,
    "level": 3,
    "parent_id": "6.6",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21.1",
    "title": "SinkEPREnterTimer Timer",
    "full_path": "6.6.21.1 SinkEPREnterTimer Timer",
    "page": 260,
    "level": 4,
    "parent_id": "6.6.21",
    "tags": [],
    "content": "The SinkEPREnterTimer is used to ensure the EPR Mode entry process completes within tEnterEPR . The Sink\nShall start the timer when it sees the last bit of the GoodCRC Message in response to the EPR_Mode Message with\nthe Action field set to 1 ( Enter ). The Sink Shall stop the timer when the last bit of the corresponding GoodCRC\nMessage EOP , corresponding to the received EPR_Mode Message with the Action field set to 3 ( Enter Succeeded ),\nhas been transmitted by the PHY Layer . If the timer expires the Sink Shall send a Soft_Reset Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21.2",
    "title": "SinkEPRKeepAlive Timer",
    "full_path": "6.6.21.2 SinkEPRKeepAlive Timer",
    "page": 260,
    "level": 4,
    "parent_id": "6.6.21",
    "tags": [],
    "content": "The SinkEPRKeepAliveTimer Shall be used by the Sink 's Policy Engine to ensure that communication between the\nSink and Source occurs within a bounded time of tSinkEPRKeepAlive . The Sink Shall initialize and run this timer\nupon entry into the PE_SNK_Ready State when in EPR Mode and Shall stop it upon exit from the PE_SNK_Ready\nwhen in EPR Mode .\nWhile operating in EPR Mode , the Sink Shall stop the SinkEPRKeepAliveTimer timer whenever:\n The last bit of the GoodCRC Message EOP , in response any Message from the Source , is transmitted by\nthe PHY Layer .\n The PHY Layer receives the last bit of the GoodCRC Message EOP in response to any Message sent to the\nSource .\nIf the timer expires the Sink Shall send an EPR_KeepAlive Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21.3",
    "title": "SourceEPRKeepAlive Timer",
    "full_path": "6.6.21.3 SourceEPRKeepAlive Timer",
    "page": 260,
    "level": 4,
    "parent_id": "6.6.21",
    "tags": [],
    "content": "The SourceEPRKeepAliveTimer Shall be used by the Source 's Policy Engine to ensure that communication\nbetween the Sink and Source occurs within a bounded time of tSourceEPRKeepAlive . The Source Shall initialize\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 261and run this timer upon entry into the PE_SRC_Ready State when in EPR Mode and Shall disable it upon exit from\nthe PE_SRC_Ready State when EPR Mode .\nWhile operating in EPR Mode , the Source Shall stop the SourceEPRKeepAliveTimer timer whenever:\n The last bit of the GoodCRC Message EOP , in response any Message from the Sink , is transmitted by the\nPHY Layer .\n The PHY Layer receives the last bit of the GoodCRC Message EOP in response to any Message sent to the\nSource .\nIf the timer expires the Source Shall send Hard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.6.21.4",
    "title": "tEPRSourceCableDiscovery",
    "full_path": "6.6.21.4 tEPRSourceCableDiscovery",
    "page": 261,
    "level": 4,
    "parent_id": "6.6.21",
    "tags": [],
    "content": "After Port Partner s are Attached or after a Hard Reset or after a Power Role Swap or after a Fast Role Swap an EPR\nSource Shall discover the Cable Plug within tEPRSourceCableDiscovery of entering the First Explicit Contract .\nThe EPR Source Shall send the Discover Identity REQ Command , to the Cable Plug , within\ntEPRSourceCableDiscovery of receiving the GoodCRC Message acknowledging the PS_RDY Message as part of the\nExplicit Contract Negotiation .\nNote: If the EPR Source is not the VCONN Source , tEPRSourceCableDiscovery , will also include the time needed\nfor the VCONN Swap .\nPage 262 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.6.22 Time Values and Timers\nTable 6.68, \"Time Values\" summarizes the values for the timers listed in this section. For each Timer Value, a given\nimplementation Shall pick a fixed value within the range specified. Table 6.69, \"Timers\" lists the timers.\nTable 6.68 Time Values\nParameter Value\n(min)Value\n(Nom)Value\n(max)Units Reference\ntACTempUpdate 500 ms Section 6.5.2.2.1\ntBISTContMode 30 45 60 ms Section 6.6.7.2\ntBISTCarrierMode 300 ms Section 6.6.7.1\ntBISTSharedTestMode 1 s Section 6.6.7.3\ntCableMessage 750 µs Section 6.6.14\ntCapabilitiesMismatchResponse 2 s Section 6.4.2.3\ntChunkingNotSupported 40 45 50 ms Section 6.6.18.1\ntChunkReceiverRequest 15 ms Section 6.6.18.2\ntChunkReceiverResponse 15 ms Section 6.6.18.3\ntChunkSenderRequest 24 27 30 ms Section 6.6.18.2\ntChunkSenderResponse 24 27 30 ms Section 6.6.18.3\ntDataReset 200 225 250 ms Section 6.6.10.2\ntDataResetFail 300 400 ms Section 6.6.10.3\ntDataResetFailUFP 450 550 ms Section 6.6.10.4\ntDiscoverIdentity 40 50 ms Section 6.6.14\ntDRSwapHardReset 15 ms Section 6.6.11.3\ntDRSwapWait 100 ms Section 6.6.4.3\ntEnterUSB 500 ms Section 6.6.20\ntEnterUSBWait 100 ms Section 6.6.4.7\ntEnterEPR 450 500 550 ms Section 6.6.21.1\ntEPRSourceCableDiscovery 2 s Section 6.6.21.4\ntFirstSourceCap 250 ms Section 6.6.3.3\ntFRSwap5V 15 ms Section 6.6.17.1\ntFRSwapComplete 15 ms Section 6.6.17.2\ntFRSwapInit 15 ms Section 6.6.17.3\ntHardReset 5 ms Section 6.3.13\ntHardResetComplete 4 4.5 5 ms Section 6.6.9\ntSourceEPRKeepAlive 0.750 0.875 1.000 s Section 6.6.21.3\ntSinkEPRKeepAlive 0.250 0.375 0.500 s Section 6.6.21.2\ntNoResponse 4.5 5.0 5.5 s Section 6.6.6\ntPPSRequest 10 s Section 6.6.19.1\ntPPSTimeout 12.0 13.5 15.0 s Section 6.6.19.2\ntProtErrHardReset 15 ms Section 6.6.11.4\ntProtErrSoftReset 15 ms Section 6.6.9.2\ntPRSwapWait 100 ms Section 6.6.4.2\ntPSHardReset 25 30 35 ms Section 6.6.11.2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 263tPSSourceOff SPR Mode 750 835 920 ms\nSection 6.6.5.2\nEPR Mode 1120 1260 1400\ntPSSourceOn SPR Mode 390 435 480 ms Section 6.6.5.3\ntPSTransition SPR Mode 450 500 550 ms\nSection 6.6.5.1\nEPR Mode 830 925 1020\ntReceive 0.9 1.0 1.1 ms Section 6.6.1\ntReceiverResponse 15 ms Section 6.6.2\ntRetry 195 µs Section 6.6.1\ntSenderResponse 27 30 33 ms Section 6.6.2\ntSinkDelay 5 ms Section 5.7\ntSinkRequest 100 ms Section 6.6.4.1\ntSinkTx 16 18 20 ms Section 6.6.16\ntSoftReset 15 ms Section 6.8.1\ntSrcHoldsBus 50 ms Section 8.3.3.2\ntSwapSinkReady 15 ms Section 6.6.8.1\ntSwapSourceStart 20 ms Section 6.6.8.1\ntTransmit 195 µs Section 6.6.1\ntTypeCSendSourceCap 100 150 200 ms Section 6.6.3.1\ntTypeCSinkWaitCap 310 465 620 ms Section 6.6.3.2\ntVCONN SourceDischarge 160 200 240 ms Section 6.6.10.1\ntVCONN SourceOff 25 ms Section 6.6.13\ntVc ONNSourceOn 50 ms Section 6.3.11\ntVCONN SourceTimeout 100 150 200 ms Section 6.6.13\ntVCONN SwapWait 100 ms Section 6.6.4.4\ntVCONN SwapDelayDFP 100 ms Section 6.6.4.5\ntVCONN SwapDelayUFP 500 ms Section 6.6.4.6\ntVDMBusy 50 ms Section 6.6.12.4\ntVDMEnterMode 25 ms Section 6.6.12.2\ntVDMExitMode 25 ms Section 6.6.12.3\ntVDMReceiverResponse 15 ms Section 6.6.12.1\ntVDMSenderResponse 24 27 30 ms Section 6.6.12.1\ntVDMWaitModeEntry 40 45 50 ms Section 6.6.12.2\ntVDMWaitModeExit 40 45 50 ms Section 6.6.12.3Table 6.68 Time Values (Continued)\nParameter Value\n(min)Value\n(Nom)Value\n(max)Units Reference\nPage 264 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 6.69 Timers\nTimer Parameter Used By Reference\nBISTContModeTimer tBISTContMode Policy Engine Section 6.6.7.2\nChunkingNotSupportedTimer tChunkingNotSupported Policy Engine Section 6.6.18.1\nChunkSenderRequestTimer tChunkSenderRequest Protocol Layer Section 6.6.18.2\nChunkSenderResponseTimer tChunkSenderResponse Protocol Layer Section 6.6.18.3\nCRCReceiveTimer tReceive Protocol Layer Section 6.6.1\nDataResetFailTimer tDataResetFail Policy Engine Section 6.6.10.3\nDataResetFailUFPTimer tDataResetFailUFP Policy Engine Section 6.6.10.4\nDiscoverIdentityTimer tDiscoverIdentity Policy Engine Section 6.6.15\nHardResetCompleteTimer tHardResetComplete Protocol Layer Section 6.6.9\nNoResponseTimer tNoResponse Policy Engine Section 6.6.6\nPSHardResetTimer tPSHardReset Policy Engine Section 6.6.11.2\nPSSourceOffTimer tPSSourceOff Policy Engine Section 6.6.5.2\nPSSourceOnTimer tPSSourceOn Policy Engine Section 6.6.5.3\nPSTransitionTimer tPSTransition Policy Engine Section 6.6.5.1\nSenderResponseTimer tSenderResponse Policy Engine Section 6.6.2\nSinkEPREnterTimer tEnterEPR Policy Engine Section 6.6.21.1\nSinkEPRKeepAliveTimer tSinkEPRKeepAlive Policy Engine Section 6.6.21.2\nSinkPPSPeriodicTimer tPPSRequest Policy Engine Section 6.6.19.1\nSinkRequestTimer tSinkRequest Policy Engine Section 6.6.4\nSinkWaitCapTimer tTypeCSinkWaitCap Policy Engine Section 6.6.3.2\nSourceCapabilityTimer tTypeCSendSourceCap Policy Engine Section 6.6.3.1\nSourceEPRKeepAliveTimer tSourceEPRKeepAlive Policy Engine Section 6.6.21.3\nSourcePPSCommTimer tPPSTimeout Policy Engine Section 6.6.19.2\nSinkTxTimer tSinkTx Protocol Layer Section 6.6.16\nSwapSourceStartTimer tSwapSourceStart Policy Engine Section 6.6.8.1\nVCONN DischargeTimer tVCONN SourceDischarge Policy Engine Section 6.6.10.1\nVCONN OnTimer tVCONN SourceTimeout Policy Engine Section 6.6.13.1\nVDMModeEntryTimer tVDMWaitModeEntry Policy Engine Section 6.6.12.2\nVDMModeExitTimer tVDMWaitModeExit Policy Engine Section 6.6.12.3\nVDMResponseTimer tVDMSenderResponse Policy Engine Section 6.6.12.1\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2656.7 Counters"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.1",
    "title": "MessageID Counter",
    "full_path": "6.7.1 MessageID Counter",
    "page": 265,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "The MessageIDCounter is a rolling counter, ranging from 0 to nMessageIDCount , used to detect duplicate\nMessage s. This value is used for the MessageID field in the Message Header of each transmitted Message .\nEach Port Shall maintain a copy of the last MessageID value received from its Port Partner . Devices that support\nmultiple ports, such as Hub s, Shall maintain copies of the last MessageID on a per Port basis. A Port which\ncommunicates using SOP* Packet s Shall maintain copies of the last MessageID for each type of SOP* it uses.\nThe transmitter Shall use the MessageID in a GoodCRC Message to verify that a particular Message was received\ncorrectly. The receiver Shall use the MessageID to detect duplicate Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.1.1",
    "title": "Transmitter Usage",
    "full_path": "6.7.1.1 Transmitter Usage",
    "page": 265,
    "level": 4,
    "parent_id": "6.7.1",
    "tags": [],
    "content": "The Transmitter Shall use the MessageID as follows:\n Upon receiving either Hard Reset Signaling , or a Soft_Reset Message , the transmitter Shall set its\nMessageIDCounter to zero and re-initialize its retry mechanism.\n If a GoodCRC Message with a MessageID matching the MessageIDCounter is not received before the\nCRCReceiveTimer expires, it Shall retry the same Packet up to nRetryCount times using the same\nMessageID .\n If a GoodCRC Message is received with a MessageID matching the current MessageIDCounter before\nthe CRCReceiveTimer expires, the transmitter Shall re-initialize its retry mechanism and increment its\nMessageIDCounter .\n If the Message is aborted by the Policy Engine , the transmitter Shall delete the Message from its transmit\nbuffer, re-initialize its retry mechanism and increment its MessageIDCounter ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.1.2",
    "title": "Receiver Usage",
    "full_path": "6.7.1.2 Receiver Usage",
    "page": 265,
    "level": 4,
    "parent_id": "6.7.1",
    "tags": [],
    "content": "The Receiver Shall use the MessageID as follows:\n When the first good Packet is received after a reset, the receiver Shall store a copy of the received\nMessageID value.\n For subsequent Message s, if MessageID value in a received Message is the same as the stored value, the\nreceiver Shall return a GoodCRC Message with that MessageID value and drop the Message (this is a\nretry of an already received Message ).\nNote: This Shall Not apply to the Soft_Reset Message which always has a MessageID value of zero.\n If MessageID value in the received Message is different than the stored value, the receiver Shall return\na GoodCRC Message with the new MessageID value, store a copy of the new MessageID value and pro -\ncess the Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.2",
    "title": "Retry Counter",
    "full_path": "6.7.2 Retry Counter",
    "page": 265,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "The RetryCounter is used by a Port whenever there is a Message transmission failure (timeout of\nCRCReceiveTimer ). If the nRetryCount retry fails, then the link Shall be reset using the Soft Reset mechanism.\nThe following rules apply to retries when there is a Message transmission failure (see also Section 6.12.2.2,\n\"Protocol Layer Message Transmission\" ):\n Cable Plug s Shall Not retry Message s.\n Extended Message s of Data Size > MaxExtendedMsgLegacyLen that are not Chunked (Chunked flag set\nto zero) Shall Not be retried.\nPage 266 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Extended Message s of Data Size ≤ MaxExtendedMsgLegacyLen (Chunked flag set to zero or one) Shall\nbe retried.\n Extended Message s of Data Size > MaxExtendedMsgLegacyLen that are Chunked (Chunked flag set to\none) individual Chunks Shall be retried.\nWhen Message s are not retried, then the RetryCounter is not used. Higher layer protocols are expected to\naccommodate Message delivery failure or failure to receive a GoodCRC Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.3",
    "title": "Hard Reset Counter",
    "full_path": "6.7.3 Hard Reset Counter",
    "page": 266,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "The HardResetCounter is used to retry the Hard Reset whenever there is no response from the remote device (see\nSection 6.6.6, \"NoResponseTimer\" ). Once the Hard Reset has been retried nHardResetCount times then it Shall be\nassumed that the remote device is non-responsive."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.4",
    "title": "Capabilities Counter",
    "full_path": "6.7.4 Capabilities Counter",
    "page": 266,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "The CapsCounter is used to count the number of Source_Capabilities Message s which have been sent by a Source\nat power up or after a Hard Reset . Implementation of the CapsCounter is Optional but May be used by any Source\nwhich wishes to preserve power by not sending Source_Capabilities Message s after a period of time.\nWhen the CapsCounter is implemented and the Source detects that a Sink is Attached then after nCapsCount\nSource_Capabilities Message s have been sent the Source Shall decide that the Sink is non-responsive, stop sending\nSource_Capabilities Message s and disable PD.\nA Sink Shall use the SinkWaitCapTimer to trigger the resending of Source_Capabilities Message s by a USB Power\nDelivery capable Source which has previously stopped sending Source_Capabilities Message s. Any Sink which is\nAttached and does not detect a Source_Capabilities Message , Shall issue Hard Reset Signaling when the\nSinkWaitCapTimer times out in order to reset the Source . Resetting the Source Shall also reset the CapsCounter\nand restart the sending of Source_Capabilities Message s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.5",
    "title": "Discover Identity Counter",
    "full_path": "6.7.5 Discover Identity Counter",
    "page": 266,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "When sending Discover Identity Message s to a Cable Plug a Port Shall maintain a count of Message s sent\n(DiscoverIdentityCounter ). No more than nDiscoverIdentityCount Discover Identity Message s Shall be sent by\nthe Port without receiving a GoodCRC Message response. A V CONN Swap Shall reset the DiscoverIdentityCounter ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.7.6",
    "title": "VDMBusyCounter",
    "full_path": "6.7.6 VDMBusyCounter",
    "page": 266,
    "level": 3,
    "parent_id": "6.7",
    "tags": [],
    "content": "When sending Responder BUSY responses to a Structured Vendor_Defined Message a UFP or Cable Plug Shall\nmaintain a count of Message s sent ( VDMBusyCounter ). No more than nBusyCount Responder BUSY responses\nShall be sent. The VDMBusyCounter Shall be reset on sending a non- BUSY response. Products wishing to meet\n[USB Type-C 2.4] requirements for Alternate Mode entry Should use an nBusyCount of 1.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2676.7.7 Counter Values and Counters\nTable 6.70, \"Counter Parameters\" lists the counters used in this section and Table 6.71, \"Counters\" shows the\ncorresponding parameters.\nTable 6.70 Counter Parameters\nParameter Value Reference\nnBusyCount 5 Section 6.7.6\nnCapsCount 50 Section 6.7.4\nnDiscoverIdentityCount 20 Section 6.7.5\nnHardResetCount 2 Section 6.7.3\nnMessageIDCount 7 Section 6.7.1\nnRetryCount 2 Section 6.7.2\nTable 6.71 Counters\nCounter Max Reference\nCapsCounter nCapsCount Section 6.7.4\nDiscoverIdentityCounter nDiscoverIdentityCount Section 6.7.5\nHardResetCounter nHardResetCount Section 6.7.3\nMessageIDCounter nMessageIDCount Section 6.7.1\nRetryCounter nRetryCount Section 6.7.2\nVDMBusyCounter nBusyCount Section 6.7.6\nPage 268 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.8 Reset\nResets are a necessary response to protocol or other error conditions. USB Power Delivery defines four different\ntypes of reset:\n Soft Reset , which resets protocol.\n Data Reset which resets the USB Communications.\n Hard Reset which resets both the power supplies and protocol\n Cable Reset which resets the cable."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.1",
    "title": "Soft Reset and Protocol Error",
    "full_path": "6.8.1 Soft Reset and Protocol Error",
    "page": 268,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": "A Soft_Reset Message is used to cause a Soft Reset of protocol communication when this has broken down in some\nway. It Shall Not have any impact on power supply operation but is used to correct a Protocol Error occurring\nduring an Atomic Message Sequence (AMS ). The Soft Reset May be triggered by either Port Partner in response to\nthe Protocol Error .\nProtocol Error s are any unexpected Message during an AMS . If the first Message in an AMS has been passed to the\nProtocol Layer by the Policy Engine but has not yet been sent (i.e., a GoodCRC Message acknowledging the Message\nhas not been received) when the Protocol Error occurs, the Policy Engine Shall Not issue a Soft Reset but Shall\nreturn to the PE_SNK_Ready or PE_SRC_Ready state and then process the incoming Message . If the incoming\nMessage is an Unexpected Message received in the PE_SNK_Ready or PE_SRC_Ready state, the Policy Engine Shall\nissue a Soft Reset . If the Protocol Error occurs during an AMS this Shall lead to a Soft Reset in order to re-synchronize\nthe Policy Engine state machines (see Section 8.3.3.4, \"SOP Soft Reset and Protocol Error State Diagrams\" ) except\nwhen the voltage is transition when a Protocol Error Shall lead to a Hard Reset (see Section 6.6.11.4,\n\"tProtErrHardReset\" and Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" ). Details of AMS 's can be found\nin Section 8.3.2.1.3, \"Atomic Message Sequences\" .\nAn Unrecognized Message or Unsupported Message received in the PE_SNK_Ready or PE_SRC_Ready states, Shall\nNot cause a Soft_Reset Message to be generated but instead a Not_Supported Message Shall be generated.\nA Soft_Reset Message Shall be sent regardless of the Rp value either SinkTxOK or SinkTxNG if it is the correct\nresponse in that state.\nNote: This means that a Soft_Reset Message can be sent during an AMS regardless of the Rp value either\nSinkTxOK or SinkTxNG when responding to a Protocol Error .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 269Table 6.72, \"Response to an incoming Message (except VDM)\" and Table 6.73, \"Response to an incoming VDM\"\nsummarize the responses that Shall be made to an incoming Message including VDM s.\nA failure to see a GoodCRC Message in response to any Message within tReceive (after nRetryCount retries), when\na Port Pair is Connected , is indicative of a communications failure resulting in a Soft Reset (see Section 6.6.9.1,\n\"tSoftReset\" ).\nA Soft Reset Shall impact the USB Power Delivery layers in the following ways:\n PHY Layer : Reset not required since the PHY Layer resets on each Packet transmission/reception.\n Protocol Layer : Reset MessageIDCounter , RetryCounter and state machines.Table 6.72 Response to an incoming Message (except VDM)\nRecipient’s\nPower RoleRecipient’s\nstateIncoming Message\nRecognized Unrecognized\nSupported Unsupported\nExpected Unexpected\nSource\nPE_SRC_Ready Process MessageSoft_Reset\nMessage2Not_Supported\nMessage3Not_Supported Message3\n(except for VDM )\nSee Section 6.4.4.1 for UVDM.\nSee Section 6.4.4.1 for SVDM\nDuring AMS\n(power not\ntransitioning1)Process Message Soft_Reset Message2\nDuring AMS\n(power\ntransitioning1)Process Message Hard Reset Signaling\nSink\nPE_SNK_Ready Process MessageSoft_Reset\nMessage2Not_Supported\nMessage3Not_Supported Message3\n(except for VDM )\nSee Section 6.4.4.1 for UVDM.\nSee Section 6.4.4.1 for SVDM\nDuring AMS (not\npower\ntransitioned)Process Message Soft_Reset Message2\nDuring AMS\n(power\ntransitioned)Process Message Hard Reset Signaling\n1) “Power transitioning” means the Policy Engine is in PE_SRC_Transition_Supply State or PE_SNK_Transition_Sink State\nor PE_FRS_SNK_SRC_Start_AMS State.\n2) The Soft_Reset Message Shall be sent using the SOP* of the incoming Message .\n3) The Not_Supported Message Shall be sent using the SOP* of the incoming Message .\nTable 6.73 Response to an incoming VDM\nRecipient's\nRoleUnstructured VDM Structured VDM\nSupported Unsupported Unrecognized Supported Unsupported Unrecognized\nDFP or UFP Defined by\nvendor Not_Supported\nMessage Not_Supported\nMessageSee\nSection 6.13.5 Not_Supported\nMessageNAK Command\nCable Plug Defined by\nvendorMessage\nIgnoredMessage\nIgnoredSee\nSection 6.13.5Message\nIgnoredNAK Command\nPage 270 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Policy Engine : Reset state dependent behavior by performing an Explicit Contract Negotiation .\n Power supply: Shall Not change.\nNote: When in SPR Mode the Source sends a Source_Capabilities Message and when in EPR Mode the Source\nsends an EPR_Source_Capabilities Message .\nA Soft Reset is performed using an AMS (see Table 8.8, \"AMS: Soft Reset\" ). Message numbers Shall be set to zero\nprior to sending the Soft_Reset /Accept Message since the issue might be with the counters. The sender of a\nSoft_Reset Message Shall reset its MessageIDCounter and RetryCounter , the receiver of the Message Shall reset\nits MessageIDCounter and RetryCounter before sending the Accept Message response. Any failure in the Soft\nReset process will trigger a Hard Reset when SOP Packets are being used or Cable Reset , sent by the DFP only, for\nany other SOP* Packet s; for example a GoodCRC Message is not received during the Soft Reset process (see Section\n6.8.3, \"Hard Reset\" and Section 6.8.4, \"Cable Reset\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.2",
    "title": "Data Reset",
    "full_path": "6.8.2 Data Reset",
    "page": 270,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": "A Data_Reset Message is used by a Port to reset its USB data connection and to exit all Alternate Mode s both with its\nPort Partner and in the Cable Plug (s).\n The Data Reset process May be initiated by either Port Partner sending a Data_Reset Message .\nA Data Reset impacts USB Power Delivery in the following ways:\n Shall Not change the Port Power Role s (Source /Sink ) or Port Data Role s (DFP /UFP ).\n Shall Not change the existing Explicit Contract .\n Shall cause all Active Mode s to be exited.\n Shall reset the cable by Power cycling VCONN .\n The DFP Shall become the VCONN Source .\n If the Data Reset process fails, then the Port Shall enter the ErrorRecovery State as defined in [USB\nType-C 2.4] .\nSee Section 6.3.14, \"Data_Reset Message\" for details of Data Reset operation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.3",
    "title": "Hard Reset",
    "full_path": "6.8.3 Hard Reset",
    "page": 270,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": "Hard Reset s are signaled by an ordered set as defined in Section 5.6.4, \"Hard Reset\" . Both the sender and recipient\nShall cause their power supplies to return to their default states (see Section 7.3.3.1, \"Source Initiated Hard Reset\"\nand Section 7.3.3.2, \"Sink Initiated Hard Reset\" for details of voltage transitions). In addition, their respective\nProtocol Layer s Shall be reset as for the Soft Reset . This allows the Attached devices to be in a state where they can\nre-establish USB PD communication. Hard Reset is retried up to nHardResetCount times (see also Section 6.6.6,\n\"NoResponseTimer\" and Section 6.7.3, \"Hard Reset Counter\" ).\nNote: Even though VBUS drops to vSafe0V during a Hard Reset a Sink will not see this as a disconnect since this\nis expected behavior.\nA Hard Reset Shall Not cause any change to either the Rp/Rd resistor being asserted.\nIf there has been a Data Role Swap the Hard Reset Shall cause the Port Data Role to be changed back to DFP for a\nPort with the Rp resistor asserted and UFP for a Port with the Rd resistor asserted.\nWhen VCONN is supported (see [USB Type-C 2.4]) the Hard Reset Shall cause the Port with the Rp resistor asserted\nto supply VCONN and the Port with the Rd resistor asserted to turn off VCONN .\nIn effect the Hard Reset will revert the Ports to their default state based on their CC line resistors. Removing and\nreapplying VCONN from the Cable Plug s also ensures that they re-establish their configuration as either SOP’ or SOP’’\nbased on the location of VCONN (see [USB Type-C 2.4] ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 271If the Hard Reset is insufficient to clear the error condition, then the Port Shall use USB Type-C ErrorRecovery as\ndefined in [USB Type-C 2.4] .\nA Sink Shall be able to send Hard Reset Signaling regardless of the value of Rp (see Section 5.7, \"Collision\nAvoidance\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.3.1",
    "title": "Cable Plugs and Hard Reset",
    "full_path": "6.8.3.1 Cable Plugs and Hard Reset",
    "page": 271,
    "level": 4,
    "parent_id": "6.8.3",
    "tags": [],
    "content": "Cable Plug s Shall Not generate Hard Reset Signaling but Shall monitor for Hard Reset Signaling between the Port\nPartner s and Shall reset when this is detected (see Section 8.3.3.25.2.2, \"Cable Plug Hard Reset State Diagram\" ). The\nCable Plug s Shall perform the equivalent of a power cycle returning to their initial power up state. This allows the\nPort Partner s to be in a state where they can re-establish USB PD communication."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.3.2",
    "title": "Modal Operation and Hard Reset",
    "full_path": "6.8.3.2 Modal Operation and Hard Reset",
    "page": 271,
    "level": 4,
    "parent_id": "6.8.3",
    "tags": [],
    "content": "A Hard Reset Shall cause EPR Mode and all Active Mode s to be exited by both Port Partner s and any Cable Plug s (see\nSection 6.4.4.3.4, \"Enter Mode Command\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.8.4",
    "title": "Cable Reset",
    "full_path": "6.8.4 Cable Reset",
    "page": 271,
    "level": 3,
    "parent_id": "6.8",
    "tags": [],
    "content": "Cable Reset s are signaled by an ordered set as defined in Section 5.6.5, \"Cable Reset\" . Both the sender and recipient\nof Cable Reset Signaling Shall reset their respective Protocol Layer s. The Cable Plug s Shall perform the equivalent\nof a power cycle returning to their initial power up state. This allows the Port Partner s to be in a state where they\ncan re-establish USB PD communication.\nThe DFP must be supplying V CONN prior to a Cable Reset . If VCONN has been turned off the DFP Shall turn on VCONN\nprior to generating Cable Reset Signaling . If there has been a VCONN Swap and the UFP is currently supplying VCONN ,\nthe DFP Shall perform a V CONN Swap such that it is supplying VCONN prior to generating Cable Reset Signaling .\nOnly a DFP Shall generate Cable Reset Signaling . A DFP Shall only generate Cable Reset Signaling within an\nExplicit Contract .\nA Cable Reset Shall cause all Active Mode s in the Cable Plug s to be exited (see Section 6.4.4.3.4, \"Enter Mode\nCommand\" ).\nPage 272 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.9 Accept, Reject and Wait\nThe recipient of a Request , EPR_Request , PR_Swap , DR_Swap , VCONN _Swap , or Enter_USB Message Shall respond\nby sending one of the following responses:\n An Accept Message in response to a Valid request which can be serviced immediately (see Section 6.3.3,\n\"Accept Message\" ).\n A Wait Message in response to a Valid request which cannot be serviced immediately but could be ser -\nviced at a later time (see Section 6.3.12, \"Wait Message\" ).\n A Reject Message in response to an Invalid request or a request which is outside of the device's design\nCapabilities (see Section 6.3.4, \"Reject Message\" ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2736.10 Collision Avoidance\nTo avoid Message collisions due to asynchronous Messaging sent from the Sink , the Source sets Rp to SinkTxOK to\nindicate to the Sink that it is OK to initiate an AMS . When the Source wishes to initiate an AMS , it sets Rp to SinkTxNG.\nWhen the Sink detects that Rp is set to SinkTxOK it May initiate an AMS . When the Sink detects that Rp is set to\nSinkTxNG it Shall Not initiate an AMS and Shall only send Message s that are part of an AMS the Source has initiated.\nNote: This restriction applies to SOP* AMS 's i.e., for both Port to Port and Port to Cable Plug communications.\nIf a transition into the PE_SRC_Ready state will result in an immediate transition out of the PE_SRC_Ready state\nwithin tSrcHoldsBus e.g. it is due to a Protocol Error that has not resulted in a Soft Reset , then the notifications of\nthe end of AMS and first Message in an AMS May Not be sent to avoid changing the Rp value unnecessarily.\nNote: A Sink can still send Hard Reset Signaling at any time.\nPage 274 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.11 Message Discarding\nOn receiving a received Message on SOP , the Protocol Layer Shall Discard any pending SOP* Message s. A received\nMessage on SOP’ /SOP’’ Shall Not cause any pending SOP* Message s to be Discarded .\nIt is assumed that Message s using SOP’ /SOP’’ constitute a simple request/response AMS , with the Cable Plug\nproviding the response so there is no reason for a pending SOP* Message to be Discarded . There can only be one\nAMS between the Port Partner s, and these also take priority over Cable Plug communications so a Message received\non SOP will always cause a Message pending on SOP* to be Discarded .\nTable 6.74, \"Message Discarding\" for details of the Message s that Shall / Shall Not be Discarded .\nTable 6.74 Message Discarding\nMessage pending transmission Message received Message to be Discarded\nSOP SOP Outgoing Message\nSOP SOP’ /SOP’’ Incoming Message\nSOP’ SOP Outgoing Message\nSOP’ SOP’ Incoming Message\nSOP’ SOP’’ Incoming Message\nSOP’’ SOP Outgoing Message\nSOP’’ SOP’ Incoming Message\nSOP’’ SOP’’ Incoming Message\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2756.12 State behavior"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.1",
    "title": "Introduction to state diagrams used in Chapter 6",
    "full_path": "6.12.1 Introduction to state diagrams used in Chapter 6",
    "page": 275,
    "level": 3,
    "parent_id": "6.12",
    "tags": [],
    "content": "The state diagrams defined in Section 6.12, \"State behavior\" are Normative and Shall define the operation of the\nPower Delivery Protocol Layer .\nNote: These state diagrams are not intended to replace a well written and robust design.\nFigure 6.57, \"Outline of States\" shows an outline of the states defined in the following sections. At the top there is\nthe name of the state. This is followed by \"Actions on entry\" a list of actions carried out on entering the state and\nin some states \"Actions on exit\" a list of actions carried out on exiting the state.\nFigure 6.57 Outline of States\nTransitions from one state to another are indicated by arrows with the conditions listed on the arrow. Where there\nare multiple conditions, these are connected using either a logical OR \"|\" or a logical AND \"&.\" The inverse of a\ncondition is shown with a \"NOT\" in front of the condition.\nIn some cases, there are transitions which can occur from any state to a particular state. These are indicated by an\narrow which is unconnected to a state at one end, but with the other end (the point) connected to the final state.\nIn some state diagrams it is necessary to enter or exit from states in other diagrams. Figure 6.57, \"Outline of States\"\nindicates how such references are made. The reference is indicated with a hatched box. The box contains the name\nof the referenced state.\nFigure 6.58 References to states\nTimers are included in many of the states. Timers are initialized (set to their starting condition) and run (timer is\ncounting) in the state it is referenced. As soon as the state is exited then the timer is no longer active. Timeouts of\nthe timers are listed as conditions on state transitions.\nConditions listed on state transitions will come from one of three sources:<Name of State>\nActions on entry:\n“List of actions to carry out on entering the state”\nActions on exit:“List of actions to carry out on exiting the state”\n<Name of reference state>\n(<DFP | UFP>)\nPage 276 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Message s received from the PHY Layer .\n Events triggered within the Protocol Layer e.g., timer timeouts\n Message and related indications passed up to the Policy Engine from the Protocol Layer (Message sent;\nMessage received etc.)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2",
    "title": "State Operation",
    "full_path": "6.12.2 State Operation",
    "page": 276,
    "level": 3,
    "parent_id": "6.12",
    "tags": [],
    "content": "The following section details Protocol Layer State Operation when sending and receiving SOP* Packet s.\nFor each SOP’ Communication being sent and received there Shall be separate Protocol Layer Transmission and\nProtocol Layer Reception and Hard Reset State Machine instances, with their own counter and timer instances.\nWhen Chunking is supported there Shall be separate Chunked Tx, Chunked Tx, and Chunked Message Router State\nMachine instances.\nSoft Reset Shall only apply to the State Machine instances it is targeted at based on the type of SOP* Packet used to\nsend the Soft_Reset Message . The Hard Reset State Machine (including Cable Reset ) Shall apply simultaneously to\nall Protocol Layer State Machine instances active in the DFP , UFP and Cable Plug (if present)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1",
    "title": "Protocol Layer Chunking",
    "full_path": "6.12.2.1 Protocol Layer Chunking",
    "page": 276,
    "level": 4,
    "parent_id": "6.12.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.1",
    "title": "Architecture of Device Including Chunking Layer",
    "full_path": "6.12.2.1.1 Architecture of Device Including Chunking Layer",
    "page": 276,
    "level": 5,
    "parent_id": "6.12.2.1",
    "tags": [],
    "content": "The Chunking component resides in the Protocol Layer between the Policy Engine and Protocol Tx/Rx. Figure 6.59,\n\"Chunking architecture Showing Message and Control Flow\" illustrates the relationship between components.\nThe Chunking Layer comprises three related state machines:\n Chunked Rx.\n Chunked Tx.\n Chunked Message Router.\nNote: The consequence of this architecture is that the Policy Engine deals entirely in Unchunked Message s. It\nwill not receive (and might not respond to) a Message until all the related chunks have been collated.\nIf a PD device or Cable Plug has no requirement to handle any Message requiring more than one Chunk of any\nExtended Message , it May omit the Chunking Layer . In this case it Shall implement the\nChunkingNotSupportedTimer to ensure compatible operation with partners which support Chunking (see Section\n6.6.18.1, \"ChunkingNotSupportedTimer\" and Section 8.3.3.6, \"Not Supported Message State Diagrams\" ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 277Figure 6.59 Chunking architecture Showing Message and Control Flow"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.1.1",
    "title": "Optional Abort Mechanism",
    "full_path": "6.12.2.1.1.1 Optional Abort Mechanism",
    "page": 277,
    "level": 6,
    "parent_id": "6.12.2.1.1",
    "tags": [],
    "content": "Long Chunked Message s bring with them the potential problem that they could prevent urgent Message s from being\ntransmitted in a timely manner. An Optional Abort mechanism is provided to remedy this problem.\nThe Abort Flag referred to in the diagrams below May be set and examined by the Policy Engine . The specific means\nare left to the implementer."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.1.2",
    "title": "Aborting Sending a Long-Chunked Message",
    "full_path": "6.12.2.1.1.2 Aborting Sending a Long-Chunked Message",
    "page": 277,
    "level": 6,
    "parent_id": "6.12.2.1.1",
    "tags": [],
    "content": "A long- Chunked Message being sent May be aborted by setting the Optional Abort Flag. The Message Shall be\nconsidered aborted when the Abort Flag is again cleared by the Chunked Tx state machine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.1.3",
    "title": "Aborting Receiving a Long-Chunked Message",
    "full_path": "6.12.2.1.1.3 Aborting Receiving a Long-Chunked Message",
    "page": 277,
    "level": 6,
    "parent_id": "6.12.2.1.1",
    "tags": [],
    "content": "If the Optional Abort mechanism has been implemented, any Message sent while a Chunked Message receive is in\nprogress will result in an error report being received by the Policy Engine, to indicate that the Message request has\nbeen Discarded . If the Message was urgent the Policy Engine might set the Abort Flag, which will result in the\nincoming Chunked Message being aborted. The Abort Flag being cleared by the Chunked Rx state machine indicates\nthat the urgent Message can now be sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2",
    "title": "Chunked Rx State Diagram",
    "full_path": "6.12.2.1.2 Chunked Rx State Diagram",
    "page": 277,
    "level": 5,
    "parent_id": "6.12.2.1",
    "tags": [],
    "content": "Figure 6.60, \"Chunked Rx State Diagram\" shows the state behavior for the Chunked Rx State Machine. This\nrecognizes whether Chunked received Message s are involved and deals with requesting chunks when they are. It\nalso performs validity checks on all Message s related to Chunking .Policy Engine\nProtocol Layer Rx Protocol Layer Tx\nPHY LayerRp Control or\nDetectionChunked Rx Chunked Tx\nChunkingProtocol Layer\nHard ResetChunked Message RouterAMS Notification\nPage 278 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 6.60 Chunked Rx State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2.1",
    "title": "RCH_Wait_For_Message_From_Protocol_Layer State",
    "full_path": "6.12.2.1.2.1 RCH_Wait_For_Message_From_Protocol_Layer State",
    "page": 278,
    "level": 6,
    "parent_id": "6.12.2.1.2",
    "tags": [],
    "content": "The Chunked Rx State Machine Shall enter the RCH_Wait_For_Message_From_Protocol_Layer state:\n At startup.\n As a result of a Soft Reset occurring.\n On exit from a Hard Reset .\nOn entry to the RCH_Wait_For_Message_From_Protocol_Layer state the Chunked Rx state machine clears the\nExtended Rx Buffer and clears the Optional Abort Flag.\nIn the RCH_Wait_For_Message_From_Protocol_Layer state the Chunked Rx state machine waits until the Chunked\nMessage Router passes up a received Message .\nThe Chunked Rx State Machine Shall transition to the RCH_Pass_Up_Message state when:\n A non- Extended Message is passed up from the Chunked Message Router.\n An Extended Message is passed up from the Chunked Message Router, and the Policy Engine has\ndetermined that we are not doing Chunking , and the Message has its Chunked bit set to 0b.\nThe Chunked Rx State Machine Shall transition to the RCH_Processing_Extended_Message state when:\n An Extended Message is passed up from the Chunked Message Router, and the Policy Engine has\ndetermined that we are doing Chunking , and the Message has its Chunked bit set to 1b."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2.2",
    "title": "RCH_Pass_Up_Message State",
    "full_path": "6.12.2.1.2.2 RCH_Pass_Up_Message State",
    "page": 278,
    "level": 6,
    "parent_id": "6.12.2.1.2",
    "tags": [],
    "content": "On entry to the RCH_Pass_Up_Message state the Chunked Rx state machine Shall pass the received Message to the\nPolicy Engine .\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n The Message has been passed.Transmission Error\nfrom Protocol Layer |\nMessage Received\nfrom Protocol LayerOther Message Received\nfrom Protocol Layer |\nChunkSenderResponseTimer timeout\nRCH_Pass_Up_Message\nActions on entry:\nPass Message to Policy EngineRCH_Wait_For_Message_From_Protocol_Layer\nActions on entry:Clear Extended Rx BufferClear Abort FlagRCH_Report_Error\nActions on entry:Report Error to Policy Engine.If a Message was received, pass it to the Policy Engine.\nRCH_Processing_\nExtended_Message\nActions on entry:If first chunk: set Chunk_Number_Expected = 0 and Num bytes received = 0\nIf expected Chunk Number: Append\ndata to Extended_Message_Buffer; Increment Chunk_Number_Expected and adjust Num bytes received.RCH_Requesting_Chunk\nActions on entry:Send notification SRT_Stop to SenderResponseTimer State Machine.\nSend Chunk Request to Protocol\nLayer with Chunk Number = Chunk_Number_Expected.RCH_Waiting_Chunk\nActions on entry:Start ChunkSenderResponseTimer3\nSend notification SRT_Start to\nSenderResponseTimer State Machine.\n3Start\nMessage\nnot\nCompleteMessage\nTransmitted\nreceived from\nProtocol LayerUnexpected\nChunk NumberReported\nChunked !=\nChunking1\nReceived Non-Extended Message |\n(Received Extended Message &\n(Chunking1 = 0 & Chunked = 0) )\nMessage is Complete\n(Num bytes received\n>= specified Data Size)2Message Passed\nChunk Response Received\nfrom Protocol LayerReceived\nExtended Message &\n(Chunking1 = 1 &\nChunked = 1)Any Message Received and\nnot in state RCH_Waiting_Chunk\nor RCH_Wait_For_Message_From_\nProtocol_Layer\nAbort Flag SetSoft Reset occured |\nExit from Hard Reset\n1)Chunking is an internal state that is set to 1 if the ‘Unchunked Extended Messages Supported’ bit in either Source Capabilities or Request is 0. It defaults to 1 and is set after the first exchange of Source Capabilities and Request. It is also set to 1 for SOP’ or SOP’’ communication.\n2)Additional bytes received over specified Data Size will be because of padding in the last chunk.\n3)This state is responsible for starting two timers of similar length. The implementor Should mitigate against more than one of these timers resulting in recovery action.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2796.12.2.1.2.3 RCH_Processing_Extended_Message State\nOn entry to the RCH_Processing_Extended_Message state the Chunked Rx state machine Shall :\n If this is the first chunk:\n Set Chunk_Number_Expected = 0.\n Set Num bytes received = 0.\n If chunk contains the expected Chunk Number :\n Append its data to the Extended_Message_Buffer.\n Increment Chunk_Number_Expected.\n Adjust Num bytes received.\nThe Chunked Rx State Machine Shall transition to the RCH_Pass_Up_Message state when:\n The Message is complete (i.e., Num bytes received >= specified Data Size .\nNote: The inequality allows for padding bytes in the last chunk, which are not actually part of the Extended Mes -\nsage ).\nThe Chunked Rx State Machine Shall transition to the RCH_Requesting_Chunk state when:\n The Message is not yet complete.\nThe Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n An unexpected Chunk Number is received.\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n The Optional Abort Flag is set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2.4",
    "title": "RCH_Requesting_Chunk State",
    "full_path": "6.12.2.1.2.4 RCH_Requesting_Chunk State",
    "page": 279,
    "level": 6,
    "parent_id": "6.12.2.1.2",
    "tags": [],
    "content": "On entry to the RCH_Requesting_Chunk state the Chunked Rx state machine Shall :\n Send notification SRT_Stop to SenderResponseTimer state machine (see Section 8.3.3.1.1,\n\"SenderResponseTimer State Diagram\" ).\n Send Chunk Request to Protocol Layer with Chunk Number = Chunk_Number_Expected.\nThe Chunked Rx State Machine Shall transition to the RCH_Waiting_Chunk state when:\n Message Transmitted is received from the Protocol Layer .\nThe Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n Transmission Error is received from the Protocol Layer , or\n A Message is received from the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2.5",
    "title": "RCH_Waiting_Chunk State",
    "full_path": "6.12.2.1.2.5 RCH_Waiting_Chunk State",
    "page": 279,
    "level": 6,
    "parent_id": "6.12.2.1.2",
    "tags": [],
    "content": "On entry to the RCH_Waiting_Chunk state the Chunked Rx state machine Shall :\n Start the ChunkSenderResponseTimer .\n Send notification SRT_Start to SenderResponseTimer state machine (see S Section 8.3.3.1.1,\n\"SenderResponseTimer State Diagram\" ).\nThe Chunked Rx State Machine Shall transition to the RCH_Processing_Extended_Message state when:\n A Chunk is received from the Protocol Layer .\nPage 280 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n A Message , other than a Chunk , is received from the Protocol Layer , or\n The ChunkSenderResponseTimer expires."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.2.6",
    "title": "RCH_Report_Error State",
    "full_path": "6.12.2.1.2.6 RCH_Report_Error State",
    "page": 280,
    "level": 6,
    "parent_id": "6.12.2.1.2",
    "tags": [],
    "content": "The Chunked Rx State Machine Shall enter the RCH_Report_Error state:\n When any Message is received and the Chunked Rx State Machine is not in one of the states\nRCH_Waiting_Chunk or RCH_Wait_For_Message_From_Protocol_Layer .\nOn entry to the RCH_Report_Error state the Chunked Rx state machine Shall :\n Report the error to the Policy Engine .\n If the state was entered because a Message was received, this Message Shall be passed to the Policy\nEngine .\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n The error has been reported.\n Any Message received was passed to the Policy Engine .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2816.12.2.1.3 Chunked Tx State Diagram\nFigure 6.61, \"Chunked Tx State Diagram\" shows the state behavior for the Chunked Tx State Machine. This\nrecognizes whether Chunked transmitted Message s are involved and deals with sending chunks and waiting for\nchunk requests when they are. It also performs validity checks on all related Message s related to Chunking .\nFigure 6.61 Chunked Tx State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.1",
    "title": "TCH_Wait_For_Message_Request_From_Policy_Engine State",
    "full_path": "6.12.2.1.3.1 TCH_Wait_For_Message_Request_From_Policy_Engine State",
    "page": 281,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Chunked Tx State Machine Shall enter the TCH_Wait_For_Message_Request_From_Policy_Engine state:\n At startup.\n As a result of a Soft Reset occurring.\n On exit from a Hard Reset .\nOn entry to the TCH_Wait_For_Message_Request_From_Policy_Engine state the Chunked Tx state machine clears\nthe Optional Abort Flag.\nIn the TCH_Wait_For_Message_Request_From_Policy_Engine state the Chunked Tx State Machine waits until the\nPolicy Engine sends it a Message Request.\nThe Chunked Tx State Machine Shall transition to the TCH_Pass_Down_Message state when:\n A non- Extended Message Request is received from the Policy Engine , or\n A Message Request is received from the Policy Engine and the link is not Chunking .TCH_Sending_\nChunked_Message\nActions on entry:TCH_ Wait_ For_Message_Request_From_Policy_Engine\nActions on entry:\nClear Abort Flag\nTCH_Pass_Down_Message\nActions on entry:Pass Message to Protocol Layer\nTCH_Construct_\nChunked_Message\nActions on entry:Construct Message Chunk and pass to Protocol LayerTCH_Wait_For_\nTransmision_Complete\nActions on entry:TCH_Prepare_To_Send_\nChunked_Message\nActions on entry:'Chunk Number To Send' = 0\nTCH_Wait_Chunk_Request\nActions on entry:Increment Chunk Number to SendStart ChunkSenderRequestTimerTCH_Report_Error\nActions on entry:Report Error to Policy EngineSoft Reset occured |\nExit from Hard Reset\nStart\nNon-Extended Message Request |\nNot Chunking\nMessage\nPassed\nMessage Transmitted\nreceived from\nProtocol Layer\nTCH_Message_Sent\nActions on entry:Inform Policy Engine of Message SentAny Message Received and\nnot in state\nTCH_Wait_Chunk_RequestChunking &\nExtended Message Request\nChunk Number Set\nChunk\nPassed\nMessage Transmitted\nfrom Protocol Layer &\nNot Last ChunkTCH_Message_Received\nActions on entry:Clear Extended Message BuffersPass Message to Chunked RxMessage passed\nto Chunked Rx\nMessage Transmitted\nreceived from Protocol Layer &\nLast Chunk(Rx Chunking\nState !=\nRCH_Wait_For_\nMessage_From_\nProtocol_Layer) &\nAbort SupportedAbort Flag SetInformed\nChunk Request Rcvd &\nChunk Number =\nChunk Number to SendReported\nOther\nMessage\nReceived(Rx Chunking\nState !=\nRCH_Wait_For_\nMessage_From_\nProtocol_Layer) &\nAbort Not Supported\nTx Error from\nProtocol Layer\nChunkSenderRequestTimer\ntimeout & Chunk Number = 0(Chunk Request Rcvd &\nChunk Number !=\nChunk Number to Send) |\n(ChunkSenderRequestTimer\ntimeout & Chunk Number > 0)\nTransmission\nError\nPage 282 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Chunked Tx State Machine Shall transition to the TCH_Prepare_To_Send_Chunked_Message state when:\n An Extended Message Request is received from the Policy Engine , and the link is Chunking .\nThe Chunked Tx State Machine Shall Discard the Message Request and remain in the\nTCH_Wait_For_Message_Request_From_Policy_Engine state when:\n The Chunked Rx state is any other than RCH_Wait_For_Message_From_Protocol_Layer , and the\nOptional Abort Flag has not been implemented.\nThe Chunked Tx State Machine Shall Discard the Message Request and enter the TCH_Report_Error state when:\n The Chunked Rx state is any other than RCH_Wait_For_Message_From_Protocol_Layer and the\nOptional Abort Flag has been implemented."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.2",
    "title": "TCH_Pass_Down_Message State",
    "full_path": "6.12.2.1.3.2 TCH_Pass_Down_Message State",
    "page": 282,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Pass_Down_Message state the Chunked Tx State Machine Shall pass the Message to the\nProtocol Layer .\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Transmision_Complete state when:\n The Message has been passed to the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.3",
    "title": "TCH_Wait_For_Transmision_Complete State",
    "full_path": "6.12.2.1.3.3 TCH_Wait_For_Transmision_Complete State",
    "page": 282,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when:\n Message Transmitted has been received from the Protocol Layer .\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when:\n Transmission Error has been received from the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.4",
    "title": "TCH_Message_Sent State",
    "full_path": "6.12.2.1.3.4 TCH_Message_Sent State",
    "page": 282,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Message_Sent state the Chunked Tx State Machine Shall :\n Inform the Policy Engine that the Message has been sent.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state\nwhen:\n The Policy Engine has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.5",
    "title": "TCH_Prepare_To_Send_Chunked_Message State",
    "full_path": "6.12.2.1.3.5 TCH_Prepare_To_Send_Chunked_Message State",
    "page": 282,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Prepare_To_Send_Chunked_Message state the Chunked Tx State Machine Shall :\n Set 'Chunk Number To Send' to zero.\nThe Chunked Tx State Machine Shall transition to the TCH_Construct_Chunked_Message state when:\n ‘Chunk Number To Send' has been set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.6",
    "title": "TCH_Construct_Chunked_Message State",
    "full_path": "6.12.2.1.3.6 TCH_Construct_Chunked_Message State",
    "page": 282,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Construct_Chunked_Message state the Chunked Tx State Machine Shall :\n Construct a Message Chunk and pass it to the Protocol Layer .\nThe Chunked Tx State Machine Shall transition to the TCH_Sending_Chunked_Message state when:\n The Message Chunk has been passed to the Protocol Layer .\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state\nwhen:\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 283 The Optional Abort Flag is set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.7",
    "title": "TCH_Sending_Chunked_Message State",
    "full_path": "6.12.2.1.3.7 TCH_Sending_Chunked_Message State",
    "page": 283,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Chunked Tx State Machine Shall transition to the TCH_Wait_Chunk_Request state when:\n Message Transmitted is received from Protocol Layer and this was not the last chunk.\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when:\n Message Transmitted is received from Protocol Layer and this was the last chunk.\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when:\n Transmission Error has been received from the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.8",
    "title": "TCH_Wait_Chunk_Request State",
    "full_path": "6.12.2.1.3.8 TCH_Wait_Chunk_Request State",
    "page": 283,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Wait_Chunk_Request state the Chunked Tx State Machine Shall :\n Increment Chunk Number to Send.\n Start ChunkSenderRequestTimer .\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when:\n A Chunk Request has been received and the Chunk Number does not equal Chunk Number to Send or\n ChunkSenderRequestTimer has expired and Chunk Number is greater than zero.\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when:\n ChunkSenderRequestTimer has expired and Chunk Number equals zero.\nNote: This is the mechanism which allows the remote Port Partner or Cable Plug to omit the Chunking Layer .\nThe Policy Engine will receive a Message Sent signal if the remote Port Partner or Cable Plug is present\n(GoodCRC Message received) but does not send a Chunk Request. After this the remote Port Partner will\nsend a Not_Supported Message , or the Cable Plug will Ignore the Chunked Message .\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Received state when:\n Any other Message than Chunk Request is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.9",
    "title": "TCH_Message_Received State",
    "full_path": "6.12.2.1.3.9 TCH_Message_Received State",
    "page": 283,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Chunked Tx State Machine Shall enter the TCH_Message_Received state:\n When any Message is received, and the Chunked Tx State Machine is not in the\nTCH_Wait_Chunk_Request state.\nOn entry to the TCH_Message_Received state the Chunked Tx State Machine Shall :\n Clear the Extended Message Buffers.\n Pass the received Message to Chunked Rx Engine.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state\nwhen:\n The received Message has been passed to the Chunked Rx Engine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.3.10",
    "title": "TCH_Report_Error State",
    "full_path": "6.12.2.1.3.10 TCH_Report_Error State",
    "page": 283,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the TCH_Report_Error state the Chunked Tx State Machine Shall :\n Report the error to the Policy Engine .\nPage 284 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state\nwhen:\n The error has been reported."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.4",
    "title": "Chunked Message Router State Diagram",
    "full_path": "6.12.2.1.4 Chunked Message Router State Diagram",
    "page": 284,
    "level": 5,
    "parent_id": "6.12.2.1",
    "tags": [],
    "content": "Figure 6.62, \"Chunked Message Router State Diagram\" shows the state behavior for the Chunked Message Router.\nThis determines to which state machine an incoming Message is routed to ( Chunked Rx, Chunked Tx or direct to\nPolicy Engine ).\nFigure 6.62 Chunked Message Router State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.4.1",
    "title": "RTR_Wait_for_Message_From_Protocol_Layer State",
    "full_path": "6.12.2.1.4.1 RTR_Wait_for_Message_From_Protocol_Layer State",
    "page": 284,
    "level": 6,
    "parent_id": "6.12.2.1.4",
    "tags": [],
    "content": "In the RTR_Wait_for_Message_From_Protocol_Layer state the Chunked Message Router waits until the Protocol\nLayer sends it a received Message .\nThe Chunked Message Router Shall transition to the RTR_Rx_Chunks state when:\n A Message is received from the Protocol Layer , and the combined Chunking is not doing Tx Chunk s.\nThe Chunked Message Router Shall transition to the RTR_Tx_Chunks state when:\n A Message is received from the Protocol Layer , and the combined Chunking is doing Tx Chunk s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.1.4.2",
    "title": "RTR_Rx_Chunks State",
    "full_path": "6.12.2.1.4.2 RTR_Rx_Chunks State",
    "page": 284,
    "level": 6,
    "parent_id": "6.12.2.1.4",
    "tags": [],
    "content": "On entry to the RTR_Rx_Chunks state the Chunked Message Router Shall :\n Send the Message to the Chunked Rx State Machine.\n Transition to the RTR_Wait_for_Message_From_Protocol_Layer state.RTR_Wait_for_Message_From_Protocol_Layer\nActions on entry:\nRTR_Rx_Chunks\nActions on entry:\nSend message to Rx Chunk MachineRTR_Tx_Chunks\nActions on entry:Send message to Tx Chunk MachineMessage Received from\nProtocol Layer &\nNot Doing Tx Chunks1Message Received from\nProtocol Layer &\nDoing Tx Chunks1SentSoft Reset occured |\nExit from Hard ResetStart\nSent\n1)Doing Tx Chunks means that Chunked Tx State Machine is not in the TCH_Wait_For_Message_Request_From_Policy_Engine state.\n2)Messages are taken to include notification about transmission success or otherwise of Messages.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2856.12.2.1.4.3 RTR_Tx_Chunks State\nOn entry to the RTR_Tx_Chunks state the Chunked Message Router Shall :\n Send the Message to the Chunked Tx State Machine.\n Transition to the RTR_Wait_for_Message_From_Protocol_Layer state.\nPage 286 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.2.2 Protocol Layer Message Transmission"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1",
    "title": "Common Protocol Layer Message Transmission State Diagram",
    "full_path": "6.12.2.2.1 Common Protocol Layer Message Transmission State Diagram",
    "page": 286,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 6.63, \"Common Protocol Layer Message Transmission State Diagram\" shows the state behavior, common\nbetween the Source and the Sink , for the Protocol Layer when transmitting a Message .\nFigure 6.63 Common Protocol Layer Message Transmission State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.1",
    "title": "PRL_Tx_PHY_Layer_Reset State",
    "full_path": "6.12.2.2.1.1 PRL_Tx_PHY_Layer_Reset State",
    "page": 286,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "The Protocol Layer Shall enter the PRL_Tx_PHY_Layer_Reset state:\n At startup.\n As a result of a Soft Reset request being received by the PHY Layer .\n On exit from a Hard Reset .\nOn entry to the PRL_Tx_PHY_Layer_Reset state the Protocol Layer Shall reset the PHY Layer (clear any outstanding\nMessage s and enable communications).\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n When the PHY Layer reset is complete."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.2",
    "title": "PRL_Tx_Wait_for_Message_Request State",
    "full_path": "6.12.2.2.1.2 PRL_Tx_Wait_for_Message_Request State",
    "page": 286,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "In the PRL_Tx_Wait_for_Message_Request state the Protocol Layer waits until the Policy Engine directs it to send\na Message .\n On entry to the PRL_Tx_Wait_for_Message_Request state the Protocol Layer Shall reset the\nRetryCounter .Message request received\nfrom Policy Engine (except Soft Reset)\nMessage sent to\nPHY Layer\nCRCReceiveTimer\nTimeout |\nMessage discarded bus Idle2\nGoodCRC response\nreceived from PHY Layer MessageID mismatch(RetryCounter  nRetryCount) &\nnot Cable Plug &\nsmall Extended Message3\n(RetryCounter\n> nRetryCount) |\nCable Plug |\nlarge\nExtended Message3 Policy Engine informed\nof Transmission Error\nMessageID matchPolicy Engine\ninformed\nmessage sentPRL_Tx_Check_RetryCounter\nActions on entry:\nIf DFP or UFP increment and check RetryCounterPRL_Tx_Transmission_Error\nActions on entry:Increment MessageIDCounterInform Policy Engine of Transmission ErrorPRL_Tx_Construct_Message\nActions on entry:Construct messagePass message to PHY Layer\nPRL_Tx_Wait_for_PHY_response\nActions on entry:Initialize and run CRCReceiveTimer\n1\nPRL_Tx_Match_MessageID\nActions on entry:Match MessageIDCounter and response MessageIDSoft Reset Message request received\nfrom Policy EngineLayer Reset Complete\nPRL_Tx_Message_Sent\nActions on entry:Increment MessageIDCounterInform Policy Engine message sentPRL_Tx_Layer_Reset_for_Transmit\nActions on entry:Reset MessageIDCounter.Protocol Layer message reception transitions to PRL_Rx_Wait_for_PHY_Message state.\nPRL_Tx_Wait_for_Message_Request\nActions on entry:Reset RetryCounterPRL_Tx_Discard_Message\nActions on entry:If any message is currently awaiting transmission Discard"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "and",
    "full_path": "4 and",
    "page": 286,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "increment MessageID CounterDiscarding\ncompleteProtocol Layer\nmessage reception\nin PRL_Rx_Store_MessageID state |\nFast Role Swap signal transmitted |\nFast Role Swap signal detected StartSoft Reset Message from PHY Layer |\nExit from Hard Reset\nPRL_Tx_PHY_Layer_Reset\nActions on entry:Reset PHY Layer\nPHY Layer reset\ncomplete\n1)The CRCReceiveTimer is only started after the PHY has sent the message. If the message is not sent due to a busy channel, then the CRCReceiveTimer will not be started (see Section 6.6.1 “CRCReceiveTimer”).\n2)This indication is sent by the PHY Layer when a message has been Discarded due to CC being busy, and after CC becomes idle again (see Section 5.7 “Collision Avoidance”). The CRCReceiveTimer is not running\nin this case since no message has been sent.\n3)A “small” Extended Message is either an Extended Message with Data Size ζ\u0003MaxExtendedMsgLegacyLen bytes or an Extended Message with Data Size > MaxExtendedMsgLegacyLen bytes that has been\nChunked. A “large” Extended Message is an Extended Message with Data Size > MaxExtendedMsgLegacyLen bytes that has not been Chunked.\n4)See Section 6.11 “Message Discarding” for details of when Messages are Discarded .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 287The Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n A Message request is received from the Policy Engine which is not a Soft_Reset Message .\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n A Message request is received from the Policy Engine which is a Soft_Reset Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.3",
    "title": "PRL_Tx_Layer_Reset_for_Transmit State",
    "full_path": "6.12.2.2.1.3 PRL_Tx_Layer_Reset_for_Transmit State",
    "page": 287,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Layer_Reset_for_Transmit state the Protocol Layer Shall reset the MessageIDCounter .\nThe Protocol Layer Shall transition Protocol Layer Message reception to the PRL_Rx_Wait_for_PHY_Message state\n(see Section 6.12.2.3.1, \"PRL_Rx_Wait_for_PHY_Message state\" ) in order to reset the stored MessageID .\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n The layer reset actions in this state have been completed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.4",
    "title": "PRL_Tx_Construct_Message State",
    "full_path": "6.12.2.2.1.4 PRL_Tx_Construct_Message State",
    "page": 287,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Construct_Message state the Protocol Layer Shall construct the Message requested by the\nPolicy Engine , or resend a previously constructed Message , and then pass this Message to the PHY Layer .\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_PHY_Response state when:\n The Message has been sent to the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.5",
    "title": "PRL_Tx_Wait_for_PHY_Response State",
    "full_path": "6.12.2.2.1.5 PRL_Tx_Wait_for_PHY_Response State",
    "page": 287,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Wait_for_PHY_Response state, once the Message has been sent, the Protocol Layer Shall\ninitialize and run the CRCReceiveTimer (see Section 6.6.1, \"CRCReceiveTimer\" ).\nThe Protocol Layer Shall transition to the PRL_Tx_Match_MessageID state when:\n A GoodCRC Message response is received from the PHY Layer .\nThe Protocol Layer Shall transition to the PRL_Tx_Check_RetryCounter state when:\n The CRCReceiveTimer times out.\n Or the PHY Layer indicates that a Message has been Discarded due to the channel being busy but the\nchannel is now Idle (see Section 5.7, \"Collision Avoidance\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.6",
    "title": "PRL_Tx_Match_MessageID State",
    "full_path": "6.12.2.2.1.6 PRL_Tx_Match_MessageID State",
    "page": 287,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Match_MessageID state the Protocol Layer Shall compare the MessageIDCounter and the\nMessageID of the received GoodCRC Message .\nThe Protocol Layer Shall transition to the PRL_Tx_Message_Sent state when:\n The MessageIDCounter and the MessageID of the received GoodCRC Message match.\nThe Protocol Layer Shall transition to the PRL_Tx_Check_RetryCounter state when:\n The MessageIDCounter and the MessageID of the received GoodCRC Message do not match."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.7",
    "title": "PRL_Tx_Message_Sent State",
    "full_path": "6.12.2.2.1.7 PRL_Tx_Message_Sent State",
    "page": 287,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Message_Sent state the Protocol Layer Shall increment the MessageIDCounter and inform\nthe Policy Engine that the Message has been sent.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n The Policy Engine has been informed that the Message has been sent.\nPage 288 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.2.2.1.8 PRL_Tx_Check_RetryCounter State\nOn entry to the PRL_Tx_Check_RetryCounter state the Protocol Layer in a DFP or UFP Shall increment the value of\nthe RetryCounter and then check it in order to determine whether it is necessary to retry sending the Message .\nNote: Cable Plug s do not retry Message s and so do not use the RetryCounter .\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state in order to retry Message sending\nwhen:\n RetryCounter ≤ nRetryCount and\n This is not a Cable Plug and\n This is an Extended Message with Data Size ≤ MaxExtendedMsgLegacyLen or\n This is an Extended Message that has been Chunked .\nThe Protocol Layer Shall transition to the PRL_Tx_Transmission_Error state when:\n RetryCounter > nRetryCount or\n This is a Cable Plug , which does not retry.\n This is an Extended Message with Data Size > MaxExtendedMsgLegacyLen that has not been Chunked ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.9",
    "title": "PRL_Tx_Transmission_Error State",
    "full_path": "6.12.2.2.1.9 PRL_Tx_Transmission_Error State",
    "page": 288,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "On entry to the PRL_Tx_Transmission_Error state the Protocol Layer Shall increment the MessageIDCounter and\ninform the Policy Engine of the transmission error.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n The Policy Engine has been informed of the transmission error."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.1.10",
    "title": "PRL_Tx_Discard_Message State",
    "full_path": "6.12.2.2.1.10 PRL_Tx_Discard_Message State",
    "page": 288,
    "level": 6,
    "parent_id": "6.12.2.2.1",
    "tags": [],
    "content": "Protocol Layer Message transmission Shall enter the PRL_Tx_Discard_Message state whenever:\n Protocol Layer Message reception receives an incoming Message or\n The Fast Role Swap Request is being transmitted (see Section 5.8.5.6, \"Fast Role Swap Transmission\" )\n The Fast Role Swap Request is detected (see Section 5.8.6.3, \"Fast Role Swap Detection\" ).\nOn entry to the PRL_Tx_Discard_Message state, if there is a Message queued awaiting transmission, the Protocol\nLayer Shall Discard the Message according to the rules in Section 6.11, \"Message Discarding\" and increment the\nMessageIDCounter .\nThe Protocol Layer Shall transition to the PRL_Tx_PHY_Layer_Reset state when:\n Discarding is complete i.e., the Message queue is empty.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2896.12.2.2.2 Source Protocol Layer Message Transmission State Diagram\nFigure 6.64, \"Source Protocol Layer Message Transmission State Diagram\" shows the state behavior for the Protocol\nLayer in a Source when transmitting a Message .\nFigure 6.64 Source Protocol Layer Message Transmission State Diagram\nPRL_Tx_Wait_for_Message_RequestPRL_Tx_Src_Sink_Tx\nActions on entry:\nSet Rp = SinkTxOk\nEnd of AMS notification received\nfrom Policy Engine\nStart of AMS notification\nreceived from Policy Engine\nPRL_Tx_Src_Pending\nActions on entry:Start SinkTxTimer\nPRL_Tx_Layer_Reset_for_Transmit\nPRL_Tx_Construct_MessageSoft Reset Message pending &\nSinkTxTimer timeoutMessage pending (except Soft Reset) &\nSinkTxTimer timeoutRp set\nPRL_Tx_Src_Source_Tx\nActions on entry:\nSet Rp = SinkTxNG\nMessage request\nfrom Policy Engine\nPage 290 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.2.2.2.1 PRL_Tx_Src_Sink_Tx State\nIn the PRL_Tx_Src_Sink_Tx state the Source sets Rp to SinkTxOK allowing the Sink to start an Atomic Message\nSequence (AMS ).\nThe Protocol Layer in a Source Shall transition from the PRL_Tx_Wait_for_Message_Request state to the\nPRL_Tx_Src_Sink_Tx state when:\n A notification is received from the Policy Engine that the end of an AMS has been reached.\nOn entry to the PRL_Tx_Src_Sink_Tx state the Protocol Layer Shall request the PHY Layer to Rp to SinkTxOK .\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n Rp has been set."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.2.2",
    "title": "PRL_Tx_Src_Source_Tx State",
    "full_path": "6.12.2.2.2.2 PRL_Tx_Src_Source_Tx State",
    "page": 290,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "In the PRL_Tx_Src_Source_Tx state the Source sets Rp to SinkTxNG allowing the Source to start an Atomic Message\nSequence (AMS ).\nThe Protocol Layer in a Source Shall transition from the PRL_Tx_Wait_for_Message_Request state to the\nPRL_Tx_Src_Source_Tx state when:\n A notification is received from the Policy Engine that an AMS will be starting.\nOn entry to the PRL_Tx_Src_Source_Tx state the Protocol Layer Shall set Rp to SinkTxNG.\nThe Protocol Layer Shall transition to the PRL_Tx_Src_Pending state when:\n A Message request is received from the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.2.3",
    "title": "PRL_Tx_Src_Pending State",
    "full_path": "6.12.2.2.2.3 PRL_Tx_Src_Pending State",
    "page": 290,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "In the PRL_Tx_Src_Pending state the Protocol Layer has a Message buffered ready for transmission.\nOn entry to the PRL_Tx_Src_Pending state the SinkTxTimer Shall be initialized and run.\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n The pending Message request from the Policy Engine is not a Soft_Reset Message and\n The SinkTxTimer times out.\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n The pending Message request from the Policy Engine is a Soft_Reset Message and\n The SinkTxTimer times out.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2916.12.2.2.3 Sink Protocol Layer Message Transmission State Diagram\nFigure 6.65, \"Sink Protocol Layer Message Transmission State Diagram\" shows the state behavior for the Protocol\nLayer in a Sink when transmitting a Message .\nFigure 6.65 Sink Protocol Layer Message Transmission State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.2.3.1",
    "title": "PRL_Tx_Snk_Start_of_AMS State",
    "full_path": "6.12.2.2.3.1 PRL_Tx_Snk_Start_of_AMS State",
    "page": 291,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "In the PRL_Tx_Snk_Start_of_AMS state the Protocol Layer waits for the first Message in a Sink initiated AMS .\nThe Protocol Layer in a Sink Shall transition from the PRL_Tx_Wait_for_Message_Request state to the\nPRL_Tx_Snk_Start_of_AMS state when:\n A notification is received from the Policy Engine that the next Message the Sink will send is the start of\nan AMS .\nThe Protocol Layer Shall transition to the PRL_Tx_Snk_Pending state when:\n A Message request is received from the Policy Engine .\nPRL_Tx_Wait_for_Message_Request\nFirst Message in AMS notification received\nfrom Policy Engine\nPRL_Tx_Snk_Pending\nActions on entry:\nPRL_Tx_Layer_Reset_for_Transmit\nPRL_Tx_Construct_MessageSoft Reset Message pendingMessage pending (except Soft Reset) &\nRp = SinkTxOkPRL_Tx_Snk_Start_of_AMS\nActions on entry:\nMessage Request from Policy Engine\nPage 292 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.2.2.3.2 PRL_Tx_Snk_Pending State\nIn the PRL_Tx_Snk_Pending state the Protocol Layer has the first Message in a Sink initiated AMS ready to send and\nis waiting for Rp to transition to SinkTxOK before sending the Message .\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n A Message is Pending that is not a Soft_Reset Message and\n Rp is set to SinkTxOK .\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n A Soft_Reset Message is pending.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 2936.12.2.3 Protocol Layer Message Reception\nFigure 6.66, \"Protocol layer Message reception\" shows the state behavior for the Protocol Layer when receiving a\nMessage .\nFigure 6.66 Protocol layer Message reception"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.3.1",
    "title": "PRL_Rx_Wait_for_PHY_Message state",
    "full_path": "6.12.2.3.1 PRL_Rx_Wait_for_PHY_Message state",
    "page": 293,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Protocol Layer Shall enter the PRL_Rx_Wait_for_PHY_Message state:\n At startup.\n As a result of a Soft Reset request from the Policy Engine .\n On exit from a Hard Reset .\nIn the PRL_Rx_Wait_for_PHY_Message state the Protocol Layer waits until the PHY Layer passes up a received\nMessage .\nThe Protocol Layer Shall transition to the PRL_Rx_Send_GoodCRC state when:\n A Message is passed up from the PHY Layer .\nThe Protocol Layer Shall transition to the PRL_Rx_Layer_Reset_for_Receive state when:\n A Soft_Reset Message is received from the PHY Layer .Message received\nfrom PHY (except Soft Reset)\nMessage passed to\nPolicy Engine(GoodCRC sent | Message discarded bus Idle1)\nMessageID <> stored\nMessageID |\nno stored valueMessageID = stored\nMessageIDStart\nPRL_Rx_Send_GoodCRC\nActions on entry:\nSend GoodCRC message to PHY\nPRL_Rx_Store_MessageID\nActions on entry:Protocol Layer message transmission transitions to PRL_Tx_Discard_Message state\n2.\nStore new MessageIDPass message to Policy Engine\n3PRL_Rx_Wait_for_PHY_message\nActions on entry:\nPRL_Rx_Check_MessageID\nActions on entry:If there is a stored value compare MessageID with stored value.Soft Reset Message received\nfrom PHYSoft Reset completePRL_Rx_Layer_Reset_for_Receive\nActions on entry:Reset MessageIDCounter and clear stored MessageID valueProtocol Layer message transmission transitions to PRL_Tx_PHY_Layer_Reset state.\nSoft Reset request from Policy Engine |\nExit from Hard Reset\nMessage discarded bus Idle1\n1)This indication is sent by the PHY when a message has been Discarded due to CC being busy, and after CC becomes idle again\n(see Section 5.7 “Collision Avoidance” ). Two alternate allowable transitions are shown.\n2)In the case of a Ping message being received, in order to maintain robust communications in the presence of collisions, the outgoing message ShouldNot be Discarded.\n3)See Section 6.11 “Message Discarding” for details of when Messages are discarded.\nPage 294 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.2.3.2 PRL_Rx_Layer_Reset_for_Receive state\nOn entry to the PRL_Rx_Layer_Reset_for_Receive state the Protocol Layer Shall reset the MessageIDCounter and\nclear the stored MessageID . The Protocol Layer Shall transition Protocol Layer Message transmission to the\nPRL_Tx_Wait_for_Message_Request state (see Section 6.12.2.2.1.2, \"PRL_Tx_Wait_for_Message_Request State\" ).\nThe Protocol Layer Shall transition to the PRL_Rx_Send_GoodCRC State when:\n The Soft Reset actions in this state have been completed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.3.3",
    "title": "PRL_Rx_Send_GoodCRC state",
    "full_path": "6.12.2.3.3 PRL_Rx_Send_GoodCRC state",
    "page": 294,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PRL_Rx_Send_GoodCRC state the Protocol Layer Shall construct a GoodCRC Message and request\nthe PHY Layer to transmit it.\nThe Protocol Layer Shall transition to the PRL_Rx_Check_MessageID state when:\n The GoodCRC Message has been passed to the PHY Layer .\nWhen the PHY Layer indicates that a Message has been Discarded due to CC being busy but CC is now Idle (see\nSection 5.7, \"Collision Avoidance\" ), the Protocol Layer Shall either:\n Transition to the PRL_Rx_Check_MessageID state or\n Transition to the PRL_Rx_Wait_for_PHY_Message state."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.3.4",
    "title": "PRL_Rx_Check_MessageID state",
    "full_path": "6.12.2.3.4 PRL_Rx_Check_MessageID state",
    "page": 294,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PRL_Rx_Check_MessageID state the Protocol Layer Shall compare the MessageID of the received\nMessage with its stored value if a value has previously been stored.\nThe Protocol Layer Shall transition to the PRL_Rx_Wait_for_PHY_Message state when:\n The MessageID of the received Message equals the stored MessageID value since this is a Message retry\nwhich Shall be Discarded .\nThe Protocol Layer Shall transition to the PRL_Rx_Store_MessageID state when:\n The MessageID of the received Message does not equal the stored MessageID value since this is a new\nMessage or\n This is the first received Message and no MessageID value is currently stored."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.3.5",
    "title": "PRL_Rx_Store_MessageID state",
    "full_path": "6.12.2.3.5 PRL_Rx_Store_MessageID state",
    "page": 294,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PRL_Rx_Store_MessageID state the Protocol Layer Shall transition Protocol Layer Message\ntransmission to the PRL_Tx_Discard_Message state, replace the stored value of MessageID with the value of\nMessageID in the received Message and pass the Message up to the Policy Engine .\nThe Protocol Layer Shall transition to the PRL_Rx_Wait_for_PHY_Message state when:\n The Message has been passed up to the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4",
    "title": "Hard Reset operation",
    "full_path": "6.12.2.4 Hard Reset operation",
    "page": 294,
    "level": 4,
    "parent_id": "6.12.2",
    "tags": [],
    "content": "Figure 6.57, \"Outline of States\" shows the state behavior for the Protocol Layer when receiving a Hard Reset or Cable\nReset request from the Policy Engine or Hard Reset Signaling or Cable Reset Signaling from the PHY Layer (see also\nSection 6.8.3, \"Hard Reset\" and Section 6.8.4, \"Cable Reset\" ).\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 295Figure 6.67 Hard/Cable Reset"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.1",
    "title": "PRL_HR_Reset_Layer state",
    "full_path": "6.12.2.4.1 PRL_HR_Reset_Layer state",
    "page": 295,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "The PRL_HR_Reset_Layer State defines the mode of operation of both the Protocol Layer transmission and\nreception state machines during a Hard Reset or Cable Reset . During Hard Reset no USB Power Delivery Protocol\nMessage s are sent or received; only Hard Reset Signaling is present after which the communication channel is\nassumed to have been disabled by the PHY Layer until completion of the Hard Reset . During Cable Reset no USB\nPower Delivery Protocol Message s are sent to or received by the Cable Plug but other USB Power Delivery\ncommunication May continue.\nThe Protocol Layer Shall enter the PRL_HR_Reset_Layer state from any other state when:\n A Hard Reset Request is received from the Policy Engine or\n Hard Reset Signaling is received from the PHY Layer or Hard Reset request received from Policy Engine2 |\nCable Reset request received from Policy Engine4 |\nHard Reset signalling received By PHY Layer |\nCable Reset signalling received By PHY Layer3\nPHY Hard Reset request sent |\nPHY Cable Reset request sent\nHard Reset complete from Policy Engine |\nCable Reset complete from Policy Engine\nPhysical Layer informedPRL_HR_Request_Hard_Reset\nActions on entry:\nRequest PHY to perform a Hard Reset or Cable ResetPRL_HR_Reset_Layer\nActions on entry:Reset MessageIDCounter.Protocol Layer message transmission transitions to PRL_Tx_Wait_For_Message_Request state.Protocol Layer message reception transitions to PRL_Rx_Wait_for_PHY_Message state.\nProtocol Layer reset complete &\n(Hard Reset was Initiated by Policy Engine |\nCable Reset was Initiated by Policy Engine)\nPolicy Engine informedProtocol Layer reset complete &\n(Hard Reset was initiated by Port Partner |\nCable Reset received by Cable Plug)\nPRL_HR_Indicate_Hard_Reset\nActions on entry:Inform the Policy Engine of the Hard Reset or Cable Reset\nExit from Hard ResetPolicy Engine informedPRL_HR_PHY_Hard_Reset_Requested\nActions on entry:Inform Policy Engine Hard Reset or Cable Reset request has been sent\nPRL_HR_Wait_For_PE_Hard_Reset_Complete\nActions on entry:Wait for Hard Reset or Cable Reset complete indication from Policy Engine.\nPRL_HR_PE_Hard_Reset_Complete\nActions on entry:Inform Physical Layer Hard Reset or Cable Reset is completePRL_HR_Wait_For_PHY_Hard_Reset_Complete\nActions on entry:Start HardResetCompleteTimerWait for Hard Reset or Cable Reset complete indication from PHY\nHard Reset complete from PHY |\nCable Reset complete from PHY |\nHardResetCompleteTimer timeout1\n1) If the HardResetCompleteTimer timeout occurs this means that the PHY is still waiting to send the Hard Reset due to a non-idle channel. This condition will be cleared once the PE Hard Reset is completed.\n2)Cable Plugs do not generate Hard Reset signaling but are required to monitor for Hard Reset signaling between the Port Partners and respond by resetting.\n3)Cable Reset signaling is only recognized by a Cable Plug.\n4) Cable Reset signaling cannot be generated by Cable Plugs.\nPage 296 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 A Cable Reset Request is received from the Policy Engine or\n Cable Reset Signaling is received from the PHY Layer .\nOn entry to the PRL_HR_Reset_Layer state the Protocol Layer Shall reset the MessageIDCounter . It Shall also reset\nthe states of the Protocol Layer transmission and reception state machines to their starting points. The Protocol\nLayer transmission state machine Shall transition to the PRL_Tx_Wait_for_Message_Request state. The Protocol\nLayer reception state machine Shall transition to the PRL_Rx_Wait_for_PHY_Message state.\nThe Protocol Layer Shall transition to the PRL_HR_Request_Hard_Reset state when:\n The Protocol Layer 's reset is complete and\n The Hard Reset request has originated from the Policy Engine or\n The Cable Reset request has originated from the Policy Engine .\nThe Protocol Layer Shall transition to the PRL_HR_Indicate_Hard_Reset state when:\n The Protocol Layer 's reset is complete and\n The Hard Reset request has been passed up from the PHY Layer or\n A Cable Reset request has been passed up from the PHY Layer (Cable Plug only)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.2",
    "title": "PRL_HR_Indicate_Hard_Reset state",
    "full_path": "6.12.2.4.2 PRL_HR_Indicate_Hard_Reset state",
    "page": 296,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "On entry to the PRL_HR_Indicate_Hard_Reset state the Protocol Layer Shall indicate to the Policy Engine that\neither Hard Reset Signaling or Cable Reset Signaling has been received.\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PE_Hard_Reset_Complete state when:\n The indication to the Policy Engine has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.3",
    "title": "PRL_HR_Request_Hard_Reset state",
    "full_path": "6.12.2.4.3 PRL_HR_Request_Hard_Reset state",
    "page": 296,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "On entry to the PRL_HR_Request_Hard_Reset state the Protocol Layer Shall request the PHY Layer to send either\nHard Reset Signaling or Cable Reset Signaling .\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PHY_Hard_Reset_Complete state when:\n The PHY Layer Hard Reset Signaling request has been sent or\n The PHY Layer Cable Reset Signaling request has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.4",
    "title": "PRL_HR_Wait_for_PHY_Hard_Reset_Complete state",
    "full_path": "6.12.2.4.4 PRL_HR_Wait_for_PHY_Hard_Reset_Complete state",
    "page": 296,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "In the PRL_HR_Wait_for_PHY_Hard_Reset_Complete state the Protocol Layer Shall start the\nHardResetCompleteTimer and wait for the PHY Layer to indicate that the Hard Reset or Cable Reset has been\ncompleted.\nThe Protocol Layer Shall transition to the PRL_HR_PHY_Hard_Reset_Requested state when:\n A Hard Reset complete indication is received from the PHY Layer or\n A Cable Reset complete indication is received from the PHY Layer or\n The HardResetCompleteTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.5",
    "title": "PRL_HR_PHY_Hard_Reset_Requested state",
    "full_path": "6.12.2.4.5 PRL_HR_PHY_Hard_Reset_Requested state",
    "page": 296,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "On entry to the PRL_HR_PHY_Hard_Reset_Requested state the Protocol Layer Shall inform the Policy Engine that\nthe PHY Layer has been requested to perform a Hard Reset or Cable Reset .\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PE_Hard_Reset_Complete state when:\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 297 The Indication to the Policy Engine has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.6",
    "title": "PRL_HR_Wait_for_PE_Hard_Reset_Complete state",
    "full_path": "6.12.2.4.6 PRL_HR_Wait_for_PE_Hard_Reset_Complete state",
    "page": 297,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "In the PRL_HR_Wait_for_PE_Hard_Reset_Complete state the Protocol Layer Shall wait for the Policy Engine to\nindicate that the Hard Reset or Cable Reset has been completed.\nThe Protocol Layer Shall transition to the PRL_HR_PE_Hard_Reset_Complete state when:\n A Hard Reset complete indication is received from the Policy Engine or\n A Cable Reset complete indication is received from the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.12.2.4.7",
    "title": "PRL_HR_PE_Hard_Reset_Complete",
    "full_path": "6.12.2.4.7 PRL_HR_PE_Hard_Reset_Complete",
    "page": 297,
    "level": 5,
    "parent_id": "6.12.2.4",
    "tags": [],
    "content": "On entry to the PRL_HR_PE_Hard_Reset_Complete state the Protocol Layer Shall inform the PHY Layer that the\nHard Reset or Cable Reset is complete.\nThe Protocol Layer Shall exit from the Hard Reset and return to normal operation when:\n The PHY Layer has been informed that the Hard Reset is complete so that it will re-enable the\ncommunications channel. If Hard Reset Signaling is still pending due to a non- Idle channel this Shall be\ncleared and not sent or\n The PHY Layer has been informed that the Cable Reset is complete.\nPage 298 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-106.12.3 List of Protocol Layer States\nTable 6.75, \"Protocol Layer States\" lists the states used by the various state machines.\nTable 6.75 Protocol Layer States\nState Name Section\nProtocol Layer Message Transmission\nCommon Protocol Layer Message Transmission\nPRL_Tx_PHY_Layer_Reset Section 6.12.2.2.1.1\nPRL_Tx_Wait_for_Message_Request Section 6.12.2.2.1.2\nPRL_Tx_Layer_Reset_for_Transmit Section 6.12.2.2.1.3\nPRL_Tx_Construct_Message Section 6.12.2.2.1.4\nPRL_Tx_Wait_for_PHY_Response Section 6.12.2.2.1.5\nPRL_Tx_Match_MessageID Section 6.12.2.2.1.6\nPRL_Tx_Message_Sent Section 6.12.2.2.1.7\nPRL_Tx_Check_RetryCounter Section 6.12.2.2.1.8\nPRL_Tx_Transmission_Error Section 6.12.2.2.1.9\nPRL_Tx_Discard_Message Section 6.12.2.2.1.10\nSource Protocol Layer Message Transmission\nPRL_Tx_Src_Sink_Tx Section 6.12.2.2.2.1\nPRL_Tx_Src_Source_Tx Section 6.12.2.2.2.2\nPRL_Tx_Src_Pending Section 6.12.2.2.2.3\nSink Protocol Layer Message Transmission\nPRL_Tx_Snk_Start_of_AMS Section 6.12.2.2.3.1\nPRL_Tx_Snk_Pending Section 6.12.2.2.3.2\nProtocol Layer Message Reception\nPRL_Rx_Wait_for_PHY_Message Section 6.12.2.3.1\nPRL_Rx_Layer_Reset_for_Receive Section 6.12.2.3.2\nPRL_Rx_Send_GoodCRC Section 6.12.2.3.3\nPRL_Rx_Check_MessageID Section 6.12.2.3.4\nPRL_Rx_Store_MessageID Section 6.12.2.3.5\nHard Reset Operation\nPRL_HR_Reset_Layer Section 6.12.2.4.1\nPRL_HR_Indicate_Hard_Reset Section 6.12.2.4.2\nPRL_HR_Request_Hard_Reset Section 6.12.2.4.3\nPRL_HR_Wait_for_PHY_Hard_Reset_Complete Section 6.12.2.4.4\nPRL_HR_PHY_Hard_Reset_Requested Section 6.12.2.4.5\nPRL_HR_Wait_for_PE_Hard_Reset_Complete Section 6.12.2.4.6\nPRL_HR_PE_Hard_Reset_Complete Section 6.12.2.4.7\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 299Chunking\nChunked Rx\nRCH_Wait_For_Message_From_Protocol_Layer Section 6.12.2.2.1.1\nRCH_Pass_Up_Message Section 6.12.2.2.1.1\nRCH_Processing_Extended_Message Section 6.12.2.2.1.1\nRCH_Requesting_Chunk Section 6.12.2.2.1.1\nRCH_Waiting_Chunk Section 6.12.2.2.1.1\nRCH_Report_Error Section 6.12.2.2.1.1\nChunked Tx\nTCH_Wait_For_Message_Request_From_Policy_Engine Section 6.12.2.1.3.1\nTCH_Pass_Down_Message Section 6.12.2.1.3.2\nTCH_Wait_For_Transmision_Complete Section 6.12.2.1.3.3\nTCH_Message_Sent Section 6.12.2.1.3.4\nTCH_Prepare_To_Send_Chunked_Message Section 6.12.2.1.3.5\nTCH_Construct_Chunked_Message Section 6.12.2.1.3.6\nTCH_Sending_Chunked_Message Section 6.12.2.1.3.7\nTCH_Wait_Chunk_Request Section 6.12.2.1.3.8\nTCH_Message_Received Section 6.12.2.1.3.9\nTCH_Report_Error Section 6.12.2.1.3.10\nChunked Message Router\nRTR_Wait_for_Message_From_Protocol_Layer Section 6.12.2.1.4.1\nRTR_Rx_Chunks Section 6.12.2.1.4.2\nRTR_Tx_Chunks Section 6.12.2.1.4.3Table 6.75 Protocol Layer States (Continued)\nState Name Section\nPage 300 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-106.13 Message Applicability\nThe following tables outline the Message s supported by a given Port , depending on its capability.\nWhen a Message is supported the feature and the AMS implied by the Message Shall also be supported. The\nabbreviations in Table 6.76, \"Message Applicability Abbreviations\" are used in this section to denote the level of\nsupport required.\nFor the case of Conditional Normative a note has been added to indicate the condition. \"CN/\" notation is used to\nindicate the level of support when the condition is not present.\n\"R/\" and \"O/\" notation is used to indicate the response when the Recommended or Optional Message is not\nsupported.\nNote: Where NS/R/NK is indicated for Received Message s this Shall apply to the PE_CBL_Ready ,\nPE_SNK_Ready or PE_SRC_Ready states only since unexpected Message s received during an AMS are Pro-\ntocol Error s (see Section 6.8.1, \"Soft Reset and Protocol Error\" ).\nThis section covers Control Message and Data Message support for Source s, Sink and Cable Plug s. It also covers VDM\nCommand support for DFP s, UFP s and Cable Plug s.Table 6.76 Message Applicability Abbreviations\nAbbreviation Meaning Description\nN Normative Shall be supported by this Port/ Cable Plug .\nCN Conditional NormativeShall supported by a given Port/ Cable Plug based on\nfeatures.\nR Recommended Should be supported by this Port/ Cable Plug .\nO Optional May be supported by this Port/ Cable Plug .\nNS Not SupportedShall result in a Not_Supported Message response by this\nPort/ Cable Plug when received.\nI Ignore Shall be Ignored by this Port/ Cable Plug when received.\nNK NAKThis Port/ Cable Plug Shall return Responder NAK to this\nCommand when received.\nNA Not allowed Shall Not be transmitted by this Port/ Cable Plug .\nDR Don’t RecognizeThere Shall be no response at all (i.e., not even a GoodCRC\nMessage) from this Port/ Cable Plug when received.\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10 Page 3016.13.1 Applicability of Control Messages\nTable 6.77, \"Applicability of Control Messages\" details Control Message s that Shall /Should /Shall Not be transmitted\nand received by a Source , Sink , Cable Plug or VPD . Requirements for Dual-Role Power Port s and Dual-Role Data Port s\nShall override any requirements for Source -only or Sink -Only Ports.\nTable 6.77 Applicability of Control Messages\nMessage Type Source Sink Dual-Role\nPowerDual-Role\nDataCable Plug VPD9\nTransmitted Message\nAccept N N N N\nData_ResetCN10/R CN10/R NA NA\nDR_Swap O O N NA NA\nFR_Swap NA NA R NA NA\nGet_Country_CodesCN7/NA CN7/NA NA NA\nGet_PPS_Status NA CN6 NA NA\nGet_Sink_Cap R NA N NA NA\nGet_Sink_Cap_Extended R NA R NA NA\nGet_Source_Cap NA R N NA NA\nGet_Source_Cap_Extended NA R R NA NA\nGet_Source_Info NA R R NA NA\nGet_Revision R R NA NA\nGet_Status R R NA NA\nGoodCRC N N N N\nGotoMin ( Deprecated ) NA NA NA NA\nNot_Supported N N NA NA\nPing ( Deprecated ) NA NA NA NA\nPR_Swap NA NA N NA NA\nPS_RDY N CN1/NA N NA NA\nReject N O O O CN10/NA NA\nSoft_Reset N N NA NA\nVCONN _Swap R R NA NA\nWait O NA O O NA NA\n1) Shall be supported by any Port that can supply VCONN .\n2) Shall be supported products that support the Source_Capabilities_Extended Message.\n3) Shall be supported by Source s that support the Alert Message.\n4) Shall be supported when the Fast Role Swap Request is supported.\n5) Shall be supported when VCONN Swap is supported.\n6) Shall be supported when SPR PPS Mode is supported.\n7) Shall be supported when required by a country authority.\n8) Shall be supported by Active Cable s.\n9) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a CT-VPD Shall only take\nplace when not Connected to a Charger .\n10) Shall be supported by products that support [USB4] .\n11) Shall be supported by all Source s except single Port SPR Charger s with Invariant PDOs .\nPage 302 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10Received Message\nAccept N N N N I I\nData_ResetCN10/R CN10/R I I\nDR_Swap O/NS O/NS N I I\nFR_Swap NS NS CN4/NS I I\nGet_Country_CodesCN7/NS CN7/NS I I\nGet_PPS_StatusCN6/NS NS I I\nGet_Sink_Cap NS N N I I\nGet_Sink_Cap_Extended NS N N I I\nGet_Source_Cap N NS N I I\nGet_Source_Cap_ExtendedCN2/NS NS CN2/NS I I\nGet_Source_InfoCN11 NS N I I\nGet_Revision N N O/I O/I\nGet_StatusCN3/NS CN3/NS CN3/NS CN8/I I\nGoodCRC N N N N\nGotoMin ( Deprecated ) NS NS I I\nNot_Supported N N CN8/I I\nPing ( Deprecated ) NS NS/I I I\nPR_Swap NS NS N I I\nPS_RDYCN1/NS N N I I\nRejectCN5/NS N N N I I\nSoft_Reset N N N N\nVCONN _SwapCN1/ NS CN1/ NS I I\nWaitCN5/NS N N N I ITable 6.77 Applicability of Control Messages (Continued)\nMessage Type Source Sink Dual-Role\nPowerDual-Role\nDataCable Plug VPD9\n1) Shall be supported by any Port that can supply VCONN .\n2) Shall be supported products that support the Source_Capabilities_Extended Message.\n3) Shall be supported by Source s that support the Alert Message.\n4) Shall be supported when the Fast Role Swap Request is supported.\n5) Shall be supported when VCONN Swap is supported.\n6) Shall be supported when SPR PPS Mode is supported.\n7) Shall be supported when required by a country authority.\n8) Shall be supported by Active Cable s.\n9) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a CT-VPD Shall only take\nplace when not Connected to a Charger .\n10) Shall be supported by products that support [USB4] .\n11) Shall be supported by all Source s except single Port SPR Charger s with Invariant PDOs .\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10 Page 3036.13.2 Applicability of Data Messages\nTable 6.78, \"Applicability of Data Messages\" details Data Message s (except for VDM Command s) that Shall /Should /\nShall Not be transmitted and received by a Source , Sink , Cable Plug or VPD . Requirements for Dual-Role Power Port s\nShall override any requirements for Source -only or Sink -Only Ports.\nTable 6.78 Applicability of Data Messages\nMessage Type Source Sink Dual-Role\nPowerCable\nPlug SOP’Cable\nPlug SOP’’VPD6\nTransmitted Message\nSource_Capabilities N NA N NA NA NA\nRequest NA N NA NA NA\nGet_Country_InfoCN5/O CN5/O NA NA NA\nBISTN1N1 NA NA NA\nSink_Capabilities NA N N NA NA NA\nBattery_StatusCN2CN2 NA NA NA\nAlertCN11/R CN11/R NA NA NA\nEnter_USBCN7/O CN7/O NA NA NA\nEPR_Request NA CN9 NA NA NA\nEPR_ModeCN9CN9 NA NA NA\nSource_InfoCN10 NA N NA NA NA\nRevision N N CN12/O/I NA O\nReceived Message\nSource_Capabilities NS N N I I I\nRequest N NS I I I\nGet_Country_InfoCN5/NS CN5/NS I I I\nBISTN1N1N1N1N1\nSink_CapabilitiesCN4 NS CN4 I I I\nBattery_StatusCN3/NS CN3/NS I I I\nAlert R/NS R/NS I I I\nEnter_USBCN7/O CN7/O CN8/I CN8/I I\n1) For details of which BIST Mode s and BIST Messages Shall be supported see Section 5.9 and Section 6.4.3 .\n2) Shall be supported by products that contain batteries.\n3) Shall be supported by products that support the Get_Battery_Status Message.\n4) Shall be supported by products that support the Get_Sink_Cap Message.\n5) Shall be supported when required by a country authority.\n6) VPD includes CT-VPD s when not Connected to a Charger . PD communication with a CT-VPD Shall only take\nplace when not Connected to a Charger .\n7) Shall be supported by products that support [USB4] .\n8) Shall be supported by Active Cable s that support [USB4] .\n9) Shall be supported by products that support Source operation in EPR Mode .\n10) Shall be supported by all Source Port s except singlePort SPR Charger s with Invariant PDOs .\n11) Shall be supported when SPR PPS Mode is supported.\n12) Shall be supported by Active Cable s.\nPage 304 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10EPR_RequestCN9 NA I I I\nEPR_ModeCN9CN9 I I I\nSource_Info NA N N I I I\nRevision N N I I ITable 6.78 Applicability of Data Messages (Continued)\nMessage Type Source Sink Dual-Role\nPowerCable\nPlug SOP’Cable\nPlug SOP’’VPD6\n1) For details of which BIST Mode s and BIST Messages Shall be supported see Section 5.9 and Section 6.4.3 .\n2) Shall be supported by products that contain batteries.\n3) Shall be supported by products that support the Get_Battery_Status Message.\n4) Shall be supported by products that support the Get_Sink_Cap Message.\n5) Shall be supported when required by a country authority.\n6) VPD includes CT-VPD s when not Connected to a Charger . PD communication with a CT-VPD Shall only take\nplace when not Connected to a Charger .\n7) Shall be supported by products that support [USB4] .\n8) Shall be supported by Active Cable s that support [USB4] .\n9) Shall be supported by products that support Source operation in EPR Mode .\n10) Shall be supported by all Source Port s except singlePort SPR Charger s with Invariant PDOs .\n11) Shall be supported when SPR PPS Mode is supported.\n12) Shall be supported by Active Cable s.\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10 Page 3056.13.3 Applicability of Extended Messages\nTable 6.79, \"Applicability of Extended Messages\" details Extended Message s (except for VDEM Command s) that\nShall /Should / Shall Not be transmitted and received by a Source , Sink , Cable Plug or VPD . Requirements for Dual-\nRole Power Port s Shall override any requirements for Source -only or Sink -Only Ports.\nTable 6.79 Applicability of Extended Messages\nMessage Type Source Sink Dual-Role\nPowerCable\nPlug SOP’Cable\nPlug SOP’’VPD13\nTransmitted Message\nBattery_Capabilities CN1/NA CN1/NA NA NA NA\nCountry_Codes CN10/NA CN10/NA NA NA NA\nCountry_Info CN10/NA CN10/NA NA NA NA\nEPR_Source_Capabilities CN14/NA NA CN14/NA NA NA NA\nEPR_Sink_Capabilities NA CN14/NA CN14/NA NA NA NA\nExtended_Control See Section 6.13.4 for details\nFirmware_Update_Request CN7/NA CN7/NA NA NA NA\nFirmware_Update_Response CN7/NA CN7/NA CN7/NA O NA\nGet_Battery_Cap R R NA NA NA\nGet_Battery_Status R R NA NA NA\nGet_Manufacturer_Info R R NA NA NA\nManufacturer_Info R R R NA NA\nPPS_Status CN8/NA NA NA NA NA\nSecurity_Request CN6/NA CN6/NA NA NA NA\nSecurity_Response CN6/NA CN6/NA CN6/NA NA NA\nSink_Capabilities_Extended NA N N NA NA NA\nSource_Capabilities_Extended R NA R NA NA NA\n1) Shall be supported by products that contain batteries.\n2) Shall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3) Shall be supported by products that can transmit the Get_Status Message.\n4) Shall be supported by products that can transmit the Get_Battery_Cap Message.\n5) Shall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6) Shall be supported by products that support USB security communication as defined in [USBTypeCAuthentication\n1.0] .\n7) Shall be supported by products that support USB firmware update communication as defined in\n[USBPDFirmwareUpdate 1.0] .\n8) Shall be supported when PPS is supported.\n9) Shall be supported by products that can transmit the Get_PPS_Status Message.\n10) Shall be supported when required by a country authority.\n11) Shall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12) Shall be supported by Active Cable s.\n13) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a CT-VPD Shall only take place\nwhen not Connected to a Charger .\n14) Shall be supported by products that support operation in EPR Mode .\n15) Shall be supported by Source s that support the Alert Message.\nPage 306 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10Status CN15/R CN15/R CN15/R CN12/NA CN12/NA NA\nVendor_Defined_Extended O O O O O\nReceived Message\nBattery_Capabilities CN4/NS CN4/NS I I I\nCountry_Codes CN10/NS CN10/NS I I I\nCountry_Info CN10/NS CN10/NS I I I\nEPR_Source_Capabilities NS CN14/NS CN14/NS I I I\nEPR_Sink_Capabilities CN14/NS NS CN14/NS I I I\nExtended_Control See Section 6.13.4 for details\nFirmware_Update_Request CN7/NS CN7/NS CN7/I O I\nFirmware_Update_Response CN7/NS CN7/NS I I I\nGet_Battery_Cap CN1/NS CN1/NS I I I\nGet_Battery_Status CN1/NS CN1/NS I I I\nGet_Manufacturer_Info R/NS R/NS R/I I I\nManufacturer_Info CN5/NS CN5/NS I I I\nPPS_Status NS CN9/NS I I I\nSecurity_Request CN6/NS CN6/NS CN6/I I I\nSecurity_Response CN6/NS CN6/NS I I I\nSink_Capabilities_Extended CN11/NS NS CN11/NS I I I\nSource_Capabilities_Extended NS CN2/NS CN2/NS I I ITable 6.79 Applicability of Extended Messages (Continued)\nMessage Type Source Sink Dual-Role\nPowerCable\nPlug SOP’Cable\nPlug SOP’’VPD13\n1) Shall be supported by products that contain batteries.\n2) Shall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3) Shall be supported by products that can transmit the Get_Status Message.\n4) Shall be supported by products that can transmit the Get_Battery_Cap Message.\n5) Shall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6) Shall be supported by products that support USB security communication as defined in [USBTypeCAuthentication\n1.0] .\n7) Shall be supported by products that support USB firmware update communication as defined in\n[USBPDFirmwareUpdate 1.0] .\n8) Shall be supported when PPS is supported.\n9) Shall be supported by products that can transmit the Get_PPS_Status Message.\n10) Shall be supported when required by a country authority.\n11) Shall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12) Shall be supported by Active Cable s.\n13) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a CT-VPD Shall only take place\nwhen not Connected to a Charger .\n14) Shall be supported by products that support operation in EPR Mode .\n15) Shall be supported by Source s that support the Alert Message.\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10 Page 307Status CN33/NS CN3/NS I I I\nVendor_Defined_Extended O/NS O/NS O/I O/I O/ITable 6.79 Applicability of Extended Messages (Continued)\nMessage Type Source Sink Dual-Role\nPowerCable\nPlug SOP’Cable\nPlug SOP’’VPD13\n1) Shall be supported by products that contain batteries.\n2) Shall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3) Shall be supported by products that can transmit the Get_Status Message.\n4) Shall be supported by products that can transmit the Get_Battery_Cap Message.\n5) Shall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6) Shall be supported by products that support USB security communication as defined in [USBTypeCAuthentication\n1.0] .\n7) Shall be supported by products that support USB firmware update communication as defined in\n[USBPDFirmwareUpdate 1.0] .\n8) Shall be supported when PPS is supported.\n9) Shall be supported by products that can transmit the Get_PPS_Status Message.\n10) Shall be supported when required by a country authority.\n11) Shall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12) Shall be supported by Active Cable s.\n13) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a CT-VPD Shall only take place\nwhen not Connected to a Charger .\n14) Shall be supported by products that support operation in EPR Mode .\n15) Shall be supported by Source s that support the Alert Message.\nPage 308 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-106.13.4 Applicability of Extended Control Messages\nTable 6.80, \"Applicability of Extended Control Messages\" details Extended Control Message s that Shall /Should /\nShall Not be transmitted and received by a Source , Sink , Cable Plug or VPD . Requirements for Dual-Role Power Port s\nand Dual-Role Data Port s Shall override any requirements for Source -only or Sink -Only Ports.\nTable 6.80 Applicability of Extended Control Messages\nMessage Type Source Sink Dual-Role\nPowerDual-Role\nDataCable Plug VPD2\nTransmitted Message\nEPR_Get_Source_Cap NA CN1CN1 NA NA\nEPR_Get_Sink_Cap CN1 NA CN1 NA NA\nEPR_KeepAlive NA CN1 NA NA\nEPR_KeepAlive_Ack CN1 NA NA NA\nReceived Message\nEPR_Get_Source_Cap CN1 NS CN1 I I\nEPR_Get_Sink_Cap NS CN1CN1 I I\nEPR_KeepAlive CN1 NS I I\nEPR_KeepAlive_Ack NS CN1 I I\n1) Shall be supported by products that support EPR Mode .\n2) VPD includes CT-VPD s when not Connected to a Charger . PD communication with a CT-VPD Shall only take\nplace when not Connected to a Charger .\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10 Page 3096.13.5 Applicability of Structured VDM Commands\nTable 6.81, \"Applicability of Structured VDM Commands\" details Structured VDM Command s that Shall /Should /\nShall Not be transmitted and received by a DFP , UFP , Cable Plug or VPD . If Structured VDM s are not supported, the\nDFP or UFP receiving a VDM Command Shall send a Not_Supported Message in response.\nTable 6.81 Applicability of Structured VDM Commands\nCommand Type DFP UFP Cable Plug\nSOP’Cable Plug\nSOP’’VPD4\nTransmitted Command Request\nDiscover Identity CN1,6/R R2 NA NA NA\nDiscover SVIDs CN1/O O NA NA NA\nDiscover Modes CN1/O O NA NA NA\nEnter Mode CN1/NA NA NA NA NA\nExit Mode CN1/NA NA NA NA NA\nAttention O O NA NA NA\nReceived Command Request/Transmitted Command Response\nDiscover Identity CN5,6/R/\nNK3CN1,6/R/\nNK3N I N\nDiscover SVIDs O/NK3CN1/NK3CN1/NK I NK\nDiscover Modes O/NK3CN1/NK3CN1/NK I NK\nEnter Mode NK3CN1/NK3CN1/NK O NK\nExit Mode NK3CN1/NK3CN1/NK O NK\nAttention O/I3O/I3 I I I\n1) Shall be supported when Modal Operation is supported.\n2) May be transmitted by a UFP /Source during discovery (see Section 6.4.4.3.1, \"Discover\nIdentity\" and Section 8.3.3.25.3, \"Source Startup Structured VDM Discover Identity of a\nCable Plug State Diagram\" ).\n3) If Structured VDM s are not supported, the DFP or UFP receiving a VDM Command Shall\nsend a Not_Supported Message in response.\n4) VPD includes CT-VPD s when not Connected to a Charger . PD communication with a CT-\nVPD Shall only take place when not Connected to a Charger .\n5) Shall be supported by products with more than one DFP .\n6) Shall be supported by products that support [USB4] .\nPage 310 Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-106.13.6 Applicability of Reset Signaling\nTable 6.82, \"Applicability of Reset Signaling\" details the Reset that Shall /Should / Shall Not be transmitted and\nreceived by a DFP /UFP or Cable Plug ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6.13.7",
    "title": "Applicability of Fast Role Swap Request",
    "full_path": "6.13.7 Applicability of Fast Role Swap Request",
    "page": 310,
    "level": 3,
    "parent_id": "6.13",
    "tags": [],
    "content": "Table 6.83, \"Applicability of Fast Role Swap Request\" details the Fast Role Swap Request that Shall /Should / Shall\nNot be transmitted and received by a Source or Sink .Table 6.82 Applicability of Reset Signaling\nReset Type DFP UFP Cable Plug\nSOP’Cable Plug\nSOP’’VPD2\nTransmitted Message/Signaling\nSoft_Reset N N NA NA NA\nHard Reset N N NA NA NA\nCable Reset CN1 NA NA NA NA\nReceived Message/Signaling\nSoft_Reset N N N N N\nHard Reset N N N N N\nCable Reset DR DR N N N\n1) Shall be supported when transmission of SOP’ Packet s are supported, and the Port\ncan supply VCONN .\n2) VPD includes CT-VPDs when not Connected to a Charger . PD communication with a\nCT-VPD Shall only take place when not Connected to a Charger .\nTable 6.83 Applicability of Fast Role Swap Request\nCommand Type Source Sink Dual-Role Power\nTransmitted Message/Signaling\nFast Role Swap NA NA R\nReceived Message/Signaling\nFast Role Swap NA NA R\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3116.14 Value Parameters\nTable 6.84, \"Value Parameters\" contains value parameters used in this section.\nTable 6.84 Value Parameters\nParameter Description Value Unit Reference\nMaxExtendedMsgLen Maximum length of an Extended Message as\nexpressed in the Data Size field.260 Byte Section 6.2.1.2\nMaxExtendedMsgChunkLen Maximum length of an Extended Message\nChunk .26 Byte Section 6.2.1.2\nMaxExtendedMsgLegacyLen Maximum length of an Extended Message\nthat can be sent without Chunking .26 Byte Section 6.2.1.2\nPage 312 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107 Power Supply"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1",
    "title": "Source Requirements",
    "full_path": "7.1 Source Requirements",
    "page": 312,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.1",
    "title": "Behavioral Aspects",
    "full_path": "7.1.1 Behavioral Aspects",
    "page": 312,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "A PDUSB Source exhibits the following behaviors:\n Shall supply [USB Type-C 2.4] USB Type-C® current to VBUS while in a Default Contract or Implicit\nContract .\n Shall follow the requirements as specified in Section 7.1.5, \"Response to Hard Resets\" when Hard Reset\nSignaling is received.\n Shall control VBUS voltage transitions as bound by undershoot, overshoot and transition time\nrequirements."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.2",
    "title": "Source Bulk Capacitance",
    "full_path": "7.1.2 Source Bulk Capacitance",
    "page": 312,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "The Source bulk capacitance Shall Not be placed between the transceiver isolation impedance and the USB\nreceptacle. The Source bulk capacitance consists of C1 and C2 as shown in Figure 7.1, \"Placement of Source Bulk\nCapacitance\" . The Ohmic Interconnect might consist of PCB traces for power distribution or power switching\ndevices. The Ohmic Interconnect might also be part of the circuit implemented by the Source to limit its VBUS Output\nVoltage Limit (OVL) as described in Section 7.1.7.5, \"Output Voltage Limit\" . Though a Source Shall limit its output\nvoltage, a Sink Shall implement Sink OVP as described in Section 7.2.9.2, \"Input Over Voltage Protection\" to protect\nagainst excessive V BUS input voltage. The capacitance might be a single capacitor, a capacitor bank or distributed\ncapacitance. If the power supply is shared across multiple ports, the bulk capacitance is defined as\ncSrcBulkShared . If the power supply is dedicated to a single Port , the minimum bulk capacitance is defined as\ncSrcBulk .\nThe Source bulk capacitance is allowed to change for a newly Negotiated power level. The capacitance change Shall\noccur before the Source is ready to operate at the new power level. During a Power Role Swap , the Initial Source\nShall transition to Swap Standby before operating as the New Sink . Any change in bulk capacitance required to\ncomplete the Power Role Swap Shall occur during Swap Standby .\nFigure 7.1 Placement of Source Bulk Capacitance"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.3",
    "title": "Types of Sources",
    "full_path": "7.1.3 Types of Sources",
    "page": 312,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Consistent with the Power Data Object s discussed in Section 6.4.1, \"Capabilities Message\" , the power supply types\nthat are available as Source s in a USB Power Delivery System are:\n The Fixed Supply PDO exposes well-regulated fixed voltage power supplies. Source s Shall support at\nleast one Fixed Supply capable of supplying vSafe5V . The output voltage of a Fixed Supply Shall remain C2Ohmic\nInterconnect\nGND\nSHIELDVBUS ... Data\nLines\nGND\nSHIELDVBUS...Data\nLinesSOURCE CABLE\nC1Power\nSupply\nSource Bulk CapacitanceOVL\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 313within the range defined by the relative tolerance vSrcNew and the absolute band vSrcValid as listed\nin Table 7.23, \"Source Electrical Parameters\" and described in Section 7.1.8, \"Output Voltage Tolerance\nand Range\" .\n The Variable Supply (non- Battery ) PDO exposes less well-regulated Source s. The output voltage of a\nVariable Supply (non- Battery ) Shall remain within the absolute maximum output voltage and the\nabsolute minimum output voltage exposed in the Variable Supply PDO.\n The Battery Supply PDO exposes Batteries than can be connected directly as a Source to VBUS. The output\nvoltage of a Battery Supply Shall remain within the absolute maximum output voltage and the absolute\nminimum output exposed in the Battery Supply PDO.\n The Programmable Power Supply (PPS) Augmented Power Data Object (APDO ) exposes a Source with\nan output voltage that can be adjusted programmatically over a defined range. The output voltage of\nthe Programmable Power Supply Shall remain within a range defined by the relative tolerance\nvPpsNew and the absolute band vPpsValid .\n The Adjustable Voltage Supply (AVS) Augmented Power Data Object (APDO ) exposes a Source with an\noutput voltage that can be adjusted programmatically over a defined range. The output voltage of the\nAVS Shall remain within a range defined by the relative tolerance vAvsNew and the absolute band\nvAvsValid ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4",
    "title": "Source Transitions",
    "full_path": "7.1.4 Source Transitions",
    "page": 313,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.1",
    "title": "Fixed Supply",
    "full_path": "7.1.4.1 Fixed Supply",
    "page": 313,
    "level": 4,
    "parent_id": "7.1.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.1.1",
    "title": "Fixed Supply Positive Voltage Transitions",
    "full_path": "7.1.4.1.1 Fixed Supply Positive Voltage Transitions",
    "page": 313,
    "level": 5,
    "parent_id": "7.1.4.1",
    "tags": [],
    "content": "The Source Shall transition VBUS from the starting voltage to the higher new voltage in a controlled manner. The\nNegotiated new voltage (e.g., 5V, 9V, 15V, …) defines the nominal value for vSrcNew . During the positive transition\nthe Source Should be able to supply the Sink Standby current and the transient current to charge the total bulk\ncapacitance on VBUS. The slew rate of the positive transition Shall Not exceed vSrcSlewPos. The transitioning\nSource output voltage Shall settle within vSrcNew by tSrcSettle . The Source Shall be able to supply the Negotiated\npower level at the new voltage by tSrcReady . The positive voltage transition Shall remain above vSrcValid min of\nthe previous Explicit Contract and below vSrcValid max of the new Explicit Contract (Figure 7.2, \"Transition\nEnvelope for Positive Voltage Transitions\" ). The voltage Shall settle to vSrcNew within tSrcSettle . The starting time,\nt0, in Figure 7.2, \"Transition Envelope for Positive Voltage Transitions\" starts tSrcTransition after the last bit of the\nEOP of the GoodCRC Message has been received by the Source .\nFigure 7.2 Transition Envelope for Positive Voltage Transitions\nAt the start of the positive voltage transition the VBUS voltage level Shall Not droop vSrcValid min below either\nvSrcNew (i.e., if the starting VBUS voltage level is not vSafe5V ) or vSafe5V as applicable.\nStarting voltagevSrcNew(typ)\nt0vSrcSlewPos\ntSrcSettlevSrcValid(max)Upper bound of valid Source range\nvSrcNew(max)\nvSrcNew(min)\ntSrcReadyLower bound of valid Source range\n§\n§vSrcValid(min) beyond min/max limits of starting voltage\nPage 314 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Section 7.1.14, \"Non-application of V BUS Slew Rate Limits\" lists transitions that are exempt from the vSrcSlewPos\nlimit."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.1.2",
    "title": "Fixed Supply Negative Voltage Transitions",
    "full_path": "7.1.4.1.2 Fixed Supply Negative Voltage Transitions",
    "page": 314,
    "level": 5,
    "parent_id": "7.1.4.1",
    "tags": [],
    "content": "Negative voltage transitions are defined as shown in Figure 7.3, \"Transition Envelope for Negative Voltage\nTransitions\" and are specified in a similar manner to positive voltage transitions. Figure 7.3, \"Transition Envelope\nfor Negative Voltage Transitions\" does not apply to vSafe0V transitions. The slew rate of the negative transition\nShall Not exceed vSrcSlewNeg . The negative voltage transition Shall remain below vSrcValid max of the previous\nExplicit Contract and above vSrcValid min of the new Explicit Contract , as shown in F Figure 7.3, \"Transition\nEnvelope for Negative Voltage Transitions\" . The transitioning Source output voltage Shall settle to vSrcNew within\ntSrcSettle . The starting time, t0, in Figure 7.3, \"Transition Envelope for Negative Voltage Transitions\" starts\ntSrcTransition after the last bit of the EOP of the GoodCRC Message has been received by the Source .\nFigure 7.3 Transition Envelope for Negative Voltage Transitions\nIf the newly Negotiated voltage is vSafe5V , then the vSrcValid limits Shall determine the transition window and\nthe transitioning Source Shall settle within the vSafe5V limits by tSrcSettle .\nSection 7.1.14, \"Non-application of V BUS Slew Rate Limits\" lists transitions that are exempt from the vSrcSlewNeg\nlimit."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.2",
    "title": "SPR Programmable Power Supply (PPS)",
    "full_path": "7.1.4.2 SPR Programmable Power Supply (PPS)",
    "page": 314,
    "level": 4,
    "parent_id": "7.1.4",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.2.1",
    "title": "SPR Programmable Power Supply Voltage Transitions",
    "full_path": "7.1.4.2.1 SPR Programmable Power Supply Voltage Transitions",
    "page": 314,
    "level": 5,
    "parent_id": "7.1.4.2",
    "tags": [],
    "content": "The Programmable Power Supply (PPS) Shall transition VBUS over the defined voltage range in a controlled\nmanner. The Output Voltage value in the Programmable RDO defines the nominal value of the PPS output voltage\nafter completing a voltage change and Shall settle within the limits defined by vPpsNew by tPpsSrcTransSmall for\nsteps smaller than or equal to vPpsSmallStep, or else, within the limits defined by vPpsNew by\ntPpsSrcTransLarge , but only in case the Programmable Power Supply is not in CL mode. Any overshoot beyond\nvPpsNew Shall Not exceed vPpsValid at any time. Any undershoot beyond vPpsNew Shall Not exceed vPpsValid\nfor currents not resulting in CL mode. The PPS output voltage May change in a step-wise or linear manner and the\nslew rate of either type of change Shall Not exceed vPpsSlewPos for voltage increases or vPpsSlewNeg for voltage\ndecreases. The nominal requested voltage of all linear voltage changes Shall equate to an integer number of LSB\nchanges. An LSB change of the PPS output voltage is defined as vPpsStep . A PPS Shall be able to supply the\nNegotiated current level as it changes its output voltage to the requested level. All PPS voltage increases Shall\nStarting voltage\nLower bound of valid Source rangeUpper bound of valid Source range\nt0 tSrcSettle tSrcReadyvSrcNew(typ)\nvSrcValid(min)vSrcNew(max)\nvSrcNew(min)§vSrcSlewNeg\n§vSrcValid(max)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 315result in a voltage that is greater than or equal to the previous PPS output voltage. Likewise, all PPS voltage\ndecreases Shall result in a voltage that is less than or equal to the previous PPS output voltage.\nSince a Sink can draw current up to the Negotiated APDO current level in case of a voltage step, the voltage might\nnot increase to the requested level due to the power supply operating in CL mode. Likewise, since a Sink can have\na Battery connected to VBUS, the voltage might not decrease to the requested level due to the Battery voltage being\nhigher than the output voltage set point the Source is transitioning to. Were the Source to rely on checking the\nvoltage on VBUS, in either case, to determine when its power supply is ready a PS_RDY Message would never be sent.\nWhen the PPS voltage steps up or down, a PS_RDY Message Shall be sent within:\n tPpsSrcTransLarge after the last bit of the GoodCRC Message following the Accept Message for steps\nlarger than vPpsSmallStep .\n tPpsSrcTransSmall after the last bit of the GoodCRC Message following the Accept Message for steps\nless than or equal to vPpsSmallStep provided that either the voltage on VBUS has reached vPpsNew or\nthe power supply is in CL mode.\nWhen vPpsNew is lower than the Battery voltage, or the Source 's primary power is cut off the Sink Shall\nimmediately disconnect its Battery from VBUS. In these situations, the output current could reverse polarity and the\nSink is not allowed to source current (see Section 7.2.1, \"Behavioral Aspects\" and Section 7.2.9, \"Robust Sink\nOperation\" ).\nFigure 7.4, \"PPS Positive Voltage Transitions\" and Figure 7.5, \"PPS Negative Voltage Transitions\" below show the\noutput voltage behavior of a Programmable Power Supply in response to positive and negative voltage change\nrequests. The parameters vPpsMinVoltage and vPpsMaxVoltage define the lower and upper limits of the PPS\nrange respectively (see Table 10.11, \"SPR Programmable Power Supply Voltage Ranges\" for required ranges).\nvPpsMinVoltage corresponds to the Minimum Voltage field in the PPS APDO and vPpsMaxVoltage corresponds\nto Maximum Voltage field in the PPS APDO . If the Sink negotiates for a new PPS APDO , then the transition between\nthe two PPS APDO s Shall occur as described in Section 7.3.1, \"Transitions caused by a Request Message\" .\nFigure 7.4 PPS Positive Voltage Transitions\nvPpsMinVoltage\nV(2) = 1 + vPpsMinVoltagevPpsMinVoltage V(1)§§Programmable Power Supply Output Range\n§vPpsSlewPos\nV(3) = 1+n + vPpsMinVoltage§§"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Volts",
    "full_path": "0 Volts",
    "page": 315,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "vPpsMaxVoltage\n§ § §vPpsSlewPosvPpsSlewPos\n§§ §§\nvPpsValid\nvPpsNew§§\nvPpsValid\nvPpsValid\nvPpsNew§§\nvPpsValidNominal V(2)Nominal V(3)vPpsMaxVoltage V(4)\nV(2) > V(1)V(3) > V(2)V(4) > V(3)\nPage 316 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.5 PPS Negative Voltage Transitions\nSection 7.1.14, \"Non-application of V BUS Slew Rate Limits\" lists transitions that are exempt from the vPpsSlewNeg\nand vPpsSlewPos limits.\nSee Section 7.1.8.1, \"AVS/PPS Output Voltage Ripple\" for output voltage ripple limits.\nSee Section 7.1.8.2, \"AVS/PPS DNL Errors and Output Voltage/Current Tolerance\" for output voltage and current\nDNL step adjustments."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.2.2",
    "title": "SPR Programmable Power Supply Current Limit",
    "full_path": "7.1.4.2.2 SPR Programmable Power Supply Current Limit",
    "page": 316,
    "level": 5,
    "parent_id": "7.1.4.2",
    "tags": [],
    "content": "The Programmable Power Supply operating in SPR PPS Mode Shall limit its output current to the Operating\nCurrent field value in the RDO when the Sink attempts to draw more current than the Operating Current field\nvalue level. The programming step size for the Operating Current is iPpsCLStep . All programming changes of the\nOperating Current Shall settle to the new Operating Current field value within tPpsCLProgramSettle . The SPR\nPPS Operating Current regulation accuracy during Current Limit is defined as iPpsCLNew. The minimum\nprogrammable Current Limit level is iPpsCLMin . A Source that supports SPR PPS Mode Shall support Current Limit\nprogrammability between iPpsCLMin and the Maximum Current value in the SPR PPS APDO . A Source which\nreceives a request for current below iPpsCLMin Should reject the request. A Source that accepts a request for\ncurrent below iPpsCLMin Shall set its current limit at 1A.\nThe response of an SPR PPS to a load change depends on the Operating mode of the SPR PPS and the magnitude of\nthe load change. These dependencies lead to one of four possible responses of an SPR PPS to any load change. They\nare differentiated by the value of the PPS Status OMF before and after the load change:\n If the PPS Status OMF is cleared both before and after the load change, the SPR PPS responds solely by\nmaintaining the output voltage. The SPR PPS output voltage Shall remain within vPpsValid range. The\nSPR PPS response to the load change Shall settle within the vPpsNew tolerance band by the time\ntPpsTransient . The Operating Mode Flag Shall remain cleared during the load change response of the\nSPR PPS .\n If the PPS Status OMF is cleared before the load change and set after the load change, the SPR PPS\nresponds by reducing its output voltage to limit the SPR PPS output current. The SPR PPS output current\nShall stay within the iPpsCVCLTransient range once it reaches the iPpsCVCLTransient range. The SPR vPpsMinVoltageV(c) = 1 + vPpsMinVoltagevPpsMinVoltage V(d)§§Programmable Power Supply Output Range\n§\nV(b) = 1 + n + vPpsMinVoltage§§"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Volts",
    "full_path": "0 Volts",
    "page": 316,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "vPpsMaxVoltage\n§ § § §§§\nvPpsValid\nvPpsNew§§\nvPpsValid\nNominal V(c)Nominal V(b)vPpsMaxVoltage V(a)\nV(b) < V(a)\nV(d) < V(c)V(c) < V(b)\nvPpsValid\nvPpsNew§§\nvPpsValid§vPpsSlewNeg\nvPpsSlewNeg\nvPpsSlewNeg\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 317PPS response to the load change Shall settle within the iPpsCLNew tolerance band by the time\ntPpsCVCLTransient . The Operating Mode Flag Shall be set when the SPR PPS load change response\nsettles.\n If the PPS Status OMF is set both before and after the load change, the SPR PPS responds by adjusting\nits output voltage to maintain the output current. The SPR PPS output current Shall stay within the\niPpsCLTransient range. The SPR PPS response to the load change Shall settle within the iPpsCLNew\ntolerance band by the time tPpsCLSettle . The Operating Mode Flag Shall remain set during the load\nchange response of the SPR PPS .\n If the PPS Status OMF is set before the load change and cleared after the load change, the PPS responds\nto the load change by increasing its output voltage to vPpsNew and then maintaining it. The SPR PPS\noutput voltage Shall stay within the vPpsCLCVTransient range. The SPR PPS response to the load\nchange Shall settle within the vPpsNew tolerance band by the time tPpsCLCVTransient . The Operating\nMode Flag Shall be cleared when the PPS load change response settles.\nThe SPR PPS Source Shall maintain its output voltage at the value requested in the PPS RDO for all static and\ndynamic load conditions except when in Current Limit operation. In response to any static or dynamic load\ncondition during Current Limit operation that causes the SPR PPS output voltage to drop below vPpsShutdown the\nSource May send Hard Reset Signaling and Shall discharge VBUS to vSafe0V then resumes USB Default Operation at\nvSafe5V .\nWhen the Sink attempts to draw more current than the Operating Current in the RDO , the Source Shall limit its\noutput current. The current available from the Source during Current Limit mode Shall meet iPpsCLNew. The Sink\nMay Not reduce its Operating Current request in the RDO when the PPS Status OMF is set.\nCurrent limiting Shall be performed by the SPR PPS Source . Sink s that rely on PPS Current Limiting Shall meet the\nrequirements of Section 7.2.9, \"Robust Sink Operation\" . The Source Shall Not shutdown or otherwise disrupt the\navailable output power while in Current Limit mode unless another protection mechanism as outlined in Section\n7.1.7, \"Robust Source Operation\" is engaged to protect the Source from damage.\nAn SPR PPS Source that is operating in Current Limit Shall Not change its set-point in a manner that exceeds\niPpsCLLoadStepRate or iPpsCLLoadReleaseRate .\nThe relationship between SPR PPS programmable output voltage and SPR PPS programmable Current Limit Shall\nbe as shown in Figure 7.6, \"SPR PPS Programmable Voltage and Current Limit\" . The transition between the Constant\nVoltage mode and the Current Limit mode occurs between points a and b. The PPS Status OMF Shall be set or\ncleared within this region. In Current Limit mode when the load resistance changes, the output current of the\nSource Shall stay within iPpsCLNew. The proper behavior is represented by point c.\nPage 318 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.6 SPR PPS Programmable Voltage and Current Limit"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.2.3",
    "title": "SPR PPS Constant Power Mode",
    "full_path": "7.1.4.2.3 SPR PPS Constant Power Mode",
    "page": 318,
    "level": 5,
    "parent_id": "7.1.4.2",
    "tags": [],
    "content": "In Constant Power mode (when the PPS Power Limited bit is set) the Source May supply power that exceeds the\nSource 's PDP Rating . Sink s May limit their Operating Current request in the RDO and Shall meet the requirements\nof Section 7.2.9, \"Robust Sink Operation\" .\nThe tolerances along the Constant Power Curve Shall Not extend into the Guaranteed Capability Area of Figure 7.7,\n\"SPR PPS Constant Power\" .\nCurrent\nVoltage\nPPS APDO\nMin Voltage (max)PPS APDO\nMax Voltage\niPpsCLMin\nPPS APDO\nMax CurrentvPpsNew\nPPS RDO\nOperating CurrentPPS RDOOutput Voltage\nProgrammable\nVoltage Only\nRegionProgrammable Voltage &\nProgrammable Current Limit Region\nValid Current Limit Response\nInvalid Current Limit ResponseiPpsCLNewa\nCurrent Limit Flag setCurrent Limit Flag cleared\nb\nc cc\nSource Disconnect RegionvPpsShutdown (min)\nPoint a represents entry into the transition region between Constant Voltage mode and Current Limit mode.\nPoint b represents exit from the transition region between Constant Voltage mode and Current Limit mode.\nPoint c represents the exit from the iPpsCLNew region as the voltage drops below the PPS APDO Min Voltage.\nThe Source May disconnect at any point inside the tolerance range of the minimum voltage defined in the PPS APDO.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 319Figure 7.7 SPR PPS Constant Power\nCurrentVoltage\nNominal limits as pr. the APDO\nGuaranteed operating capability as pr. the APDO\nTolerance area for actual voltages (only static tolerances are shown)vPpsNew PDP constant power\ncurve\nMax APDO VoltageCapabilities when the Power Limited bit is set\nThe figure shows only the steady state after the transition\nvPpsNew\n0A0ViPpsCLNew\n(X = PPS APDO Max Current, Y = Prog Voltage)\nCoordinate applies when PPS Power Limited is setExample:• PDP = 27 W• Prog Voltage = 9V• PPS APDO Max Current = 3 ACoordinate = (3, 9)\nvPpsNew\nMin APDO Voltage\nvPpsNew\niPpsCLMin(1A)\nMin Current LimitPPS APDO\nMax CurrentValid Current Limit Range(X = PDP/PPS APDO Max Current, Y = PPS APDO Max Voltage)Coordinate applies when PPS Power Limited is setExample:• PDP = 27 W• PPS APDO Max Voltage = 11 VCoordinate = (2.45, 11)\nPage 320 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.1.4.3 Adjustable Voltage Supply (AVS)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.4.3.1",
    "title": "Adjustable Voltage Supply Voltage Transitions",
    "full_path": "7.1.4.3.1 Adjustable Voltage Supply Voltage Transitions",
    "page": 320,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Adjustable Voltage Supply (AVS) Shall transition VBUS over the defined voltage range in a controlled manner.\nThe Output Voltage value in the AVS RDO defines the nominal value of the AVS output voltage after completing a\nvoltage change and Shall settle within the limits defined by vAvsNew by tAvsSrcTransSmall for steps smaller than\nor equal to vAvsSmallStep , or else, within the limits defined by vAvsNew by tAvsSrcTransLarge for steps larger\nthan vAvsSmallStep . Any overshoot beyond vAvsNew Shall Not exceed vAvsValid at any time. Any undershoot\nbeyond vAvsNew Shall Not exceed vAvsValid at any time. The AVS output voltage May change in a stepwise or\nlinear manner and the slew rate of either type of change Shall Not exceed vAvsSlewPos for voltage increases or\nvAvsSlewNeg for voltage decreases. The nominal requested voltage of all linear voltage changes Shall equate to an\ninteger number of LSB changes. An LSB change of the AVS output voltage is defined as vAvsStep . An AVS Shall be\nable to supply the Negotiated current level as it changes its output voltage to the requested level if the change of\noutput voltage is less than or equal to vAvsSmallStep relative to vAvsNew . All AVS voltage increases Shall result in\na voltage that is greater than or equal to the previous AVS output voltage. Likewise, all AVS voltage decreases Shall\nresult in a voltage that is less than or equal to the previous AVS output voltage. Any time the Source enters the AVS\nrange of operation that voltage transition is considered a voltage step larger than vAvsSmallStep .\nWhen the AVS voltage steps up or down, a PS_RDY Message Shall be sent within:\n tAvsSrcTransLarge after the last bit of the GoodCRC Message following the Accept Message for steps\nlarger than vAvsSmallStep .\n tAvsSrcTransSmall after the last bit of the GoodCRC Message following the Accept Message for steps\nless than or equal to vAvsSmallStep provided the voltage on VBUS has reached vAvsNew .\nFigure 7.8, \"AVS Positive Voltage Transitions\" and Figure 7.9, \"AVS Negative Voltage Transitions\" below show the\noutput voltage behavior of an AVS in response to positive and negative voltage change requests. The parameters\nvAvsMinVoltage and vAvsMaxVoltage define the lower and upper limits of the AVS range respectively:\n For SPR AVS Source s there are two possible voltage ranges where the vAvsMinVoltage is always 9V and\nvAvsMaxVoltage is either 15V or 20V depending on the Source 's PDP. See Table 10.9, \"SPR Adjustable\nVoltage Supply (AVS) Voltage Ranges\" .\n For EPR AVS Source s vAvsMinVoltage corresponds to Minimum Voltage field (always 15V) in the EPR\nAVS APDO and vAvsMaxVoltage corresponds to Maximum Voltage field in the EPR AVS APDO . See\nTable 10.15, \"EPR Adjustable Voltage Supply (AVS) Voltage Ranges\" for required ranges.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 321Figure 7.8 AVS Positive Voltage Transitions\nFigure 7.9 AVS Negative Voltage Transitions\nSee Section 7.1.8.1, \"AVS/PPS Output Voltage Ripple\" for output voltage ripple limits.\nSee Section 7.1.8.2, \"AVS/PPS DNL Errors and Output Voltage/Current Tolerance\" for output voltage DNL step\nadjustments.\nvAvsMinVoltage\nV(2) = 1 + vAvsMinVoltagevAvsMinVoltage V(1)§§Adjustable Voltage Supply Output Range\n§vAvsSlewPos\nV(3) = 1+n + vAvsMinVoltage§§"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Volts",
    "full_path": "0 Volts",
    "page": 321,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "vAvsMaxVoltage\n§ § §vAvsSlewPosvAvsSlewPos\n§§ §§\nvAvsValid\nvAvsNew§§\nvAvsValid\nvAvsValid\nvAvsNew§§\nvAvsValidNominal V(2)Nominal V(3)vAvsMaxVoltage V(4)\nV(2) > V(1)V(3) > V(2)V(4) > V(3)\nvAvsMinVoltageV(c) = 1 + vAvsMinVoltagevAvsMinVoltage V(d)§§Adjustable Voltage Supply Output Range\n§\nV(b) = 1 + n + vAvsMinVoltage§§"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Volts",
    "full_path": "0 Volts",
    "page": 321,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "vAvsMaxVoltage\n§ § § §§§\nvAvsValid\nvAvsNew§§\nvAvsValid\nNominal V(c)Nominal V(b)vAvsMaxVoltage V(a)\nV(b) < V(a)\nV(d) < V(c)V(c) < V(b)\nvAvsValid\nvAvsNew§§\nvAvsValid§vAvsSlewNeg\nvAvsSlewNeg\nvAvsSlewNeg\nPage 322 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.1.4.3.2 Adjustable Voltage Supply Current\nThe AVS Shall maintain its output voltage at the value requested in the AVS RDO for all static and dynamic load\nconditions that do not exceed the Operating Current in the RDO . Unlike the SPR PPS programmable current, the AVS\nprogrammable power May range from zero to the PDP.\nThe maximum operating current:\n For SPR Source s, the maximum operating current is defined in the SPR Source_Capabilities Message\nMaximum Current 15V /Maximum Current 20V fields.\n For EPR Source s, the maximum operating current has to be calculated as the lower of the PDP field\nvalue/ Output Voltage or 5A whichever is lower. See Table 10.12, \"EPR Source Capabilities based on the\nPort Maximum PDP and using an EPR Capable Cable\""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.5",
    "title": "Response to Hard Resets",
    "full_path": "7.1.5 Response to Hard Resets",
    "page": 322,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Hard Reset Signaling indicates a communication failure has occurred and the Source Shall stop driving VCONN ,\nShall remove Rp from the VCONN pin and Shall drive VBUS to vSafe0V as shown in Figure 7.10, \"Source V BUS and\nVCONN Response to Hard Reset\" . The USB connection May reset during a Hard Reset since the VBUS voltage will be\nless than vSafe5V for an extended period of time. After establishing the vSafe0V voltage condition on VBUS, the\nSource Shall wait tSrcRecover before re-applying VCONN and restoring VBUS to vSafe5V . A Source Shall conform to\nthe VCONN timing as specified in [USB Type-C 2.4] .\nA Sink that enters Hard Reset can have cSnkBulkPd present until VBUS drops below vSafe0V . The Source Shall take\nthis into consideration.\nDevice operation during and after a Hard Reset is defined as follows:\n Self-powered devices Should Not disconnect from USB during a Hard Reset (see Section 9.1.2, \"Mapping\nto USB Device States\" ).\n Self-powered devices operating at more than vSafe5V May Not maintain full functionality after a Hard\nReset .\n Bus powered devices will disconnect from USB during a Hard Reset due to the loss of their power\nsource.\nWhen a Hard Reset occurs the Source Shall stop driving VCONN , Shall remove Rp from the VCONN pin and Shall start\nto transition the VBUS voltage to vSafe0V either:\n tPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink or\n tPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source .\nThe Source Shall meet both tSafe5V and tSafe0V relative to the start of the voltage transition as shown in Figure\n7.10, \"Source V BUS and V CONN Response to Hard Reset\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 323Figure 7.10 Source V BUS and V CONN Response to Hard Reset\nVCONN will meet tV CONN Discharge relative to the start of the voltage transition as shown in Figure 7.10, \"Source V BUS\nand V CONN Response to Hard Reset\" due to the discharge circuitry in the Cable Plug . VCONN Shall meet tV CONN On\nrelative to VBUS reaching vSafe5V .\nNote: tVCONN On and tV CONN Discharge are defined in [USB Type-C 2.4] ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.6",
    "title": "Changing the Output Power Capability",
    "full_path": "7.1.6 Changing the Output Power Capability",
    "page": 323,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Some USB Power Delivery Negotiation s will require the Source to adjust its output power capability without\nchanging the output voltage. In this case the Source Shall be able to supply a higher or lower load current within\ntSrcReady ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7",
    "title": "Robust Source Operation",
    "full_path": "7.1.7 Robust Source Operation",
    "page": 323,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7.1",
    "title": "Output Over Current Protection",
    "full_path": "7.1.7.1 Output Over Current Protection",
    "page": 323,
    "level": 4,
    "parent_id": "7.1.7",
    "tags": [],
    "content": "Source s Shall implement over current protection to prevent damage from output current that exceeds the current\nhandling capability of the Source . The definition of current handling capability is left to the discretion of the Source\nimplementation and Shall take into consideration the current handling capability of the connector contacts. If the\nover current protection implementation does not use a Hard Reset or Error Recovery , it Shall Not interfere with the\nNegotiated VBUS current level.\nAfter three consecutive over current events Source Shall go to ErrorRecovery .\nSource s Should attempt to send Hard Reset Signaling when over current protection engages followed by an Alert\nMessage indicating an OCP event once an Explicit Contract has been established. The over current protection\nresponse May engage at either the Port or system level. Systems or ports that have engaged over current protection\nShould attempt to resume USB Default Operation after determining that the cause of over current is no longer\npresent and May latch off to protect the Port or system. The definition of how to detect if the cause of over current\nis still present is left to the discretion of the Source implementation.\nThe Source Shall Re-negotiate with the Sink after choosing to resume USB Default Operation . The decision of how\nto Re-negotiate after an over current event is left to the discretion of the Source implementation.\nThe Source Shall prevent continual system or Port cycling if over current protection continues to engage after\ninitially resuming either USB Default Operation or Re-negotiation . Latching off the Port or system is an acceptable\nresponse to recurring over current.\nDuring the over current response and subsequent system or Port shutdown, all affected Source ports operating\nwith VBUS greater than vSafe5V Shall discharge VBUS to vSafe5V by the time tSafe5V and vSafe0V by the time\ntSafe0V .\nOld voltage\n0VvSafe0V(max)\nvSrcNeg(max)t0\ntSafe5V\ntSafe0V tSrcTurnOnvSafe5V(max), V CONN (max)\n§\nvVconnDischarge\ntVconnDischarge tVconnOn\ntSrcRecover\nPage 324 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.1.7.2 Over Temperature Protection\nSource s Shall implement Over Temperature Protection ( OTP ) to prevent damage from temperature that exceeds\nthe thermal capability of the Source . The definition of thermal capability and the monitoring locations used to\ntrigger the over temperature protection are left to the discretion of the Source implementation.\nIn order to avoid reaching an OTP event, Source s May proactively reduce the available power being offered to the\nSink , even though these offers might be lower than the Source would be expected to offer during normal thermal\noperating conditions. Prior to reducing power, the Source Should generate Alert Message indicating an Operating\nCondition Change and set the Temperature Status bit in the SOP Status Message to Warning (10b).\nSource s Should attempt to send Hard Reset Signaling when OTP engages followed by an Alert Message indicating\nan OTP event once an Explicit Contract has been established. The OTP response May engage at either the Port or\nsystem level. Systems or ports that have engaged OTP Should attempt to resume USB Default Operation and May\nlatch off to protect the Port or system.\nThe Source Shall Re-negotiate with the Sink after choosing to resume USB Default Operation . The decision of how\nto Re-negotiate after an over temperature event is left to the discretion of the Source implementation.\nThe Source Shall prevent continual system or Port cycling if over temperature protection continues to engage after\ninitially resuming either USB Default Operation or Re-negotiation . Latching off the Port or system is an acceptable\nresponse to recurring over temperature.\nDuring the OTP and subsequent system or Port shutdown, all affected Source ports operating with VBUS greater\nthan vSafe5V Shall discharge VBUS to vSafe5V by the time tSafe5V and vSafe0V by the time tSafe0V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7.3",
    "title": "vSafe5V Externally Applied to Ports Supplying vSafe5V",
    "full_path": "7.1.7.3 vSafe5V Externally Applied to Ports Supplying vSafe5V",
    "page": 324,
    "level": 4,
    "parent_id": "7.1.7",
    "tags": [],
    "content": "Safe operation mandates that Power Delivery Source s Shall be tolerant of vSafe5V being present on VBUS when\nsimultaneously applying power to VBUS. Normal USB PD communication Shall be supported when this vSafe5V to\nvSafe5V connection exists."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7.4",
    "title": "Detach",
    "full_path": "7.1.7.4 Detach",
    "page": 324,
    "level": 4,
    "parent_id": "7.1.7",
    "tags": [],
    "content": "A USB Detach is detected electrically using CC detection on the USB Type-C connector. When the Source is Detached\nthe Source Shall transition to vSafe0V by tSafe0V relative to when the Detach event occurred. During the transition\nto vSafe0V the VBUS voltage Shall be below vSafe5V max by tSafe5V relative to when the Detach event occurred\nand Shall Not exceed vSafe5V max after this time.\nSource s operating in EPR Mode need to avoid creating large differential voltages at the connector. See Appendix H\nin the [USB Type-C 2.4] specification for background information. To achieve this, Source s operating in EPR Mode ,\nupon detecting a disconnect, Shall stop sourcing current and minimize VBUS capacitance. There May continue to be\ncurrent sourced from the Source bulk capacitance, but that Should also be minimized by disconnecting as much of\nthe Source bulk capacitance as possible. For example, the Source can stop sourcing from the Power Supply and the\nC1 portion of the Source bulk capacitance in Figure 7.1, \"Placement of Source Bulk Capacitance\" by disabling the\nOhmic Interconnect switch.\nThe Source Should detect the disconnect, stop sourcing current, and minimize the VBUS capacitance as quickly as\npractical. If this is done after the CC contacts disconnect and before the VBUS contacts disconnect there is less risk\nof large differential voltages at the connector.\nNote: A USB-PD transmission by the Source during a disconnect event will delay disconnect detection by the\nSource ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.7.5",
    "title": "Output Voltage Limit",
    "full_path": "7.1.7.5 Output Voltage Limit",
    "page": 324,
    "level": 4,
    "parent_id": "7.1.7",
    "tags": [],
    "content": "The output voltage of Source s Shall account for vSrcNew , vSrcValid or vPpsNew , vPpsValid or vAvsNew ,\nvAvsValid as determined by the Negotiated VBUS value. Source s Shall meet applicable safety and regulatory\nrequirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3257.1.8 Output Voltage Tolerance and Range\nAfter a voltage transition is complete (i.e., after tSrcReady ) and during static load conditions the Source output\nvoltage Shall remain within the vSrcNew or vSafe5V limits as applicable. The ranges defined by vSrcNew and\nvSafe5V account for DC regulation accuracy, line regulation, load regulation and output ripple. After a voltage\ntransition is complete (i.e., after tSrcReady ) and during transient load conditions the Source output voltage Shall\nNot go beyond the range specified by vSrcValid. The amount of time the Source output voltage can be in the band\nbetween either vSrcNew or vSafe5V and vSrcValid Shall Not exceed tSrcTransient . Refer to Table 7.23, \"Source\nElectrical Parameters\" for the output voltage tolerance specifications. Figure 7.11, \"Application of vSrcNew and\nvSrcValid limits after tSrcReady\" illustrates the application of vSrcNew and vSrcValid after the voltage transition is\ncomplete.\nThe vSrcNew and vSrcValid limits Shall Not apply to VBUS during the VBUS discharge and switchover that occurs\nduring a Fast Role Swap as described in Section 7.1.13, \"Fast Role Swap\" .\nFigure 7.11 Application of vSrcNew and vSrcValid limits after tSrcReady\nThe Source output voltage Shall be measured at the connector receptacle. The stability of the Source Shall be\ntested in 25% load step increments from minimum load to maximum load and also from maximum load to\nminimum load. The transient behavior of the load current is defined in Section 7.2.6, \"Transient Load Behavior\" . The\ntime between each step Shall be sufficient to allow for the output voltage to settle between load steps. In some\nsystems it might be necessary to design the Source to compensate for the voltage drop between the output stage of\nthe power supply electronics and the receptacle contact. The determination of whether compensation is necessary\nis left to the discretion of the Source implementation."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.8.1",
    "title": "AVS/PPS Output Voltage Ripple",
    "full_path": "7.1.8.1 AVS/PPS Output Voltage Ripple",
    "page": 325,
    "level": 4,
    "parent_id": "7.1.8",
    "tags": [],
    "content": "The AVS /PPS output voltage ripple is expected to exceed the magnitude of one or more LSB as show in the Figure\n7.12, \"Expected AVS/PPS Ripple Relative to an LSB\" .Sink Load I1vSrcNew(typ)\ntSrcReadyiLoadStepRatevSrcValid(max)\nvSrcValid(min)vSrcNew(max)\nvSrcNew(min)\ntSrcTransient window\nу\u0003\u0003\ntSrcTransient windows\nу\u0003\u0003у\u0003\u0003iLoadReleaseRateSink Load I2\nPage 326 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.12 Expected AVS/PPS Ripple Relative to an LSB"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.8.2",
    "title": "AVS/PPS DNL Errors and Output Voltage/Current Tolerance",
    "full_path": "7.1.8.2 AVS/PPS DNL Errors and Output Voltage/Current Tolerance",
    "page": 326,
    "level": 4,
    "parent_id": "7.1.8",
    "tags": [],
    "content": "The PPS voltage and current discrete LSB steps have a DNL tolerance as shown in Figure 7.13, \"Allowed DNL errors\nand tolerance of Voltage and Current in AVS/PPS mode\" below. In absolute terms the step size of the LSB for both\nvoltage and current is defined by vPpsStep /vAvsStep for voltage and iPpsCLStep for current. Several examples of\nValid LSB steps are shown in Figure 7.13, \"Allowed DNL errors and tolerance of Voltage and Current in AVS/PPS\nmode\" :\n The upper end of the DNL error (+1 LSB) shows the case where one step is effectively skipped.\n The lower end of the DNL error (-1 LSB) shows the case where the voltage or current set-point\nremained the same.\nThe ideal scenario for the DNL error (=0) matches the typical step size for the voltage or current.\nThe intent of DNL is to guarantee that changes to the voltage/current have the correct directionality, and that the\nmaximum step size is clearly defined.\nNote: The Source Should avoid scenarios where multiple consecutive steps have errors close to the Maximum\nand Minimum DNL .timevoltage+1 LSB+1 LSB\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 327Figure 7.13 Allowed DNL errors and tolerance of Voltage and Current in AVS/PPS mode"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.8.3",
    "title": "Programmable Power Supply Output Voltage Tolerance and",
    "full_path": "7.1.8.3 Programmable Power Supply Output Voltage Tolerance and",
    "page": 327,
    "level": 4,
    "parent_id": "7.1.8",
    "tags": [],
    "content": "Range\nAfter a voltage transition of a Programmable Power Supply is complete (i.e. after tPpsSrcTransSmall or\ntPpsSrcTransLarge ) and during static load conditions the Source output voltage Shall remain within the vPpsNew\nlimits. The range defined by vPpsNew accounts for DC regulation accuracy, line regulation, load regulation and\noutput ripple. After a voltage transition is complete (i.e. after tPpsSrcTransSmall or tPpsSrcTransLarge ) and\nduring transient load conditions the Source output voltage Shall Not go beyond the range specified by vPpsValid .\nThe amount of time the Source output voltage can be in the band between vPpsNew and vPpsValid Shall Not\nexceed tPpsTransient ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.8.4",
    "title": "Adjustable Voltage Supply Output Voltage tolerance and Range",
    "full_path": "7.1.8.4 Adjustable Voltage Supply Output Voltage tolerance and Range",
    "page": 327,
    "level": 4,
    "parent_id": "7.1.8",
    "tags": [],
    "content": "After a voltage transition of an AVS is complete (i.e. after tAvsSrcTransSmall or tAvsSrcTransLarge ) and during\nstatic load conditions the Source output voltage Shall remain within the vAvsNew limits. The range defined by\nvAvsNew accounts for DC regulation accuracy, line regulation, load regulation and output ripple. After a voltage\ntransition is complete (i.e. after tAvsSrcTransSmall or tAvsSrcTransLarge ) and during transient load conditions\nthe Source output voltage Shall Not go beyond the range specified by vAvsValid . The amount of time the Source\noutput voltage can be in the band between vAvsNew and vAvsValid Shall Not exceed tAvsTransient .Code\nVoltage, Current"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "LSBDNL < 0 LSBMax DNL = 1 LSB",
    "full_path": "1 LSBDNL < 0 LSBMax DNL = 1 LSB",
    "page": 327,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "vPpsNew,vAvsNew,\niPpsNew\n(max)\nvPpsNew,vAvsNew,\niPpsNew\n(min)\nvPpsNew,vAvsNew,\niPpsNewDNL = -1 LSB\nPage 328 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.1.9 Charging and Discharging the Bulk Capacitance on V BUS\nThe Source Shall charge and discharge the bulk capacitance on VBUS whenever the Source voltage is Negotiated to\na different value. The charging or discharging occurs during the voltage transition and Shall Not interfere with the\nSource 's ability to meet tSrcReady ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.10",
    "title": "Swap Standby for Sources",
    "full_path": "7.1.10 Swap Standby for Sources",
    "page": 328,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Source s and Sink s of a Dual-Role Power Port Shall support Swap Standby . Swap Standby occurs for the Source after\nthe Source power supply has discharged the bulk capacitance on VBUS to vSafe0V as part of the Power Role Swap\ntransition.\nWhile in Swap Standby :\n The Source Shall Not drive VBUS that is therefore expected to remain at vSafe0V .\n Any discharge circuitry that was used to achieve vSafe0V Shall be removed from VBUS.\n The Dual-Role Power Port Shall be configured as a Sink .\n The USB connection Shall Not reset even though vSafe5V is no longer present on VBUS (see Section 9.1.2,\n\"Mapping to USB Device States\" ).\nThe PS_RDY Message associated with the Source being in Swap Standby Shall be sent after the VBUS drive is\nremoved. The time for the Source to transition to Swap Standby Shall Not exceed tSrcSwapStdby . Upon entering\nSwap Standby , the Source has relinquished its Power Role as Source and is ready to become the New Sink . The\ntransition time from Swap Standby to being the New Sink Shall be no more than tNewSnk . The New Sink May start\nusing power after the new Source sends the PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.11",
    "title": "Source Peak Current Operation",
    "full_path": "7.1.11 Source Peak Current Operation",
    "page": 328,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "A Source that has the Fixed Supply PDO or AVS APDO Peak Current bits set to 01b, 10b and 11b Shall be designed\nto support one of the overload Capabilities defined in Table 6.10, \"Fixed Power Source Peak Current Capability\" or\nTable 6.16, \"EPR AVS Power Source Peak Current Capability\" respectively. The overload conditions are bound in\nmagnitude, duration and duty cycle as listed in Table 6.10, \"Fixed Power Source Peak Current Capability\" or\nTable 6.16, \"EPR AVS Power Source Peak Current Capability\" . Source s are not required to support continuous\noverload operation. When overload conditions occur, the Source is allowed the range of vSrcPeak (instead of\nvSrcNew ) relative to the nominal value (see Figure 7.14, \"Source Peak Current Overload\" ). When the overload\ncapability is exceeded, the Source is expected take whatever action is necessary to prevent electrical or thermal\ndamage to the Source . The Source May send a new Source_Capabilities Message with the Fixed Supply PDO or AVS\nAPDO Peak Current bits set to 00b to prohibit overload operation even if an overload capability was previously\nNegotiated with the Sink .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 329Figure 7.14 Source Peak Current Overload"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12",
    "title": "Source Capabilities Extended Parameters",
    "full_path": "7.1.12 Source Capabilities Extended Parameters",
    "page": 329,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Implementers can choose to make available certain characteristics of a PDUSB Source as a set of Static and/or\ndynamic parameters to improve interoperability between external power sources and portable computing\ndevices. The complete list of reportable Static parameters is described in full in Section 6.5.1,\n\"Source_Capabilities_Extended Message\" and listed in Figure 6.37, \"Source_Capabilities_Extended Message\" . The\nsubset of parameters listed below directly represent Source Capabilities and are described in the rest of this\nsection.\n Voltage Regulation.\n Holdup Time.\n Compliance.\n Peak Current.\n Source Inputs.\n Batteries."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.1",
    "title": "Voltage Regulation Field",
    "full_path": "7.1.12.1 Voltage Regulation Field",
    "page": 329,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "The power consumption of a device can change dynamically. The ability of the Source to regulate its voltage output\nmight be important if the device is sensitive to fluctuations in voltage. The Voltage Regulation bit field is used to\nconvey information about the Source s output regulation and tolerance to various load steps."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.1.1",
    "title": "Load Step Slew Rate",
    "full_path": "7.1.12.1.1 Load Step Slew Rate",
    "page": 329,
    "level": 5,
    "parent_id": "7.1.12.1",
    "tags": [],
    "content": "The default load step slew rate is established at 150mA/µs. A Source Shall meet the following requirements under\nthe load step reported in the Source_Capabilities_Extended Message :\n The Source Shall maintain VBUS regulation within the vSrcValid range.\n The noise on the CC line Shall remain below vNoiseIdle and vNoiseActive .\nSink Port CurrentSource Port Voltage\nvSrcNew(max)/\nvSrcPeak(max)\nNominal Voltage\nvSrcNew(min)\nvSrcPeak(min)\nIOClevel\nas requested in the Operating\nCurrent field of an RDO% level with respect to I OC\nas advertised in the Peak Current\nfield of Fixed Supply PDOAdditional operating range for\nFixed Supply that supports\noverload capabilityOperating range for supply that DOES\nNOT support overload capability\nPage 330 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Test conditions require a change in both positive and negative load steps from 1Hz to 5000Hz, up to the Advertised\nLoad Step Magnitude of the full load output including from both 10 mA and 10% initial load. The Source Shall\nensure that PD Communications meet the transmit and receive masks as specified in Section 5.8.2, \"Transmit and\nReceive Masks\" under all load conditions."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.1.2",
    "title": "Load Step Magnitude",
    "full_path": "7.1.12.1.2 Load Step Magnitude",
    "page": 330,
    "level": 5,
    "parent_id": "7.1.12.1",
    "tags": [],
    "content": "The default load step magnitude rate Shall be 25% of IoC. The Source May report higher capability tolerating a load\nstep of 90% of IoC."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.2",
    "title": "Holdup Time Field",
    "full_path": "7.1.12.2 Holdup Time Field",
    "page": 330,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "The Holdup Time field Shall return a numeric value of the number of milliseconds the output voltage stays in\nregulation upon a short interruption of the AC Supply .\nAn AC Supplied Source Shall report its holdup time in this field. The holdup time is measured with the load at rated\nmaximum, with the AC Supply at 115VAC rms and 60Hz (or at 230VAC rms and 50Hz for a Source that does not\nsupport 115VAC AC Supply ). The reported time describes the minimum length of time from the last completed AC\nSupply input cycle (zero-degree phase angle) until when the output voltage decays below vSrcValid (min). Source s\nare recommended to support a minimum of 3ms and are preferred to support over 10 milliseconds holdup time\n(equivalent to a half cycle drop from the AC Supply ). See Figure 7.15, \"Holdup Time Measurement\" .\nFigure 7.15 Holdup Time Measurement"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.3",
    "title": "Compliance Field",
    "full_path": "7.1.12.3 Compliance Field",
    "page": 330,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "An SPR Source claiming LPS, PS1 or PS2 compliance (see [IEC 62368-1] ) Shall report its Capabilities in the\nCompliance field. Since the SPR Source May have several potential output voltage and current settings, every SPR\nSource supply (each indicated by a PDO) Shall be compliant to LPS requirements.\nNote: According to the requirements of [IEC 60950-1] and/or [IEC 62368-3] , a device tested and certified with\nan LPS Source (SPR Source or EPR Source operating in SPR Mode ) is prohibited from using a non- LPS\nSource (EPR Source operating in EPR Mode ). Alternatively, [IEC 62368-1] , classifies power sources\naccording to their maximum, constrained power output (15watts or 100watts)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.4",
    "title": "Peak Current",
    "full_path": "7.1.12.4 Peak Current",
    "page": 330,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "The Source reports its ability to source peak current delivery in excess of the Negotiated amount in the Peak\nCurrent field. The duration of peak current Shall be followed by a current consumption below the Operating\nCurrent ( IoC) in order to maintain average power delivery below the IoC current. vSrcValid(min)\nHold Up Timeу\nVBUSAC mains voltage\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 331A Source May have greater capability to source peak current than can be reported using the Peak Current field in\nthe Fixed Supply PDO or AVS APDO . In this case the Source Shall report its additional capability in the Peak\nCurrent1 /Peak Current2 /Peak Current3 fields in the Source_Capabilities_Extended Message .\nEach overload period Shall be followed by a period of reduced current draw such that the rolling average current\nover the Overload Period field value with the specified Duty Cycle field value (see Section 6.5.1.10, \"Peak Current\nField\" ) Shall Not exceed the Negotiated current. This is calculated as:\nPeriod of reduced current = (1 - value in Duty Cycle field/100) * value in Overload Period field"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.5",
    "title": "Source Inputs",
    "full_path": "7.1.12.5 Source Inputs",
    "page": 331,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "The Source Inputs field identifies the possible inputs that provide power to the Source .\nNote: Some Source s are only powered by a Battery (e.g., an automobile) rather than the more common AC\nSupply ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.12.6",
    "title": "Batteries",
    "full_path": "7.1.12.6 Batteries",
    "page": 331,
    "level": 4,
    "parent_id": "7.1.12",
    "tags": [],
    "content": "The Number of Batteries/Battery Slots field Shall report the number of Batteries the Source supports. The Source\nShall independently report the number of Hot Swappable Batteries and the number of Fixed Batteries ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.13",
    "title": "Fast Role Swap",
    "full_path": "7.1.13 Fast Role Swap",
    "page": 331,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "A Fast Role Swap limits the interruption of VBUS power to a bus powered accessory connected to a Hub DFP that has\na UFP Attached to a power source and a DRP Attached to a Host Port supporting DRP as shown in Figure 7.16, \"V BUS\nPower during Fast Role Swap\" .\nFigure 7.16 V BUS Power during Fast Role Swap\nWhen the power source connected to the Hub UFP stops sourcing power and VBUS at the Hub DRP connector\ndischarges below vSrcValid(min), if VBUS has been Negotiated to a higher voltage than vSafe5V , or vSafe5V (min)\nthe Fast Role Swap Request Shall be sent from the Hub DRP to the Host DRP and the Hub DRP Shall sink power. In\nthe Fast Role Swap use case, the Hub DRP behaves like a bidirectional power path. The Hub DRP Shall Not enable\nVBUS discharge circuitry when changing operation from Initial Source to New Sink . The Hub DFP Port (s) Shall\nsupport default USB Type-C Current (see [USB Type-C 2.4] ) until a new Explicit Contract is Negotiated .\nAfter sending the Fast Role Swap Request and while VBUS > vSafe5V (min), the New Sink Shall Not draw more than\niNewFrsSink until the New Source has applied its Rp. The New Sink Shall Not draw more than iSnkStdby from VBUS\nuntil tSnkFRSwap after it has started sending the Fast Role Swap Request or VBUS has fallen below vSafe5V (min).\nThe tSnkFRSwap time Shall start at the beginning of the Fast Role Swap Request or when VBUS falls below vSafe5V\n(min), whichever comes later. After waiting for tSnkFRSwap , the New Sink Shall Not draw more than iNewFrsSink\nuntil the New Source has applied its Rp. After the New Source has applied its Rp, the New Sink Shall be limited to USB\nType-C Current (see [USB Type-C 2.4] ) in an Implicit Contract until a new Explicit Contract is Negotiated . All Sink\nrequirements Shall apply to the New Sink after the Fast Role Swap is complete. The Fast Role Swap response of the\nHost DRP is described in Section 7.2.10, \"Fast Role Swap\" since the Host DRP is operating as the Initial Sink prior to\nthe Fast Role Swap .\nAfter the VBUS voltage level at the Hub DRP connector drops below vSafe5V a PS_RDY Message Shall be sent to the\nHost DRP as shown in the Fast Role Swap transition diagram of Section 7.3.4, \"Transitions Caused by Fast Role Swap\" .USB PD Capable\nHubDRP\nUFPDFP\nPower SourceBus Powered\nAccessory\nUSB PD Capable\nHostDRP Power flow before the\nFast Role Swap\nPower flow after the\nFast Role Swap\nPage 332 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.17, \"V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) > vSafe5V(min)\" and\nFigure 7.18, \"V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) < vSafe5V(min)\" show the\nVBUS detection and timing for the New Source during a Fast Role Swap after the Fast Role Swap Request has been\nreceived. The New Source May turn on the VBUS output switch once VBUS is below vSafe5V (max). In this case, the\nNew Source prevents VBUS from falling below vSafe5V (min). The new source Shall turn on the VBUS output switch\nwithin tSrcFRSwap of falling below vSafe5V (min).\nVBUS might have started at vSafe5V or at higher voltage. When the Fast Role Swap Request is detected, VBUS could\ntherefore be either above vSafe5V (max), within the vSafe5V range, or below vSafe5V (min). If the Fast Role Swap\nRequest is detected when VBUS is below vSafe5V (min), then the new source Shall turn on the VBUS output switch\nwithin tSrcFRSwap of detecting the Fast Role Swap Request. In this case, the maximum time from the beginning of\nthe Fast Role Swap Request to VBUS being sourced May be tSrcFRSwap (max) + tFRSwapRx (max).\nFigure 7.17 V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) > vSafe5V(min)\nFigure 7.18 V BUS detection and timing during Fast Role Swap, initial V BUS (at new source) < vSafe5V(min)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.14",
    "title": "Non-application of V BUS Slew Rate Limits",
    "full_path": "7.1.14 Non-application of V BUS Slew Rate Limits",
    "page": 332,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": "Scenarios where vSrcSlewPos and vPpsSlewPos VBUS slew rate limits do not apply and VBUS May transition faster\nthan specified are as follows:\n When first applying VBUS after an Attach .\n When applying VBUS as part of a Power Role Swap to Source Power Role .\n When increasing VBUS from vSafe0V to vSafe5V during a Hard Reset .\n During a Fast Role Swap when the Initial Sink applies VBUS.\nOld Voltage\n0VvSafe5V(min)\ntSrcFRSwapvSafe5V(max)§New Source may\nturn on at any time after V\nBUSfalls below\nvSafe5V(max)VBUS\nOld Source\ndetects power loss\nand signals Fast\nRole Swap\nOld Voltage\n0VvSafe5V(min)\ntSrcFRSwapVBUSis below vSafe5V(min)\nbefore FRS signal is finished\nOld Source detects power\nloss and signals Fast Role\nSwaptFRSwapRx (max)VBUSat new\nSource\nCCNew Source may turn on after\ndetecting Fast Role Swap signal\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 333Scenarios where vSrcSlewNeg and vPpsSlewNeg VBUS slew rate limits do not apply and VBUS May transition faster\nthan specified are as follows:\n When discharging VBUS to vSafe0V during a Hard Reset .\n When discharging VBUS to vSafe0V as part of a Power Role Swap to Sink Power Role .\n When discharging VBUS to vSafe0V after a Detach .\n During a Fast Role Swap when the VBUS power source connected to the Hub UFP stops sourcing power."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.15",
    "title": "V CONN Power Cycle",
    "full_path": "7.1.15 V CONN Power Cycle",
    "page": 333,
    "level": 3,
    "parent_id": "7.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.1.15.1",
    "title": "UFP V CONN Power Cycle",
    "full_path": "7.1.15.1 UFP V CONN Power Cycle",
    "page": 333,
    "level": 4,
    "parent_id": "7.1.15",
    "tags": [],
    "content": "The Data Reset process requires the DFP to be the VCONN Source by the end of the process. In the case where the\nUFP is the VCONN Source , the following steps Shall be followed:\n Following the last bit of the GoodCRC Message acknowledging the Accept Message in response to the\nData_Reset Message , the UFP Shall turn off VCONN and ensure it is below vRaReconnect (see [USB Type-\nC 2.4] ) within tVCONN Zero .\n When VCONN is below vRaReconnect, the UFP Shall send a PS_RDY Message .\nNote: If the UFP was not sourcing VCONN , it still sends the PS_RDY Message .\n The DFP Shall wait tVCONN Reapplied following the last bit of the GoodCRC Message acknowledging the\nPS_RDY Message before sourcing VCONN . The DFP Shall ensure VCONN is within vV CONN Valid (see [USB\nType-C 2.4] ) within tVCONN Valid .\nFigure 7.19, \"Data Reset UFP V CONN Power Cycle\" below illustrates the UFP VCONN Power Cycle process.\nFigure 7.19 Data Reset UFP V CONN Power Cycle\n0V\nAccept\n(DFP/UFP)vVCONN Valid\nvRaReconnect\ntVCONN Zero\ntVCONN Valid tVCONN ReappliedPS_RDY\n(UFP)UFP DFP\nPage 334 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.1.15.2 DFP V CONN Power Cycle\nThe Data Reset process requires the DFP to be the VCONN Source by the end of the process. In the case where the\nDFP is the VCONN Source , the following steps Shall be followed:\n1) If the DFP sent the Data_Reset Message and is sourcing VCONN then it Shall turn off VCONN and ensure it\nis below vRaReconnect (see [USB Type-C 2.4] ) within tVCONN Zero of the last bit of the GoodCRC\nMessage acknowledging the Accept Message in response to the Data_Reset Message .\n2) If the UFP sent the Data_Reset Message then the DFP Shall turn off VCONN and ensure it is below\nvRaReconnect (see [USB Type-C 2.4] ) within tVCONN Zero following the last bit of the GoodCRC Message\nacknowledging the Accept Message in response to the Data_Reset Message .\n3) When VCONN is below vRaReconnect, the DFP Shall wait tVCONN Reapplied before sourcing VCONN .\n4) The DFP Shall ensure VCONN is within vV CONN Valid (see [USB Type-C 2.4] ) within tVCONN Valid .\nFigure 7.20, \"Data Reset DFP V CONN Power Cycle\" below illustrates the DFP VCONN Power Cycle process.\nFigure 7.20 Data Reset DFP V CONN Power Cycle\n0V\nAccept\n(DFP/UFP) vVCONN Valid\nvRaReconnect\ntVCONN Zero\ntVCONN Valid tVCONN ReappliedUFP DFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3357.2 Sink Requirements"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.1",
    "title": "Behavioral Aspects",
    "full_path": "7.2.1 Behavioral Aspects",
    "page": 335,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "A PDUSB Sink exhibits the following behaviors:\n Shall Not draw more than [USB Type-C 2.4] USB Type-C Current from VBUS while in a Default Contract\nor Implicit Contract .\n Shall follow the requirements as specified in Section 7.1.5, \"Response to Hard Resets\" when Hard Reset\nSignaling is received.\n Shall control VBUS in-rush current when increasing current consumption according to [USB 2.0] or\n[USB 3.2] as appropriate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.2",
    "title": "Sink Bulk Capacitance",
    "full_path": "7.2.2 Sink Bulk Capacitance",
    "page": 335,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "The Sink bulk capacitance consists of C3 and C4 as shown in Figure 7.21, \"Placement of Sink Bulk Capacitance\" . The\nOhmic Interconnect might consist of PCB traces for power distribution or power switching devices. The Ohmic\nInterconnect is expected to be part of an input Over Voltage Protection ( Sink OVP ) circuit implemented by the Sink\nas described in Section 7.2.9.2, \"Input Over Voltage Protection\" to protect against excessive V BUS input voltage. A\nSink Shall implement OVP . The Sink Shall Not rely on the Source output voltage limit for its input OVP . The\ncapacitance might be a single capacitor, a capacitor bank or distributed capacitance. An upper bound of\ncSnkBulkPd Shall Not be exceeded so that the transient charging, or discharging, of the total bulk capacitance on\nVBUS can be accounted for during voltage transitions.\nThe Sink bulk capacitance that is within the cSnkBulk max or cSnkBulkPd max limits is allowed to change to\nsupport a newly Negotiated power level. The capacitance can be changed when the Sink enters Sink Standby or\nduring a voltage transition or when the Sink begins to operate at the new power level. Changing the Sink bulk\ncapacitance Shall Not cause a transient current on VBUS that violates the present Contract . During a Power Role\nSwap the Default Sink Shall transition to Swap Standby before operating as the New Source . Any change in bulk\ncapacitance required to complete the Power Role Swap Shall occur during Swap Standby .\nFigure 7.21 Placement of Sink Bulk Capacitance"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.3",
    "title": "Sink Standby",
    "full_path": "7.2.3 Sink Standby",
    "page": 335,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "The Sink Shall transition to Sink Standby before a positive voltage transition of VBUS. During Sink Standby the Sink\nShall reduce the current drawn to iSnkStdby . This allows the Source to manage the voltage transition as well as\nsupply sufficient operating current to the Sink to maintain PD operation during the transition. The Sink Shall\ncomplete this transition to Sink Standby within tSnkStdby after evaluating the Accept Message from the Source . The\ntransition when returning to Sink operation from Sink Standby Shall be completed within tSnkNewPower . The\niSnkStdby requirement Shall only apply if the Sink current draw is higher than this level.\nSee Section 7.3, \"Transitions\" for details.GND\nSHIELDVBUS ... Data\nLinesC3\nGND\nSHIELDVBUS...Data\nLinesSINK CABLE\nC4Load\nSink Bulk CapacitanceOhmic\nInterconnect\nOVP\nPage 336 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.2.3.1 Programmable Power Supply Sink Standby\nA Sink is not required to transition to Sink Standby when operating within the Negotiated PPS APDO . A Sink May\nconsume the Operating Current value in the PPS RDO during PPS output voltage changes. However, prior to\noperating the SPR PPS in Current Limit , the Sink Shall program the PPS Operating Voltage to the lowest practical\nlevel that satisfies the Sink load requirement. Doing so will minimize the inrush current that occurs when the\ntransition to Current Limit occurs. When operating with an SPR PPS Source that is in Current Limit , the Sink Shall\nNot change its load in a manner that exceeds iPpsCLLoadStepRate or iPpsCLLoadReleaseRate . The load change\nmagnitude Shall Not request a change to the Current Limit set-point that exceeds iPpsCLLoadStep .\nIf the Sink Negotiate s for a new PPS APDO , that is expected to increase VBUS voltage, then the Sink Shall transition\nto Sink Standby while changing between PPS APDO s as described in Section 7.3.1, \"Transitions caused by a Request\nMessage\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.4",
    "title": "Suspend Power Consumption",
    "full_path": "7.2.4 Suspend Power Consumption",
    "page": 336,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "When Source has set its USB Suspend Supported flag (see Section 6.4.1.2.1.2, \"USB Suspend Supported\" ), a Sink Shall\ngo to the lowest power state during USB suspend. The lowest power state Shall be pSnkSusp or lower for a PDUSB\nPeripheral and pHubSusp or lower for a PDUSB Hub . There is no requirement for the Source voltage to be changed\nduring USB suspend."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.5",
    "title": "Zero Negotiated Current",
    "full_path": "7.2.5 Zero Negotiated Current",
    "page": 336,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "When a Sink Requests zero current as part of a power Negotiation with a Source , the Sink Shall go to the lowest\npower state, pSnkSusp or lower, where it can still communicate using PD signaling."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.6",
    "title": "Transient Load Behavior",
    "full_path": "7.2.6 Transient Load Behavior",
    "page": 336,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "When a Sink 's operating current changes due to a load step, load release or any other change in load level, the\npositive or negative overshoot of the new load current Shall Not exceed the range defined by iOvershoot . For the\npurposes of measuring iOvershoot the new load current value is defined as the average steady state value of the\nload current after the load step has settled. The rate of change of any shift in Sink load current during normal\noperation Shall Not exceed iLoadStepRate (for load steps) and iLoadReleaseRate (for load releases) as measured\nat the Sink receptacle.\nThe Sink 's operating current Shall Not change faster than the value reported in the Source 's Load Step Slew Rate\nin its Voltage Regulation bit field and Shall ensure that PD Communications meet the transmit and receive masks\nas specified in Section 5.8.2, \"Transmit and Receive Masks\" ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.7",
    "title": "Swap Standby for Sinks",
    "full_path": "7.2.7 Swap Standby for Sinks",
    "page": 336,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "The Sink functionality in a Dual-Role Power Port Shall support Swap Standby. Swap Standby occurs for the Sink after\nevaluating the Accept Message from the Source during a Power Role Swap . While in Swap Standby the Sink 's current\ndraw Shall Not exceed iSnkSwapStdby from VBUS and the Dual-Role Power Port Shall be configured as a Source\nafter VBUS has been discharged to vSafe0V by the existing Initial Source . The Sink 's USB connection Should Not be\nreset even though vSafe5V is not present on the VBUS conductor (see Section 9.1.2, \"Mapping to USB Device States\" ).\nThe time for the Sink to transition to Swap Standby Shall be no more than tSnkSwapStdby . When in Swap Standby\nthe Sink has relinquished its Power Role as Sink and will prepare to become the New Source . The transition time\nfrom Swap Standby to New Source Shall be no more than tNewSrc ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.8",
    "title": "Sink Peak Current Operation",
    "full_path": "7.2.8 Sink Peak Current Operation",
    "page": 336,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "Sink s Shall only make use of a Source overload capability when the corresponding Fixed Supply PDO Peak Current\n(see Section 6.4.1.2.1.8, \"Peak Current\" ) or AVS APDO Peak Current (see Section 6.4.1.2.4.3.2, \"Peak Current\" ) bits are\nset to 01b, 10b and 11b. Sink s Shall manage thermal aspects of the overload event by not exceeding the average\nNegotiated output of a Fixed Supply or AVS that supports Peak Current operation.\nSink s that depend on the Peak Current capability for enhanced system performance Shall also function correctly\nwhen Attached to a Source that does not offer the Peak Current capability or when the Peak Current capability has\nbeen inhibited by the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3377.2.9 Robust Sink Operation"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.9.1",
    "title": "Sink Bulk Capacitance Discharge at Detach",
    "full_path": "7.2.9.1 Sink Bulk Capacitance Discharge at Detach",
    "page": 337,
    "level": 4,
    "parent_id": "7.2.9",
    "tags": [],
    "content": "When a Source is Detached from a Sink , the Sink Shall continue to draw power from its input bulk capacitance until\nVBUS is discharged to vSafe5V or lower by no longer than tSafe5V from the Detach event. This safe Sink\nrequirement Shall apply to all Sink s operating with a Negotiated VBUS level greater than vSafe5V and Shall apply\nduring all low power and high-power operating modes of the Sink .\nIf the Detach is detected during a Sink low power state, such as USB Suspend, the Sink can then draw as much\npower as needed from its bulk capacitance since a Source is no longer Attached . In order to achieve a successful\nDetach detect based on VBUS voltage level droop, the Sink power consumption Shall be high enough so that VBUS\nwill decay below vSrcValid(min) well within tSafe5V after the Source bulk capacitance is removed due to the\nDetach . Once adequate VBUS droop has been achieved, a discharge circuit can be enabled to meet the safe Sink\nrequirement.\nTo illustrate the point, the following set of Sink conditions will not meet the safe Sink requirement without\nadditional discharge circuitry:\n Negotiated VBUS = 20V.\n Maximum allowable supplied V BUS voltage = 21.55V.\n Maximum bulk capacitance = 30µF.\n Power consumption at Detach = 12.5mW.\nWhen the Detach occurs (hence removal of the Source bulk capacitance) the 12.5mW power consumption will\ndraw down the VBUS voltage from the worst-case maximum level of 21.55V to 17V in approximately 205ms. At this\npoint, with VBUS well below vSrcValid (min) an approximate 100mW discharge circuit can be enabled to increase\nthe rate of Sink bulk capacitance discharge and meet the safe Sink requirement. The power level of the discharge\ncircuit is dependent on how much time is left to discharge the remaining voltage on the Sink bulk capacitance. If a\nSink has the ability to detect the Detach in a different manner and in much less time than tSafe5V , then this different\nmanner of detection can be used to enable a discharge circuit, allowing even lower power dissipation during low\npower modes such as USB Suspend.\nIn most applications, the safe Sink requirement will limit the maximum Sink bulk capacitance well below the\ncSnkBulkPd limit. A Detach occurring during Sink high power operating modes must quickly discharge the Sink\nbulk capacitance to vSafe5V or lower as long as the Sink continues to draw adequate power until VBUS has decayed\nto vSafe5V or lower."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.9.2",
    "title": "Input Over Voltage Protection",
    "full_path": "7.2.9.2 Input Over Voltage Protection",
    "page": 337,
    "level": 4,
    "parent_id": "7.2.9",
    "tags": [],
    "content": "Sink s Shall implement input Over-Voltage Protection ( OVP ) to prevent damage from input voltage that exceeds the\nvoltage handling capability of the Sink . The definition of voltage handling capability is left to the discretion of the\nSink implementation. The over voltage response of Sink s Shall Not interfere with normal PD operation and Shall\naccount for vSrcNew , vSrcValid or vPpsNew , vPpsValid as determined by the Negotiated VBUS value. SPR Sink s\nShould tolerate input voltages as high as vSprMax and Shall meet applicable safety requirements if vSprMax is\nexceeded. Likewise, EPR Sink s Should tolerate input voltages as high as vEprMax and Shall meet applicable safety\nrequirements if vEprMax is exceeded.\nSink s Should attempt to send Hard Reset Signaling when OVP engages followed by an Alert Message indicating an\nOVP event once an Explicit Contract has been established. The OVP response May engage at either the Port or\nsystem level. Systems or ports that have engaged OVP Shall resume USB Default Operation when the Source has re-\nestablished vSafe5V on VBUS.\nThe Sink Shall be able to Re-negotiate with the Source after resuming USB Default Operation . The decision of how\nto respond to Re-negotiation after an OVP event is left to the discretion of the Sink implementation.\nThe Sink Shall prevent continual system or Port cycling if OVP continues to engage after initially resuming either\nUSB Default Operation or Re-negotiation . Latching off the Port or system is an acceptable response to recurring over\nvoltage.\nPage 338 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.2.9.3 Over Temperature Protection\nSink s Shall implement over temperature protection ( OTP ) to prevent damage from temperature that exceeds the\nthermal capability of the Sink . The definition of thermal capability and the monitoring locations used to trigger the\nover temperature protection are left to the discretion of the Sink implementation.\nSink s Shall attempt to send Hard Reset Signaling when over temperature protection engages followed by an Alert\nMessage indicating an OTP event once an Explicit Contract has been established. The over temperature protection\nresponse May engage at either the Port or system level. Systems or ports that have engaged over temperature\nprotection Should attempt to resume USB Default Operation after sufficient cooling is achieved and May latch off\nto protect the Port or system. The definition of sufficient cooling is left to the discretion of the Sink implementation.\nThe Sink Shall be able to Re-negotiate with the Source after resuming USB Default Operation . The decision of how\nto respond to Re-negotiation after an over temperature event is left to the discretion of the Sink implementation.\nThe Sink Shall prevent continual system or Port cycling if over temperature protection continues to engage after\ninitially resuming either USB Default Operation or Re-negotiation . Latching off the Port or system is an acceptable\nresponse to recurring over temperature."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.9.4",
    "title": "Over Current Protection",
    "full_path": "7.2.9.4 Over Current Protection",
    "page": 338,
    "level": 4,
    "parent_id": "7.2.9",
    "tags": [],
    "content": "Sink s that operate with a Programmable Power Supply Shall implement their own internal current protection\nmechanism to protect against internal VBUS current faults as well as erratic Source current regulation. The Sink\nShall never draw higher current than the Maximum Current value in the PPS APDO ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.2.10",
    "title": "Fast Role Swap",
    "full_path": "7.2.10 Fast Role Swap",
    "page": 338,
    "level": 3,
    "parent_id": "7.2",
    "tags": [],
    "content": "As described in Section 7.1.13, \"Fast Role Swap\" a Fast Role Swap limits the interruption of VBUS power to a bus\npowered accessory connected to a Hub DFP that has a UFP Attached to a power source and a DRP Attached to a Host\nPort that supports DRP . This configuration is shown in Figure 7.16, \"V BUS Power during Fast Role Swap\" .\nThe Host DRP , upon establishing an Explicit Contract , Shall query the Initial Source 's Sink Capabilities to determine\nwhether the Initial Source supports Fast Role Swap , and what level of current it requires. If the Sink_Capabilities\nMessage received from the Initial Source has at least one of the Fast Role Swap required USB Type-C Current bits\nset, and the Host DRP is able to source the requested current at 5V, the Host DRP May arm itself for Fast Role Swap .\nIf the Host DRP has not queried the Sink Capabilities from the Initial Source , or if the Sink_Capabilities Message\nreports no Fast Role Swap support or a current that is beyond what the Host DRP is able or willing to source in the\nevent of a Fast Role Swap , the Host DRP Shall Not arm itself for Fast Role Swap and Shall Ignore any Fast Role Swap\nRequest s that are detected.\nWhen the Host DRP that supports Fast Role Swap detects the F Fast Role Swap Request , the Host DRP Shall stop\nsinking current and Shall be ready and able to source vSafe5V if the residual VBUS voltage level at the Host DRP\nconnector is greater than vSafe5V . When the residual VBUS voltage level at the Host DRP connector discharges\nbelow vSafe5V (min) the Host DRP as the New Source Shall supply vSafe5V to the Hub DRP within tSrcFRSwap . The\nHost DRP Shall Not enable VBUS discharge circuitry when changing Power Role s from Initial Sink to New Source .\nThe New Source Shall supply vSafe5V at USB Type-C Current (see [USB Type-C 2.4] ) at the value Advertised in the\nFast Role Swap required USB Type-C Current field (see Section 6.4.1.3.1.6, \"Fast Role Swap USB Type-C Current\" ).\nAll Source requirements Shall apply to the New Source after the Fast Role Swap is complete The Fast Role Swap\nresponse of the Hub DRP is described in Section 7.1.13, \"Fast Role Swap\" since the Hub DRP is operating as the Initial\nSource prior to the Fast Role Swap .\nAfter the Host DRP is providing VBUS power to the Hub DRP , a PS_RDY Message Shall be sent to the Hub DRP as\ndefined by the Fast Role Swap Request and the AMS detailed in Section 7.3.4, \"Transitions Caused by Fast Role Swap\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3397.3 Transitions\nThe following sections illustrate the power supply's response to various types of Negotiation s. The Negotiation s\nare triggered by certain Message s or Signaling . It provides examples of the transitions and is organized around each\nof the Message s and Signals that result in a response from the power supply. The response to a Message or Signal\ncan result in different transitions depending upon the power supply's starting conditions and the requested\nchange.\n Transitions caused by a Request Message :\n Generic transition between (A)PDO s:\n Increase the current.\n Increase the voltage.\n Increase the voltage and the current.\n Increase the voltage and decrease the current.\n Decrease the voltage and increase the current.\n Decrease the voltage and the current.\n No change in Current or voltage.\n Transitions within the same PDO ( Fixed Supply , Battery Supply , Variable Supply ):\n Increase the current.\n Decrease the current.\n No change in current.\n Transitions within the same PPS APDO :\n Increasing the Programmable Power Supply (PPS) voltage.\n Decreasing the Programmable Power Supply (PPS) voltage.\n Increasing the Programmable Power Supply (PPS) Current.\n Decreasing the Programmable Power Supply (PPS) Current.\n Same Request Programmable Power Supply (PPS).\n Transitions within the same AVS APDO :\n Increasing the Adjustable Voltage Supply (AVS) voltage\n Decreasing the Adjustable Voltage Supply (AVS) voltage\n Same Request Adjustable Voltage Supply (AVS)\n Transitions caused by the PR_Swap Message :\n Source requests a Power Role Swap\n Sink requests a Power Role Swap\n Transitions caused by Hard Reset Signaling :\n Source issues Hard Reset Signaling .\n Sink issues Hard Reset Signaling .\n Transitions caused by the Fast Role Swap Request :\n Source asserts Rd at its preferred [USB Type-C 2.4] current.\nPage 340 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1 Transitions caused by a Request Message\nThis section describes transitions that are caused by a Request Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1.1",
    "title": "Changing the Source between Different (A)PDOs",
    "full_path": "7.3.1.1 Changing the Source between Different (A)PDOs",
    "page": 340,
    "level": 4,
    "parent_id": "7.3.1",
    "tags": [],
    "content": "In these transition descriptions the term (A)PDO is used to describe any Power Data Object , regardless of whether\nit is a PDO or an APDO in the Capabilities Message .\nThis section describes transitions in response to a Request Message :\n From one (A)PDO to another (A)PDO\n From an Implicit Contract to an Explicit Contract\n From [USB Type-C 2.4] operation to the First Explicit Contract\nThese transitions usually result in a voltage change but is not required.\nThe interaction of the Device Policy Manager , the Port Policy Engine and the Power Supply that Shall be followed\nwhen increasing the current is shown in Figure 7.23, \"Transition Diagram for Increasing the Voltage and Current\"\nand Figure 7.25, \"Transition Diagram for Decreasing the Voltage and Increasing the Current\" .\nThe Source voltage as the transition starts Shall be any voltage within the Valid VBUS range of the previous Source\nPDO or APDO . The Source voltage after the transition is complete Shall be any voltage within the Valid VBUS range\nof the New Source PDO or APDO . The sequence that Shall be followed is described in Table 7.2, \"Sequence Diagram\nfor Increasing the Voltage and Current\" and Table 7.4, \"Sequence Description for Decreasing the Voltage and\nIncreasing the Current\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical\nParameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In this figure, the Sink has previously sent a Request Message to the Source .\nThe voltage is considered to increase if the change from VOLD to VNEW is greater than vSmallStep. The\ndetermination Shall be based on the nominal (A)PDO voltage before and after, unless either (A)PDO is Battery\nSupply or Variable Supply when the worst case of the following is assumed in making this determination.\n Minimum voltage to voltage.\n Minimum voltage to Maximum voltage.\n Voltage to Maximum voltage.\nThe following sections begin with a description of the generic process followed by more specific examples of the\nmost common transitions.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3417.3.1.1.1 Examples of changes from one (A)PDO to another (A)PDO\nThe seven examples of (A)PDO change transitions below illustrate the most common transitions."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1.1.1.1",
    "title": "Increasing the Voltage",
    "full_path": "7.3.1.1.1.1 Increasing the Voltage",
    "page": 341,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while increasing the voltage is shown in Figure 7.22, \"Transition Diagram for Increasing the\nVoltage\" . The sequence that Shall be followed is described in Table 7.1, \"Sequence Description for Increasing the\nVoltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" ,\nTable 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.22, \"Transition Diagram for Increasing the Voltage\" , the Sink has previously sent a Request\nMessage to the Source .\nPage 342 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.22 Transition Diagram for Increasing the Voltage\nt3\nt1\nt2\nSource V OLD Source V NEWSource\n× V4\n37Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\n8Port to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\n6LQN\u0003\u0003,2/' Sink  I OLD\nIOLD IOLDSink to Sink\nStandby\nSink iSnkStdBySink Standby\nto Sink\nVOLDSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1  iSnkStdBy + cSnkBulkPd( V\nBUS/t )VNEW\nI1...§\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 343Table 7.1 Sequence Description for Increasing the Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Policy Engine tells the Device Policy Manager to",
    "full_path": "3 Policy Engine tells the Device Policy Manager to",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "instruct the power supply to reduce current drawn\nto iSnkStdby within tSnkStdby (t1); t1 Shall\ncomplete before tSrcTransition . The Sink Shall Not\nviolate transient load behavior defined in Section\n7.2.6, \"Transient Load Behavior\" while transitioning\nto and operating at the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t2). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "5 The Policy Engine sends the PS_RDY Message to the",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink May begin operating at the new power level",
    "full_path": "7 The Sink May begin operating at the new power level",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "any time after evaluation of the PS_RDY Message .\nThis time duration is indeterminate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "8 The Sink Shall Not violate the transient load",
    "page": 343,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level. The time duration (t3) depends on\nthe magnitude of the load change.\nPage 344 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.1.1.2 Increasing the Voltage and Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while increasing the voltage and current is shown in Figure 7.23, \"Transition Diagram for\nIncreasing the Voltage and Current\" . The sequence that Shall be followed is described in Table 7.2, \"Sequence\nDiagram for Increasing the Voltage and Current\" . The timing parameters that Shall be followed are listed in\nTable 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common\nSource/Sink Electrical Parameters\" .\nNote: In Figure 7.23, \"Transition Diagram for Increasing the Voltage and Current\" , the Sink has previously sent\na Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 345Figure 7.23 Transition Diagram for Increasing the Voltage and Current\nt3\nSource V OLD Source VNEWSource\n× V × I4Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\n6LQN\u0003\u0003,1(: Sink \u0003I OLD\nIOLD\u0003INEWSink to Sink\nStandby\nSink iSnkStdBySink Standby\nto Sink\nVOLDVNEW37\nI1§...8\nSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1  iSnkStdBy + cSnkBulkPd( V\nBUS/t )t2\nt1\nPage 346 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.2 Sequence Diagram for Increasing the Voltage and Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept .",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Policy Engine tells the Device Policy Manager to",
    "full_path": "3 Policy Engine tells the Device Policy Manager to",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "instruct the power supply to reduce current drawn\nto iSnkStdby within tSnkStdby (t1); t1 Shall\ncomplete before tSrcTransition . The Sink Shall Not\nviolate transient load behavior defined in Section\n7.2.6, \"Transient Load Behavior\" while transitioning\nto and operating at the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t2). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "5 The Policy Engine sends the PS_RDY Message to the",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out, the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink May begin operating at the new power level",
    "full_path": "7 The Sink May begin operating at the new power level",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "any time after evaluation of the PS_RDY Message .\nThis time duration is indeterminate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "8 The Sink Shall Not violate the transient load",
    "page": 346,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level. The time duration (t3) depends on\nthe magnitude of the load change.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3477.3.1.1.1.3 Increasing the Voltage and Decreasing the Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while increasing the voltage and decreasing the current is shown in Figure 7.24, \"Transition\nDiagram for Increasing the Voltage and Decreasing the Current\" . The sequence that Shall be followed is described\nin Table 7.3, \"Sequence Description for Increasing the Voltage and Decreasing the Current\" . The timing parameters\nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical\nParameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.24, \"Transition Diagram for Increasing the Voltage and Decreasing the Current\" , the Sink has\npreviously sent a Request Message to the Source .\nPage 348 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.24 Transition Diagram for Increasing the Voltage and Decreasing the Current\nt3\nt1\nSource V OLD Source VNEWSource\n× V ØI4Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\n6LQN\u0003\u0003,1(: Sink \u0003I OLD\nIOLD\nINEW\nI1Sink to Sink\nStandbySink Standby\nto Sink\nSink iSnkStdBy\nVNEW\nVOLD3 7\n...8\nSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1  iSnkStdBy + cSnkBulkPd( V\nBUS/t )§t2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 349Table 7.3 Sequence Description for Increasing the Voltage and Decreasing the Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Policy Engine tells the Device Policy Manager to",
    "full_path": "3 Policy Engine tells the Device Policy Manager to",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "instruct the power supply to reduce current drawn\nto iSnkStdby within tSnkStdby (t1); t1 Shall\ncomplete before tSrcTransition . The Sink Shall Not\nviolate transient load behavior defined in Section\n7.2.6, \"Transient Load Behavior\" while transitioning\nto and operating at the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t2). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "5 The Policy Engine sends the PS_RDY Message to the",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink May begin operating at the new power level",
    "full_path": "7 The Sink May begin operating at the new power level",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "any time after evaluation of the PS_RDY Message .\nThis time duration is indeterminate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "8 The Sink Shall Not violate the transient load",
    "page": 349,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level. The time duration (t3) depends on\nthe magnitude of the load change.\nPage 350 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.1.1.4 Decreasing the Voltage and Increasing the Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while decreasing the voltage and increasing the current is shown in Figure 7.25, \"Transition\nDiagram for Decreasing the Voltage and Increasing the Current\" . The sequence that Shall be followed is described\nin Table 7.4, \"Sequence Description for Decreasing the Voltage and Increasing the Current\" . The timing parameters\nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical\nParameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.25, \"Transition Diagram for Decreasing the Voltage and Increasing the Current\" , the Sink has\npreviously sent a Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 351Figure 7.25 Transition Diagram for Decreasing the Voltage and Increasing the Current\nt2\nSource V OLD Source VNEWSource\nØ V × I3Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\n6LQN\u0003\u0003,1(: Sink \u0003I OLD\nIOLDINEWVNEWVOLDSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentSink\n× I ...67\nt1\nPage 352 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.4 Sequence Description for Decreasing the Voltage and Increasing the Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "3 tSrcTransition after the GoodCRC Message was",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t1). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then evaluates the PS_RDY\nMessage from the Source and tells the Device Policy\nManager it is okay to operate at the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "The Sink May begin operating at the new power level",
    "full_path": "6 The Sink May begin operating at the new power level",
    "page": 352,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "any time after evaluation of the PS_RDY Message .\nThis time duration is indeterminate.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3537.3.1.1.1.5 Decreasing the Voltage\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while decreasing the voltage is shown in Figure 7.26, \"Transition Diagram for Decreasing the\nVoltage\" . The sequence that Shall be followed is described in Table 7.5, \"Sequence Description for Decreasing the\nVoltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" ,\nTable 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.26, \"Transition Diagram for Decreasing the Voltage\" , the Sink has previously sent a Request\nMessage to the Source .\nPage 354 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.26 Transition Diagram for Decreasing the Voltage\nt\nSource V OLDSource\nØ V3\nSource V NEWSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\nSink \u0003I OLD\nVOLD\nIOLD IOLDVNEWSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 355Table 7.5 Sequence Description for Decreasing the Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 355,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 355,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "3 tSrcTransition after the GoodCRC Message was",
    "page": 355,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t1). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 355,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink within tSrcTransReq of the end of the GoodCRC\nMessage following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 355,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nPage 356 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.1.1.6 Decreasing the Voltage and the Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while decreasing the voltage and current is shown in Figure 7.28, \"Transition Diagram for\nno change in Current or Voltage\" . The sequence that Shall be followed is described in Table 7.6, \"Sequence\nDescription for Decreasing the Voltage and the Current\" . The timing parameters that Shall be followed are listed in\nTable 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common\nSource/Sink Electrical Parameters\" .\nNote: In Figure 7.27, \"Transition Diagram for Decreasing the Voltage and the Current\" , the Sink has previously\nsent a Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 357Figure 7.27 Transition Diagram for Decreasing the Voltage and the Current\nt1\nt2Source\nØ V Ø I4\nSource V OLD Source V NEWSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\nSink \u0003I NEW Sink \u0003I OLD\nIOLD\nINEWSink\nØ I\nVNEWVOLD3\nSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nPage 358 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.6 Sequence Description for Decreasing the Voltage and the Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Sink Shall be able to operate with lower current",
    "full_path": "3 The Sink Shall be able to operate with lower current",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "within tSnkNewPower (t1); t1 Shall complete before\ntSrcTransition . The Sink Shall Not violate transient\nload behavior defined in Section 7.2.6, \"Transient\nLoad Behavior\" while transitioning to and operating\nat the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t2). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "5 The Policy Engine sends the PS_RDY Message to the",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "7 The Sink Shall Not violate the transient load",
    "page": 358,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3597.3.1.1.1.7 No change in Current or Voltage\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when changing from\none (A)PDO to another while the Sink requests the same voltage and Current as it is currently operating at is shown\nin Figure 7.28, \"Transition Diagram for no change in Current or Voltage\" . The sequence that Shall be followed is\ndescribed in Table 7.7, \"Sequence Description for no change in Current or Voltage\" . The timing parameters that Shall\nbe followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical Parameters\" , and\nTable 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.28, \"Transition Diagram for no change in Current or Voltage\" , the Sink has previously sent a\nRequest Message to the Source .\nPage 360 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.28 Transition Diagram for no change in Current or Voltage\nTable 7.7 Sequence Description for no change in Current or Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 360,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 360,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Policy Engine waits tSrcTransition then sends",
    "full_path": "3 The Policy Engine waits tSrcTransition then sends",
    "page": 360,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the PS_RDY Message to the Sink starting within\ntSrcTransReq of the end of the GoodCRC Message\nfollowing the Accept Message .Policy Engine receives the PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Policy Engine receives the GoodCRC Message from",
    "full_path": "4 Policy Engine receives the GoodCRC Message from",
    "page": 360,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .\nNote: The decision that no power transition is re -\nquired could be made either by the Device Pol -\nicy Manager or the power supply depending\non implementation.Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine evaluates the PS_RDY Message .Source Port\nPolicy Engine\nSink PortPolicy Engine\nSource PortDevice Policy Mgr\nSource Port\nPower Supply\nSink PortDevice Policy Mgr\nSink Port\nPower Supply\nSource PortVoltage\nSink Port\nCurrentSink \u0003I OLD\nVBUS doesn’t changeSource V OLD\nCurrent doesn’t changePort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS Voltage\nSink\nVBUS CurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n23\n4PSTransitionTimertSrcTransition\nGood\nCRCGood\nCRCtSrcTransReq\nVold Source V OLD\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3617.3.1.2 Transitions within the same Fixed, Battery or Variable PDO or\nbetween Different (A)PDOs"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1.2.1",
    "title": "Increasing the Current Only",
    "full_path": "7.3.1.2.1 Increasing the Current Only",
    "page": 361,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed when increasing the\ncurrent without changing the voltage is shown in Figure 7.29, \"Transition Diagram for Increasing the Current\" . The\nsequence that Shall be followed is described in Table 7.8, \"Sequence Description for Increasing the Current\" . The\ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.29, \"Transition Diagram for Increasing the Current\" , the Sink has previously sent a Request\nMessage to the Source .\nPage 362 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.29 Transition Diagram for Increasing the Current\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink PortDevice Policy Mgr\nSink Port\nPower SupplySink \u0003I NEW\nSource PortVoltage\nSink Port\nCurrentSink \u0003I OLD\nIOLDINEWSink\n× I\nVBUSdoesn’t changeSource\n× I 3\n6\n...7\n§Source V OLD Source V OLDSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSource PortPolicy EngineSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertSrcTransition\nPort to Port\nMessagingGood\nCRCtSrcTransReq\nGood\nCRC Sink PortPolicy Engine\nt1\nt2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 363Table 7.8 Sequence Description for Increasing the Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "3 tSrcTransition after the GoodCRC Message was",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t1). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "The Sink May begin operating at the new power level",
    "full_path": "6 The Sink May begin operating at the new power level",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "any time after evaluation of the PS_RDY Message .\nThis time duration is indeterminate."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "7 The Sink Shall Not violate the transient load",
    "page": 363,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level. The time duration (t2) depends on\nthe magnitude of the load change.\nPage 364 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.2.2 Decreasing the Current Only\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when decreasing the\ncurrent without changing the voltage is shown in Figure 7.30, \"Transition Diagram for Decreasing the Current\" . The\nsequence that Shall be followed is described in Table 7.9, \"Sequence Description for Decreasing the Current\" . The\ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.30, \"Transition Diagram for Decreasing the Current\" , the Sink has previously sent a Request\nMessage to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 365Figure 7.30 Transition Diagram for Decreasing the Current\nSource V OLD Source V OLD\nSink \u0003I OLD Sink \u0003I NEW\nVBUS does not changeSource\nØ I4\n3\nIOLD\nINEWSink\nØ I Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSTransitionTimertSrcTransition\nGood\nCRCtSrcTransReq\nGood\nCRC\nt1\nt2\nPage 366 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.9 Sequence Description for Decreasing the Current\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage . Policy Engine tells the Device Policy\nManager to instruct the power supply to reduce\npower consumption."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Sink Shall Not violate the transient load",
    "full_path": "3 The Sink Shall Not violate the transient load",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "behavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level. The Sink Shall be able to operate\nwith lower current within tSnkNewPower (t1); t1\nShall complete before tSrcTransition ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability. The power supply Shall be ready to\noperate at the new power level within tSrcReady\n(t2). The power supply informs the Device Policy\nManager that it is ready to operate at the new power\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "5 The Policy Engine sends the PS_RDY Message to the",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tSrcTransReq of the end of the\nGoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 366,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new (A)PDO .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3677.3.1.3 Changing Voltage or Current within the same PPS APDO"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1.3.1",
    "title": "Increasing the Programmable Power Supply (PPS) Voltage",
    "full_path": "7.3.1.3.1 Increasing the Programmable Power Supply (PPS) Voltage",
    "page": 367,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed when increasing the\nvoltage is shown in Figure 7.31, \"Transition Diagram for Increasing the Programmable Power Supply Voltage\" . The\nsequence that Shall be followed is described in Table 7.10, \"Sequence Description for Increasing the Programmable\nPower Supply Voltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical\nParameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.31, \"Transition Diagram for Increasing the Programmable Power Supply Voltage\" , the Sink has\npreviously sent a Request Message to the Source .\nPage 368 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.31 Transition Diagram for Increasing the Programmable Power Supply Voltage\nPps Transition Interval Source V OLD Source V NEW\nSink draws current continuously (not to exceed negotiated current)Source\n× V3Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower SupplyPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteractionSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertPpsSrcTransSmall, tPpsSrcTransLarge\nGood\nCRCGood\nCRC\nSource PortCurrentCL doesn’t change\nCurrent may change (not to exceed negotiated current)Source\nCL Current\nSink\nVBUS CurrentSink PortCurrentVOLDSource PortVoltageVNEW\nSource\nVBUS Voltage\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 369Table 7.10 Sequence Description for Increasing the Programmable Power Supply Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 369,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 369,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to increase its\noutput voltage. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "After sending the Accept Message , the Programmable",
    "full_path": "3 After sending the Accept Message , the Programmable",
    "page": 369,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Power Supply starts to increase its output voltage.\nThe Programmable Power Supply new voltage set-\npoint Shall be reached by tPpsSrcTransLarge for\nsteps larger than vPpsSmallStep or else by\ntPpsSrcTransSmall . The power supply informs the\nDevice Policy Manager that it has reached the new\nset-point and whether VBUS is at the corresponding\nnew level, or if the supply is operating in CL mode.\nThe power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 369,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tPpsSrcTransSmall or\ntPpsSrcTransLarge of the end of the GoodCRC\nMessage following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 369,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new voltage set\npoint (corresponding to vPpsNew ).\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nPage 370 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.3.2 Decreasing the Programmable Power Supply (PPS) Voltage\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when decreasing the\nvoltage is shown in Figure 7.32, \"Transition Diagram for Decreasing the Programmable Power Supply Voltage\" . The\nsequence that Shall be followed is described in Table 7.11, \"Sequence Description for Decreasing the Programmable\nPower Supply Voltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical\nParameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.32, \"Transition Diagram for Decreasing the Programmable Power Supply Voltage\" , the Sink has\npreviously sent a Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 371Figure 7.32 Transition Diagram for Decreasing the Programmable Power Supply Voltage\nPps Transition Interval Source V OLD Source V NEW\nSink draws current continuously (not to exceed negotiated current)\nVOLDSource\nØV3Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nVNEWPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS VoltageSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertPpsSrcTransSmall, tPpsSrcTransLarge\nGood\nCRCGood\nCRC\nSource PortCurrentCL doesn’t change Source\nCL Current\nCurrent may change (not to exceed negotiated current)\nSink\nVBUS CurrentSink PortCurrent\nPage 372 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.11 Sequence Description for Decreasing the Programmable Power Supply Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 372,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 372,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to decrease its\noutput voltage. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "After sending the Accept Message , the Programmable",
    "full_path": "3 After sending the Accept Message , the Programmable",
    "page": 372,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Power Supply starts to decrease its output voltage.\nThe Programmable Power Supply new voltage set-\npoint (corresponding to vPpsNew ) Shall be reached\nby tPpsSrcTransLarge for steps larger than\nvPpsSmallStep or else by tPpsSrcTransSmall . The\npower supply informs the Device Policy Manager that\nit has reached the new level. The power supply status\nis passed to the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 372,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tPpsSrcTransSmall or\ntPpsSrcTransLarge of the end of the GoodCRC\nMessage following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 372,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new voltage set\npoint (corresponding to vPpsNew ).\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3737.3.1.3.3 Increasing the Programmable Power Supply (PPS) Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when increasing the\ncurrent limit in the same APDO , not exceeding the maximum for that APDO and without changing the requested\nvoltage is shown in Figure 7.33, \"Transition Diagram for increasing the Current in PPS mode\" . The sequence that\nShall be followed is described in Table 7.12, \"Sequence Description for increasing the Current in PPS mode\" . The\ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.33, \"Transition Diagram for increasing the Current in PPS mode\" , the Sink has previously sent\na Request Message to the Source .\nThe Sink May draw current equal to the increasing Current Limit of the Source before it has received the PS_RDY\nMessage for the new Request .\nPage 374 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.33 Transition Diagram for increasing the Current in PPS mode\nSource I OLD Source I NEW\n6LQN\u0003\u0003, NEW Sink draws current continuously ( old negotiated current )Sink Ĺ|SourceĹ|3\n6Source Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrent...7Port to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSource PortPolicy Engine\nSink Port\nPolicy EngineSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5\nGood\nCRCGood\nCRCPSTransitionTimer (running)tPpsSrcTransSmall\nSource V OLD\nPPS Transition Interval\nSink PortCurrentSource\nCL CurrentVOLDVNEW\nCLOLDCLNEW\nCL change\nIOLD Follows CL change INEWPassive Sink following CL Source\nActive Sink at I OLD\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 375Table 7.12 Sequence Description for increasing the Current in PPS mode\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to increase its\nset-point for the current limit.Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Power Supply increases its Current Limit set-",
    "full_path": "3 The Power Supply increases its Current Limit set-",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "point to the new requested value. The Sink draws current according to the increased\nCurrent Limit of the Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine waits tPpsSrcTransSmall then",
    "full_path": "4 The Policy Engine waits tPpsSrcTransSmall then",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "sends the PS_RDY Message to the Sink starting within\ntPpsCLProgramSettle of the end of the GoodCRC\nMessage following the Accept Message .Policy Engine receives the PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Policy Engine receives the GoodCRC Message from",
    "full_path": "5 Policy Engine receives the GoodCRC Message from",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Policy Engine then stops the PSTransitionTimer ,",
    "full_path": "6 Policy Engine then stops the PSTransitionTimer ,",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "evaluates the PS_RDY Message and tells the Device\nPolicy Manager it can increase the current up to the\nrequested value without the Source going into CL\nmode.\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink increases its current.",
    "full_path": "7 The Sink increases its current.",
    "page": 375,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 376 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.3.4 Decreasing the Programmable Power Supply (PPS) Current\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when decreasing the\ncurrent limit in the same APDO , not exceeding the minimum for that APDO and without changing the requested\nvoltage is shown in Figure 7.34, \"Transition Diagram for decreasing the Current in PPS mode\" . The sequence that\nShall be followed is described in Table 7.13, \"Sequence Description for decreasing the Current in PPS mode\" . The\ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.34, \"Transition Diagram for decreasing the Current in PPS mode\" , the Sink has previously sent\na Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 377Figure 7.34 Transition Diagram for decreasing the Current in PPS mode\nSource I OLD Source I NEW\n6LQN\u0003\u0003, NEW Sink draws current continuously ( old negotiated current )Sink Ĺ|SourceĻ |3\n6Source Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrent...7Port to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentSource PortPolicy Engine\nSink Port\nPolicy EngineSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5\nGood\nCRCGood\nCRCPSTransitionTimer (running)tPpsSrcTransSmall\nSource V OLD\nPPS Transition Interval\nSink PortCurrentSource\nCL CurrentVOLD VNEW\nCLOLD\nCLNEW CL change\nIOLD\nFollows CL change INEW\nPassive Sink following CL SourceActive Sink at I OLDSet-point V does not change, only resulting V\nPage 378 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.13 Sequence Description for decreasing the Current in PPS mode\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to decrease its\nset-point for the current limit.Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then evaluates the Accept\nMessage and instructs the Sink to reduce its current to\nbelow the new Negotiated current level and starts the\nPSTransitionTimer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Power Supply decreases its Current Limit set-",
    "full_path": "3 The Power Supply decreases its Current Limit set-",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "point to the new Negotiated value.The Sink reduces its current to less than the new\nNegotiated current to prevent the Source from going\ninto Current Limit ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tPpsSrcTransSmall of the end of\nthe GoodCRC Message following the Accept Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Policy Engine receives the GoodCRC Message from",
    "full_path": "5 Policy Engine receives the GoodCRC Message from",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Policy Engine receives the PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer sends the GoodCRC Message to the",
    "full_path": "6 Protocol Layer sends the GoodCRC Message to the",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Source . Policy Engine then stops the\nPSTransitionTimer and evaluates the PS_RDY\nMessage .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The Sink is allowed to draw INEW but must be aware",
    "full_path": "7 The Sink is allowed to draw INEW but must be aware",
    "page": 378,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the voltage on V BUS can drop doing so.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3797.3.1.3.5 Same Request Programmable Power Supply (PPS)\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when the Sink requests\nthe same voltage and current levels as the present Negotiated levels for voltage and current is shown in Figure 7.35,\n\"Transition Diagram for no change in Current or Voltage in PPS mode\" . The sequence that Shall be followed is\ndescribed in Table 7.14, \"Sequence Description for no change in Current or Voltage in PPS mode\" . The timing\nparameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.35, \"Transition Diagram for no change in Current or Voltage in PPS mode\" , the Sink has previ -\nously sent a Request Message to the Source .\nPage 380 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.35 Transition Diagram for no change in Current or Voltage in PPS mode\nTable 7.14 Sequence Description for no change in Current or Voltage in PPS mode\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 380,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 380,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then evaluates the Accept\nMessage and starts the PSTransitionTimer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Policy Engine then sends the PS_RDY Message to",
    "full_path": "3 The Policy Engine then sends the PS_RDY Message to",
    "page": 380,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink starting within tPpsSrcTransSmall of the\nend of the GoodCRC Message following the Accept\nMessage .Policy Engine receives the PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Policy Engine receives the GoodCRC Message from",
    "full_path": "4 Policy Engine receives the GoodCRC Message from",
    "page": 380,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .\nNote: The decision that no power transition is re -\nquired could be made either by the Device Pol -\nicy Manager or the power supply depending\non implementation.Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer and evaluates the PS_RDY\nMessage from the Source . The Sink is already\noperating at the new power level, so no further action\nis required.\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .Source I OLD\nSink  IOLDSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrentPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS Voltage\nSink\nVBUS CurrentSource PortPolicy Engine\nSink Port\nPolicy EngineSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n23\n4\nGood\nCRCGood\nCRCPSTransitionTimer (running)tPpsSrcTransSmall\nSource V OLD\nSink PortCurrentSource\nCL CurrentCL doesn’t change\nCurrent doesn’t changeVBUS doesn’t change\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3817.3.1.4 Changing Voltage or Current within the same AVS APDO"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.1.4.1",
    "title": "Increasing the Adjustable Voltage Supply (AVS) Voltage",
    "full_path": "7.3.1.4.1 Increasing the Adjustable Voltage Supply (AVS) Voltage",
    "page": 381,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed when increasing the\nvoltage is shown in Figure 7.36, \"Transition Diagram for Increasing the Adjustable Power Supply Voltage\" . The\nsequence that Shall be followed is described in Table 7.15, \"Sequence Description for Increasing the Adjustable\nVoltage Supply Voltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical\nParameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.36, \"Transition Diagram for Increasing the Adjustable Power Supply Voltage\" , the Sink has pre -\nviously sent a Request Message to the Source .\nPage 382 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 7.36 Transition Diagram for Increasing the Adjustable Power Supply Voltage\nAVS Transition Interval Source V OLD Source V NEW\nSink draws current continuously for voltage changes less than or equal to vAvsSmallStep. For larger voltage changes, the Sink\nreduces to iSnkStdby.\nIOLDVOLDSource\n× V3Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentVNEWPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS Voltage\nSink\nVBUS CurrentDepends on magnitude of AVS voltage\nchangeSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertAvsSrcTransSmall, tAvsSrcTransLarge\nGood\nCRCGood\nCRC\nIOLD\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 383Table 7.15 Sequence Description for Increasing the Adjustable Voltage Supply Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 383,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 383,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to increase its\noutput voltage. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine . Policy Engine then starts the\nPSTransitionTimer and evaluates the Accept\nMessage .\nIf the voltage increase is larger than vAvsSmallStep ,\nthe Sink Shall reduce its current draw to iSnkStdby\nwithin tSnkStdby. The reduction to iSnkStdby is not\nrequired if the voltage increase is less than or equal\nto vAvsSmallStep ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "After sending the Accept Message , the AVS starts to",
    "full_path": "3 After sending the Accept Message , the AVS starts to",
    "page": 383,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "increase its output voltage. The AVS new voltage set-\npoint Shall be reached by tAvsSrcTransLarge for\nsteps larger than vAvsSmallStep or else by\ntAvsSrcTransSmall . The power supply informs the\nDevice Policy Manager that it has reached the new\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 383,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tAvsSrcTransSmall or\ntAvsSrcTransLarge of the end of the GoodCRC\nMessage following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 383,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new voltage set\npoint. The Sink May begin operating at the new\npower level any time after evaluation of the PS_RDY\nMessage .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nPage 384 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.1.4.2 Decreasing the Adjustable Voltage Supply (AVS) Voltage\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when decreasing the\nvoltage is shown in Figure 7.37, \"Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\" . The\nsequence that Shall be followed is described in Table 7.16, \"Sequence Description for Decreasing the Adjustable\nVoltage Supply Voltage\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical\nParameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.37, \"Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\" , the Sink has\npreviously sent a Request Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 385Figure 7.37 Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\nAVS Transition Interval Source V OLD Source V NEW\n\u0003IOLDVOLDSource\nØV3Source Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentVNEWPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS Voltage\nSink\nVBUS CurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n24\n5PSTransitionTimertAvsSrcTransSmall, tAvsSrcTransLarge\nGood\nCRCGood\nCRC\nSink \u0003I OLD\nPage 386 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.16 Sequence Description for Decreasing the Adjustable Voltage Supply Voltage\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 386,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 386,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to decrease its\noutput voltage. Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then and starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "After sending the Accept Message , the AVS starts to",
    "full_path": "3 After sending the Accept Message , the AVS starts to",
    "page": 386,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "decrease its output voltage. The AVS new voltage set-\npoint Shall be reached by tAvsSrcTransLarge for\nsteps larger than vAvsSmallStep or else by\ntAvsSrcTransSmall . The power supply informs the\nDevice Policy Manager that it has reached the new\nlevel. The power supply status is passed to the Policy\nEngine."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 386,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tAvsSrcTransSmall or\ntAvsSrcTransLarge of the end of the GoodCRC\nMessage following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 386,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source and tells the Device Policy Manager\nthat the Source is operating at the new voltage set\npoint (corresponding to vAvsNew ).\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3877.3.1.4.3 Same Request Adjustable Voltage Supply (AVS) Voltage\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed when the Sink requests\nthe same voltage and current levels as the present Negotiated levels for voltage and current as shown in Figure\n7.38, \"Transition Diagram for no change in Current or Voltage in AVS mode\" . The sequence that Shall be followed is\ndescribed in Table 7.17, \"Sequence Description for no change in Current or Voltage in AVS mode\" . The timing\nparameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.38, \"Transition Diagram for no change in Current or Voltage in AVS mode\" , the Sink has previ -\nously sent a Request Message to the Source .\nFigure 7.38 Transition Diagram for no change in Current or Voltage in AVS mode\nTable 7.17 Sequence Description for no change in Current or Voltage in AVS mode\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "full_path": "1 Policy Engine sends the Accept Message to the Sink . Policy Engine receives the Accept Message .",
    "page": 387,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 387,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then and starts the\nPSTransitionTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "3 The Policy Engine sends the PS_RDY Message to the",
    "page": 387,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink starting within tAvsSrcTransSmall of the end of\nthe GoodCRC Message following the Accept Message .The Policy Engine receives the PS_RDY Message from\nthe Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "4 Protocol Layer receives the GoodCRC Message from",
    "page": 387,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink .\nNote: The decision that no power transition is re -\nquired could be made either by the Device Pol -\nicy Manager or the power supply depending\non implementation.Protocol Layer sends the GoodCRC Message to the\nSource . Policy Engine then stops the\nPSTransitionTimer , evaluates the PS_RDY Message\nfrom the Source . The Sink is already operating at the\nnew power level, so no further action is required.\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling .Current doesn’t changeVBUS doesn’t changeSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nVoltage\nSink Port\nCurrentPort to Port\nMessaging\nSource\nVBUS Voltage\nSink\nVBUS CurrentSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n23\n4PSTransitionTimertAvsSrcTransSmall, tAvsSrcTransLarge\nGood\nCRCGood\nCRC\nPage 388 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.2 Transitions Caused by Power Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.2.1",
    "title": "Sink Requested Power Role Swap",
    "full_path": "7.3.2.1 Sink Requested Power Role Swap",
    "page": 388,
    "level": 4,
    "parent_id": "7.3.2",
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed during a Sink requested\nPower Role Swap is shown in Figure 7.39, \"Transition Diagram for a Sink Requested Power Role Swap\" . The sequence\nthat Shall be followed is described in Table 7.18, \"Sequence Description for a Sink Requested Power Role Swap\" . The\ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.39, \"Transition Diagram for a Sink Requested Power Role Swap\" , the Sink has previously sent\na PR_Swap Message to the Source .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 389Figure 7.39 Transition Diagram for a Sink Requested Power Role Swap\nt4\nt2\nt3\nt1\nNew Sink\nNew Source\nNew Source\nNew Sink\nInitial Sink\nInitial Source\nInitial Sink\nInitial SourceSource to\nSwap Standby\nSink  I OLDSwap Standby\nSwap Standby\nto SourceSwap Standby\nto Sink\nImplicit Contract\nIOLDSource V OLD\nSink to Swap\nStandby\nVOLD34\n7\nnot drivenSwap Standby\nvSafe5V10\nnot drivenI2\nI2I1 I1Initial Source Port\nPolicy Engine\nInitial Sink Port\nPolicy Engine\nInitial Source Port\nDevice Policy Mgr\nSource Æ Sink\nPower Supply\nInitial Sink Port\nDevice Policy Mgr\nSink Æ Source\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1  iSnkSwapStdby I2 \u0003iSnkSwapStdby + cSnkBulkPd( V BUS/t )Source vSafe5VPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentRdto R pŻ\u00035 pto R dSend\nAccept\nEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY1\n25\n6PSSourceOffTimertSrcTransition\nGood\nCRCtSrcTransOff\nGood\nCRCPSSourceOnTimer\nSend\nPS_RDYEvaluate\nPS_RDYGood\nCRC\n89\ntSrcTransOn\nPage 390 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.18 Sequence Description for a Sink Requested Power Role Swap\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends the Accept Message to the Initial",
    "full_path": "1 Policy Engine sends the Accept Message to the Initial",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink .Policy Engine receives the Accept ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "2 Protocol Layer receives the GoodCRC Message from",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer sends the GoodCRC Message to the\nInitial Source . Policy Engine then starts the\nPSSourceOffTimer and evaluates the Accept\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Policy Engine tells the Device Policy Manager to",
    "full_path": "3 Policy Engine tells the Device Policy Manager to",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "instruct the power supply to transition to Swap\nStandby within tSnkStdby (t1); t1 Shall complete\nbefore tSrcTransition min. When in Sink Standby the\nInitial Sink Shall Not draw more than\niSnkSwapStdby (I1). The Sink Shall Not violate\ntransient load behavior defined in Section 7.2.6,\n\"Transient Load Behavior\" while transitioning to and\noperating at the new power level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "tSrcTransition after the GoodCRC Message was",
    "full_path": "4 tSrcTransition after the GoodCRC Message was",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "received, the power supply starts to change its output\npower capability to Swap Standby (see Section 7.1.10,\n\"Swap Standby for Sources\" ). The power supply Shall\ncomplete the transition to Swap Standby within\ntSrcSwapStdby (t2). The power supply informs the\nDevice Policy Manager that it is ready to operate as\nthe New Sink . The CC termination is changed from Rp\nto Rd (see [USB Type-C 2.4]). The power supply\nstatus is passed to the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The power supply is ready, and the Policy Engine",
    "full_path": "5 The power supply is ready, and the Policy Engine",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "sends the PS_RDY Message to the device that will\nbecome the New Source , starting within\ntSrcTransOff of the end of the GoodCRC Message\nfollowing the Accept Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the device that will become the New Source .\nPolicy Engine starts the PSSourceOnTimer . Upon\nsending the PS_RDY Message and receiving the\nGoodCRC Message the Initial Source is ready to be the\nNew Sink .The Protocol Layer sends the GoodCRC Message to\nthe New Sink .\nPolicy Engine the stops the PSSourceOffTimer and\ntells the Device Policy Manager to instruct the power\nsupply to operate as the New Source .\nIf the PS_RDY Message is not received before\nPSTransitionTimer times out the Sink sends Hard\nReset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "The CC termination is changed from Rd to Rp (see",
    "full_path": "7 The CC termination is changed from Rd to Rp (see",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "[USB Type-C 2.4]). The power supply as the New\nSource transitions from Swap Standby to sourcing\ndefault vSafe5V within tNewSrc (t3). The power\nsupply informs the Device Policy Manager that it is\noperating as the New Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Policy Engine receives the PS_RDY Message from the",
    "full_path": "8 Policy Engine receives the PS_RDY Message from the",
    "page": 390,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Source .Device Policy Manager informs the Policy Engine the\npower supply is ready, and the Policy Engine sends\nthe PS_RDY Message to the New Sink , starting within\ntSrcTransOn of the end of the GoodCRC Message\nfollowing the Accept Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3919 Protocol Layer sends the GoodCRC Message to the\nNew Source and then stops the PSSourceOnTimer .\nPolicy Engine evaluates the PS_RDY Message from\nthe New Source and tells the Device Policy Manager to\ninstruct the power supply to draw current as the New\nSink .Protocol Layer receives the GoodCRC Message from\nthe New Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "The power supply as the New Sink transitions from",
    "full_path": "10 The power supply as the New Sink transitions from",
    "page": 391,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Swap Standby and begins to drawing the current\nallowed by the Implicit Contract . The power supply\ninforms the Device Policy Manager that it is\noperating as the New Sink . At this point subsequent\nNegotiation s between the New Source and the New\nSink May proceed as normal. The Sink Shall Not\nviolate the transient load behavior defined in Section\n7.2.6, \"Transient Load Behavior\" while transitioning\nto and operating at the new power level. The time\nduration (t4) depends on the magnitude of the load\nchange ( iLoadStepRate ).Table 7.18 Sequence Description for a Sink Requested Power Role Swap (Continued)\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port\nPage 392 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.2.2 Source Requested Power Role Swap\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed during a Source\nrequested Power Role Swap is shown in Figure 7.40, \"Transition Diagram for a Source Requested Power Role Swap\" .\nThe sequence that Shall be followed is described in Table 7.19, \"Sequence Description for a Source Requested Power\nRole Swap\" . The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" ,\nTable 7.24, \"Sink Electrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nNote: In Figure 7.40, \"Transition Diagram for a Source Requested Power Role Swap\" , the Source has previously\nsent a PR_Swap Message to the Sink .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 393Figure 7.40 Transition Diagram for a Source Requested Power Role Swap\nt4\nt2\nt3\nt1\nNew Sink\nNew Source\nNew Source\nNew Sink\nInitial Sink\nInitial Source\nInitial Sink\nInitial SourceSource to\nSwap Standby\nSink  I OLDSwap Standby\nSwap Standby\nto SourceSwap Standby\nto Sink\nImplicit Contract\nIOLDSource V OLD\nSink to Swap\nStandby\nVOLD2a4\n6\nnot drivenSwap Standby\nvSafe5V10\nnot drivenI2\nI2I1 I1Initial Source Port\nPolicy Engine\nInitial Sink Port\nPolicy Engine\nInitial Source Port\nDevice Policy Mgr\nSource Æ Sink\nPower Supply\nInitial Sink Port\nDevice Policy Mgr\nSink Æ Source\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1  iSnkSwapStdby I2 \u0003iSnkSwapStdby + cSnkBulkPd( V BUS/t )Source vSafe5VPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentRdto R pŻ\u00035 pto R dSend\nAcceptEvaluate\nAcceptSend\nPS_RDY\nEvaluate\nPS_RDY124\n5\nPSSourceOffTimer (running)tSrcTransition\nGood\nCRCGood\nCRCPSSourceOnTimer\n(running)\nSend\nPS_RDYEvaluate\nPS_RDY\nGood\nCRC79\nPage 394 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.19 Sequence Description for a Source Requested Power Role Swap\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine receives the Accept Message . Policy Engine sends the Accept Message to the Initial",
    "full_path": "1 Policy Engine receives the Accept Message . Policy Engine sends the Accept Message to the Initial",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer sends the GoodCRC Message to the",
    "full_path": "2 Protocol Layer sends the GoodCRC Message to the",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink . The Policy Engine tells the Device Policy\nManager to instruct the power supply to modify its\noutput power. Protocol Layer receives the GoodCRC Message from\nthe Initial Source . Policy Engine starts the\nPSSourceOffTimer .\n2a The Policy Engine tells the Device Policy Manager to\ninstruct the power supply to transition to Swap\nStandby . The power supply Shall complete the\ntransition to Swap Standby within tSnkStdby (t1); t1\nShall complete before tSrcTransition . The Sink Shall\nNot violate the transient load behavior defined in\nSection 7.2.6, \"Transient Load Behavior\" while\ntransitioning to and operating at the new power level.\nWhen in Sink Standby the Initial Sink Shall Not draw\nmore than iSnkSwapStdby (I1)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "tSrcTransition after the GoodCRC Message was sent",
    "full_path": "3 tSrcTransition after the GoodCRC Message was sent",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the power supply starts to change its output power\ncapability to Swap Standby (see Section 7.1.10, \"Swap\nStandby for Sources\" ). The power supply Shall\ncomplete the transition to Swap Standby within\ntSrcSwapStdby (t2). The power supply informs the\nDevice Policy Manager that it is ready to operate as\nthe New Sink . The CC termination is changed from Rp\nto Rd (see [USB Type-C 2.4]). The power supply\nstatus is passed to the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "The Policy Engine sends the PS_RDY Message to the",
    "full_path": "4 The Policy Engine sends the PS_RDY Message to the",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "device that will become the New Source , starting\nwithin tSrcTransOff of the end of the GoodCRC\nMessage following the Accept Message .Policy Engine receives the PS_RDY ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "5 Protocol Layer receives the GoodCRC Message from",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the soon to be New Source . Policy Engine starts the\nPSSourceOnTimer . At this point the Initial Source is\nready to be the New Sink .Protocol Layer sends the GoodCRC Message to the\nNew Sink .\nPolicy Engine then stops the PSSourceOffTimer and\ntells the Device Policy Manager to instruct the power\nsupply to operate as the New Source .\nIf the PS_RDY Message is not received before the\nPSSourceOffTimer times out the Sink starts sending\nHard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "The CC termination is changed from Rd to Rp (see",
    "full_path": "6 The CC termination is changed from Rd to Rp (see",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "[USB Type-C 2.4]). The power supply as the New\nSource transitions from Swap Standby to sourcing\ndefault vSafe5V within tNewSrc (t3). The power\nsupply informs the Device Policy Manager that it is\noperating as the New Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Policy Engine receives the PS_RDY Message . Device Policy Manager informs the Policy Engine the",
    "full_path": "7 Policy Engine receives the PS_RDY Message . Device Policy Manager informs the Policy Engine the",
    "page": 394,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "power supply is ready, and the Policy Engine sends\nthe PS_RDY Message to the New Sink , starting within\ntSrcTransOn of the end of the GoodCRC Message\nfollowing the Accept Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 3958 Protocol Layer sends the GoodCRC Message to the\nNew Source and then stops the PSSourceOnTimer .\nPolicy Engine evaluates the PS_RDY Message from\nthe New Source and tells the Device Policy Manager to\ninstruct the power supply to draw current as the New\nSink .Protocol Layer receives the GoodCRC Message from\nthe New Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "The power supply as the New Sink transitions from",
    "full_path": "9 The power supply as the New Sink transitions from",
    "page": 395,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Swap Standby to drawing the power allowed by the\nImplicit Contract . The power supply informs the\nDevice Policy Manager that it is operating as the New\nSink . At this point subsequent Negotiation s\nbetween the New Source and the New Sink May\nproceed as normal. The New Sink Shall Not violate\nthe transient load behavior defined in Section 7.2.6,\n\"Transient Load Behavior\" while transitioning to and\noperating at the new power level. The time duration\n(t4) depends on the magnitude of the load change\n(iLoadStepRate ).Table 7.19 Sequence Description for a Source Requested Power Role Swap (Continued)\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port\nPage 396 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.3 Transitions Caused by Hard Reset"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.3.1",
    "title": "Source Initiated Hard Reset",
    "full_path": "7.3.3.1 Source Initiated Hard Reset",
    "page": 396,
    "level": 4,
    "parent_id": "7.3.3",
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed during a Source\nInitiated Hard Reset is shown in Figure 7.41, \"Transition Diagram for a Source Initiated Hard Reset\" . The sequence\nthat Shall be followed is described in Table 7.20, \"Sequence Description for a Source Initiated Hard Reset\" . The\ntiming parameters that Shall be applied are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink\nElectrical Parameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 397Figure 7.41 Transition Diagram for a Source Initiated Hard Reset\nTable 7.20 Sequence Description for a Source Initiated Hard Reset\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends Hard Reset Signaling to the Sink .Sink receives Hard Reset Signaling .",
    "full_path": "1 Policy Engine sends Hard Reset Signaling to the Sink .Sink receives Hard Reset Signaling .",
    "page": 397,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Policy Engine is informed of the Hard Reset . Policy",
    "full_path": "2 Policy Engine is informed of the Hard Reset . Policy",
    "page": 397,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Engine tells the Device Policy Manager to instruct the\npower supply to prepare for a Hard Reset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Sink prepares for the Hard Reset within",
    "full_path": "3 The Sink prepares for the Hard Reset within",
    "page": 397,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "tSnkHardResetPrepare (t1) and passes an\nindication to the Device Policy Manager The Sink\nShall Not draw more than iSafe0mA when VBUS is\ndriven to vSafe0V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Policy Engine waits tPSHardReset after sending",
    "full_path": "4 Policy Engine waits tPSHardReset after sending",
    "page": 397,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Hard Reset Signaling and then tells the Device Policy\nManager to instruct the power supply to perform a\nHard Reset . The transition to vSafe0V Shall occur\nwithin tSafe0V (t2)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "After tSrcRecover the Source applies power to VBUS",
    "full_path": "5 After tSrcRecover the Source applies power to VBUS",
    "page": 397,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "in an attempt to re-establish communication with the\nSink and resume USB Default Operation . The\ntransition to vSafe5V Shall occur within tSrcTurnOn\n(t3).The Sink Shall Not violate the transient load\nbehavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level.\nt3\nSource V OLDSend\nHard Reset\nSink\nPrepare\nVOLDSource\nHard Reset1\nIOLD\niSafe0mASource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentvSafe0V3\nvSafe5V\nDefault current draw§\n§Source vSafe5V4\nSource vSafe0V\nSink  I OLD Ready to recover and power upSource\nRecover\ntSrcRecover5Process\nHard ResettPSHardReset\nPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrent2\nt2\nt1\nPage 398 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.3.2 Sink Initiated Hard Reset\nThe interaction of the System Policy , Device Policy , and power supply that Shall be followed during a Sink Initiated\nHard Reset is shown in Figure 7.42, \"Transition Diagram for a Sink Initiated Hard Reset\" . The sequence that Shall be\nfollowed is described in Table 7.21, \"Sequence Description for a Sink Initiated Hard Reset\" . The timing parameters\nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical\nParameters\" , and Table 7.25, \"Common Source/Sink Electrical Parameters\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 399Figure 7.42 Transition Diagram for a Sink Initiated Hard Reset\nTable 7.21 Sequence Description for a Sink Initiated Hard Reset\nStep Source Port Sink Port"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine sends Hard Reset Signaling to the",
    "full_path": "1 Policy Engine sends Hard Reset Signaling to the",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Policy Engine tells the Device Policy Manager to",
    "full_path": "2 Policy Engine tells the Device Policy Manager to",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "instruct the power supply to prepare for a Hard\nReset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Sink prepares for the Hard Reset within",
    "full_path": "3 The Sink prepares for the Hard Reset within",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "tSnkHardResetPrepare (t1) and passes an\nindication to the Device Policy Manager . The Sink\nShall Not draw more than iSafe0mA when VBUS is\ndriven to vSafe0V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Policy Engine is informed of the Hard Reset .",
    "full_path": "4 Policy Engine is informed of the Hard Reset .",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Policy Engine waits tPSHardReset after receiving",
    "full_path": "5 Policy Engine waits tPSHardReset after receiving",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Hard Reset Signaling and then tells the Device Policy\nManager to instruct the power supply to perform a\nHard Reset . The transition to vSafe0V Shall occur\nwithin tSafe0V (t2)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "After tSrcRecover the Source applies power to VBUS",
    "full_path": "6 After tSrcRecover the Source applies power to VBUS",
    "page": 399,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "in an attempt to re-establish communication with the\nSink and resume USB Default Operation . The\ntransition to vSafe5V Shall occur within tSrcTurnOn\n(t3).The Sink Shall Not violate the transient load\nbehavior defined in Section 7.2.6, \"Transient Load\nBehavior\" while transitioning to and operating at the\nnew power level.\nt3\nt2Send\nHard ResetEvaluate\nHard Reset\nSink\nPrepare\nVOLDSource\nHard Reset1\nIOLD\niSafe0mASource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrentvSafe0V34\nvSafe5V\nDefalt current\ndraw§\n§Source vSafe5V5\nSource vSafe0V\nSink  I OLDSource V OLD\nReady to recover and power upSource\nRecover\ntSrcRecover6tPSHardResetPort to Port\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentProcess\nHard Reset2\nt1\nPage 400 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.3.4 Transitions Caused by Fast Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.3.4.1",
    "title": "Fast Role Swap",
    "full_path": "7.3.4.1 Fast Role Swap",
    "page": 400,
    "level": 4,
    "parent_id": "7.3.4",
    "tags": [],
    "content": "The interaction of the System Policy , Device Policy , and power supply that Shall be followed during a Fast Role Swap\nis shown in Figure 7.43, \"Transition Diagram for Fast Role Swap\" . The parallel sequences that Shall be followed are\ndescribed in Table 7.22, \"Sequence Description for Fast Role Swap\" . The timing parameters that Shall be followed\nare listed in Table 7.23, \"Source Electrical Parameters\" , Table 7.24, \"Sink Electrical Parameters\" , and Table 7.25,\n\"Common Source/Sink Electrical Parameters\" . Negotiation s between the New Source and the New Sink May occur\nafter the New Source sends the final PS_RDY Message .\nNote: In Figure 7.43, \"Transition Diagram for Fast Role Swap\" . and Table 7.22, \"Sequence Description for Fast\nRole Swap\" numbers are used to indicate Message related steps and letters are used to indicate other\nevents.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 401Figure 7.43 Transition Diagram for Fast Role Swap\nRp Changed\nto R dSignal Fast\nSwap\nDetect\nFast Swap\nOld SinkNew SinkOld SourceAB 2\nCSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Path\nSink Port\nDevice Policy Mgr\nSink Port\nPower Path\nSource Port\nVoltage\nSink Port\nCurrentPort to Port\nSignaling &\nMessaging\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUS Voltage\nSink\nVBUS CurrentSource\nStopsSend\nFR_Swap1Send\nAcceptEvaluate\nFR_Swap\nNew Source = vSafe5V Evaluate\nAccept3\n4Send\nPS_RDY\nEvaluate\nPS_RDY\nD1\nSink5\n6\nSourceVBUS<\nvSafe5VSend\nPS_RDY7\nVBUS<\nvSafe5VSource\nVBUS\nSource vSafe5VD2 E\nReady & Able to Source\nvSafe5VEvaluate\nPS_RDY8\ntFRSwapInit\nRd Changed\nto R pF\nG"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "A< tSrcFRSwap",
    "full_path": "0 A< tSrcFRSwap",
    "page": 401,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "dischargingSink"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "VAny voltage",
    "full_path": "0 VAny voltage",
    "page": 401,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "> vSafe5V\nNo current may be drawn while\nVBUS is below vSafe5V\nPage 402 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 7.22 Sequence Description for Fast Role Swap\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port\nFast Role Swap Request and Power Transition\nA The Source connected to the Hub UFP (see Figure\n7.16, \"V BUS Power during Fast Role Swap\" ) stops\nsourcing VBUS.\nB Policy Engine sends the Fast Role Swap Request to the\nInitial Sink on the CC wire. When VBUS < vSafe5V\n(min), it tells the Device Policy Manager not to draw\nmore than iSnkStdby until the tSnkFRSwap timer\nhas elapsed.\nC Policy Engine detects the Fast Role Swap Request on\nthe CC wire from the Initial Source and Shall send\nthe FR_Swap Message back to the Initial Source (that\nis no longer powering VBUS) within time\ntFRSwapInit .\nD1 The Policy Engine monitors for VBUS ≤ vSafe5V so\nthat a PS_RDY Message can be sent to the New Source\nat Step 5 of the messaging sequence.\nD2 The Policy Engine monitors for VBUS ≤ vSafe5V so the\nInitial Sink can assume the Power Role of New Source\nand begin to source VBUS.\nE When VBUS = vSafe5V the New Source May provide\npower to VBUS. When VBUS < vSafe5V the New Source\nShall provide power to VBUS within tSrcFRSwap .\nOnce the New Source is providing power, the PS_RDY\nMessage can be sent to the New Sink at Step 7 of the\nmessaging sequence.\nF The CC termination is changed from Rp to Rd (see\n[USB Type-C 2.4]) before the New Sink sends the\nPS_RDY Message at Step 5 to the New Source .\nG The CC termination is changed from Rd to Rp (see\n[USB Type-C 2.4]) before the New Source sends the\nPS_RDY Message at Step 7 to the New Sink .\nFast Role Swap Message Sequence"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine receives the FR_Swap Message from",
    "full_path": "1 Policy Engine receives the FR_Swap Message from",
    "page": 402,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Initial Sink that is transitioning to be the New\nSource .Policy Engine sends the FR_Swap Message to the\nInitial Source (that is no longer powering VBUS) after\ndetecting the Fast Role Swap Request at Step C."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer sends the GoodCRC Message to the",
    "full_path": "2 Protocol Layer sends the GoodCRC Message to the",
    "page": 402,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Initial Sink . Policy Engine then evaluates the\nFR_Swap Message .Protocol Layer receives the GoodCRC Message from\nthe Initial Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Policy Engine sends an Accept Message to the Initial",
    "full_path": "3 Policy Engine sends an Accept Message to the Initial",
    "page": 402,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Sink that is transitioning to be the New Source .Policy Engine receives the Accept Message from the\nInitial Source that is transitioning to be the New Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "4 Protocol Layer receives the GoodCRC Message from",
    "page": 402,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the Initial Sink that is transitioning to be the New\nSource .Protocol Layer sends the GoodCRC Message to the\nInitial Source that is transitioning to be the New Sink .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4035 Policy Engine sends a PS_RDY Message to the Initial\nSink that is transitioning to be the New Source . The\nPolicy Engine Shall start the PS_RDY Message at least\ntFRSwap5V after it has sent the Accept Message , and\nwhen Step D1 has also been completed.Policy Engine receives the PS_RDY Message from the\nNew Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer receives the GoodCRC Message from",
    "full_path": "6 Protocol Layer receives the GoodCRC Message from",
    "page": 403,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the New Source .Protocol Layer sends the GoodCRC Message from the\nInitial Sink that has completed the transition to New\nSource . Policy Engine then evaluates the PS_RDY\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Policy Engine receives the PS_RDY Message from the",
    "full_path": "7 Policy Engine receives the PS_RDY Message from the",
    "page": 403,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "New Source .Policy Engine sends a PS_RDY Message to the New\nSink . The Policy Engine Shall wait for Step E before\nsending the PS_RDY Message , and Shall send the\nPS_RDY Message within tFRSwapComplete of\nreceiving the PS_RDY Message from the Initial Source\nPort.Table 7.22 Sequence Description for Fast Role Swap (Continued)\nStep Initial Source Port  New Sink Port Initial Sink Port  New Source Port\nPage 404 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-107.4 Electrical Parameters"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.4.1",
    "title": "Source Electrical Parameters",
    "full_path": "7.4.1 Source Electrical Parameters",
    "page": 404,
    "level": 3,
    "parent_id": "7.4",
    "tags": [],
    "content": "The Source Electrical Parameters that Shall be followed are specified in Table 7.23, \"Source Electrical Parameters\" .\nTable 7.23 Source Electrical Parameters\nParameter Description MIN TYP MAX UNITS Reference\ncSrcBulk Source bulk\ncapacitance when a\nPort is powered from a\ndedicated supply.110 µF Section 7.1.2\ncSrcBulkShared Source bulk\ncapacitance when a\nPort is powered from a\nshared supply.1120 µF Section 7.1.2\nDNL\n(Differential Non-\nLinearity )Deviation between\nideal analog values\ncorresponding to\nadjacent input digital\nvalues-1 0 +1 LSB Section 7.1.4.2.1\niPpsCLMin SPR PPS Minimum\nCurrent Limit setting.1 A Section 7.1.4.2.2\niPpsCLNew Current Limit accuracy Section 7.1.4.2.2\n1A ≤ Operating\nCurrent ≤ 3A-150 150 mA\nOperating current > 3A -5 5 %\niPpsCLStep SPR PPS Current Limit\nprogramming step size\n(1 LSB).50 mA Section 7.1.4.2.2\niPpsCLLoadReleaseRate Maximum load\ndecrease slew rate\nduring Current Limit\nset-point changes.-150 mA/µs Section 7.1.4.2.2\niPpsCLLoadStepRate Maximum load\nincrease slew rate\nduring Current Limit\nset-point changes.150 mA/µs Section 7.1.4.2.2\niPpsCLTransient Allowed output\ncurrent overshoot\nwhen a load increase\noccurs while in CL\nmode.New load +\n100mA Section 7.1.4.2.2\nAllowed output\ncurrent undershoot\nwhen a load decrease\noccurs while in CL\nmode.New load –\n100mA\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 405iPpsCVCL Transient CV to CL transient\ncurrent bounds\nassuming the\nOperating Voltage\nreduction of Section\n7.2.3.1, \"Programmable\nPower Supply Sink\nStandby\" .iPpsCLNe\nw - 100New load +\n500mA Section 7.1.4.2.2\ntAvsTransient The maximum time for\nthe AVS to be between\nvAvsNew and\nvAvsValid in response\nto a load transient.5 ms Section 7.1.8.4\ntAvsSrcTransLarge The time the AVS set-\npoint Shall transition\nbetween requested\nvoltages for steps\nlarger than\nvAvsSmallStep .0 700 ms Section 7.1.4.3.1\ntAvsSrcTransSmall The time the AVS set-\npoint Shall transition\nbetween requested\nvoltages for steps\nsmaller than\nvAvsSmallStep .0 50 ms Section 7.1.4.3.1\ntNewSnk Time allowed for an\nInitial Source in Swap\nStandby to transition\nNew Sink operation.15 ms Section 7.1.10\nFigure 7.39\nFigure 7.40\ntPpsCLCVTransient CL to CV transient\nvoltage settling time.275 ms Section 7.1.4.2.2\ntPpsCLProgramSettle SPR PPS Current Limit\nprogramming settling\ntime.250 ms Section 7.1.4.2.2\ntPpsCLSettle CL load transient\ncurrent settling time.250 ms Section 7.1.4.2.2\ntPpsCVCL Transient CV to CL transient\nsettling time.250 ms Section 7.1.8.3\ntPpsSrcTransLarge The time the\nProgrammable Power\nSupply’s set-point\nShall transition\nbetween requested\nvoltages for steps\nlarger than\nvPpsSmallStep .0 275 ms Section 7.3.1.3Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nPage 406 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10tPpsSrcTransSmall The time the\nProgrammable Power\nSupply’s set-point\nShall transition\nbetween requested\nvoltages for steps less\nthan or equal to\nvPpsSmallStep .0 25 ms Section 7.3.1.3\ntPpsTransient The maximum time for\nthe Programmable\nPower Supply to be\nbetween vPpsNew and\nvPpsValid in response\nto a load transient\nwhen target load is\ngreater than or equal\nto 60mA.5 ms Section 7.1.8.3\nThe maximum time for\nthe Programmable\nPower Supply to be\nbetween vPpsNew and\nvPpsValid in response\nto a load transient\nwhen target load is less\nthan 60mA.150 ms Section 7.1.8.3\ntSrcFRSwap Time from the Initial\nSink detecting that\nVBUS has dropped\nbelow vSafe5V until\nthe Initial Sink /new\nSource is able to supply\nUSB Type-C Current\n(see [USB Type-C 2.4] ) 150 µs Section 7.1.13Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 407tSrcReady SPR Mode Time from positive/\nnegative transition\nstart (t0) to when the\nSource is ready to\nprovide the newly\nNegotiated power\nlevel.\nApplies only to SPR\nMode voltage\ntransitions.285 ms Figure 7.2\nFigure 7.3\nEPR Mode Time from positive/\nnegative transition\nstart (t0) to when the\nSource is ready to\nprovide the newly\nNegotiated power\nlevel.\nApplies to EPR Mode\nvoltage transitions and\nany voltage transition\nthat either begins or\nends in EPR Mode .720\ntSrcRecover SPR Mode Time allotted for the\nSource to recover.0.66 1.0 s Section 7.1.5\nEPR Mode 1.085 1.425\ntSrcSettle SPR Mode Time from positive/\nnegative transition\nstart (t0) to when the\ntransitioning voltage is\nwithin the range\nvSrcNew .\nApplies only to SPR\nMode voltage\ntransitions.275 ms Figure 7.2\nEPR Mode Time from positive/\nnegative transition\nstart (t0) to when the\ntransitioning voltage is\nwithin the range\nvAvsNew .\nApplies to EPR Mode\nvoltage transitions and\nany voltage transition\nthat either begins or\nends in EPR Mode .700\ntSrcSwapStdby The maximum time for\nthe Source to\ntransition to Swap\nStandby .650 ms Section 7.1.10\nFigure 7.17\nFigure 7.18Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nPage 408 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10tSrcTransient The maximum time for\nthe Source output\nvoltage to be between\nvSrcNew and\nvSrcValid in response\nto a load transient\nwhen target load is\ngreater or equal to\nthan 60mA.5 ms Section 7.1.8\nThe maximum time for\nthe Source output\nvoltage to be between\nvSrcNew and\nvSrcValid in response\nto a load transient\nwhen target load is less\nthan 60mA.150 ms Section 7.1.8\ntSrcTransition The time the Source\nShall wait before\ntransitioning the\npower supply to\nensure that the Sink\nhas sufficient time to\nprepare (does not\napply to transitions\nwithin the same PPS or\nAVS APDO ).25 35 ms Section 7.3\ntSrcTransOff SPR\nModeTime from the last bit\nof the GoodCRC\nMessage\nacknowledging the\nAccept Message in\nresponse to the\nPR_Swap Message\nuntil the PS_RDY\nMessage must be\nstarted.\nApplies only to SPR\nMode voltage\ntransitions.690 ms Section 7.3.2\ntSrcTransOn Time from the last bit\nof the GoodCRC\nMessage\nacknowledging the\nPS_RDY Message sent\nby the new Source , in\nresponse to the\nPR_Swap Message\nuntil the PS_RDY\nMessage must be\nstarted.280 ms Section 7.3.2Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 409tSrcTransReq SPR\nModeTime from the last bit\nof the GoodCRC\nMessage\nacknowledging the\nAccept Message in\nresponse to the\nRequest Message until\nthe PS_RDY Message\nmust be started.\nApplies only to SPR\nMode voltage\ntransitions.325 ms Section 7.3\nEPR\nModeTime from the last bit\nof the GoodCRC\nMessage\nacknowledging the\nAccept Message in\nresponse to the\nRequest Message until\nthe PS_RDY Message\nmust be started.\nApplies to EPR Mode\nvoltage transitions and\nany voltage transition\nthat either begins or\nends in EPR Mode .760 ms Section 7.3\ntSrcTurnOn Transition time from\nvSafe0V to vSafe5V .275 ms Figure 7.10\nTable 7.20\nTable 7.21\nvAvsMaxVoltage Maximum Voltage\nField in the AVS APDO .APDO Max\nVoltage\n*0.95APDO Max\nVoltage *\n1.05V Section 7.1.4.3.1\nvAvsMinVoltage Minimum Voltage\nField in the AVS APDO .APDO Min\nVoltage\n*0.95APDO\nMin\nVoltage *\n1.05V Section 7.1.4.3.1\nvAvsNew Adjustable RDO Output\nVoltage measured at\nthe Source receptacle.RDO\nOutput\nVoltage\n*0.95RDO\nOutput\nVoltageRDO\nOutput\nVoltage\n*1.05V Section 7.1.8.4\nvAvsSlewNeg AVS maximum slew\nrate for negative\nvoltage changes.-30 mV/µs Section 7.1.8.4Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nPage 410 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10vAvsSlewPos AVS maximum slew\nrate for positive\nvoltage changes.30 mV/µs Section 7.1.8.4\nvAvsSmallStep AVS step size defined\nas a small step relative\nto the previous\nvAvsNew .-1.0 1.0 V Section 7.1.4.3.1\nvAvsStep AVS voltage\nprogramming step\nsize.100 mV Section 7.1.8.4\nvAvsValid The range in addition\nto vAvsNew which the\nAVS output is\nconsidered Valid\nduring and after a\ntransition as well as in\nresponse to a transient\nload condition.-0.5 0.5 V Section 7.1.8.4\nvPpsCLCVTransient CL to CV load transient\nvoltage bounds.Operating\nVoltage *"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.95",
    "title": "–",
    "full_path": "0.95 –",
    "page": 410,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": "0.1VOperating\nVoltage *"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1.05",
    "title": "+",
    "full_path": "1.05 +",
    "page": 410,
    "level": 2,
    "parent_id": "1",
    "tags": [],
    "content": "0.1VV Section 7.1.4.2.2\nvPpsMaxVoltage Maximum Voltage\nField in the\nProgrammable Power\nSupply APDO .APDO\nMax\nVoltage\n*0.95APDO Max\nVoltage *\n1.05V Section 7.1.4.2.1\nvPpsMinVoltage Minimum Voltage\nField in the\nProgrammable Power\nSupply APDO .APDO\nMin\nVoltage\n*0.95APDO Min\nVoltage *\n1.05V Section 7.1.4.2.1\nvPpsNew Programmable RDO\nOutput Voltage\nmeasured at the\nSource receptacle.RDO\nOutput\nVoltage\n*0.95RDO\nOutput\nVoltageRDO\nOutput\nVoltage\n*1.05V Section 7.1.8.3\nvPpsShutdown The voltage at which\nthe SPR PPS shuts\ndown when operating\nin CL.APDO\nMinimum\nVoltage *\n0.85APDO\nMinimum\nVoltage *\n0.95V Section 7.1.4.2.2\nvPpsSlewNeg Programmable Power\nSupply maximum slew\nrate for negative\nvoltage changes-30 mV/µs Section 7.1.8.3\nvPpsSlewPos Programmable Power\nSupply maximum slew\nrate for positive\nvoltage changes30 mV/µs Section 7.1.8.3Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 411vPpsSmallStep PPS Step size defined\nas a small step relative\nto the previous\nvPpsNew .-500 500 mV Section 7.1.4.2.2\nvPpsStep PPS voltage\nprogramming step size\n(1 LSB).20 mV Section 7.1.8.3\nvPpsValid The range in addition\nto vPpsNew which the\nProgrammable Power\nSupply output is\nconsidered Valid in\nresponse to a load step. -0.1 0.1 V Section 7.1.8.3\nvSmallStep VBUS step size increase\ndefined as a small step\nrelative to the\nprevious VBUS when\nRequesting a different\n(A)PDO .500 mV Section 7.1.4.3.1\nvSrcNeg Most negative voltage\nallowed during\ntransition.-0.3 V Figure 7.10\nvSrcNew Fixed Supply output\nmeasured at the\nSource receptacle.PDO\nVoltage\n*0.95PDO\nVoltagePDO\nVoltage\n*1.05V\nTable 7.2\nVariable Supply output\nmeasured at the\nSource receptacle.PDO\nMinimum\nVoltagePDO\nMaximum\nVoltageV\nBattery Supply output\nmeasured at the\nSource receptacle.PDO\nMinimum\nVoltagePDO\nMaximum\nVoltageV\nvSrcPeak The range that a Fixed\nSupply or EPR AVS in\nPeak Current\noperation is allowed\nwhen overload\nconditions occur.PDO\nVoltage\n*0.90PDO\nVoltage\n*1.05V Table 6.10\nTable 6.16\nFigure 7.14\nvSrcSlewNeg Maximum slew rate\nallowed for negative\nvoltage transitions.\nLimits current based\non a 3 A connector\nrating and maximum\nSink bulk capacitance\nof 100 µF.-30 mV/µs Section 7.1.4.2\nTable 7.2Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nPage 412 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10vSrcSlewPos Maximum slew rate\nallowed for positive\nvoltage transitions.\nLimits current based\non a 3 A connector\nrating and maximum\nSink bulk capacitance\nof 100 µF.30 mV/µs Section 7.1.4\nFigure 7.2\nvSrcValid The range in addition\nto vSrcNew which a\nnewly Negotiated\nvoltage is considered\nValid during and after\na transition as well as\nin response to a\ntransient load\ncondition. This range\nalso applies to\nvSafe5V .-0.5 0.5 V Figure 7.2\nFigure 7.3\nSection 7.1.8Table 7.23 Source Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) The Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4137.4.2 Sink Electrical Parameters\nThe Sink Electrical Parameters that Shall be followed are specified in Table 7.24, \"Sink Electrical Parameters\" .\nTable 7.24 Sink Electrical Parameters\nParameter Description MIN TYP MAX UNITS Reference\ncSnkBulk Sink bulk capacitance on VBUS at\nAttach and during FRS after the\nInitial Source stops sourcing and\nprior to establishing the First\nExplicit Contract (see Appendix E,\n\"FRS System Level Example\" for an\nexample).1See [USB 3.2] Section 7.2.2\n[USB 3.2]\ncSnkBulkPd Bulk capacitance on V BUS a Sink is\nallowed after a successful\nNegotiation .1100 µF Section 7.2.2\niLoadReleaseRate Load release di/dt. -150 mA/\nµsSection 7.2.6\niLoadStepRate Load step di/dt. 150 mA/\nµsSection 7.2.6\niNewFrsSink Maximum current the New Sink\ncan draw during a Fast Role Swap\nuntil the New Source applies Rp.\nMatches the required Fast Role\nSwap required USB Type-C\nCurrent Current field of the Fixed\nSupply PDO of the Initial Source ’s\nSink_Capabilities Message .Default USB\ncurrent or 1.5\nor 3.0A Section 7.1.13\niOvershoot Positive or negative overshoot\nwhen a load change occurs less\nthan or equal to iLoadStepRate ;\nrelative to the settled value after\nthe load change.-230 230 mA Section 7.2.6\niPpsCLLoadStep Maximum Current set-point\nchange while operating in CL\nmode.-500 500 mA Section 7.2.3.1\niSafe0mA Maximum current a Sink is\nallowed to draw when VBUS is\ndriven to vSafe0V .1.0 mA Figure 7.29\nFigure 7.30\niSnkStdby Maximum current during voltage\ntransition.500 mA Section 7.2.3\niSnkSwapStdby Maximum current a Sink can draw\nduring Swap Standby . Ideally this\ncurrent is very near to 0 mA\nlargely influenced by Port leakage\ncurrent.2.5 mA Section 7.2.7\n1) If more bypass capacitance than cSnkBulk max or cSnkBulkPd max is required in the device, then the device Shall\nincorporate some form of VBUS surge current limiting as described in [USB 3.2] Section 11.4.4.1.\nPage 414 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10pHubSusp Suspend power consumption for a\nHub . 25mW + 25mW per\ndownstream Port for up to 4\nports.125 mW Section 7.2.3\npSnkSusp Suspend power consumption for a\nperipheral device.25 mW Section 7.2.3\ntNewSrc Maximum time allowed for an\nInitial Sink in Swap Standby to\ntransition to New Source\noperation.275 ms Section 7.2.7\nTable 7.18\nTable 7.19\ntSnkFRSwap Time during a Fast Role Swap\nwhen the New Sink can draw no\nmore than iSnkStdby .200 µs Section 7.1.13\ntSnkHardResetPrepare Time allotted for the Sink power\nelectronics to prepare for a Hard\nReset .15 ms Table 7.12\ntSnkNewPower Maximum transition time\nbetween power levels.15 ms Section 7.2.3\ntSnkRecover Time for the Sink to resume USB\nDefault Operation .150 ms Table 7.20\ntSnkStdby Time to transition to Sink Standby\nfrom Sink .15 ms Section 7.2.3\ntSnkSwapStdby Maximum time for the Sink to\ntransition to Swap Standby .15 ms Section 7.2.7\nvEprMax Highest voltage an EPR Sink is\nexpected to tolerate 55 V Section 7.2.9.2\nvSprMax Highest voltage an SPR Sink is\nexpected to tolerate24 V Section 7.2.9.2Table 7.24 Sink Electrical Parameters (Continued)\nParameter Description MIN TYP MAX UNITS Reference\n1) If more bypass capacitance than cSnkBulk max or cSnkBulkPd max is required in the device, then the device Shall\nincorporate some form of VBUS surge current limiting as described in [USB 3.2] Section 11.4.4.1.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4157.4.3 Common Electrical Parameters\nElectrical Parameters that are common to both the Source and the Sink that Shall be followed are specified in\nTable 7.25, \"Common Source/Sink Electrical Parameters\" ” .\nTable 7.25 Common Source/Sink Electrical Parameters\nParameter Description MIN TYP MAX UNITS Reference\ntSafe0V Time to reach vSafe0V max. 650 ms Section 7.1.5\nFigure 7.10\nTable 7.20\nTable 7.21\ntSafe5V Time to reach vSafe5V max. 275 ms Section 7.1.5\nFigure 7.10\nTable 7.20\nTable 7.21\ntVCONN Reapplied When the UFP is the VCONN Source :\ntime from the last bit of the\nGoodCRC acknowledging the\nPS_RDY Message before\nreapplying VCONN .\nWhen the DFP is the VCONN Source :\ntime from when VCONN drops\nbelow vRaReconnect.10 20 ms Figure 7.19\nFigure 7.20\ntVCONN Valid Time from tVCONN Reapplied until\nVCONN is within vVconnValid (see\n[USB Type-C 2.4]).10 5 ms Figure 7.19\nFigure 7.20\ntVCONN Zero Time from the last bit of the\nGoodCRC acknowledging the\nAccept Message in response to the\nData_Reset Message until VCONN is\nbelow vRaReconnect (see [USB\nType-C 2.4] ).125 ms Figure 7.19\nFigure 7.20\nvSafe0V Safe operating voltage at “zero\nvolts”.0 0.8 V Section 7.1.5\nvSafe5V Safe operating voltage at 5V. See\n[USB 2.0] and [USB 3.2] for\nallowable VBUS voltage range.4.75 5.5 V Section 7.1.5\n1) tV CONN Stable (See [USB Type-C 2.4]) still applies.\nPage 416 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108 Device Policy"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.1",
    "title": "Overview",
    "full_path": "8.1 Overview",
    "page": 416,
    "level": 2,
    "parent_id": "8",
    "tags": [],
    "content": "This section describes the Device Policy and Policy Engine that implements it. For an overview of the architecture and\nhow the Device Policy Manager fits into this architecture, please see Section 2.6, \"Architectural Overview\" .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4178.2 Device Policy Manager\nThe Device Policy Manager is responsible for managing the power used by one or more USB Power Delivery ports.\nIn order to have sufficient knowledge to complete this task it needs relevant information about the device it resides\nin. Firstly, it has a priori knowledge of the device including the Capabilities of the power supply and the receptacles\non each Port since these will for example have specific current ratings. It also has to know information from the\nUSB-C® Port Control module regarding cable insertion, type and rating of cable etc. It also has to have information\nfrom the power supply about changes in its Capabilities as well as being able to request power supply changes.\nWith all of this information the Device Policy Manager is able to provide up to date information regarding the\nCapabilities available to a specific Port and to manage the power resources within the device.\nWhen working out the Capabilities for a given Source Port the Device Policy Manager will take into account firstly\nthe current rating of the Port 's receptacle and whether the inserted cable is PD or non-PD rated and if so, what is\nthe capability of the plug. This will set an upper bound for the Capabilities which might be offered. After this the\nDevice Policy Manager will consider the available power supply resources since this will bound which voltages and\ncurrents might be offered. Finally, the Device Policy Manager will consider what power is currently allocated to\nother ports, which power is in the Power Reserve and any other amendments to Policy from the System Policy\nManager . The Device Policy Manager will offer a set of Capabilities within the bounds detailed above.\nWhen selecting a capability for a given Sink Port the Device Policy Manager will look at the Capabilities offered by\nthe Source . This will set an upper bound for the Capabilities which might be requested. The Device Policy Manager\nwill also consider which Capabilities are required by the Sink in order to operate. If an appropriate match for\nvoltage and Current can be found within the limits of the receptacle and cable, then this will be requested from the\nSource . If an appropriate match cannot be found then a request for an offered voltage and current will be made,\nalong with an indication of a Capabilities Mismatch .\nUSB PD defines two types of power sources:\n Predefined voltage sources ( Fixed Supply , Variable Supply and Battery Supply )\n Programmable voltage sources:\n Programmable Power Supply (PPS)\n Adjustable Voltage Supply (AVS)\nThe first are generally used for classic charging wherein the Charger electronics reside inside the Sink . The Device\nPolicy Manager in the Sink requests a fixed voltage from the list of PDOs offered by the Source and which is\nconverted internally to charge the Sink 's Battery and/or power its function.\nThe second moves the Charger electronics that manage the voltage control outside the Sink and back into the\nSource itself. When in SPR PPS Mode , the Device Policy Manager in the Sink requests a specific voltage with a 20mV\naccuracy and sets a current limit. Unlike traditional USB where Sink s are responsible for limiting the current, they\nconsume, the SPR PPS Source limits the current to what the Sink has requested. When operating in, the Device Policy\nManager in the Sink requests a specific voltage with a 100mV accuracy and requests a maximum current it is\nallowed to draw.\nNote: The AVS Source s unlike SPR PPS Source s do not support current limit mode. A Sink operating in is respon -\nsible not to draw more current than it requests.\nThe process to request power is the same for both types of power Source s although the actual format and contents\nof the request are slightly different. The primary operational differences are:\n A Sink that is using SPR PPS is required to periodically sent requests to let the Source know it is still alive\nand communicating. When this communication fails a Hard Reset results.\n A Sink operating in SPR Mode has no special timing requirements.\n A Sink operating in EPR Mode is required to periodically communicate with the Source to let it know it\nis still operational. If the communication fails, a Hard Reset results.\nFor Dual-Role Power Port s the Device Policy Manager manages the functionality of both a Source and a Sink . In\naddition, it is able to manage the Power Role Swap process between the two. In terms of power management this\nPage 418 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10could mean that a Port which is initially consuming power as a Sink is able to become a power resource as a Source .\nConversely, Attached Source s might request that power be provided to them.\nThe functionality within the Device Policy Manager (and to a certain extent the Policy Engine ) is scalable depending\non the complexity of the device, including the number of different power supply Capabilities and the number of\ndifferent features supported for example System Policy Manager interface or Capabilities Mismatch , and the\nnumber of ports being managed. Within these parameters it is possible to implement devices from very simple\npower supplies to more complex power supplies or devices such as USB Hub s or Hard Drives. Within multi- Port\ndevices it is also permitted to have a combination of USB Power Delivery and non-USB Power Delivery ports which\nShould all be managed by the Device Policy Manager .\nAs noted in Section 2.6, \"Architectural Overview\" the logical architecture used in the PD specification will vary\ndepending on the implementation. This means that different implementations of the Device Policy Manager might\nbe relatively small or large depending on the complexity of the device, as indicated above. It is also possible to\nallocate different responsibilities between the Policy Engine and the Device Policy Manager , which will lead to\ndifferent types of architectures and interfaces.\nThe Device Policy Manager is responsible for the following:\n Maintaining the Local Policy for the device.\n For a Source , monitoring the present Capabilities and triggering notifications of the change.\n For a Sink , evaluating and responding to Capabilities related requests from the Policy Engine for a given\nPort .\n Control of the Source /Sink in the device.\n Control of the USB-C® Port Control module for each Port .\n Interface to the Policy Engine for a given Port .\nThe Device Policy Manager is responsible for the following Optional features when implemented:\n Communications with the System Policy over USB.\n For Source s with multiple ports monitoring and balancing power requirements across these ports.\n Monitoring of batteries and AC power supplies.\n Managing Modes in its Port Partner and Cable Plug (s)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.1",
    "title": "Capabilities",
    "full_path": "8.2.1 Capabilities",
    "page": 418,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": "The Device Policy Manager in a Provider Shall know the power supplies available in the device and their\nCapabilities . In addition, it Shall be aware of any other PD sources of power such as batteries and AC inputs. The\navailable power sources and existing demands on the device Shall be taken into account when presenting\nCapabilities to a Sink .\nThe Device Policy Manager in a Consumer Shall know the requirements of the Sink and use this to evaluate the\nCapabilities offered by a Source . It Shall be aware of its own power sources e.g., Batteries or AC supplies where\nthese have a bearing on its operation as a Sink .\nThe Device Policy Manager in a Dual-Role Power Device Shall combine the above Capabilities and Shall also be able\nto present the dual-role nature of the device to an Attached PD Capable device."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.2",
    "title": "System Policy",
    "full_path": "8.2.2 System Policy",
    "page": 418,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": "A given PD Capable device might have no USB capability, or PD might have been added to a USB device in such a\nway that PD is not integrated with USB. In these two cases there Shall be no requirement for the Device Policy\nManager to interact with the USB interface of the device. The following requirements Shall only apply to PD\ndevices that expose PD functionality over USB.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 419The Device Policy Manager Shall communicate over USB with the System Policy Manager according to the\nrequirements detailed in [UCSI] . Whenever requested the Device Policy Manager Shall implement a Local Policy\naccording to that requested by the System Policy Manager . For example, the System Policy Manager might request\nthat a Battery powered Device temporarily stops charging so that there is sufficient power for an HDD to spin up.\nNote: Due to timing constraints, a PD Capable device Shall be able to respond autonomously to all time-critical\nPD related requests."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.3",
    "title": "Control of Source/Sink",
    "full_path": "8.2.3 Control of Source/Sink",
    "page": 419,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": "The Device Policy Manager for a Provider Shall manage the power supply for each PD Source Port and Shall know\nat any given time what the Negotiated power is. It Shall request transitions of the supply and inform the Policy\nEngine whenever a transition completes.\nThe Device Policy Manager for a Consumer Shall manage the Sink for each PD Sink Port and Shall know at any given\ntime what the Negotiated power is.\nThe Device Policy Manager for a Dual-Role Power Device Shall manage the transition between Source /Sink Power\nRoles for each PD Dual-Role Power Port and Shall know at any given time what Power Role the Port is in."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4",
    "title": "Cable Detection",
    "full_path": "8.2.4 Cable Detection",
    "page": 419,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4.1",
    "title": "Device Policy Manager in a Provider",
    "full_path": "8.2.4.1 Device Policy Manager in a Provider",
    "page": 419,
    "level": 4,
    "parent_id": "8.2.4",
    "tags": [],
    "content": "The Device Policy Manager in the Provider Shall control the USB-C® Port Control module and Shall be able to use the\nUSB-C® Port Control module to determine the Attachment status.\nNote: It might be necessary for the Device Policy Manager to also initiate additional discovery using the Discov -\ner Identity Command in order to determine the full Capabilities of the cabling (see Section 6.4.4.3.1, \"Dis -\ncover Identity\" )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4.2",
    "title": "Device Policy Manager in a Consumer",
    "full_path": "8.2.4.2 Device Policy Manager in a Consumer",
    "page": 419,
    "level": 4,
    "parent_id": "8.2.4",
    "tags": [],
    "content": "The Device Policy Manager in a Consumer controls the USB-C® Port Control module and Shall be able to use the USB-\nC® Port Control module to determine the Attachment status."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4.3",
    "title": "Device Policy Manager in a Consumer/Provider",
    "full_path": "8.2.4.3 Device Policy Manager in a Consumer/Provider",
    "page": 419,
    "level": 4,
    "parent_id": "8.2.4",
    "tags": [],
    "content": "The Device Policy Manager in a Consumer/Provider inherits characteristics of Consumer s and Provider s and Shall\ncontrol the USB-C® Port Control module in order to support the Dead Battery back-powering case to determine the\nfollowing for a given Port :\n Attachment of a USB Power Delivery Provider/Consumer which supports Dead Battery back-powering.\n Presence of VBUS."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.4.4",
    "title": "Device Policy Manager in a Provider/Consumer",
    "full_path": "8.2.4.4 Device Policy Manager in a Provider/Consumer",
    "page": 419,
    "level": 4,
    "parent_id": "8.2.4",
    "tags": [],
    "content": "The Device Policy Manager in a Provider/Consumer inherits characteristics of Consumer s and Provider s and May\ncontrol the USB-C® Port Control module in order to support the Dead Battery back-powering case to determine the\nfollowing for a given Port :\n Presence of VBUS.\nPage 420 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.2.5 Managing Power Requirements\nIt is the responsibility of the Device Policy Manager in a Provider to be aware of the power requirements of all\ndevices connected to its Source Port s. This includes being aware of any reserve power that might be required by\ndevices in the future and ensuring that power is shared optimally amongst Attached PD Capable devices. This is a\nkey function of the Device Policy Manager ; whose implementation is critical to ensuring that all PD Capable devices\nget the power they require in a timely fashion in order to facilitate smooth operation. This is balanced by the fact\nthat the Device Policy Manager is responsible for managing the sources of power that are, by definition, finite.\nThe Consumer 's Device Policy Manager Shall ensure that it takes no more power than is required to perform its\nfunctions and when its requirements change, it Should make a new Request . The Provider , after satisfying the\nRequest , Should reclaim any unused power to ensure that it can meet total power requirements of Attached Sink s\non at least one Port .\nNote: It is expected that a future design guide will provide additional guidance."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.5.1",
    "title": "Managing the Power Reserve",
    "full_path": "8.2.5.1 Managing the Power Reserve",
    "page": 420,
    "level": 4,
    "parent_id": "8.2.5",
    "tags": [],
    "content": "There might be some products where a Device has certain functionality at one power level and a greater\nfunctionality at another, for example a Printer/Scanner that operates only as a printer with one power level and as\na scanner if it can get more power. While the visibility of the linkage between power and functionality might only\nbe apparent to the USB Host ; the Device Policy Manager Should provide mechanisms to manage the power\nrequirements of such Devices.\nIt is the Device Policy Manager 's responsibility to allocate power and maintain a power reserve so as not to over-\nsubscribe its available power resource. A Device with multiple ports such as a Hub Shall always attempt to meet\nthe incremental demands of the Port requiring the highest incremental power from its power reserve."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.5.2",
    "title": "Power Capability Mismatch",
    "full_path": "8.2.5.2 Power Capability Mismatch",
    "page": 420,
    "level": 4,
    "parent_id": "8.2.5",
    "tags": [],
    "content": "A Capabilities Mismatch occurs when a Consumer cannot obtain required power from a Provider (or the Source is\nnot PD Capable) and the Consumer requires such Capabilities to operate. Different actions are taken by the Device\nPolicy Manager and the System Policy Manager in this case."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.5.2.1",
    "title": "Local device handling of mismatch",
    "full_path": "8.2.5.2.1 Local device handling of mismatch",
    "page": 420,
    "level": 5,
    "parent_id": "8.2.5.2",
    "tags": [],
    "content": "The Consumer 's Device Policy Manager Shall cause a notification to be displayed to the end user that a power\nCapabilities Mismatch has occurred. Examples of such feedback can include:\n For a simple Device an LED May be used to indicate the failure. For example, during connection the LED\ncould be solid amber. If the connection is successful, the LED could change to green. If the connection\nfails, it could be red or alternately blink amber.\n A more sophisticated Device with a user interface, e.g., a mobile device or monitor, Should provide no -\ntification through the user interface on the Device.\nThe Provider 's Device Policy Manager May cause a notification to be displayed to the user of the power Capabilities\nMismatch .\nBecause the Capabilities Mismatch might not cause operational failure, the Provider 's Device Policy Manager Should\nNot display a notification to the user if the power offered to the Sink meets or exceeds the SPR Sink Minimum PDP /\nEPR Sink Minimum PDP Advertised in the Sink_Capabilities_Extended Message (see Section 6.5.13,\n\"Sink_Capabilities_Extended Message\" ). If a notification is displayed, it Should Not be shown as an error unless the\npower offered to the Sink is less than the SPR Sink Minimum PDP /EPR Sink Minimum PDP Advertised in the\nSink_Capabilities_Extended Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.5.2.2",
    "title": "Device Policy Manager Communication with System Policy",
    "full_path": "8.2.5.2.2 Device Policy Manager Communication with System Policy",
    "page": 420,
    "level": 5,
    "parent_id": "8.2.5.2",
    "tags": [],
    "content": "In a USB Power Delivery aware system with an active System Policy Manager (see Section 8.2.2, \"System Policy\" ), the\nDevice Policy Manager Shall notify the System Policy Manager of the mismatch. This information Shall be passed\nback to the System Policy Manager using the mechanisms described in [UCSI] . The System Policy Manager Should\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 421ensure that the user is informed of the condition. When another Port in the system could satisfy the Consumer 's\npower requirements the user Should be directed to move the Device to the alternate Port .\nIn order to identify a more suitable Source Port for the Consumer the System Policy Manager Shall communicate\nwith the Device Policy Manager in order to determine the Consumer 's requirements. The Device Policy Manager\nShall use a Get_Sink_Cap Message (see Section 6.3.8, \"Get_Sink_Cap Message\" ) to discover which power levels can\nbe utilized by the Consumer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.6",
    "title": "Use of \"Unconstrained Power\" bit with Batteries and AC",
    "full_path": "8.2.6 Use of \"Unconstrained Power\" bit with Batteries and AC",
    "page": 421,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": "supplies\nThe Device Policy Manager in a Provider or Consumer May monitor the status of any variable sources of power that\ncould have an impact on its Capabilities as a Source such as Batteries and AC supplies and reflect this in the\n\"Unconstrained Power\" bit (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and Section 6.4.1.3.1.3, \"Unconstrained\nPower\" ) provided as part of the Source_Capabilities or Sink_Capabilities Message (see Section 6.4.1, \"Capabilities\nMessage\" ). When monitored, and a USB interface is supported, the External Power status (see [UCSI] ) and the\nBattery state (see Section 9.4.1, \"GetBatteryStatus\" ) Shall also be reported to the System Policy Manager using the\nUSB interface."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.6.1",
    "title": "AC Supplies",
    "full_path": "8.2.6.1 AC Supplies",
    "page": 421,
    "level": 4,
    "parent_id": "8.2.6",
    "tags": [],
    "content": "The Unconstrained Power bit provided by Source s and Sink s (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and\nSection 6.4.1.3.1.3, \"Unconstrained Power\" ) notifies a connected device that it is acceptable to use the Advertised\npower for charging as well as for what is needed for normal operation. A device that sets the Unconstrained Power\nbit has either an external source of power that is sufficient to adequately power the system while charging external\ndevices or expects to charge external devices as a primary state of function (such as a battery pack).\nIn the case of the external power source, the power can either be from an AC Supply directly connected to the device\nor from an AC Supply connected to an Attached device, which is also getting unconstrained power from its power\nsupply. The Unconstrained Power bit is in this way communicated through a PD system indicating that the origin\nof the power is from a single or multiple AC supplies, from a battery bank, or similar:\n If the \"Unconstrained Power\" bit is set, then that power is originally sourced from an AC Supply .\n Devices capable of consuming on multiple ports can only claim that they have \"Unconstrained Power\"\nfor the power Advertised as a Provider Port if there is unconstrained power beyond that needed for nor -\nmal operation coming from external supplies, (e.g., multiple AC supplies).\n This concept applies as the power is routed through multiple Provider and Consumer tiers, so, as an ex -\nample. Power provided out of a monitor that is connected to a monitor that gets power from an AC Sup -\nply, will claim it has \"Unconstrained Power\" even though it is not directly connected to the AC Supply .\nAn example use case is a Tablet computer that is used with two USB A/V displays that are daisy chained (see Figure\n8.1, \"Example of daisy chained displays\" ). The tablet and 1st display are not externally powered, (meaning, they\nhave no source of power outside of USB PD). The 2nd display has an external supply Attached which could either\nbe a USB PD based supply or some other form of external supply. When the displays are connected as shown, the\npower adapter Attached to the 2nd display is able to power both the 1st display and the tablet. In this case the 2nd\ndisplay will indicate the presence of a sufficiently sized Charger to the 1st display, by setting its \"Unconstrained\nPower\" bit. The 1st display will then in turn assess and indicate the presence of the extra power to the tablet by\nsetting its \"Unconstrained Power\" bit. Power is transmitted through the system to all devices, provided that there\nis sufficient power available from the external supply.\nPage 422 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.1 Example of daisy chained displays\nAnother example use case is a laptop computer that is Attached to both an external supply and a Tablet computer.\nIn this situation, if the external supply is large enough to power the laptop in its normal state as well as charge an\nexternal device, the laptop would set its \"Unconstrained Power\" bit and the tablet will allow itself to charge at its\npeak rate. If the external supply is small, however, and would not prevent the laptop from discharging if maximal\npower is drawn by the external device, the laptop would not set its \"Unconstrained Power\" bit, and the tablet can\nchoose to draw less than what is offered. This amount could be just enough to prevent the tablet from discharging,\nor none at all. Alternatively, if the tablet determines that the laptop has significantly larger battery with more\ncharge than the tablet has, the tablet can still choose to charge itself, although possibly not at the maximal rate.\nIn this way, Sink s that do not receive the Unconstrained Power bit from the connected Source can still choose to\ncharge their batteries, or charge at a reduced rate, if their policy determines that the impact to the Source is\nminimal -- such as in the case of a phone with a small battery charging from a laptop with a large battery. These\npolicies can be decided via further USB PD communication."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.6.2",
    "title": "Battery Supplies",
    "full_path": "8.2.6.2 Battery Supplies",
    "page": 422,
    "level": 4,
    "parent_id": "8.2.6",
    "tags": [],
    "content": "When monitored, and a USB interface is supported, the Battery state Shall be reported to the System Policy\nManager using the USB interface.\nIf the device is Battery -powered but is in a state that is primarily for charging external devices, the device is\nconsidered to be an unconstrained source of power and thus Should set the \"Unconstrained Power\" bit.\nA simplified algorithm is detailed below to ensure that Battery powered devices will get charge from non- Battery\npowered devices when possible, and also to ensure that devices do not constantly Power Role Swap back and forth.\nWhen two devices are connected that do not have Unconstrained Power, they Should define their own policies so\nas to prevent constant Power Role Swap ping.\nThis algorithm uses the \"Unconstrained Power\" bit (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and Section\n6.4.1.3.1.3, \"Unconstrained Power\" ), thus the decisions are based on the availability and sufficiency of an external\nsupply, not the full Capabilities of a system or device or product.\nRecommendations:\n Provider/Consumer s using large external sources (\"Unconstrained Power\" bit set) Should always deny\nPower Role Swap requests from Consumer/Provider s not using external sources (\"Unconstrained Pow -\ner\" bit cleared).ACTablet\nDisplay 1\nDisplay 2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 423 Provider/Consumer s not using large external sources (\"Unconstrained Powered\" bit cleared) Should al-\nways accept a Power Role Swap request from a Consumer/Provider using large external power sources\n(\"Unconstrained Power\" bit set) unless the requester is not able to provide the requirements of the\npresent Provider/Consumer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7",
    "title": "Interface to the Policy Engine",
    "full_path": "8.2.7 Interface to the Policy Engine",
    "page": 423,
    "level": 3,
    "parent_id": "8.2",
    "tags": [],
    "content": "The Device Policy Manager Shall maintain an interface to the Policy Engine for each Port in the device."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7.1",
    "title": "Device Policy Manager in a Provider",
    "full_path": "8.2.7.1 Device Policy Manager in a Provider",
    "page": 423,
    "level": 4,
    "parent_id": "8.2.7",
    "tags": [],
    "content": "The Device Policy Manager in a Provider Shall also provide the following functions to the Policy Engine :\n Inform the Policy Engine of changes in cable/ device Attachment status for a given cable.\n Inform the Policy Engine whenever the Source Capabilities available for a Port change.\n Evaluate requests from an Attached Consumer and provide responses to the Policy Engine .\n Respond to requests for power supply transitions from the Policy Engine .\n Indication to Policy Engine when power supply transitions are complete.\n Maintain a power reserve for devices operating on a Port at less than maximum power."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7.2",
    "title": "Device Policy Manager in a Consumer",
    "full_path": "8.2.7.2 Device Policy Manager in a Consumer",
    "page": 423,
    "level": 4,
    "parent_id": "8.2.7",
    "tags": [],
    "content": "The Device Policy Manager in a Consumer Shall also provide the following functions to the Policy Engine :\n Inform the Policy Engine of changes in cable/device Attachment status.\n Inform the Policy Engine whenever the power requirements for a Port change.\n Evaluate Source Capabilities and provide suitable responses:\n Request from offered Capabilities .\n Indicate whether additional power is required.\n Respond to requests for Sink transitions from the Policy Engine ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7.3",
    "title": "Device Policy Manager in a Dual-Role Power Device",
    "full_path": "8.2.7.3 Device Policy Manager in a Dual-Role Power Device",
    "page": 423,
    "level": 4,
    "parent_id": "8.2.7",
    "tags": [],
    "content": "The Device Policy Manager in a Dual-Role Power Device Shall provide the following functions to the Policy Engine :\n Provider Device Policy Manager\n Consumer Device Policy Manager\n Interface for the Policy Engine to request power supply transitions from Source to Sink and vice versa.\n Indications to Policy Engine during Power Role Swap transitions."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.2.7.4",
    "title": "Device Policy Manager in a Dual-Role Power Device Dead Bat -",
    "full_path": "8.2.7.4 Device Policy Manager in a Dual-Role Power Device Dead Bat -",
    "page": 423,
    "level": 4,
    "parent_id": "8.2.7",
    "tags": [],
    "content": "tery handling\nThe Device Policy Manager in a Dual-Role Power Device with a Dead Battery Should :\n Switch Ports to Sink -only or Sink DFP operation to obtain power from the next Attached Source .\n Use VBUS from the Attached Source to power the USB Power Delivery communications as well as\ncharging to enable the Negotiation of higher input power.\nPage 424 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3 Policy Engine"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.1",
    "title": "Introduction",
    "full_path": "8.3.1 Introduction",
    "page": 424,
    "level": 3,
    "parent_id": "8.3",
    "tags": [],
    "content": "There is one Policy Engine instance per Port that interacts with the Device Policy Manager in order to implement\nthe present Local Policy for that particular Port . This section includes:\n AMS s for various operations.\n State diagrams covering operation of Sources, Sink s and Cable Plug s.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4258.3.2 Atomic Message Sequence Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1",
    "title": "Introduction",
    "full_path": "8.3.2.1 Introduction",
    "page": 425,
    "level": 4,
    "parent_id": "8.3.2",
    "tags": [],
    "content": "The Policy Engine drives the Atomic Message Sequence s (AMS ) and responses based on both the expected AMS s and\nthe present Local Policy .\nAn AMS Shall be defined as a Message sequence that starts and/or ends in either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready states (see Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" , Section\n8.3.3.3, \"Policy Engine Sink Port State Diagram\" and Section 8.3.3.25, \"Cable Plug Specific State Diagrams\" ).\nIn addition, the Cable Plug discovery sequence specified in Section 8.3.3.25.3, \"Source Startup Structured VDM\nDiscover Identity of a Cable Plug State Diagram\" Shall be defined as an AMS .\nThe Source and Sink indicate to the Protocol Layer when an AMS starts and ends on entry to/exit from PE_SRC_Ready\nor PE_SNK_Ready (see Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" and Section 8.3.3.3, \"Policy Engine\nSink Port State Diagram\" ).\nAn AMS Shall be considered to have been started by the Initiator when the protocol engine signals the Policy Engine\nthat transmission is a success (the GoodCRC Message has been received in response to the initial Message ). For the\nreceiving Port the AMS Shall be considered to have started when the initial Message has arrived.\nAn AMS Shall be considered to have ended:\n When the Protocol Layer signals the Policy Engine that transmission of the final Message in the AMS is a\nsuccess and for the opposite Port when the final Message has been received.\n A Soft_Reset Message , Hard Reset Signaling for SOP’ or SOP’’ or Cable Reset Signaling has been sent or\nreceived.\nSection 8.3.2.1.3, \"Atomic Message Sequences\" gives details of these AMS 's.\nThis section contains sequence diagrams that highlight some of the more interesting transactions. It is by no means\na complete summary of all possible combinations but is Informative in nature.\nPage 426 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.1 Basic Message Exchange\nFigure 8.2, \"Basic Message Exchange (Successful)\" below illustrates how a Message is sent. Table 8.1, \"Basic Message\nFlow\" details the steps in the flow. Note that the sender might be either a Source or Sink while the receiver might\nbe either a Sink or Source . The basic Message sequence is the same. It starts when the Message Sender's Protocol\nLayer at the behest of its Policy Engine forms a Message that it passes to the PHY Layer .\nFigure 8.2 Basic Message Exchange (Successful)\nTable 8.1 Basic Message Flow\nStep Message Sender Message Receiver"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine directs Protocol Layer to send a Message .",
    "full_path": "1 Policy Engine directs Protocol Layer to send a Message .",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer creates the Message and passes to PHY",
    "full_path": "2 Protocol Layer creates the Message and passes to PHY",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "PHY Layer appends a CRC and sends the Message . Starts",
    "full_path": "3 PHY Layer appends a CRC and sends the Message . Starts",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "CRCReceiveTimer .PHY Layer receives the Message and checks the CRC to\nverify the Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "PHY Layer removes the CRC and forwards the Message",
    "full_path": "4 PHY Layer removes the CRC and forwards the Message",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "to the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Protocol Layer checks the MessageID in the incoming",
    "full_path": "5 Protocol Layer checks the MessageID in the incoming",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Message is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer forwards the received Message\ninformation to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Protocol Layer generates a GoodCRC Message and",
    "full_path": "6 Protocol Layer generates a GoodCRC Message and",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "passes it to the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "PHY Layer receives the Message and checks the CRC to",
    "full_path": "7 PHY Layer receives the Message and checks the CRC to",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "PHY Layer removes the CRC and forwards the GoodCRC",
    "full_path": "8 PHY Layer removes the CRC and forwards the GoodCRC",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Message to the Protocol Layer .\nProtocol Layer checks and increments the\nMessageIDCounter and stops CRCReceiveTimer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "Protocol Layer informs the Policy Engine that the",
    "full_path": "9 Protocol Layer informs the Policy Engine that the",
    "page": 426,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Message was successfully sent.\n: Policy Engine\n: Protocol\n1: Send message\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n2: Message\n3: Message + CRC 4: Message\nStart CRCReceiveTimer\nCheck MessageID against\nlocal copy\nStore copy of MessageID\n5: Message received\nConsume message6: GoodCRC\n7: GoodCRC + CRC 8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Message sentMessage Sender Message Receiver\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4278.3.2.1.2 Errors in Basic Message flow\nThere are various points during the Message flow where failures in communication or other issues can occur.\nFigure 8.3, \"Basic Message flow indicating possible errors\" is an annotated version of Figure 8.2, \"Basic Message\nExchange (Successful)\" indicating at which point issues can occur. Table 8.2, \"Potential issues in Basic Message Flow\"\ndetails the steps in the flow.\nFigure 8.3 Basic Message flow indicating possible errors\nTable 8.2 Potential issues in Basic Message Flow\nPoint Possible issues\nA 1) There is an incoming Message on the channel meaning that the PHY Layer is unable to send. In this case\nthe outgoing Message is removed from the queue and the incoming Message processed.\n2) Due to some sort of noise on the line it is not possible to transmit. In this case the outgoing Message is\nDiscarded by the PHY Layer . Retransmission is via the Protocol Layer ’s normal mechanism.\nB 1) Message does not arrive at the PHY Layer due to noise on the channel.\n2) Message arrives but has been corrupted and has a bad CRC .\nThere is no Message to pass up to the Protocol Layer on the receiver which means a GoodCRC Message is not\nsent. This leads to a CRCReceiveTimer timeout in the Message Sender.\nC 1) MessageID of received Message matches stored MessageID so this is a retry. Message is not passed\nup to the Policy Engine .\nD 1) Policy Engine receives a known Message that it was not expecting.\n2) Policy Engine receives an Unrecognized Message .\nThese cases are errors in the protocol which could lead to the generation of a Soft_Reset Message .\nE Same as point A but at the Message Receiver side.\n: Policy Engine\n: Protocol\n1: Send message\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n2: Message\n3: Message + CRC 4: Message\nStart CRCReceiveTimer\nCheck MessageID against\nlocal copy\nStore copy of MessageID\n5: Message received\nConsume message6: GoodCRC\n7: GoodCRC + CRC 8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Message sentMessage Sender Message Receiver•Message currently being received\n•Channel unavailable•Message does not arrive\n•Message has bad CRC•Message is a retry\n•Message is unexpected\n•Message is unknown•Message currently being received\n•Channel unavailable\n•GoodCRC does not arrive\n•GoodCRC has a bad CRC•GoodCRC has the wrong MessageID\n•Response is not GoodCRCA B C\nD\nE\nF\nG\nPage 428 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.4, \"Basic Message Flow with Bad followed by a Retry\" illustrates one of these cases; the basic Message flow\nwith a retry due to a bad CRC at the Message Receiver. It starts when the Message Sender's Protocol Layer at the\nbehest of its Policy Engine forms a Message that it passes to the PHY Layer . The Protocol Layer is responsible for\nretries on a “'n' strikes and you are out\" basis ( nRetryCount ). Table 8.3, \"Basic Message Flow with CRC failure\"\ndetails the steps in the flow.\nFigure 8.4 Basic Message Flow with Bad followed by a RetryF 1) GoodCRC Message response does not arrive at the Message Sender side due to the noise on the channel.\n2) GoodCRC Message response arrives but has a bad CRC .\nA GoodCRC Message is not received by the Message Sender’s Protocol Layer . This leads to a CRCReceiveTimer\ntimeout in the Message Sender.\nG 1) GoodCRC Message is received but does contain the same MessageID as the transmitted Message .\n2) A Message is received but it is not a GoodCRC Message (similar case to that of an unexpected or unknown\nMessage but this time detected in the Protocol Layer ).\nBoth of these issues indicate errors in receiving an expected GoodCRC Message which will lead to a\nCRCReceiveTimer timeout in the Protocol Layer and a subsequent retry (except for communications with Cable\nPlug s).Table 8.2 Potential issues in Basic Message Flow\nPoint Possible issues\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n4: Message\n5: Message + CRC\n6: Message\nStart CRCReceiveTimer\nCheck MessageID against\nlocal copy\nStore copy of MessageID\n7: Message received\nConsume message8: GoodCRC\n9: GoodCRC + CRC 10: GoodCRC\nCheck and increment MessageIDCounter\nReset RetryCounter\nStop CRCReceiveTimer\n11: Message sent1: Send message 2: Message\n3: Message + CRC\nStart CRCReceiveTimer\nCRCReceiveTimer expires\nRetry and increment RetryCounterMessage is not received or CRC\nis bad so message is not passed\nto the protocol layerMessage Sender Message Receiver\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 429Table 8.3 Basic Message Flow with CRC failure\nStep Message Sender Message Receiver"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Policy Engine directs Protocol Layer to send a Message .",
    "full_path": "1 Policy Engine directs Protocol Layer to send a Message .",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Protocol Layer creates the Message and passes to PHY",
    "full_path": "2 Protocol Layer creates the Message and passes to PHY",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "PHY Layer appends a CRC and sends the Message . Starts",
    "full_path": "3 PHY Layer appends a CRC and sends the Message . Starts",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "CRCReceiveTimer .PHY Layer receives no Message or a Message with an\nincorrect CRC . Nothing is passed to Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Since no response is received, the CRCReceiveTimer",
    "full_path": "4 Since no response is received, the CRCReceiveTimer",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "will expire and trigger the first retry by the Protocol\nLayer . The RetryCounter is incremented. Protocol Layer\npasses the Message to the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "PHY Layer appends a CRC and sends the Message . Starts",
    "full_path": "5 PHY Layer appends a CRC and sends the Message . Starts",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "CRCReceiveTimer .PHY Layer receives the Message and checks the CRC to\nverify the Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "PHY Layer removes the CRC and forwards the Message",
    "full_path": "6 PHY Layer removes the CRC and forwards the Message",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "to the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Protocol Layer checks the MessageID in the incoming",
    "full_path": "7 Protocol Layer checks the MessageID in the incoming",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Message is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer forwards the received Message\ninformation to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Protocol Layer generates a GoodCRC Message and",
    "full_path": "8 Protocol Layer generates a GoodCRC Message and",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "passes it to the PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "PHY Layer receives the Message and checks the CRC to",
    "full_path": "9 PHY Layer receives the Message and checks the CRC to",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "PHY Layer removes the CRC and forwards the GoodCRC",
    "full_path": "10 PHY Layer removes the CRC and forwards the GoodCRC",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Message to the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Protocol Layer verifies the MessageID , stops",
    "full_path": "11 Protocol Layer verifies the MessageID , stops",
    "page": 429,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "CRCReceiveTimer and resets the RetryCounter .\nProtocol Layer informs the Policy Engine that the\nMessage was successfully sent.\nPage 430 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3 Atomic Message Sequences\nThe types of Atomic Message Sequence s (AMS ) are listed in Table 8.4, \"Atomic Message Sequences\" . The following\ntables list sequences of either Message s or combinations of Message s and one or more embedded AMS es which are\nNon-interruptible . Where there is an embedded AMS the entire Message sequence is treated as an AMS and the Rp\nvalue used for Collision Avoidance (see Section 5.7, \"Collision Avoidance\" ) Shall only be changed on leaving or\nentering the ready state at the beginning or end of the entire Message sequence, and not at the start or end of the\nembedded AMS .\nNote: An AMS is has not started until the first Message in the sequence has been successfully sent (i.e., a\nGoodCRC Message has been received acknowledging the Message ).\nTable 8.31, \"AMS: Hard Reset\" details a Hard Reset (which is Signaling not an AMS ) followed by an SPR Contract\nNegotiation AMS which Shall be treated as Non-interruptible .\nTable 8.4 Atomic Message Sequences\nType of AMS Table Reference Section Reference\nPower Negotiation (SPR) Table 8.5, \"AMS: Power Negotiation (SPR)\" Section 8.3.2.2.1\nPower Negotiation (EPR) Table 8.6, \"AMS: Power Negotiation (EPR)\" Section 8.3.2.2.2\nUnsupported Message Table 8.7, \"AMS: Unsupported Message\" Section 8.3.2.3\nSoft Reset Table 8.8, \"AMS: Soft Reset\" Section 8.3.2.4\nData Reset Table 8.9, \"AMS: Data Reset\" Section 8.3.2.5\nHard Reset Table 8.31, \"AMS: Hard Reset\" Section 8.3.2.6\nPower Role Swap Table 8.10, \"AMS: Power Role Swap\" Section 8.3.2.7\nFast Role Swap Table 8.11, \"AMS: Fast Role Swap\" Section 8.3.2.8\nData Role Swap Table 8.12, \"AMS: Data Role Swap\" Section 8.3.2.9\nVCONN Swap Table 8.13, \"AMS: V CONN Swap\" Section 8.3.2.10\nAlert Table 8.14, \"AMS: Alert\" Section 8.3.2.11.1\nStatus Table 8.15, \"AMS: Status\" Section 8.3.2.11.2\nSource Capabilities /\nSink Capabilities (SPR)Table 8.16, \"AMS: Source/Sink Capabilities (SPR)\" Section 8.3.2.11.3.1\nSource Capabilities /\nSink Capabilities (EPR)Table 8.17, \"AMS: Source/Sink Capabilities (EPR)\" Section 8.3.2.11.3.2\nExtended Capabilities Table 8.18, \"AMS: Extended Capabilities\" Section 8.3.2.11.4\nBattery Capabilities and Status Table 8.19, \"AMS: Battery Capabilities\" Section 8.3.2.11.5\nManufacturer Information Table 8.20, \"AMS: Manufacturer Information\" Section 8.3.2.11.6\nCountry Codes Table 8.21, \"AMS: Country Codes\" Section 8.3.2.11.7\nCountry Information Table 8.22, \"AMS: Country Information\" Section 8.3.2.11.8\nRevision Information Table 8.23, \"AMS: Revision Information\" Section 8.3.2.11.9\nSource Information Table 8.24, \"AMS: Source Information\" Section 8.3.2.11.10\nSecurity Table 8.25, \"AMS: Security\" Section 8.3.2.12\nFirmware Update Table 8.26, \"AMS: Firmware Update\" Section 8.3.2.13\nStructured VDM Table 8.27, \"AMS: Structured VDM\" Section 8.3.2.14\nBuilt-In Self-Test (BIST) Table 8.28, \"AMS: Built-In Self-Test (BIST)\" Section 8.3.2.15\nEnter USB Table 8.29, \"AMS: Enter USB\" Section 8.3.2.16\nUnstructured VDM Table 8.30, \"AMS: Unstructured VDM\" Section 8.3.2.17\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4318.3.2.1.3.1 AMS: Power Negotiation (SPR)\nTable 8.5 AMS: Power Negotiation (SPR)\nAMS Message Sequence Conditions AMS Ref State Machine\nRef\nSPR Explicit Contract\nNegotiation (Accept)1. Source_Capabilities\nMessage\n2. Request Message\n3. Accept Message\n4. PS_RDY Message\nStarted by Source ,\nSPR ModeSection 8.3.2.2.1.1.1\nSection 8.3.3.2 ,\nSection 8.3.3.3SPR Explicit Contract\nNegotiation (Reject)1. Source_Capabilities\nMessage\n2. Request Message\n3. Reject MessageSection 8.3.2.2.1.1.2\nSPR Explicit Contract\nNegotiation (Wait)1. Source_Capabilities\nMessage\n2. Request Message\n3. Wait MessageSection 8.3.2.2.1.1.3\nSPR PPS Keep Alive1. Request Message\n2. Accept Message\n3. PS_RDY Message\nStarted by Sink ,\nSPR ModeSection 8.3.2.2.1.2 Section 8.3.3.3\nSPR Sink Makes Request\n(Accept)1. Request Message\n2. Accept Message\n3. PS_RDY MessageSection 8.3.2.2.1.3.1\nSection 8.3.3.2 ,\nSection 8.3.3.3SPR Sink Makes Request\n(Reject)1. Request Message\n2. Reject MessageSection 8.3.2.2.1.3.2\nSPR Sink Makes Request\n(Wait)1. Request Message\n2. Wait MessageSection 8.3.2.2.1.3.3\nPage 432 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.2 AMS: Power Negotiation (EPR)\nTable 8.6 AMS: Power Negotiation (EPR)\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nEntering EPR Mode\n(Success)1. EPR_Mode (Enter)\nMessage\n2. EPR_Mode (Enter\nAcknowledge) Message\n3. VCONN Source Swap,\ninitiated by non- VCONN\nSource (Accept) AMS\n(Optional ).\n4. Initiator to Responder\nDiscover Identity (ACK)\nAMS ( Optional for\nSources with captive\ncables)\n5. EPR_Mode (Enter\nSucceeded) Message\n6. EPR Explicit Contract\nNegotiation AMSStarted by Sink ,\nSPR ModeSection 8.3.2.2.2.1 ,\nSection 8.3.2.10.1 ,\nSection 8.3.2.10.2 ,\nSection 8.3.2.12.3 ,\nSection 8.3.2.2.2.4Section 8.3.3.25.1 ,\nSection 8.3.3.25.2 ,\nSection 8.3.3.19 ,\nSection 8.3.3.20.1 ,\nSection 8.3.3.21.1 ,\nSection 8.3.3.2 ,\nSection 8.3.3.3\nEntering EPR Mode\n(Failure due to non- EPR\nCable )1. EPR_Mode (Enter)\nMessage\n2. EPR_Mode (Enter\nAcknowledge) Message\n3. VCONN Source Swap,\ninitiated by non- VCONN\nSource (Accept)\nAMS( Optional ).\n4. Initiator to Responder\nDiscover Identity (ACK)\nAMS ( Optional for\nSources with captive\ncables)\n5. EPR_Mode (Enter Failed)\nMessageStarted by Sink ,\nSPR ModeSection 8.3.2.2.2.2 ,\nSection 8.3.2.10.1 ,\nSection 8.3.2.10.2 ,\nSection 8.3.2.12.3Section 8.3.3.25.1 ,\nSection 8.3.3.25.2 ,\nSection 8.3.3.19 ,\nSection 8.3.3.20.1 ,\nSection 8.3.3.21.1\nEntering EPR Mode\n(Failure of VCONN Swap )1. EPR_Mode (Enter)\nMessage .\n2. EPR_Mode (Enter\nAcknowledge) Message .\n3. VCONN Source Swap,\ninitiated by non- VCONN\nSource (Reject )\nAMS( Optional ).\n4. EPR_Mode (Enter Failed)\nMessageStarted by Sink ,\nSPR ModeSection 8.3.2.2.2.3 ,\nSection 8.3.2.10.1 ,\nSection 8.3.2.10.2Section 8.3.3.25.1 ,\nSection 8.3.3.25.2 ,\nSection 8.3.3.19\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 433EPR Explicit Contract\nNegotiation (Accept)1. EPR_Source_Capabilities\nMessage\n2. EPR_Request Message\n3. Accept Message\n4. PS_RDY MessageStarted by Source ,\nEPR ModeSection 8.3.2.2.2.2.1\nSection 8.3.3.2 ,\nSection 8.3.3.3EPR Explicit Contract\nNegotiation (Reject)1. EPR_Source_Capabilities\nMessage\n2. EPR_Request Message\n3. Reject MessageSection 8.3.2.2.2.2.2\nEPR Explicit Contract\nNegotiation (Wait)1. EPR_Source_Capabilities\nMessage\n2. EPR_Request Message\n3. Wait MessageSection 8.3.2.2.2.2.3\nEPR Keep Alive1. EPR_KeepAlive Message\n2. EPR_KeepAlive_Ack\nMessageStarted by Sink ,\nEPR ModeSection 8.3.2.2.2.3\nExiting EPR Mode (Sink\nInitiated)1. EPR_Mode (Exit)\nMessage\n2. SPR Explicit Contract\nNegotiation AMSStarted by Sink ,\nEPR ModeSection 8.3.2.2.2.4.1 ,\nSection 8.3.2.2.1.1Section 8.3.3.25.3 ,\nSection 8.3.3.25.4 ,\nSection 8.3.3.2 ,\nSection 8.3.3.3 Exiting EPR Mode\n(Source Initiated)1. EPR_Mode (Exit)\nMessage\n2. SPR Explicit Contract\nNegotiation AMSStarted by Source ,\nEPR ModeSection 8.3.2.2.2.4.2 ,\nSection 8.3.2.2.1.1\nEPR Sink Makes\nRequest (Accept)1. EPR_Request Message\n2. Accept Message\n3. PS_RDY MessageStarted by Sink ,\nEPR ModeSection 8.3.2.2.2.5.1\nSection 8.3.3.2 ,\nSection 8.3.3.3EPR Sink Makes\nRequest (Reject)1. EPR_Request Message\n2. Reject MessageStarted by Sink ,\nEPR ModeSection 8.3.2.2.2.5.2\nEPR Sink Makes\nRequest (Wait)1. EPR_Request Message\n2. Wait MessageStarted by Sink ,\nEPR ModeSection 8.3.2.2.2.5.3Table 8.6 AMS: Power Negotiation (EPR)\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nPage 434 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.3 AMS: Unsupported Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.4",
    "title": "AMS: Soft Reset",
    "full_path": "8.3.2.1.3.4 AMS: Soft Reset",
    "page": 434,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.5",
    "title": "AMS: Data ResetTable 8.7 AMS: Unsupported Message",
    "full_path": "8.3.2.1.3.5 AMS: Data ResetTable 8.7 AMS: Unsupported Message",
    "page": 434,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State\nMachine Ref\nUnsupported Message1. Any Message which is not supported\nby the Source or Sink\n2. Not_Supported MessageStarted by\nSource or SinkSection 8.3.2.3Section\n8.3.3.6.2\nTable 8.8 AMS: Soft Reset\nAMS Message Sequence Conditions AMS Ref State\nMachine Ref\nSoft Reset1. Soft_Reset Message\n2. Accept Message\n3. In SPR Mode : SPR Explicit Contract\nNegotiation AMS\n4. or in EPR Mode : EPR Explicit Contract\nNegotiation AMS. Started by\nSource or SinkSection 8.3.2.4 ,\nSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1.1",
    "title": ",",
    "full_path": "8.3.2.2.1.1 ,",
    "page": 434,
    "level": 6,
    "parent_id": "8.3.2.2.1",
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1.1",
    "title": ",",
    "full_path": "8.3.2.2.1.1 ,",
    "page": 434,
    "level": 6,
    "parent_id": "8.3.2.2.1",
    "tags": [],
    "content": "Section\n8.3.2.2.2.2Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.1",
    "title": ",",
    "full_path": "8.3.3.4.1 ,",
    "page": 434,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.2",
    "title": ",",
    "full_path": "8.3.3.4.2 ,",
    "page": 434,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.1",
    "title": ",",
    "full_path": "8.3.3.25.2.1 ,",
    "page": 434,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.3",
    "title": ",",
    "full_path": "8.3.3.25.2.3 ,",
    "page": 434,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.4",
    "title": ",",
    "full_path": "8.3.3.25.2.4 ,",
    "page": 434,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section 8.3.3.2 ,\nSection 8.3.3.3\nTable 8.9 AMS: Data Reset\nAMS Message Sequence Conditions AMS Ref State\nMachine Ref\nDFP Initiated Data Reset\nwhere the DFP is the VCONN\nSource1. Data_Reset Message\n2. Accept Message\n3. Data_Reset_Complete MessageStarted by DFP Section 8.3.2.5.1\nSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1",
    "title": ",",
    "full_path": "8.3.3.5.1 ,",
    "page": 434,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section\n8.3.3.5.2DFP Receives Data Reset\nwhere the DFP is the VCONN\nSource1. Data_Reset Message\n2. Accept Message\n3. Data_Reset_Complete MessageStarted by UFP Section 8.3.2.5.2\nDFP Initiated Data Reset\nwhere the UFP is the VCONN\nSource1. Data_Reset Message\n2. Accept Message\n3. PS_RDY Message\n4. Data_Reset_Complete MessageStarted by DFP Section 8.3.2.5.3\nDFP Receives Data Reset\nwhere the UFP is the VCONN\nSource1. Data_Reset Message\n2. Accept Message\n3. PS_RDY Message\n4. Data_Reset_Complete MessageStarted by UFP Section 8.3.2.5.4\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4358.3.2.1.3.6 AMS: Power Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.7",
    "title": "AMS: Fast Role SwapTable 8.10 AMS: Power Role Swap",
    "full_path": "8.3.2.1.3.7 AMS: Fast Role SwapTable 8.10 AMS: Power Role Swap",
    "page": 435,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State\nMachine Ref\nSource Initiated Power Role\nSwap (Accept)1. PR_Swap Message\n2. Accept Message\n3. PS_RDY Message\n4. PS_RDY Message\n5. SPR Explicit Contract Negotiation\nAMSStarted by\nSourceSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.7.1.1",
    "title": ",",
    "full_path": "8.3.2.7.1.1 ,",
    "page": 435,
    "level": 6,
    "parent_id": "8.3.2.7.1",
    "tags": [],
    "content": "Section\n8.3.2.2.1.1\nSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3",
    "title": ",",
    "full_path": "8.3.3.19.3 ,",
    "page": 435,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4",
    "title": ",",
    "full_path": "8.3.3.19.4 ,",
    "page": 435,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section 8.3.3.2 ,\nSection 8.3.3.3Source Initiated Power Role\nSwap (Reject)1. PR_Swap Message\n2. Reject MessageSection\n8.3.2.7.1.2\nSource Initiated Power Role\nSwap (Wait)1. PR_Swap Message\n2. Wait MessageSection\n8.3.2.7.1.1\nSink Initiated Power Role\nSwap (Accept)1. PR_Swap Message\n2. Accept Message\n3. PS_RDY Message\n4. PS_RDY Message\n5. SPR Explicit Contract Negotiation\nAMSStarted by SinkSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.7.2.1",
    "title": ",",
    "full_path": "8.3.2.7.2.1 ,",
    "page": 435,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section\n8.3.2.2.1.1\nSink Initiated Power Role\nSwap (Reject)1. PR_Swap Message\n2. Reject MessageSection\n8.3.2.7.2.2\nSink Initiated Power Role\nSwap (Wait)1. PR_Swap Message\n2. Wait MessageSection\n8.3.2.7.2.3\nTable 8.11 AMS: Fast Role Swap\nAMS Message Sequence Conditio\nnsAMS Ref State Machine\nRef\nFast Role Swap1. FR_Swap Message\n2. Accept Message\n3. PS_RDY Message\n4. PS_RDY Message\n5. SPR Explicit Contract Negotiation\nAMSStarted by\nSinkSection 8.3.2.8 ,\nSection 8.3.2.2.1.1Section 8.3.3.2 ,\nSection 8.3.3.3 ,\nSection 8.3.3.19.5 ,\nSection 8.3.3.19.6\nPage 436 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.8 AMS: Data Role Swap\nTable 8.12 AMS: Data Role Swap\nAMS Message Sequence Conditions AMS Ref State\nMachine\nRef\nData Role Swap , Initiated by\nUFP Operating as Sink\n(Accept)1. DR_Swap Message\n2. Accept Message Started by SinkSection\n8.3.2.9.1.1\nSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1",
    "title": ",",
    "full_path": "8.3.3.19.1 ,",
    "page": 436,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Section\n8.3.3.19.2Data Role Swap , Initiated by\nUFP Operating as Sink\n(Reject)1. DR_Swap Message\n2. Reject MessageSection\n8.3.2.9.1.2\nData Role Swap , Initiated by\nUFP Operating as Sink\n(Wait)1. DR_Swap Message\n2. Wait MessageSection\n8.3.2.9.1.3\nData Role Swap , Initiated by\nUFP Operating as Source\n(Accept)1. DR_Swap Message\n2. Accept MessageStarted by\nSourceSection\n8.3.2.9.2.1\nData Role Swap , Initiated by\nUFP Operating as Source\n(Reject)1. DR_Swap Message\n2. Reject MessageSection\n8.3.2.9.2.2\nData Role Swap , Initiated by\nUFP Operating as Source\n(Wait)1. DR_Swap Message\n2. Wait MessageSection\n8.3.2.9.2.3\nData Role Swap , Initiated by\nDFP Operating as Source\n(Accept)1. DR_Swap Message\n2. Accept MessageStarted by\nSourceSection\n8.3.2.9.3.1\nData Role Swap , Initiated by\nDFP Operating as Source\n(Reject)1. DR_Swap Message\n2. Reject MessageSection\n8.3.2.9.3.2\nData Role Swap , Initiated by\nDFP Operating as Source\n(Wait)1. DR_Swap Message\n2. Wait MessageSection\n8.3.2.9.3.3\nData Role Swap , Initiated by\nDFP Operating as Sink\n(Accept)1. DR_Swap Message\n2. Accept Message Started by SinkSection\n8.3.2.9.4.1\nData Role Swap , Initiated by\nDFP Operating as Sink\n(Reject)1. DR_Swap Message\n2. Reject MessageSection\n8.3.2.9.4.2\nData Role Swap , Initiated by\nDFP Operating as Sink\n(Wait)1. DR_Swap Message\n2. Wait MessageSection\n8.3.2.9.4.3\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4378.3.2.1.3.9 AMS: V CONN Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.10",
    "title": "AMS: AlertTable 8.13 AMS: V CONN Swap",
    "full_path": "8.3.2.1.3.10 AMS: AlertTable 8.13 AMS: V CONN Swap",
    "page": 437,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State Machine\nRef\nVCONN Source Swap,\ninitiated by VCONN\nSource (Accept)1. VCONN _Swap Message\n2. Accept Message\n3. PS_RDY MessageStarted by VCONN SourceSection\n8.3.2.10.1.1\nSection 8.3.3.20VCONN Source Swap,\ninitiated by VCONN\nSource (Reject)1. VCONN _Swap Message\n2. Reject MessageSection\n8.3.2.10.1.2\nVCONN Source Swap,\ninitiated by VCONN\nSource (Wait)1. VCONN _Swap Message\n2. Wait MessageSection\n8.3.2.10.1.3\nVCONN Source Swap,\ninitiated by non-\nVCONN Source\n(Accept)1. VCONN _Swap Message\n2. Accept Message\n3. PS_RDY MessageStarted by non- VCONN SourceSection\n8.3.2.10.2.1\nVCONN Source Swap,\ninitiated by non-\nVCONN Source\n(Reject)1. VCONN _Swap Message\n2. Reject MessageSection\n8.3.2.10.2.2\nVCONN Source Swap,\ninitiated by non-\nVCONN Source (Wait)1. VCONN _Swap Message\n2. Wait MessageSection\n8.3.2.10.2.3\nTable 8.14 AMS: Alert\nAMS Message Sequence Conditions AMS Ref AMS Ref\nSource sends Alert to\na Sink\n(SenderResponseTi\nmer Timeout)1. Alert Message\nStarted by SourceSection\n8.3.2.11.1.1Section 8.3.3.7.1 ,\nSection 8.3.3.7.2Source sends Alert to\na Sink (Get_Status\nMessage )1. Alert Message\n2. Sink Gets Source Status AMS\nSink sends Alert to a\nSource\n(SenderResponseTi\nmer Timeout)1. Alert Message\nStarted by SinkSection\n8.3.2.11.1.2Section 8.3.3.7.3 ,\nSection 8.3.3.7.4Sink sends Alert to a\nSource (Get_Status\nMessage )1. Alert Message\n2. Source Gets Sink Status AMS\nPage 438 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.11 AMS: Status"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.12",
    "title": "AMS: Source/Sink Capabilities (SPR)Table 8.15 AMS: Status",
    "full_path": "8.3.2.1.3.12 AMS: Source/Sink Capabilities (SPR)Table 8.15 AMS: Status",
    "page": 438,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State Machine\nRef\nSink Gets Source\nStatus1. Get_Status Message\n2. Status Message Started by Sink\nStarted by SourceSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.2.1",
    "title": ",",
    "full_path": "8.3.2.11.2.1 ,",
    "page": 438,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section\n8.3.2.11.2.2Section 8.3.3.10.1 ,\nSection 8.3.3.10.2Source Gets Sink\nStatus1. Get_Status Message\n2. Status Message\nVCONN Source Gets\nCable Plug Status1. Get_Status Message\n2. Status Message Started by VCONN Source\nStarted by SinkSection"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.2.3",
    "title": ",",
    "full_path": "8.3.2.11.2.3 ,",
    "page": 438,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Section\n8.3.2.11.2.4Sink Gets Source PPS\nStatus1. Get_PPS_Status Message\n2. PPS_Status MessageSection 8.3.3.10.3 ,\nSection 8.3.3.10.4\nTable 8.16 AMS: Source/Sink Capabilities (SPR)\nAMS Message Sequence Conditions AMS Ref State Machine\nRef\nSink Gets Source\nCapabilities (EPR\nMode )1. Get_Source_Cap Message\n2. Source_Capabilities\nMessage\nStarted by SinkSection 8.3.2.11.3.1.1 ,\nSection 8.3.2.2.1.3.1 ,\nSection 8.3.2.2.1.3.2 ,\nSection 8.3.2.2.1.3.3Section 8.3.3.2 ,\nSection 8.3.3.3 ,Sink Gets Source\nCapabilities\n(Accept in SPR\nMode )1. Get_Source_Cap Message\n2. Source_Capabilities\nMessage\n3. In SPR Mode only: SPR Sink\nMakes Request (Accept) AMS\nSink Gets Source\nCapabilities (Reject\nin SPR Mode )1. Get_Source_Cap Message\n2. Source_Capabilities\nMessage\n3. In SPR Mode only: SPR Sink\nMakes Request (Reject) AMS\nSink Gets Source\nCapabilities (Wait\nin SPR Mode )1. Get_Source_Cap Message\n2. Source_Capabilities\nMessage\n3. In SPR Mode only: SPR Sink\nMakes Request (Wait) AMS\nDual-Role Power\nSource Gets Source\nCapabilities from a\nDual-Role Power\nSink1. Get_Source_Cap Message\n2. Source_Capabilities\nMessage Started by Source Section 8.3.2.11.3.1.2Section 8.3.3.19.7 ,\nSection 8.3.3.19.10\nSource Gets Sink\nCapabilities1. Get_Sink_Cap Message\n2. Sink_Capabilities MessageStarted by Source Section 8.3.2.11.3.1.3Section 8.3.3.2 ,\nSection 8.3.3.3 ,\nDual-Role Power\nSink Get Sink\nCapabilities from a\nDual-Role Power\nSource1. Get_Sink_Cap Message\n2. Sink_Capabilities Message\nStarted by Sink Section 8.3.2.11.3.1.4Section 8.3.3.19.9 ,\nSection 8.3.3.19.8\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4398.3.2.1.3.13 AMS: Source/Sink Capabilities (EPR)\nTable 8.17 AMS: Source/Sink Capabilities (EPR)\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSink Gets EPR\nSource Capabilities\n(SPR Mode )1. EPR_Get_Source_Cap\nMessage\n2. EPR_Source_Capabilities\nMessage\nStarted by SinkSection 8.3.2.11.3.2.1 ,\nSection 8.3.2.2.2.5.1 ,\nSection 8.3.2.2.2.5.2 ,\nSection 8.3.2.2.2.5.3Section 8.3.3.2 ,\nSection 8.3.3.3 ,Sink Gets EPR\nSource Capabilities\n(Accept in EPR\nMode )1. EPR_Get_Source_Cap\nMessage\n2. EPR_Source_Capabilities\nMessage\n3. In EPR Mode only: EPR Sink\nMakes Request (Accept) AMS\nSink Gets EPR\nSource Capabilities\n(Reject in EPR Mode )1. EPR_Get_Source_Cap\nMessage\n2. EPR_Source_Capabilities\nMessage\n3. In EPR Mode only: EPR Sink\nMakes Request (Reject) AMS\nSink Gets EPR\nSource Capabilities\n(Wait in EPR Mode )1. EPR_Get_Source_Cap\nMessage\n2. EPR_Source_Capabilities\nMessage\n3. In EPR Mode only: EPR Sink\nMakes Request (Wait) AMS\nDual-Role Power\nSource Gets Source\nCapabilities from a\nDual-Role Power\nEPR Sink1. EPR_Get_Source_Cap\nMessage\n2. EPR_Source_Capabilities\nMessageStarted by\nSourceSection 8.3.2.11.3.2.2Section 8.3.3.19.7 ,\nSection 8.3.3.19.10\nSource Gets Sink EPR\nCapabilities1. EPR_Get_Sink_Cap Message\n2. EPR_Sink_Capabilities\nMessageStarted by\nSourceSection 8.3.2.11.3.2.3Section 8.3.3.2 ,\nSection 8.3.3.3 ,\nDual-Role Power\nSink Get Sink EPR\nCapabilities from a\nDual-Role Power\nSource1. EPR_Get_Sink_Cap Message\n2. EPR_Sink_Capabilities\nMessage Started by Sink Section 8.3.2.11.3.2.4Section 8.3.3.19.8 ,\nSection 8.3.3.19.9\nPage 440 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.14 AMS: Extended Capabilities"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.15",
    "title": "AMS: Battery CapabilitiesTable 8.18 AMS: Extended Capabilities",
    "full_path": "8.3.2.1.3.15 AMS: Battery CapabilitiesTable 8.18 AMS: Extended Capabilities",
    "page": 440,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Interruptible Message\nSequenceConditions AMS Ref\nSink Gets Source\nExtended\nCapabilities1. Get_Source_Cap_Extended\nMessage\n2. Source_Capabilities_Extended M\nessageStarted by Sink Section 8.3.2.11.4.1Section 8.3.3.8.1 ,\nSection 8.3.3.8.2\nDual-Role Power\nSource Gets Source\nExtended\nCapabilities from a\nDual-Role Power\nSink1. Get_Source_Cap_Extended\nMessage\n2. Source_Capabilities_Extended M\nessageStarted by\nSourceSection 8.3.2.11.4.2Section 8.3.3.19.11 ,\nSection 8.3.3.19.12\nSource Gets Sink\nExtended\nCapabilities1. Get_Sink_Cap_Extended\nMessage\n2. Sink_Capabilities_Extended\nMessageStarted by\nSourceSection 8.3.2.11.4.3Section 8.3.3.8.3 ,\nSection 8.3.3.8.4\nDual-Role Power\nSink Gets Sink\nExtended\nCapabilities from a\nDual-Role Power\nSource1. Get_Sink_Cap_Extended\nMessage\n2. Sink_Capabilities_Extended\nMessageStarted by Sink Section 8.3.2.11.4.4Section 8.3.3.19.13 ,\nSection 8.3.3.19.14\nTable 8.19 AMS: Battery Capabilities\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSink Gets Battery\nCapabilities1. Get_Battery_Cap Message\n2. Battery_Capabilities\nMessageStarted by Sink Section 8.3.2.11.5.1\nSection 8.3.3.11.1 ,\nSection 8.3.3.11.2\nSource Gets Battery\nCapabilities1. Get_Battery_Cap Message\n2. Battery_Capabilities\nMessageStarted by\nSourceSection 8.3.2.11.5.2\nSink Gets Battery\nStatus1. Get_Battery_Status Message\n2. Battery_Status MessageStarted by Sink Section 8.3.2.11.5.3\nSection 8.3.3.12.1 ,\nSection 8.3.3.12.2 Sink Gets Battery\nStatus1. Get_Battery_Cap Message\n2. Battery_Status MessageStarted by Sink Section 8.3.2.11.5.4\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4418.3.2.1.3.16 AMS: Manufacturer Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.17",
    "title": "AMS: Country Codes",
    "full_path": "8.3.2.1.3.17 AMS: Country Codes",
    "page": 441,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.18",
    "title": "AMS: Country InformationTable 8.20 AMS: Manufacturer Information",
    "full_path": "8.3.2.1.3.18 AMS: Country InformationTable 8.20 AMS: Manufacturer Information",
    "page": 441,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State Machine\nRef\nSource Gets Port\nManufacturer\nInformation from a Sink1. Get_Manufacturer_Info Message\n2. Manufacturer_Info MessageStarted by\nSourceSection 8.3.2.11.6.1\nSection 8.3.3.12.1 ,\nSection 8.3.3.12.2Sink Gets Port\nManufacturer\nInformation from a\nSource1. Get_Manufacturer_Info Message\n2. Manufacturer_Info MessageStarted by Sink Section 8.3.2.11.6.2\nSource Gets Battery\nManufacturer\nInformation from a Sink1. Get_Manufacturer_Info Message\n2. Manufacturer_Info MessageStarted by\nSourceSection 8.3.2.11.6.3\nSink Gets Battery\nManufacturer\nInformation from a\nSource1. Get_Manufacturer_Info Message\n2. Manufacturer_Info MessageStarted by Sink Section 8.3.2.11.6.4\nVCONN Source Gets\nManufacturer\nInformation from a Cable\nPlug1. Get_Manufacturer_Info Message\n2. Manufacturer_Info Message Started by\nVCONN SourceSection 8.3.2.11.6.5\nTable 8.21 AMS: Country Codes\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSource Gets Country\nCodes from a Sink1. Get_Country_Codes Message\n2. Country_Codes MessageStarted by\nSourceSection 8.3.2.11.7.1\nSection 8.3.3.14.1 ,\nSection 8.3.3.14.2Sink Gets Country\nCodes from a Source1. Get_Country_Codes Message\n2. Country_Codes MessageStarted by Sink Section 8.3.2.11.7.2\nVCONN Source Gets\nCountry Codes from\na Cable Plug1. Get_Country_Codes Message\n2. Country_Codes MessageStarted by\nVCONN SourceSection 8.3.2.11.7.3\nTable 8.22 AMS: Country Information\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSource Gets Country\nInformation from a\nSink1. Get_Country_Info Message\n2. Country_Info MessageStarted by\nSourceSection 8.3.2.11.8.1\nSection 8.3.3.14.3 ,\nSection 8.3.3.14.4Sink Gets Country\nInformation from a\nSource1. Get_Country_Info Message\n2. Country_Info Message Started by Sink Section 8.3.2.11.8.2\nVCONN Source Gets\nCountry Information\nfrom a Cable Plug1. Get_Country_Info Message\n2. Country_Info MessageStarted by\nVCONN SourceSection 8.3.2.11.8.3\nPage 442 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.19 AMS: Revision Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.20",
    "title": "AMS: Source Information",
    "full_path": "8.3.2.1.3.20 AMS: Source Information",
    "page": 442,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.21",
    "title": "AMS: SecurityTable 8.23 AMS: Revision Information",
    "full_path": "8.3.2.1.3.21 AMS: SecurityTable 8.23 AMS: Revision Information",
    "page": 442,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State Machine Ref\nSource Gets Revision\nInformation from a\nSink1. Get_Revision Message\n2. Revision MessageStarted by\nSourceSection 8.3.2.11.9.1\nSection 8.3.3.15.1 ,\nSection 8.3.3.15.2Sink Gets Revision\nInformation from a\nSource1. Get_Revision Message\n2. Revision Message Started by Sink Section 8.3.2.11.9.2\nVCONN Source Gets\nRevision\nInformation from a\nCable Plug1. Get_Revision Message\n2. Revision MessageStarted by\nVCONN SourceSection 8.3.2.11.9.1\nTable 8.24 AMS: Source Information\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSink Gets Source\nInformation1. Get_Source_Cap_Extended\nMessage\n2. Source_Capabilities_Extended M\nessageStarted by Sink Section 8.3.2.11.10.1Section 8.3.3.9.1 ,\nSection 8.3.3.9.2\nDual-Role Power\nSource Gets Source\nInformation from a\nDual-Role Power\nSink1. Get_Source_Cap_Extended\nMessage\n2. Source_Capabilities_Extended M\nessageStarted by\nSourceSection 8.3.2.11.10.2Section 8.3.3.19.15 ,\nSection 8.3.3.19.16\nTable 8.25 AMS: Security\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSource requests\nsecurity exchange\nwith Sink1. Security_Request MessageStarted by\nSourceSection 8.3.2.12.1\nSection 8.3.3.17.1 ,\nSection 8.3.3.17.2 ,\nSection 8.3.3.17.3Sink requests\nsecurity exchange\nwith Source1. Security_Request Message\nStarted by Sink Section 8.3.2.12.2\nVCONN Source\nrequests security\nexchange with Cable\nPlug1. Security_Request Message\nStarted by\nVCONN SourceSection 8.3.2.12.3\nSource responds to\nsecurity exchange\nwith Sink1. Security_Response MessageStarted by\nSourceSection 8.3.2.12.1\nSink responds to\nsecurity exchange\nwith Source1. Security_Response Message\nStarted by Sink Section 8.3.2.12.2\nVCONN Source\nrequests security\nexchange with Cable\nPlug1. Security_Response Message\nStarted by\nVCONN SourceSection 8.3.2.12.3\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4438.3.2.1.3.22 AMS: Firmware Update\nTable 8.26 AMS: Firmware Update\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nSource requests\nfirmware update\nexchange with Sink1. Firmware_Update_Request\nMessageStarted by\nSourceSection 8.3.2.13.1\nSection 8.3.3.18.1 ,\nSection 8.3.3.18.2 ,\nSection 8.3.3.18.3Sink requests\nfirmware update\nexchange with\nSource1. Firmware_Update_Request\nMessageStarted by Sink Section 8.3.2.13.2\nVCONN Source\nrequests firmware\nupdate exchange\nwith Cable Plug1. Firmware_Update_Request\nMessage Started by\nVCONN SourceSection 8.3.2.13.3\nSource responds to\nfirmware update\nexchange with Sink1. Firmware_Update_Response\nMessageStarted by\nSourceSection 8.3.2.13.1\nSink responds to\nfirmware update\nexchange with\nSource1. Firmware_Update_Response\nMessageStarted by Sink Section 8.3.2.13.2\nVCONN Source\nresponds to\nfirmware update\nexchange with Cable\nPlug1. Firmware_Update_Response\nMessageStarted by\nVCONN SourceSection 8.3.2.13.3\nPage 444 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.23 AMS: Structured VDM\nTable 8.27 AMS: Structured VDM\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nInitiator to\nResponder Discover\nIdentity (ACK)1. Discover Identity REQ\nCommand\n2. Discover Identity ACK\nCommand\nStarted by\nInitiatorSection 8.3.2.14.1.1\nSection 8.3.3.21.1 ,\nSection 8.3.3.22.1Initiator to\nResponder Discover\nIdentity (NAK)1. Discover Identity REQ\nCommand\n2. Discover Identity NAK\nCommandSection 8.3.2.14.1.2\nInitiator to\nResponder Discover\nIdentity (BUSY)1. Discover Identity REQ\nCommand\n2. Discover Identity BUSY\nCommandSection 8.3.2.14.1.3\nInitiator to\nResponder Discover\nSVID s (ACK)1. Discover SVIDs REQ\nCommand\n2. Discover SVIDs ACK CommandSection 8.3.2.14.2.1\nSection 8.3.3.21.2 ,\nSection 8.3.3.22.2Initiator to\nResponder Discover\nSVID s (NAK)1. Discover SVIDs REQ\nCommand\n2. Discover SVIDs NAK\nCommandSection 8.3.2.14.2.2\nInitiator to\nResponder Discover\nSVID s (BUSY)1. Discover SVIDs REQ\nCommand\n2. Discover SVIDs BUSY\nCommandSection 8.3.2.14.2.3\nInitiator to\nResponder Discover\nModes (ACK)1. Discover Modes REQ\nCommand\n2. Discover Modes ACK\nCommandSection 8.3.2.14.3.1\nSection 8.3.3.21.3 ,\nSection 8.3.3.22.3Initiator to\nResponder Discover\nModes (NAK)1. Discover Modes REQ\nCommand\n2. Discover Modes NAK\nCommandSection 8.3.2.14.3.2\nInitiator to\nResponder Discover\nModes (BUSY)1. Discover Modes REQ\nCommand\n2. Discover Modes BUSY\nCommandSection 8.3.2.14.3.3\nDFP to UFP Enter\nMode1. Enter Mode REQ Command\n2. Enter Mode ACK Command\nStarted by DFPSection 8.3.2.14.4.1Section 8.3.3.23.1 ,\nSection 8.3.3.24.1\nDFP to UFP Exit\nMode1. Exit Mode REQ Command\n2. Exit Mode ACK CommandSection 8.3.2.14.4.2Section 8.3.3.23.2 ,\nSection 8.3.3.24.2\nDFP to Cable Plug\nEnter Mode1. Enter Mode REQ Command\n2. Enter Mode ACK CommandSection 8.3.2.14.4.3Section 8.3.3.23.1 ,\nSection 8.3.3.25.4.1\nDFP to Cable Plug\nExit Mode1. Exit Mode REQ Command\n2. Exit Mode ACK CommandSection 8.3.2.14.4.4Section 8.3.3.23.2 ,\nSection 8.3.3.25.4.2\nInitiator to\nResponder Attention1. Attention REQ Command Started by\nInitiatorSection 8.3.2.14.4.5Section 8.3.3.21.4 ,\nSection 8.3.3.22.4\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4458.3.2.1.3.24 AMS: Built-In Self-Test (BIST)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.25",
    "title": "AMS: Enter USB",
    "full_path": "8.3.2.1.3.25 AMS: Enter USB",
    "page": 445,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.1.3.26",
    "title": "AMS: Unstructured VDMTable 8.28 AMS: Built-In Self-Test (BIST)",
    "full_path": "8.3.2.1.3.26 AMS: Unstructured VDMTable 8.28 AMS: Built-In Self-Test (BIST)",
    "page": 445,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "AMS Message Sequence Conditions AMS Ref State Machine Ref\nBIST Carrier Mode1. BIST (BIST Carrier Mode )\nMessage\nStarted by\nTesterSection 8.3.2.15.1 Section 8.3.3.27.1\nBIST Test Data Mode1. BIST (BIST Test Data )\nMessageSection 8.3.2.15.2 Section 8.3.3.27.2\nBIST Shared\nCapacity Test Mode1. BIST (BIST Shared Test Mode\nEntry ) Message\n2. Series of Messages\n3. BIST (BIST Shared Test Mode\nExit ) MessageSection 8.3.2.15.3 Section 8.3.3.27.3\nTable 8.29 AMS: Enter USB\nAMS Message Sequence Conditions AMS Ref State Machine Ref\nUFP Entering USB4®\nMode (Accept)1. Enter_USB Message\n2. Accept Message\nStarted by DFPSection 8.3.2.16.1.1\nSection 8.3.3.16.1 ,\nSection 8.3.3.16.2UFP Entering USB4\nMode (Reject)1. Enter_USB Message\n2. Reject MessageSection 8.3.2.16.1.2\nUFP Entering USB4\nMode (Wait)1. Enter_USB Message\n2. Wait MessageSection 8.3.2.16.1.3\nCable Plug Entering\nUSB4 Mode (Accept)1. Enter_USB Message\n2. Accept MessageSection 8.3.2.16.2.1\nCable Plug Entering\nUSB4 Mode (Reject)1. Enter_USB Message\n2. Reject MessageSection 8.3.2.16.2.2\nCable Plug Entering\nUSB4 Mode (Wait)1. Enter_USB Message\n2. Wait MessageSection 8.3.2.16.2.3\nTable 8.30 AMS: Unstructured VDM\nAMS Message Sequence AMS Ref State Machine Ref\nUnstructured VDM1. Unstructured Vendor_Defined\nMessageSection 8.3.2.17.1\nVDEM 1. Vendor_Defined_Extended Message Section 8.3.2.17.2\nPage 446 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.1.3.27 AMS: Hard Reset\nTable 8.31 AMS: Hard Reset\nAMS Interruptibl\neMessage Sequence Conditions AMS Ref State\nMachine Ref\nSource Initiated\nHard ResetNo1. Hard Reset Signaling\n2. SPR Explicit Contract\nNegotiation AMSStarted by\nSourceSection 8.3.2.6.1 ,\nSection 8.3.2.2.1.1\nSection 8.3.3.2 ,\nSection 8.3.3.3Sink Initiated Hard\nResetNo1. Hard Reset Signaling\n2. SPR Explicit Contract\nNegotiation AMSStarted by\nSinkSection 8.3.2.6.2 ,\nSection 8.3.2.2.1.1\nSource Initiated\nHard Reset – Sink\nLong ResetNo1. Hard Reset Signaling\n2. SPR Explicit Contract\nNegotiation AMSStarted by\nSourceSection 8.3.2.6.3 ,\nSection 8.3.2.2.1.1\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4478.3.2.2 Power Negotiation"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1",
    "title": "SPR",
    "full_path": "8.3.2.2.1 SPR",
    "page": 447,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1.1",
    "title": "SPR Explicit Contract Negotiation",
    "full_path": "8.3.2.2.1.1 SPR Explicit Contract Negotiation",
    "page": 447,
    "level": 6,
    "parent_id": "8.3.2.2.1",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1.1.1",
    "title": "SPR Explicit Contract Negotiation (Accept)",
    "full_path": "8.3.2.2.1.1.1 SPR Explicit Contract Negotiation (Accept)",
    "page": 447,
    "level": 7,
    "parent_id": "8.3.2.2.1.1",
    "tags": [],
    "content": "Figure 8.5, \"Successful Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a successful\nMessage flow while negotiating an Explicit Contract in SPR Mode . The Negotiation goes through 5 distinct phases:\n The Source sends out its power Capabilities in a Source_Capabilities Message .\n The Sink evaluates these Capabilities , and, in the request, phase selects one power level by sending a\nRequest Message .\n The Source evaluates the request and accepts the request with an Accept Message .\n The Source transitions to the new power level and then informs the Sink by sending a PS_RDY Message .\n The Sink starts using the new power level.\n For SPR PPS operation:\n the Source starts its keep alive timer.\n the Sink starts its request timer to send periodic Request Message s.\nPage 448 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.5 Successful Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Accept\n20: Accept\n21: Accept + CRC\n22: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Accept received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Accept sent\nPower supply adjusted to negotiated outputStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sentStop PSTransitionTimer\nFor PPS operation start\nPPSRequestTimer\nNew Power levelEvaluate Capabilities\nDetect plug type\nEvaluate Request\nPrepare for new powerSource Sink\nCable Capabilities detected\nPlug type detected\nFor PPS operation start\nPPSTimeoutTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 449Table 8.32, \"Steps for a successful Power Negotiation\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.5, \"Successful Fixed, Variable or Battery SPR Power Negotiation\" above.\nTable 8.32 Steps for a successful Power Negotiation\nStep Source Sink\n1The Cable Capabilities or Plug Type are detected if these\nare not already known (see Section 4.4, \"Cable Type\nDetection\" ). Policy Engine directs the Protocol Layer to\nsend a Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the Source_Capabilities\nMessage sent by the Source , detects the plug type if this is\nnecessary (see Section 4.4, \"Cable Type Detection\" ) and\nselects which power it would like. It tells the Protocol\nLayer to form the data (e.g., Power Data Object ) that\nrepresents its Request into a Message .\n11Protocol Layer creates the Request Message and passes\nto PHY Layer .\n12PHY Layer receives the Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\nPage 450 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "full_path": "16 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "page": 450,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "it calculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the Request Message sent by\nthe Sink and decides if it can meet the request. It tells the\nProtocol Layer to form an Accept Message .\n20The Protocol Layer forms the Accept Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Accept Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n22PHY Layer forwards the Accept Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer, starts the PSTransitionTimer\nand reduces its current draw.\nThe DPM prepares the Power supply for transition to\nthe new power level.\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that an\nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n28The DPM informs the Policy Engine that the power\nsupply has settled at the new operating condition and\ntells the Protocol Layer to send a PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "29",
    "title": "The Protocol Layer forms the PS_RDY Message .",
    "full_path": "29 The Protocol Layer forms the PS_RDY Message .",
    "page": 450,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "30PHY Layer appends CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n31PHY Layer forwards the PS_RDY Message to the\nProtocol Layer .Table 8.32 Steps for a successful Power Negotiation\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 45132Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY\nhas been received. The Policy Engine stops the\nPSTransitionTimer .\nWhen in SPR PPS Mode the Policy Engine starts the\nSinkPPSPeriodicTimer .\n33The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n34PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n35PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter . Stops the\nCRCReceiveTimer .\n36The Protocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\n37When in SPR PPS Mode the Policy Engine starts the\nSourcePPSCommTimer .\nNew Power Level NegotiatedTable 8.32 Steps for a successful Power Negotiation\nStep Source Sink\nPage 452 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.1.1.2 SPR Explicit Contract Negotiation (Reject)\nFigure 8.6, \"Rejected Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a Message flow\nwhere the request is rejected while negotiating an Explicit Contract in SPR Mode . The Negotiation goes through the\nfollowing phases:\n The Source sends out its power Capabilities in a Source_Capabilities Message .\n The Sink evaluates these Capabilities , and, in the request, phase selects one power level by sending a\nRequest Message .\n The Source evaluates the request and rejects the request with a Reject Message .\nFigure 8.6 Rejected Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Reject\n20: Reject\n21: Reject + CRC\n22: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Reject received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Reject sentStop SenderResponseTimerEvaluate Capabilities\nDetect plug type\nEvaluate RequestSource Sink\nCable Capabilities detected\nPlug type detected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 453Table 8.33, \"Steps for a rejected Power Negotiation\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.6, \"Rejected Fixed, Variable or Battery SPR Power Negotiation\" above.\nTable 8.33 Steps for a rejected Power Negotiation\nStep Source Sink\n1The Cable Capabilities or Plug Type are detected if these\nare not already known (see Section 4.4, \"Cable Type\nDetection\" ). Policy Engine directs the Protocol Layer to\nsend a Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the Source_Capabilities\nMessage sent by the Source , detects the plug type if this is\nnecessary (see Section 4.4, \"Cable Type Detection\" ) and\nselects which power it would like. It tells the Protocol\nLayer to form the data (e.g., Power Data Object ) that\nrepresents its Request into a Message .\n11Protocol Layer creates the Request Message and passes\nto PHY Layer .\n12PHY Layer receives the Request Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\nPage 454 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "full_path": "16 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "page": 454,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "calculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the Request Message sent by\nthe Sink and decides it can’t meet the request. It tells the\nProtocol Layer to form a Reject Message .\n20The Protocol Layer forms the Reject Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Reject Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n22PHY Layer forwards the Reject Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Reject\nMessage has been received. The Policy Engine stops\nSenderResponseTimer.\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that a\nReject Message was successfully sent.Table 8.33 Steps for a rejected Power Negotiation\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4558.3.2.2.1.1.3 SPR Explicit Contract Negotiation (Wait)\nFigure 8.7, \"Wait response to Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a Message\nflow where the request is responded to with wait while negotiating an Explicit Contract in SPR Mode . The\nNegotiation goes through the following phases:\n The Source sends out its power Capabilities in a Source_Capabilities Message .\n The Sink evaluates these Capabilities , and, in the request, phase selects one power level by sending a\nRequest Message .\n The Source evaluates the request and rejects the request with a Wait Message .\nFigure 8.7 Wait response to Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Wait\n20: Wait\n21: Wait + CRC\n22: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Wait received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Wait sentStop SenderResponseTimerEvaluate Capabilities\nDetect plug type\nEvaluate RequestSource Sink\nCable Capabilities detected\nPlug type detected\nPage 456 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.34, \"Steps for a Wait response to a Power Negotiation\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.7, \"Wait response to Fixed, Variable or Battery SPR Power Negotiation\"\nabove.\nTable 8.34 Steps for a Wait response to a Power Negotiation\nStep Source Sink\n1The Cable Capabilities or Plug Type are detected if these\nare not already known (see Section 4.4, \"Cable Type\nDetection\" ). Policy Engine directs the Protocol Layer to\nsend a Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the Source_Capabilities\nMessage sent by the Source , detects the plug type if this is\nnecessary (see Section 4.4, \"Cable Type Detection\" ) and\nselects which power it would like. It tells the Protocol\nLayer to form the data (e.g., Power Data Object ) that\nrepresents its Request into a Message .\n11Protocol Layer creates the Request Message and passes\nto PHY Layer .\n12PHY Layer receives the Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 45715The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "full_path": "16 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "page": 457,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "it calculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the Request Message sent by\nthe Sink and decides if it can meet the request. It tells the\nProtocol Layer to form a Wait Message .\n20The Protocol Layer forms the Wait Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Wait Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n22PHY Layer forwards the Wait Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Wait\nMessage has been received. The Policy Engine stops\nSenderResponseTimer .\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that a\nWait Message was successfully sent.Table 8.34 Steps for a Wait response to a Power Negotiation\nStep Source Sink\nPage 458 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.1.2 SPR PPS Keep Alive\nThis is an example of SPR PPS keep alive operation during an Explicit Contract with SPR PPS as the APDO . Figure\n8.8, \"SPR PPS Keep Alive\" shows the Message s as they flow across the bus and within the devices to accomplish the\nkeep alive.\nFigure 8.8 SPR PPS Keep Alive\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer\nStop PPSCommTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\nStop PPSRequestTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated output\nSend Ping if required to maintain activityStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sentStop PSTransitionTimer\nStart PPSRequestTimer\nNew Power levelEvaluate Request\nPrepare for new powerSource Sink\nPPSRequestTimer Timeout\nStart PPSCommTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 459Table 8.35, \"Steps for SPR PPS Keep Alive\" below provides a detailed explanation of what happens at each labeled\nstep in Figure 8.8, \"SPR PPS Keep Alive\" above.\nTable 8.35 Steps for SPR PPS Keep Alive\nStep Source Sink\n1The SinkPPSPeriodicTimer times out in the Policy\nEngine . The Policy Engine tells the Protocol Layer to\nform a Request Message .\nThe Protocol Layer creates the Request Message and\npasses it to PHY Layer .\n2PHY Layer receives the Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops the\nSourcePPSCommTimer.\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nRequest Message sent by the Sink and decides if the\nSource can meet the request. The Policy Engine tells\nthe Protocol Layer to form an Accept Message .\n10The Protocol Layer forms the Accept Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Accept Message .\nStarts CRCReceiveTimer .PHY Layer receives the Accept Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Accept Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer , starts the PSTransitionTimer\nand reduces its current draw.\nThe DPM prepares the Power supply for transition to\nthe new power level.\nPage 460 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1014The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n15PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that an\nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18The DPM informs the Policy Engine that the power\nsupply has settled at the new operating condition and\ntells the Protocol Layer to send a PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "19",
    "title": "The Protocol Layer forms the PS_RDY Message .",
    "full_path": "19 The Protocol Layer forms the PS_RDY Message .",
    "page": 460,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "20PHY Layer appends CRC and sends the PS_RDY Message .\nStarts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n21PHY Layer forwards the PS_RDY Message to the Protocol\nLayer .\n22Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY\nhas been received. The Policy Engine stops the\nPSTransitionTimer .\nWhen in SPR PPS Mode the Policy Engine starts the\nSinkPPSPeriodicTimer .\n23The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n24PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n25PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter . Stops the\nCRCReceiveTimer .\n26The Protocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\n27When in SPR PPS Mode the Policy Engine starts the\nSourcePPSCommTimer .Table 8.35 Steps for SPR PPS Keep Alive\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4618.3.2.2.1.3 SPR Sink Makes Request"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.1.3.1",
    "title": "SPR Sink Makes Request (Accept)",
    "full_path": "8.3.2.2.1.3.1 SPR Sink Makes Request (Accept)",
    "page": 461,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of SPR when a Sink makes a Request which is Accepted during an Explicit Contract . Figure 8.9,\n\"SPR Sink Makes Request (Accept)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the keep alive.\nFigure 8.9 SPR Sink Makes Request (Accept)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated outputStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sentStop PSTransitionTimer\nNew Power levelEvaluate Request\nPrepare for new powerSource Sink\nPage 462 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.36, \"Steps for SPR Sink Makes Request (Accept)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.9, \"SPR Sink Makes Request (Accept)\" above.\nTable 8.36 Steps for SPR Sink Makes Request (Accept)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form a Request Message .\nThe Protocol Layer creates the Request Message and\npasses it to PHY Layer .\n2PHY Layer receives the Request Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nRequest Message sent by the Sink and decides if the\nSource can meet the request. The Policy Engine tells\nthe Protocol Layer to form an Accept Message .\n10The Protocol Layer forms the Accept Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Accept Message .\nStarts CRCReceiveTimer .PHY Layer receives the Accept Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Accept Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer , starts the PSTransitionTimer\nand reduces its current draw.\nThe DPM prepares the Power supply for transition to\nthe new power level.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 46314The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n15PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that an\nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18The DPM informs the Policy Engine that the power\nsupply has settled at the new operating condition and\ntells the Protocol Layer to send a PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "19",
    "title": "The Protocol Layer forms the PS_RDY Message .",
    "full_path": "19 The Protocol Layer forms the PS_RDY Message .",
    "page": 463,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "20PHY Layer appends CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n21PHY Layer forwards the PS_RDY Message to the Protocol\nLayer .\n22Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY\nhas been received. The Policy Engine stops the\nPSTransitionTimer .\n23The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n24PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n25PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter . Stops the\nCRCReceiveTimer .\n26The Protocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\nNew Power Level NegotiatedTable 8.36 Steps for SPR Sink Makes Request (Accept)\nStep Source Sink\nPage 464 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.1.3.2 SPR Sink Makes Request (Reject)\nThis is an example of SPR when a Sink makes a Request which is Rejected during an Explicit Contract . Figure 8.10,\n\"SPR Sink Makes Request (Reject)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the keep alive.\nFigure 8.10 SPR Sink Makes Request (Reject)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Reject sentStop SenderResponseTimerEvaluate RequestSource Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 465Table 8.37, \"Steps for SPR Sink Makes Request (Reject)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.10, \"SPR Sink Makes Request (Reject)\" above.\nTable 8.37 Steps for SPR Sink Makes Request (Reject)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form a Request Message .\nThe Protocol Layer creates the Request Message and\npasses it to PHY Layer .\n2PHY Layer receives the Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nRequest Message sent by the Sink and decides that the\nSource can’t meet the request. The Policy Engine tells\nthe Protocol Layer to form a Reject Message .\n10The Protocol Layer forms the Reject Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Reject Message .\nStarts CRCReceiveTimer .PHY Layer receives the Reject Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Reject Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Reject\nMessage has been received. The Policy Engine informs\nthe DPM that the Request has been rejected.\n14The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 466 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that a\nReject Message was successfully sent.Table 8.37 Steps for SPR Sink Makes Request (Reject)\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4678.3.2.2.1.3.3 SPR Sink Makes Request (Wait)\nThis is an example of SPR when a Sink makes a Request which is responded to with a Wait Message during an\nExplicit Contract . Figure 8.11, \"SPR Sink Makes Request (Wait)\" shows the Message s as they flow across the bus and\nwithin the devices to accomplish the keep alive.\nFigure 8.11 SPR Sink Makes Request (Wait)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Wait sentStop SenderResponseTimerEvaluate RequestSource Sink\nPage 468 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.38, \"Steps for SPR Sink Makes Request (Wait)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.11, \"SPR Sink Makes Request (Wait)\" above.\nTable 8.38 Steps for SPR Sink Makes Request (Wait)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form a Request Message .\nThe Protocol Layer creates the Request Message and\npasses it to PHY Layer .\n2PHY Layer receives the Request Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the Request\nMessage to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nRequest Message sent by the Sink and decides if the\nSource can meet the request. The Policy Engine tells\nthe Protocol Layer to form a Wait Message .\n10The Protocol Layer forms the Wait Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Wait Message .\nStarts CRCReceiveTimer .PHY Layer receives the Wait Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Wait Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Wait\nMessage has been received. The Policy Engine informs\nthe DPM that the Request has been rejected.\n14The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 46915PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that a\nWait Message was successfully sent.Table 8.38 Steps for SPR Sink Makes Request (Wait)\nStep Source Sink\nPage 470 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2 EPR"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.2.1",
    "title": "Entering EPR Mode",
    "full_path": "8.3.2.2.2.1 Entering EPR Mode",
    "page": 470,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.2.1.1",
    "title": "Entering EPR Mode (Success)",
    "full_path": "8.3.2.2.2.1.1 Entering EPR Mode (Success)",
    "page": 470,
    "level": 7,
    "parent_id": "8.3.2.2.2.1",
    "tags": [],
    "content": "This is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process succeeds.\nFigure 8.12, \"Entering EPR Mode (Success)\" shows the Message s as they flow across the bus and within the devices\nto accomplish the Enter EPR process.\nFigure 8.12 Entering EPR Mode (Success)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)Start CRCReceiveTimer\n5: EPR_Mode (Enter) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode enteredSink Source\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional V CONN Swap Process – Source becomes V CONN Source\n20: Source reads Cable E-Marker to determine EPR capability – Cable is EPR Capable\n21: Send EPR_Mode (Enter Succeeded)\n22: EPR_Mode (Enter Succeeded)\n23: EPR_Mode (Enter Succeeded) + CRC\nStop SinkEPREnterTimer26: GoodCRC 27: GoodCRC + CRC28: GoodCRC\n29: EPR_Mode (Enter Succeeded) sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer24: EPR_Mode (Enter Succeeded)\n25: EPR_Mode (Enter Succeeded) received\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 471Table 8.39, \"Steps for Entering EPR Mode (Success)\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.12, \"Entering EPR Mode (Success)\" above.\nTable 8.39 Steps for Entering EPR Mode (Success)\nStep Sink Source\n1The Policy Engine directs the Protocol Layer to\ngenerate an EPR_Mode (Enter) Message to request\nentry to EPR Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the EPR_Mode\n(Enter) Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Mode (Enter) Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the EPR_Mode\n(Enter) Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode\n(Enter) Message information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Mode (Enter) Source_Capabilities Message was\nsuccessfully sent. The Policy Engine starts the\nSenderResponseTimer and the SinkEPREnterTimer .\n10Policy Engine evaluates the EPR_Mode (Enter) Message\nsent by the Sink . It tells the Protocol Layer to form a\nEPR_Mode (Enter Acknowledged) Message .\n11Protocol Layer creates the EPR_Mode (Enter\nAcknowledged) Message and passes to PHY Layer .\n12PHY Layer receives the EPR_Mode (Enter\nAcknowledged) Message and compares the CRC it\ncalculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Acknowledged) Message . Starts\nCRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Acknowledged) Message to the\nProtocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nAcknowledged) information to the Policy Engine . The\nPolicy Engine stops the SenderResponseTimer .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 472 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Acknowledged) Message was\nsuccessfully sent. The Protocol Layer stops the\nCRCReceiveTimer .\n19If the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10,\n\"VCONN Swap\" .\n20The Source performs Cable Discovery to determine whether the cable supports EPR. The Cable Discovery process\nis described in Section 8.3.2.14.1, \"Discover Identity\" .\n21The Source is now the VCONN Source and has determined\nthat the Sink and the cable are EPR Capable .\nThe Policy Engine tells the Protocol Layer to form a\nEPR_Mode (Enter Succeeded) Message .\n22Protocol Layer creates the EPR_Mode (Enter Succeeded)\nMessage and passes to PHY Layer .\n23PHY Layer receives the EPR_Mode (Enter Succeeded)\nMessage and compares the CRC it calculated with the one\nsent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Succeeded) Message . Starts CRCReceiveTimer .\n24PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Succeeded) Message to the Protocol\nLayer .\n25Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nSucceeded) information to the Policy Engine . The\nPolicy Engine stops the SinkEPREnterTimer .\n26The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "full_path": "27 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "page": 472,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "it calculated with the one sent to verify the Message .\n28PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n29The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Succeeded) Message was\nsuccessfully sent. The Protocol Layer stops the\nCRCReceiveTimer .\nEPR Mode EnteredTable 8.39 Steps for Entering EPR Mode (Success)\nStep Sink Source\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4738.3.2.2.2.1.2 Entering EPR Mode (Failure due to non-EPR cable)\nThis is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process fails due\nto the cable not being capable of EPR. Figure 8.13, \"Entering EPR Mode (Failure due to non-EPR cable)\" shows the\nMessage s as they flow across the bus and within the devices to accomplish the Enter EPR process.\nFigure 8.13 Entering EPR Mode (Failure due to non-EPR cable)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)Start CRCReceiveTimer\n5: EPR_Mode (Enter) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode is not entered. Sink Initiates Soft Reset.Sink Source\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional V CONN Swap Process – Source becomes V CONN Source\n20: Source reads Cable E-Marker to determine EPR capability – Cable is not EPR Capable\n21: Send EPR_Mode (Enter Failed)\n22: EPR_Mode (Enter Failed)\n23: EPR_Mode (Enter Failed) + CRC\nStop SinkEPREnterTimer26: GoodCRC 27: GoodCRC + CRC28: GoodCRC\n29: EPR_Mode (Enter Failed) sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer24: EPR_Mode (Enter Failed)\n25: EPR_Mode (Enter Failed) received\nPage 474 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.40, \"Steps for Entering EPR Mode (Failure due to non-EPR cable)\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.13, \"Entering EPR Mode (Failure due to non-EPR cable)\" above.\nTable 8.40 Steps for Entering EPR Mode (Failure due to non-EPR cable)\nStep Sink Source\n1The Policy Engine directs the Protocol Layer to\ngenerate an EPR_Mode (Enter) Message to request\nentry to EPR Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the EPR_Mode\n(Enter) Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Mode (Enter) Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the EPR_Mode\n(Enter) Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode\n(Enter) Message information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Mode (Enter) Message was successfully sent. The\nPolicy Engine starts the SenderResponseTimer and\nthe SinkEPREnterTimer .\n10Policy Engine evaluates the EPR_Mode (Enter) Message\nsent by the Sink . It tells the Protocol Layer to form a\nEPR_Mode (Enter Acknowledged) Message .\n11Protocol Layer creates the EPR_Mode (Enter\nAcknowledged) Message and passes to PHY Layer .\n12PHY Layer receives the EPR_Mode (Enter\nAcknowledged) Message and compares the CRC it\ncalculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Acknowledged) Message . Starts\nCRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Acknowledged) Message to the\nProtocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nAcknowledged) information to the Policy Engine . The\nPolicy Engine stops the SenderResponseTimer.\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 47516 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Acknowledged) Message was\nsuccessfully sent. The Protocol Layer stops the\nCRCReceiveTimer .\n19If the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10,\n\"VCONN Swap\" .\n20The Source performs Cable Discovery to determine whether the cable supports EPR; cable is not EPR Capable . The\nCable Discovery process is described in Section 8.3.2.14.1, \"Discover Identity\" .\n21The Source determines that there has been a failure or\nincompatibility during the EPR process (see Section\n6.4.10, \"EPR_Mode Message\" ).\nThe Policy Engine tells the Protocol Layer to form a\nEPR_Mode (Enter Failed) Message .\n22Protocol Layer creates the EPR_Mode (Enter Failed)\nMessage and passes to PHY Layer .\n23PHY Layer receives the EPR_Mode (Enter Failed)\nMessage and compares the CRC it calculated with the one\nsent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Failed) Message . Starts CRCReceiveTimer .\n24PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Failed) Message to the Protocol Layer .\n25Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter Failed)\ninformation to the Policy Engine . The Policy Engine\nstops the SinkEPREnterTimer .\n26The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "full_path": "27 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "page": 475,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "calculated with the one sent to verify the Message .\n28PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n29The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Failed) Message was successfully\nsent. The Protocol Layer stops the CRCReceiveTimer .\nEPR Mode is not entered. Sink Initiates Soft ResetTable 8.40 Steps for Entering EPR Mode (Failure due to non-EPR cable)\nStep Sink Source\nPage 476 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2.1.3 Entering EPR Mode (Failure of V CONN Swap)\nThis is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process fails due\nto a failure of the VCONN Swap process. Figure 8.14, \"Entering EPR Mode (Failure of V CONN Swap)\" shows the\nMessage s as they flow across the bus and within the devices to accomplish the Enter EPR process.\nFigure 8.14 Entering EPR Mode (Failure of V CONN Swap)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)Start CRCReceiveTimer\n5: EPR_Mode (Enter) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode is not entered. Sink Initiates Soft Reset.Sink Source\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional V CONN Swap Process – Source fails to become V CONN Source\n20: Send EPR_Mode (Enter Failed)\n21: EPR_Mode (Enter Failed)\n22: EPR_Mode (Enter Failed) + CRC\nStop SinkEPREnterTimer25: GoodCRC 26: GoodCRC + CRC27: GoodCRC\n28: EPR_Mode (Enter Failed) sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer23: EPR_Mode (Enter Failed)\n24: EPR_Mode (Enter Failed) received\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 477Table 8.41, \"Steps for Entering EPR Mode (Failure of V CONN Swap)\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.14, \"Entering EPR Mode (Failure of V CONN Swap)\" above.\nTable 8.41 Steps for Entering EPR Mode (Failure of V CONN Swap)\nStep Sink Source\n1The Policy Engine directs the Protocol Layer to\ngenerate an EPR_Mode (Enter) Message to request\nentry to EPR Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the EPR_Mode\n(Enter) Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Mode (Enter) Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the EPR_Mode\n(Enter) Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode\n(Enter) Message information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Mode (Enter) Message was successfully sent. The\nPolicy Engine starts the SenderResponseTimer and\nthe SinkEPREnterTimer .\n10Policy Engine evaluates the EPR_Mode (Enter) Message\nsent by the Sink . It tells the Protocol Layer to form a\nEPR_Mode (Enter Acknowledged) Message .\n11Protocol Layer creates the EPR_Mode (Enter\nAcknowledged) Message and passes to PHY Layer .\n12PHY Layer receives the EPR_Mode (Enter\nAcknowledged) Message and compares the CRC it\ncalculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Acknowledged) Message . Starts\nCRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Acknowledged) Message to the\nProtocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nAcknowledged) information to the Policy Engine . The\nPolicy Engine stops the SenderResponseTimer .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 478 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Acknowledged) Message was\nsuccessfully sent. The Protocol Layer stops the\nCRCReceiveTimer .\n19If the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10,\n\"VCONN Swap\" . In this case the VCONN Swap process fails.\n20The Source determines that there has been a failure or\nincompatibility during the EPR process (see Section\n6.4.10, \"EPR_Mode Message\" ).\nThe Policy Engine tells the Protocol Layer to form a\nEPR_Mode (Enter Failed) Message .\n21Protocol Layer creates the EPR_Mode (Enter Failed)\nMessage and passes to PHY Layer .\n22PHY Layer receives the EPR_Mode (Enter Failed)\nMessage and compares the CRC it calculated with the one\nsent to verify the Message .PHY Layer appends a CRC and sends the EPR_Mode\n(Enter Failed) Message . Starts CRCReceiveTimer .\n23PHY Layer removes the CRC and forwards the\nEPR_Mode (Enter Failed) Message to the Protocol Layer .\n24Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter Failed)\ninformation to the Policy Engine . The Policy Engine\nstops the SinkEPREnterTimer .\n25The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "26",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "full_path": "26 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "page": 478,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "calculated with the one sent to verify the Message .\n27PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n28The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Mode (Enter Failed) Message was successfully\nsent. The Protocol Layer stops the CRCReceiveTimer .\nEPR Mode is not entered. Sink Initiates Soft ResetTable 8.41 Steps for Entering EPR Mode (Failure of V CONN Swap)\nStep Sink Source\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4798.3.2.2.2.2 EPR Explicit Contract Negotiation"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.2.2.1",
    "title": "EPR Explicit Contract Negotiation (Accept)",
    "full_path": "8.3.2.2.2.2.1 EPR Explicit Contract Negotiation (Accept)",
    "page": 479,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.15, \"Successful Fixed EPR Power Negotiation\" illustrates an example of a successful Message flow while\nnegotiating an Explicit Contract in EPR Mode . The Negotiation goes through several distinct phases:\n The Source sends out its power Capabilities in an EPR_Source_Capabilities Message .\n The Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an\nEPR_Request Message .\n The Source evaluates the request and accepts the request with an Accept Message .\n The Source transitions to the new power level and then informs the Sink by sending a PS_RDY Message .\n The Sink starts using the new power level.\n the Source starts its keep alive timer\n the Sink starts its request timer to send periodic EPR_KeepAlive Message s\nPage 480 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.15 Successful Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Accept\n20: Accept\n21: Accept + CRC\n22: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Accept received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Accept sent\nPower supply adjusted to negotiated outputStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sentStop PSTransitionTimer\nStart SinkEPRKeepAliveTimer\nNew Power levelEvaluate EPR Capabilities\nEvaluate EPR Request\nPrepare for new powerSource Sink\nCable EPR_Source_Capabilities detected\nStart SourceEPRKeepAliveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 481Table 8.42, \"Steps for a successful EPR Power Negotiation\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.15, \"Successful Fixed EPR Power Negotiation\" above.\nTable 8.42 Steps for a successful EPR Power Negotiation\nStep Source Sink\n1The Cable Capabilities are detected if these are not\nalready known (see Section 4.4, \"Cable Type Detection\" ).\nPolicy Engine directs the Protocol Layer to send a\nEPR_Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Source_Capabilities\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Source_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Source_Capabilities Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Source_Capabilities Message was successfully\nsent. Policy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the EPR_Source_Capabilities\nMessage sent by the Source and selects which power it\nwould like. It tells the Protocol Layer to form the data\n(e.g., Power Data Object ) that represents its Request into\na Message .\n11Protocol Layer creates the EPR_Request Message and\npasses to PHY Layer .\n12PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 482 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Request Message was successfully sent. The\nProtocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the EPR_Request Message\nsent by the Sink and decides if it can meet the request. It\ntells the Protocol Layer to form an Accept Message .\n20The Protocol Layer forms the Accept Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Accept Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n22PHY Layer forwards the Accept Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer , starts the PSTransitionTimer\nand reduces its current draw.\nThe DPM prepares the Power supply for transition to\nthe new power level.\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that an\nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n28The DPM informs the Policy Engine that the power\nsupply has settled at the new operating condition and\ntells the Protocol Layer to send a PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "29",
    "title": "The Protocol Layer forms the PS_RDY Message .",
    "full_path": "29 The Protocol Layer forms the PS_RDY Message .",
    "page": 482,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "30PHY Layer appends CRC and sends the PS_RDY Message .\nStarts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n31PHY Layer forwards the PS_RDY Message to the\nProtocol Layer .Table 8.42 Steps for a successful EPR Power Negotiation\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 48332Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY\nhas been received. The Policy Engine stops the\nPSTransitionTimer .\nThe Policy Engine starts the SinkEPRKeepAliveTimer .\n33The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n34PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n35PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter . Stops the\nCRCReceiveTimer .\n36The Protocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\n37When in EPR operation the Policy Engine starts the\nSourceEPRKeepAliveTimer .Table 8.42 Steps for a successful EPR Power Negotiation\nStep Source Sink\nPage 484 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2.2.2 EPR Explicit Contract Negotiation (Reject)\nFigure 8.16, \"Rejected Fixed EPR Power Negotiation\" illustrates an example of a Message flow where the request is\nrejected while negotiating an Explicit Contract in EPR Mode . The Negotiation goes through several distinct phases:\n The Source sends out its power Capabilities in an EPR_Source_Capabilities Message .\n The Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an\nEPR_Request Message .\n The Source evaluates the request and accepts the request with a Reject Message .\nFigure 8.16 Rejected Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Reject\n20: Reject\n21: Reject + CRC\n22: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Reject received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Reject sentStop SenderResponseTimer\nStart PSTransitionTimer\nReduce currentEvaluate EPR Capabilities\nEvaluate EPR RequestSource Sink\nCable EPR_Source_Capabilities detected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 485Table 8.43, \"Steps for a Rejected EPR Power Negotiation\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.16, \"Rejected Fixed EPR Power Negotiation\" above.\nTable 8.43 Steps for a Rejected EPR Power Negotiation\nStep Source Sink\n1The Cable Capabilities are detected if these are not\nalready known (see Section 4.4, \"Cable Type Detection\" ).\nPolicy Engine directs the Protocol Layer to send a\nEPR_Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Source_Capabilities\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Source_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Source_Capabilities Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Source_Capabilities Message was successfully\nsent. Policy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the EPR_Source_Capabilities\nMessage sent by the Source and selects which power it\nwould like. It tells the Protocol Layer to form the data\n(e.g., Power Data Object ) that represents its Request into\na Message .\n11Protocol Layer creates the EPR_Request Message and\npasses to PHY Layer .\n12PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 486 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Request Message was successfully sent. The\nProtocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the EPR_Request Message\nsent by the Sink and decides it can’t meet the request. It\ntells the Protocol Layer to form a Reject Message .\n20The Protocol Layer forms the Reject Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Reject Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n22PHY Layer forwards the Reject Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Reject\nMessage has been received. The Policy Engine stops\nSenderResponseTimer .\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that a\nReject Message was successfully sent.Table 8.43 Steps for a Rejected EPR Power Negotiation\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4878.3.2.2.2.2.3 EPR Explicit Contract Negotiation (Wait)\nFigure 8.17, \"Wait response to Fixed EPR Power Negotiation\" illustrates an example of a Message flow where the\nrequest is responded to with wait while negotiating an Explicit Contract in EPR Mode . The Negotiation goes through\nseveral distinct phases:\n The Source sends out its power Capabilities in an EPR_Source_Capabilities Message .\n The Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an\nEPR_Request Message .\n The Source evaluates the request and accepts the request with a Wait Message .\nFigure 8.17 Wait response to Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Wait\n20: Wait\n21: Wait + CRC\n22: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Wait received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Wait sentStop SenderResponseTimer\nStart PSTransitionTimer\nReduce currentEvaluate EPR Capabilities\nEvaluate EPR RequestSource Sink\nCable EPR_Source_Capabilities detected\nPage 488 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.44, \"Steps for a Wait response to an EPR Power Negotiation\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.17, \"Wait response to Fixed EPR Power Negotiation\" above.\nTable 8.44 Steps for a Wait response to an EPR Power Negotiation\nStep Source Sink\n1The Cable Capabilities are detected if these are not\nalready known (see Section 4.4, \"Cable Type Detection\" ).\nPolicy Engine directs the Protocol Layer to send a\nEPR_Source_Capabilities Message that represents the\npower supply’s present capabilities.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Source_Capabilities\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Source_Capabilities Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Source_Capabilities Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Source_Capabilities Message was successfully\nsent. Policy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the EPR_Source_Capabilities\nMessage sent by the Source and selects which power it\nwould like. It tells the Protocol Layer to form the data\n(e.g., Power Data Object ) that represents its Request into\na Message .\n11Protocol Layer creates the EPR_Request Message and\npasses to PHY Layer .\n12PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops\nSenderResponseTimer .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 48916 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Request Message was successfully sent. The\nProtocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n19Policy Engine evaluates the EPR_Request Message\nsent by the Sink and decides if it can meet the request. It\ntells the Protocol Layer to form a Wait Message .\n20The Protocol Layer forms the Wait Message that is\npassed to the PHY Layer .\n21PHY Layer appends CRC and sends the Wait Message .\nStarts CRCReceiveTimer .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n22PHY Layer forwards the Wait Message to the Protocol\nLayer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Wait\nMessage has been received. The Policy Engine stops\nSenderResponseTimer .\n24The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n25PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends CRC and sends the Message .\n26PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n27The Protocol Layer informs the Policy Engine that a\nWait Message was successfully sent.Table 8.44 Steps for a Wait response to an EPR Power Negotiation\nStep Source Sink\nPage 490 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2.3 EPR Keep Alive\nThis is an example of keep alive operation during an Explicit Contract in EPR Mode . Figure 8.18, \"EPR Keep\nAlive\" shows the Message s as they flow across the bus and within the devices to accomplish the keep alive.\nFigure 8.18 EPR Keep Alive\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_KeepAlive\n2: EPR_KeepAlive\n3: EPR_KeepAlive + CRC\n4: EPR_KeepAlive\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_KeepAlive received\nStop SourceEPRKeepAliveTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_KeepAlive sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send EPR_KeepAlive_Ack\n11: EPR_KeepAlive_Ack\n12: EPR_KeepAlive_Ack + CRC\n13: EPR_KeepAlive_Ack Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_KeepAlive_Ack received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: EPR_KeepAlive_Ack sentStop SenderResponseTimer\nStart SinkEPRKeepAliveTimer\nEPR Mode ContinuesEvaluate EPR_KeepAliveSource Sink\nSinkEPRKeepAliveTimer Timeout\nStop SinkEPRKeepAliveTimer\nStart SourceEPRKeepAliveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 491Table 8.45, \"Steps for EPR Keep Alive\" below provides a detailed explanation of what happens at each labeled step\nin Figure 8.18, \"EPR Keep Alive\" above.\nTable 8.45 Steps for EPR Keep Alive\nStep Source Sink\n1The SinkEPRKeepAliveTimer times out in the Policy\nEngine . The Policy Engine stops the\nSinkEPRKeepAliveTimer timer and tells the Protocol\nLayer to form an EPR_KeepAlive Message .\n2The Protocol Layer creates the EPR_KeepAlive Message\nand passes it to PHY Layer . The Protocol Layer .\n3PHY Layer receives the EPR_KeepAlive Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Request\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nEPR_KeepAlive Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine . Policy Engine stops the\nSourceEPRKeepAliveTimer.\n6The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n8PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n9The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe SinkEPRKeepAliveTimer Message was successfully\nsent. The Protocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM to evaluate the\nSourceEPRKeepAliveTimer Message sent by the Sink\nand decides if the Source can meet the request. The\nPolicy Engine tells the Protocol Layer to form an\nEPR_KeepAlive_Ack Message .\n11The Protocol Layer forms the EPR_KeepAlive_Ack\nMessage that is passed to the PHY Layer .\n12PHY Layer appends CRC and sends the\nEPR_KeepAlive_Ack Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_KeepAlive_Ack Message\nand compares the CRC it calculated with the one sent to\nverify the Message .\n13PHY Layer forwards the EPR_KeepAlive_Ack Message to\nthe Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer , starts the\nSinkEPRKeepAliveTimer .\nPage 492 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n16PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n17PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n18The Protocol Layer informs the Policy Engine that an\nEPR_KeepAlive_Ack Message was successfully sent.\nThe Policy Engine starts the\nSourceEPRKeepAliveTimer .\nEPR Mode ContinuesTable 8.45 Steps for EPR Keep Alive\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4938.3.2.2.2.4 Exiting EPR Mode"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.2.4.1",
    "title": "Exiting EPR Mode (Sink Initiated)",
    "full_path": "8.3.2.2.2.4.1 Exiting EPR Mode (Sink Initiated)",
    "page": 493,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of an Exit EPR Mode operation where the Sink requests EPR Mode to be exited. Figure 8.19,\n\"Exiting EPR Mode (Sink Initiated)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the Exit EPR process.\nFigure 8.19 Exiting EPR Mode (Sink Initiated)\n: Protocol\n1: Send EPR_Mode (Exit)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Exit)\n3: EPR_Mode (Exit) + CRC\n4: EPR_Mode (Exit)Start CRCReceiveTimer\n5: EPR_Mode (Exit) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Exit) sent\n: Policy Engine\n: Policy Engine\nEPR Mode exitedSink Source\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Source_Capabilities sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer13: Source_Capabilities\n14: Source_Capabilities receivedPorts in EPR Mode with SPR PDO Explicit Contract\nPage 494 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.46, \"Steps for Exiting EPR Mode (Sink Initiated)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.19, \"Exiting EPR Mode (Sink Initiated)\" above.\nTable 8.46 Steps for Exiting EPR Mode (Sink Initiated)\nStep Sink Source\nThe Port Partner s are in an Explicit Contract using an SPR (A)PDO (Voltage <= 20V)\n1The Policy Engine directs the Protocol Layer to\ngenerate an EPR_Mode (Exit) Message to request entry\nto EPR Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the EPR_Mode\n(Exit) Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Mode (Exit) Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the EPR_Mode\n(Exit) Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode\n(Exit) Message information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Mode (Exit) Message was successfully sent.\n10Policy Engine evaluates the EPR_Mode (Exit) Message\nsent by the Sink . It tells the Protocol Layer to form a\nSource_Capabilities Message .\n11Protocol Layer creates the Source_Capabilities Message\nand passes to PHY Layer .\n12PHY Layer receives the Source_Capabilities Message\nand compares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .\n13PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nSucceeded) information to the Policy Engine .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "full_path": "16 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC it",
    "page": 494,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "calculated with the one sent to verify the Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 49517PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter. It informs the Policy Engine that\nthe Source_Capabilities Message was successfully sent.\nThe Protocol Layer stops the CRCReceiveTimer .\nEPR Mode Exited. Power Negotiation proceeds as defined in Section 8.3.2.2.1.1, \"SPR Explicit Contract Negotiation\" .Table 8.46 Steps for Exiting EPR Mode (Sink Initiated)\nStep Sink Source\nPage 496 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2.4.2 Exiting EPR Mode (Source Initiated)\nThis is an example of an Exit EPR Mode operation where the Source requests EPR Mode to be exited. Figure 8.20,\n\"Exiting EPR Mode (Source Initiated)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the Exit EPR process.\nFigure 8.20 Exiting EPR Mode (Source Initiated)\n: Protocol\n1: Send EPR_Mode (Exit)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Exit)\n3: EPR_Mode (Exit) + CRC\n4: EPR_Mode (Exit) Start CRCReceiveTimer\n5: EPR_Mode (Exit) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Exit) sent\n: Policy Engine\n: Policy Engine\nEPR Mode exitedSink Source\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Source_Capabilities sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer13: Source_Capabilities\n14: Source_Capabilities receivedPorts in EPR Mode with SPR PDO Explicit Contract\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 497Table 8.47, \"Steps for Exiting EPR Mode (Source Initiated)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.20, \"Exiting EPR Mode (Source Initiated)\" above.\nTable 8.47 Steps for Exiting EPR Mode (Source Initiated)\nStep Sink Source\nThe Port Partner s are in an Explicit Contract using an SPR (A)PDO (Voltage <= 20V)\n1The Policy Engine directs the Protocol Layer to\ngenerate an EPR_Mode (Exit) Message to request entry\nto EPR Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer receives the EPR_Mode (Exit) Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the EPR_Mode\n(Exit) Message . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nEPR_Mode (Exit) Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode\n(Exit) Message information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Mode (Exit) Message was successfully sent.\n10Policy Engine evaluates the EPR_Mode (Exit) Message\nsent by the Sink . It tells the Protocol Layer to form a\nSource_Capabilities Message .\n11Protocol Layer creates the Source_Capabilities Message\nand passes to PHY Layer . Starts CRCReceiveTimer .\n12PHY Layer receives the Source_Capabilities Message\nand compares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the\nSource_Capabilities Message .\n13PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n14Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter\nSucceeded) information to the Policy Engine .\n15The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "full_path": "16 PHY Layer appends CRC and sends the Message .PHY Layer receives the Message and compares the CRC",
    "page": 497,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "it calculated with the one sent to verify the Message .\nPage 498 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n18The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Source_Capabilities Message was successfully sent.\nThe Protocol Layer stops the CRCReceiveTimer .\nEPR Mode Exited. Power Negotiation proceeds as defined in Section 8.3.2.2.1.1, \"SPR Explicit Contract Negotiation\" .Table 8.47 Steps for Exiting EPR Mode (Source Initiated)\nStep Sink Source\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 4998.3.2.2.2.5 EPR Sink Makes Request"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.2.2.5.1",
    "title": "EPR Sink Makes Request (Accept)",
    "full_path": "8.3.2.2.2.5.1 EPR Sink Makes Request (Accept)",
    "page": 499,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of EPR when a Sink makes a Request which is Accepted during an Explicit Contract . Figure 8.21,\n\"EPR Sink Makes Request (Accept)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the keep alive.\nFigure 8.21 EPR Sink Makes Request (Accept)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated outputStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sentStop PSTransitionTimer\nNew Power levelEvaluate EPR_Request\nPrepare for new powerSource Sink\nPage 500 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.48, \"Steps for EPR Sink Makes Request (Accept)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.21, \"EPR Sink Makes Request (Accept)\" above.\nTable 8.48 Steps for EPR Sink Makes Request (Accept)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form an EPR_Request Message .\nThe Protocol Layer creates the EPR_Request Message\nand passes it to PHY Layer .\n2PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Request Message was successfully sent. The\nProtocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nEPR_Request Message sent by the Sink and decides if\nthe Source can meet the request. The Policy Engine\ntells the Protocol Layer to form an Accept Message .\n10The Protocol Layer forms the Accept Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Accept Message .\nStarts CRCReceiveTimer .PHY Layer receives the Accept Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Accept Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept\nMessage has been received. The Policy Engine stops\nSenderResponseTimer , starts the PSTransitionTimer\nand reduces its current draw.\nThe DPM prepares the Power supply for transition to\nthe new power level.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 50114The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n15PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that an\nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18The DPM informs the Policy Engine that the power\nsupply has settled at the new operating condition and\ntells the Protocol Layer to send a PS_RDY Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "19",
    "title": "The Protocol Layer forms the PS_RDY Message .",
    "full_path": "19 The Protocol Layer forms the PS_RDY Message .",
    "page": 501,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "20PHY Layer appends CRC and sends the PS_RDY Message .\nStarts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n21PHY Layer forwards the PS_RDY Message to the\nProtocol Layer .\n22Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY\nhas been received. The Policy Engine stops the\nPSTransitionTimer .\n23The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n24PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n25PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter . Stops the\nCRCReceiveTimer .\n26The Protocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\nNew Power Level NegotiatedTable 8.48 Steps for EPR Sink Makes Request (Accept)\nStep Source Sink\nPage 502 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.2.2.5.2 EPR Sink Makes Request (Reject)\nThis is an example of EPR when a Sink makes a Request which is Rejected during an Explicit Contract . Figure 8.22,\n\"EPR Sink Makes Request (Reject)\" shows the Message s as they flow across the bus and within the devices to\naccomplish the keep alive.\nFigure 8.22 EPR Sink Makes Request (Reject)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Reject sentStop SenderResponseTimerEvaluate EPR_RequestSource Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 503Table 8.49, \"Steps for EPR Sink Makes Request (Reject)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.22, \"EPR Sink Makes Request (Reject)\" above.\nTable 8.49 Steps for EPR Sink Makes Request (Reject)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form an EPR_Request Message .\nThe Protocol Layer creates the Request Message and\npasses it to PHY Layer .\n2PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe EPR_Request Message was successfully sent. The\nProtocol Layer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nEPR_Request Message sent by the Sink and decides that\nthe Source can’t meet the request. The Policy Engine\ntells the Protocol Layer to form a Reject Message .\n10The Protocol Layer forms the Reject Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Reject Message .\nStarts CRCReceiveTimer .PHY Layer receives the Reject Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n12PHY Layer forwards the Reject Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Reject\nMessage has been received. The Policy Engine informs\nthe DPM that the Request has been rejected.\n14The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nPage 504 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that a\nReject Message was successfully sent.Table 8.49 Steps for EPR Sink Makes Request (Reject)\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5058.3.2.2.2.5.3 EPR Sink Makes Request (Wait)\nThis is an example of SPR when a Sink makes a Request which is responded to with a Wait Message during an\nExplicit Contract . Figure 8.23, \"EPR Sink Makes Request (Wait)\" shows the Message s as they flow across the bus and\nwithin the devices to accomplish the keep alive.\nFigure 8.23 EPR Sink Makes Request (Wait)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Wait sentStop SenderResponseTimerEvaluate EPR_RequestSource Sink\nPage 506 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.50, \"Steps for SPR Sink Makes Request (Wait)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.23, \"EPR Sink Makes Request (Wait)\" above.\nTable 8.50 Steps for SPR Sink Makes Request (Wait)\nStep Source Sink\n1DPM tells the Policy Engine to request a different\npower level. The Policy Engine tells the Protocol Layer\nto form an EPR_Request Message .\nThe Protocol Layer creates the EPR_Request Message\nand passes it to PHY Layer .\n2PHY Layer receives the EPR_Request Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the EPR_Request\nMessage . Starts CRCReceiveTimer .\n3PHY Layer removes the CRC and forwards the\nEPR_Request Message to the Protocol Layer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to\nthe Policy Engine .\n5The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\n6PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n7PHY Layer forwards the GoodCRC Message to the\nProtocol Layer .\n8The Protocol Layer verifies and increments the\nMessageIDCounter . It informs the Policy Engine that\nthe Request Message was successfully sent. The Protocol\nLayer stops the CRCReceiveTimer .\nThe Policy Engine starts SenderResponseTimer .\n9Policy Engine requests the DPM to evaluate the\nEPR_Request Message sent by the Sink and decides if\nthe Source can meet the request. The Policy Engine\ntells the Protocol Layer to form a Wait Message .\n10The Protocol Layer forms the Wait Message that is\npassed to the PHY Layer .\n11PHY Layer appends CRC and sends the Wait Message .\nStarts CRCReceiveTimer .PHY Layer receives the Wait Message and compares the\nCRC it calculated with the one sent to verify the Message .\n12PHY Layer forwards the Wait Message to the Protocol\nLayer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Wait\nMessage has been received. The Policy Engine informs\nthe DPM that the Request has been rejected.\n14The Protocol Layer generates a GoodCRC Message and\npasses it to its PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 50715PHY Layer receives the GoodCRC Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n16PHY Layer forwards the GoodCRC Message to the\nProtocol Layer . The Protocol Layer verifies and\nincrements the MessageIDCounter and stops the\nCRCReceiveTimer .\n17The Protocol Layer informs the Policy Engine that a\nWait Message was successfully sent.Table 8.50 Steps for SPR Sink Makes Request (Wait)\nStep Source Sink\nPage 508 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.3 Unsupported Message\nThis is an example of the response to an Unsupported Message . Figure 8.24, \"Unsupported message\" shows the\nMessage s as they flow across the bus and within the devices.\nFigure 8.24 Unsupported message\n: Protocol\n1: Send Message\n: PHY\n: PHY\n: Protocol\n2: Message\n3: Message + CRC\n4: MessageStart CRCReceiveTimer\n5: Message received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Message sent\nStart SenderResponseTimer\n10: Send Not_supported\n11: Not_supported\n12: Not_supported + CRC\n13: Not_supported\n14: Not_supported received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Not_supported sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nReset MessageIDCounter, stored\nMessageID and RetryCounter\nReset MessageIDCounter, stored\nMessageID and RetryCounterMessage Initiator Message Responder\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 509Table 8.51, \"Steps for an Unsupported Message\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.24, \"Unsupported message\" above.\nTable 8.51 Steps for an Unsupported Message\nStep Message Initiator Message Responder\n1The Policy Engine directs the Protocol Layer to\ngenerate a Message .\n2Protocol Layer resets MessageIDCounter , stored\nMessageID and RetryCounter . Protocol Layer creates\nthe Message and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Message . Starts\nCRCReceiveTimer .PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .\n4PHY Layer removes the CRC and forwards the Message to\nthe Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Message\ninformation to the Policy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nMessage was successfully sent. Policy Engine starts\nSenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an\nNot_Supported Message .\n11Protocol Layer creates the Not_Supported Message and\npasses to PHY Layer .\n12PHY Layer receives the Not_Supported Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Not_Supported\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received\nNot_Supported Message information to the Policy\nEngine that consumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 510 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nNot_Supported Message was successfully sent.Table 8.51 Steps for an Unsupported Message\nStep Message Initiator Message Responder\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5118.3.2.4 Soft Reset\nThis is an example of a Soft Reset operation. Figure 8.25, \"Soft Reset\" shows the Message s as they flow across the\nbus and within the devices to accomplish the Soft Reset .\nFigure 8.25 Soft Reset\n: Protocol\n1: Send Soft Reset\n: PHY\n: PHY\n: Protocol\n2: Soft Reset\n3: Soft Reset + CRC\n4: Soft ResetStart CRCReceiveTimer\n5: Soft Reset received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Soft Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nReset MessageIDCounter, stored\nMessageID and RetryCounter\nReset MessageIDCounter, stored\nMessageID and RetryCounter\nReset Complete, Explicit Contract negotiationReset Initiator Reset Responder\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nPage 512 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.52, \"Steps for a Soft Reset\" below provides a detailed explanation of what happens at each labeled step in\nFigure 8.25, \"Soft Reset\" above.\nTable 8.52 Steps for a Soft Reset\nStep Reset Initiator Reset Responder\n1The Policy Engine directs the Protocol Layer to\ngenerate a Soft_Reset Message to request a Soft Reset .\n2Protocol Layer resets MessageIDCounter , stored\nMessageID and RetryCounter . Protocol Layer creates\nthe Message and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Soft_Reset\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Soft_Reset Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nSoft_Reset Message to the Protocol Layer .\n5Protocol Layer does not check the MessageID in the\nincoming Message and resets MessageIDCounter ,\nstored MessageID and RetryCounter .\nThe Protocol Layer forwards the received Soft_Reset\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSoft_Reset Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Accept Message .\nStarts CRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 51318Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe reset is complete and protocol communication can restart. Port Partner s perform an Explicit Contract Negotiation to re-\nsynchronize their state machines.Table 8.52 Steps for a Soft Reset\nStep Reset Initiator Reset Responder\nPage 514 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.5 Data Reset"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.5.1",
    "title": "DFP Initiated Data Reset where the DFP is the V CONN Source",
    "full_path": "8.3.2.5.1 DFP Initiated Data Reset where the DFP is the V CONN Source",
    "page": 514,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of a Data Reset operation where the DFP is also the V CONN Source and initiates a Data Reset .\nFigure 8.26, \"DFP Initiated Data Reset where the DFP is the V CONN Source\" shows the Message s as they flow across\nthe bus and within the devices to accomplish the Data Reset .\nFigure 8.26 DFP Initiated Data Reset where the DFP is the V CONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_ResetStart CRCReceiveTimer\n5: Data_Reset received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\n15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection EstablishedDFP/V CONN Source\n(Reset Initiator)UFP\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that Data_Reset\nhas been received\nStop SenderResponseTimer\nTell DPM to perform Data Reset\n19: Send Data_Reset_Complete\n20: Data_Reset_Complete\n21: Data_Reset_Complete + CRC\n22: Data_Reset_Complete Start CRCReceiveTimer\n23: Data_Reset_Complete received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: Data_Reset_Complete sent\nInform DPM that\nData_Reset_Complete has been sentCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that\nData_Reset_Complete has\nbeen receivedDPM indicates that Data\nReset process is complete\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 515Table 8.53, \"Steps for a DFP Initiated Data Reset where the DFP is the V CONN Source\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.26, \"DFP Initiated Data Reset where the DFP is the\nVCONN Source\" above.\nTable 8.53 Steps for a DFP Initiated Data Reset where the DFP is the V CONN Source\nStep DFP/V CONN Source (Reset Initiator) UFP (Reset Responder)\n1The Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset Message to request a Data Reset .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Data_Reset\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Data_Reset Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nData_Reset Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset\nMessage has been received.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Accept Message .\nStarts CRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine stops the SenderResponseTimer\nand tells the DPM to perform a Data Reset .\nThe DPM proceeds to cycle VCONN and then reset the\ndata connection.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 516 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\n19The DPM indicates that the Data Reset process is\ncomplete.\nThe Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset_Complete Message .\n20Protocol Layer creates the Message and passes to PHY\nLayer .\n21PHY Layer appends CRC and sends the\nData_Reset_Complete Message . Starts\nCRCReceiveTimer .PHY Layer receives the Data_Reset_Complete Message\nand compares the CRC it calculated with the one sent to\nverify the Message .\n22PHY Layer removes the CRC and forwards the\nData_Reset_Complete Message to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nData_Reset_Complete Message information to the\nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a\nData_Reset_Complete Message has been received.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n26PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the\nData_Reset_Complete Message was successfully sent.\nThe Data Reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partner s re-establish a USB data\nconnection.Table 8.53 Steps for a DFP Initiated Data Reset where the DFP is the V CONN Source\nStep DFP/V CONN Source (Reset Initiator) UFP (Reset Responder)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5178.3.2.5.2 DFP Receives Data Reset where the DFP is the V CONN Source\nThis is an example of a Data Reset operation where the DFP receives a Data_Reset Message and is the VCONN Source .\nFigure 8.27, \"DFP Receives Data Reset where the DFP is the V CONN Source\" shows the Message s as they flow across\nthe bus and within the devices to accomplish the Data Reset .\nFigure 8.27 DFP Receives Data Reset where the DFP is the V CONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_ResetStart CRCReceiveTimer\n5: Data_Reset received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection EstablishedUFP (Reset Initiator)DFP/V CONN Source\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that Data_Reset\nhas been received\nTell DPM to perform a Data Reset\n19: Send Data_Reset_Complete\n20: Data_Reset_Complete\n21: Data_Reset_Complete + CRC\n22: Data_Reset_Complete\n23: Data_Reset_Complete received\nInform DPM Data Reset is\ncomplete24: GoodCRC 25: GoodCRC + CRC26: GoodCRC\n27: Data_Reset_Complete sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM Data Reset Message\nsentTell DPM indicates Data Reset\nprocess is complete\nPage 518 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.54, \"Steps for a DFP Receiving a Data Reset where the DFP is the V CONN Source\" below provides a detailed\nexplanation of what happens at each labeled step in F Figure 8.27, \"DFP Receives Data Reset where the DFP is the\nVCONN Source\" above.\nTable 8.54 Steps for a DFP Receiving a Data Reset where the DFP is the V CONN Source\nStep UFP (Reset Initiator) DFP/V CONN Source (Reset Responder)\n1The Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset Message to request a Data Reset .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Data_Reset\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Data_Reset Message and\ncompares the CRC it calculated with the one sent to\nverify the Message .\n4PHY Layer removes the CRC and forwards the\nData_Reset Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset\nMessage has been received.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine stops the SenderResponseTimer .\nThe DPM proceeds to cycle VCONN and then reset the\ndata connection.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 51916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe Policy Engine tells the DPM to perform a Data\nReset .\n19The DPM indicates that the Data Reset process is\ncomplete.\nThe Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset_Complete Message .\n20Protocol Layer creates the Message and passes to PHY\nLayer .\n21PHY Layer receives the Data_Reset_Complete\nMessage and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends CRC and sends the\nData_Reset_Complete Message . Starts\nCRCReceiveTimer .\n22PHY Layer removes the CRC and forwards the\nData_Reset_Complete Message to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nData_Reset_Complete Message information to the\nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a\nData_Reset_Complete Message has been received.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the\nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partner s re-establish a USB data\nconnection.Table 8.54 Steps for a DFP Receiving a Data Reset where the DFP is the V CONN Source\nStep UFP (Reset Initiator) DFP/V CONN Source (Reset Responder)\nPage 520 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.5.3 DFP Initiated Data Reset where the UFP is the V CONN Source\nThis is an example of a Data Reset operation where the DFP initiates a Data Reset and the UFP is the VCONN Source .\nFigure 8.28, \"DFP Initiated Data Reset where the UFP is the V CONN Source\" shows the Message s as they flow across\nthe bus and within the devices to accomplish the Data Reset .\nFigure 8.28 DFP Initiated Data Reset where the UFP is the V CONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_ResetStart CRCReceiveTimer\n5: Data_Reset received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\n15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection EstablishedDFP\n(Reset Initiator)UFP/V CONN Source\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that Data_Reset\nhas been received\nStop SenderResponseTimer\nStart VCONNDischargeTimer\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\n23: PS_RDY received\n24: GoodCRC 25: GoodCRC + CRC26: GoodCRC\n27: PS_RDY sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerStop VCONNDischargeTimer\nRequest DPM to perform a Data ResetRequest DPM to turn off V CONN\nDPM indicates V CONN is off\n28: Send Data_Reset_Complete\n29: Data_Reset_Complete\n30: Data_Reset_Complete + CRC\n31: Data_Reset_Complete Start CRCReceiveTimer\n32: Data_Reset_Complete received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\n36: Data_Reset_Complete sent\nInform DPM that\nData_Reset_Complete has been sentCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that\nData_Reset_Complete has\nbeen receivedDPM indicates that Data\nReset process is complete\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 521Table 8.55, \"Steps for a DFP Initiated Data Reset where the UFP is the V CONN Source\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.28, \"DFP Initiated Data Reset where the UFP is the\nVCONN Source\" above.\nTable 8.55 Steps for a DFP Initiated Data Reset where the UFP is the V CONN Source\nStep DFP (Reset Initiator) UFP/V CONN Source (Reset Responder)\n1The Policy Engine directs the Protocol Layer to generate\na Data_Reset Message to request a Soft Reset .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Data_Reset\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Data_Reset Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nData_Reset Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset\nMessage has been received.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept Message\ninformation to the Policy Engine that consumes it.\nThe Policy Engine stops the SenderResponseTimer and\nstarts the VCONN DischargeTimer .\n15Protocol Layer generates a GoodCRC Message and passes\nit PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 522 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe Policy Engine requests the DPM to turn off VCONN .\n19When the DPM indicates VCONN has been turned off the\nPolicy Engine tells the Protocol Layer to form an\nPS_RDY Message .\n20Protocol Layer creates the Message and passes to PHY\nLayer .\n21PHY Layer receives the Message and compares the CRC it\ncalculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n22Protocol Layer stores the MessageID of the incoming\nMessage .\n23The Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that consumes\nit.\nThe Policy Engine stops the VCONN DischargeTimer and\ntells the DPM to perform a Data Reset .\nThe DPM proceeds to turn on VCONN and then reset the\ndata connection.\n24Protocol Layer generates a GoodCRC Message and passes\nit PHY Layer .\n25PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\n28The DPM indicates that the Data Reset process is\ncomplete.\nThe Policy Engine directs the Protocol Layer to generate\na Data_Reset_Complete Message .\n29Protocol Layer creates the Message and passes to PHY\nLayer .\n30PHY Layer appends CRC and sends the\nData_Reset_Complete Message . Starts CRCReceiveTimer .PHY Layer receives the Data_Reset_Complete Message\nand compares the CRC it calculated with the one sent to\nverify the Message .\n31PHY Layer removes the CRC and forwards the\nData_Reset_Complete Message to the Protocol Layer .Table 8.55 Steps for a DFP Initiated Data Reset where the UFP is the V CONN Source\nStep DFP (Reset Initiator) UFP/V CONN Source (Reset Responder)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 52332Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nData_Reset_Complete Message information to the\nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a\nData_Reset_Complete Message has been received.\n33Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n34PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n35PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n36Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the\nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partner s re-establish a USB data\nconnection.Table 8.55 Steps for a DFP Initiated Data Reset where the UFP is the V CONN Source\nStep DFP (Reset Initiator) UFP/V CONN Source (Reset Responder)\nPage 524 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.5.4 DFP Receives Data Reset where the UFP is the V CONN Source\nThis is an example of a Data Reset operation where the DFP receives a Data_Reset Message and the UFP is the VCONN\nSource . Figure 8.29, \"DFP Receives a Data Reset where the UFP is the V CONN Source\" shows the Message s as they flow\nacross the bus and within the devices to accomplish the Data Reset .\nFigure 8.29 DFP Receives a Data Reset where the UFP is the V CONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_ResetStart CRCReceiveTimer\n5: Data_Reset received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\nTell DPM to turn off V CONN .15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection EstablishedUFP/V CONN Source\n(Reset Initiator)DFP\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerInform DPM that Data_Reset\nhas been received\nStart VCONNDischargeTimer\nDPM indicates that V CONN has\nbeen turned off.\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDYStart CRCReceiveTimer\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sentReset MessageIDCounter, stored\nMessageID and RetryCounter\nReset MessageIDCounter, stored\nMessageID and RetryCounter\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerStop VCONNDischargeTimer\nRequest DPM to perform a Data Reset\n28: Send Data_Reset_Complete\n29: Data_Reset_Complete\n30: Data_Reset_Complete + CRC\n31: Data_Reset_Complete\n32: Data_Reset_Complete received\nInform DPM Data Reset is\ncomplete33: GoodCRC 34: GoodCRC + CRC35: GoodCRC\n36: Data_Reset_Complete sentStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM Data Reset Message\nsentTell DPM indicates Data Reset\nprocess is complete\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 525Table 8.56, \"Steps for a DFP Receiving a Data Reset where the UFP is the V CONN Source\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.29, \"DFP Receives a Data Reset where the UFP is the\nVCONN Source\" above.\nTable 8.56 Steps for a DFP Receiving a Data Reset where the UFP is the V CONN Source\nStep UFP/V CONN Source (Reset Initiator) DFP (Reset Responder)\n1The Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset Message to request a Soft Reset .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Data_Reset\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Data_Reset Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nData_Reset Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset\nMessage has been received.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine stops the SenderResponseTimer\nand tells the DPM to turn off VCONN .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nPage 526 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe Policy Engine starts the VCONN DischargeTimer .\n19When the DPM indicates that VCONN has been turned off\nthe Policy Engine directs the Protocol Layer to\ngenerate a PS_RDY Message to request a Soft Reset .\n20Protocol Layer creates the Message and passes to PHY\nLayer .\n21PHY Layer appends CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it.\nThe Policy Engine stops the VCONN DischargeTimer\nand requests the DPM perform a Data Reset .\nThe DPM proceeds to turn on VCONN and then reset the\ndata connection.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\n28The DPM indicates that the Data Reset process is\ncomplete.\nThe Policy Engine directs the Protocol Layer to\ngenerate a Data_Reset_Complete Message .\n29Protocol Layer creates the Message and passes to PHY\nLayer .\n30PHY Layer receives the Data_Reset_Complete\nMessage and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends CRC and sends the\nData_Reset_Complete Message . Starts\nCRCReceiveTimer .\n31PHY Layer removes the CRC and forwards the\nData_Reset_Complete Message to the Protocol Layer .Table 8.56 Steps for a DFP Receiving a Data Reset where the UFP is the V CONN Source\nStep UFP/V CONN Source (Reset Initiator) DFP (Reset Responder)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 52732Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nData_Reset_Complete Message information to the\nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a\nData_Reset_Complete Message has been received.\n33Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n34PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .\n35PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n36Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the\nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partner s re-establish a USB data\nconnection.Table 8.56 Steps for a DFP Receiving a Data Reset where the UFP is the V CONN Source\nStep UFP/V CONN Source (Reset Initiator) DFP (Reset Responder)\nPage 528 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.6 Hard Reset\nThe following sections describe the steps required for a USB Power Delivery Hard Reset . The Hard Reset returns\nthe operation of the USB Power Delivery to default Power Role /Data Role and operating voltage/current. During\nthe Hard Reset USB Power Delivery PHY Layer communications Shall be disabled preventing communication\nbetween the Port Partner .\nNote: Hard Reset , in this case, is applied to the USB Power Delivery capability of an individual Port on which\nthe Hard Reset is requested. A side effect of the Hard Reset is that it might reset other functions on the\nPort such as USB."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.6.1",
    "title": "Source Initiated Hard Reset",
    "full_path": "8.3.2.6.1 Source Initiated Hard Reset",
    "page": 528,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of a Hard Reset operation when initiated by a Source . Figure 8.30, \"Source initiated Hard Reset\"\nshows the Message s as they flow across the bus and within the devices to accomplish the Hard Reset .\nFigure 8.30 Source initiated Hard Reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy EngineSource Sink\nHard Reset CompleteReset MessageIDCounter and\nRetryCounter\nReset MessageIDCounter and\nRetryCounter\n8: Power Supply Reset6: Power Sink Reset\n10: Send Capabilities\n11: Capabilities\n12: Capabilities + CRC\n13: Capabilities Start CRCReceiveTimer\nStore copy of MessageID\n14: Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Capabilities sent\nStop NoResponseTimer\nStart SenderResponseTimerEvaluate Capabilities7: Hard Reset CompletePower Sink Reset\nPower Supply Reset\nTurn on V CONN\n9: Hard Reset Complete\nChannel enabledChannel enabled1: Send Hard Reset\n2: Send Hard Reset\n3: Hard Reset\n4: Hard Reset receivedStart NoResponseTimer\nWait tPSHardReset\nReset Power Supply\nReset Port Data Role to DFP\nTurn off V CONN\n5: Hard Reset received\nReset Power Sink\nReset Port Data Role to UFP\nTurn off V CONNChannel disabledChannel disabled\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 529Table 8.57, \"Steps for Source initiated Hard Reset\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.30, \"Source initiated Hard Reset\" above.\nTable 8.57 Steps for Source initiated Hard Reset\nStep Source Sink\n1The Policy Engine directs the Protocol Layer to\ngenerate Hard Reset Signaling .\nThe Policy Engine starts the NoResponseTimer and\nrequests the DPM to reset the power supply to USB\nDefault Operation . The Policy Engine requests the\nDPM to reset the Port Data Role to DFP and to turn off\nVCONN if this is on.\n2Protocol Layer resets MessageIDCounter and\nRetryCounter.\nProtocol Layer requests the PHY Layer send Hard Reset\nSignaling .\n3PHY Layer sends Hard Reset Signaling and then\ndisables the PHY Layer communications channel for\ntransmission and reception.PHY Layer receives the Hard Reset Signaling and\ndisables the PHY Layer communications channel for\ntransmission and reception.\n4PHY Layer informs the Protocol Layer of the Hard Reset .\nProtocol Layer resets MessageIDCounter and\nRetryCounter .\n5The Protocol Layer informs the Policy Engine of the\nHard Reset .\nThe Policy Engine requests the DPM to reset the Power\nSink to USB Default Operation . The Policy Engine\nrequests the DPM to reset the Port Data Role to UFP\nand to turn off VCONN if this is on.\n6The Power Sink returns to USB Default Operation .\nThe Policy Engine informs the Protocol Layer that the\nPower Sink has been reset.\n7The Protocol Layer informs the PHY Layer that the Hard\nReset is complete.\nThe PHY Layer enables the PHY Layer communications\nchannel for transmission and reception.\n8The power supply is reset to USB Default Operation . and\nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the\npower supply has been reset.\n9The Protocol Layer informs the PHY Layer that the Hard\nReset is complete. The PHY Layer enables the PHY Layer\ncommunications channel for transmission and\nreception.\nThe reset is complete and protocol communication can restart.\n10Policy Engine directs the Protocol Layer to send a\nSource_Capabilities Message that represents the\npower supply’s present capabilities.\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\nPage 530 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1013PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n14Protocol Layer stores the MessageID of the incoming\nMessage .\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine stops the NoResponseTimer and starts\nthe SenderResponseTimer .\nUSB Power Delivery communication is re-established.Table 8.57 Steps for Source initiated Hard Reset\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5318.3.2.6.2 Sink Initiated Hard Reset\nThis is an example of a Hard Reset operation when initiated by a Sink . Figure 8.31, \"Sink Initiated Hard Reset\" shows\nthe Message s as they flow across the bus and within the devices to accomplish the Hard Reset .\nFigure 8.31 Sink Initiated Hard Reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy EngineSource Sink\n1: Send Hard Reset\n3: Hard Reset\n4: Hard Reset received\nHard Reset CompleteStart NoResponseTimer\nReset Power Supply\nReset Port Data Role to DFP\nTurn off V CONNReset MessageIDCounter, stored\ncopy of MessageID and\nRetryCounterReset MessageIDCounter,\nstored copy of MessageID and\nRetryCounterReset Power Sink\nReset Port Data Role to UFP\nTurn off V CONN\n8: Power Supply Reset6: Power Sink Reset\n10: Send Capabilities\n11: Capabilities\n12: Capabilities + CRC\n13: Capabilities Start CRCReceiveTimer\nStore copy of MessageID\n14: Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Capabilities sent\nStop NoResponseTimer\nStart SenderResponseTimerEvaluate Capabilities7: Hard Reset CompletePower Sink Reset\nPower Supply Reset\nTurn on V CONNChannel disabledChannel disabled\n9: Hard Reset Complete\nChannel enabled2: Send Hard Reset\n5: Hard Reset received\nChannel enabled\nPage 532 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.58, \"Steps for Sink initiated Hard Reset\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.31, \"Sink Initiated Hard Reset\" above.\nTable 8.58 Steps for Sink initiated Hard Reset\nStep Source Sink\n1The Policy Engine directs the Protocol Layer to\ngenerate Hard Reset Signaling .\nThe Policy Engine requests the DPM to reset the power\nsupply to USB Default Operation . The Policy Engine\nrequests the DPM to reset the Port Data Role to UFP\nand to turn off VCONN if this is on.\n2Protocol Layer resets MessageIDCounter , stored copy\nof MessageID and RetryCounter .\nProtocol Layer requests the PHY Layer send Hard Reset\nSignaling .\n3PHY Layer receives the Hard Reset Signaling and\ndisables the PHY Layer communications channel for\ntransmission and reception.PHY Layer sends the Hard Reset Signaling and then\ndisables the PHY Layer communications channel for\ntransmission and reception.\n4PHY Layer informs the Protocol Layer of the Hard\nReset .\nProtocol Layer resets MessageIDCounter , stored copy\nof MessageID and RetryCounter .\n5The Protocol Layer Informs the Policy Engine of the\nHard Reset .\nThe Policy Engine starts the NoResponseTimer and\nrequests the DPM to reset the Power Sink to USB Default\nOperation . The Policy Engine requests the DPM to\nreset the Port Data Role to DFP and to turn off VCONN if\nthis is on.\n6The Power Sink returns to USB Default Operation .\nThe Policy Engine informs the Protocol Layer that the\nPower Sink has been reset.\n7The Protocol Layer informs the PHY Layer that the Hard\nReset is complete.\nThe PHY Layer enables the PHY Layer communications\nchannel for transmission and reception.\n8The power supply is reset to USB Default Operation and\nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the\npower supply has been reset.\n9The Protocol Layer informs the PHY Layer that the Hard\nReset is complete. The PHY Layer enables the PHY Layer\ncommunications channel for transmission and\nreception.\nThe reset is complete and protocol communication can restart.\n10Policy Engine directs the Protocol Layer to send a\nSource_Capabilities Message that represents the\npower supply’s present capabilities.\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 53313PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n14Protocol Layer stores the MessageID of the incoming\nMessage .\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine stops the NoResponseTimer and starts\nthe SenderResponseTimer .\nUSB Power Delivery communication is re-established.Table 8.58 Steps for Sink initiated Hard Reset\nStep Source Sink\nPage 534 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.6.3 Source Initiated Hard Reset - Sink Long Reset\nThis is an example of a Hard Reset operation when initiated by a Source . In this example the Sink is slow responding\nto the reset causing the Source to send multiple Source_Capabilities Message s before it receives a GoodCRC\nMessage response. Figure 8.32, \"Source initiated reset - Sink long reset\" shows the Message s as they flow across the\nbus and within the devices to accomplish the Hard Reset .\nFigure 8.32 Source initiated reset - Sink long reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy EngineSource Sink\n1: Send Hard Reset\n2: Send Hard Reset\n3: Hard Reset\n4: Hard Reset received\nHard Reset CompleteStart NoResponseTimer\nWait tPSHardReset\nReset Power Supply\nReset Port Data Role to DFP\nTurn off V CONN\nReset MessageIDCounter, stored\ncopy of MessageID and\nRetryCounter\nReset MessageIDCounter, stored\ncopy of MessageID and\nRetryCounter5: Hard Reset received\nReset Power Sink\nReset Port Data Role to UFP\nTurn off V CONN\n6: Power Supply Reset\n11: Power Sink Reset\n13: Send Capabilities\n14: Capabilities\n15: Capabilities + CRC\n16: Capabilities Start CRCReceiveTimer\nStore copy of MessageID\n17: Capabilities received\n18: GoodCRC\n19: GoodCRC + CRC\n20: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n21: Capabilities sent\nStop SourceCapabilitiesTimer\nStop NoResponseTimer\nStart SenderResponseTimerEvaluate Capabilities8: Send Capabilities\n9: Capabilities\n10: Capabilities + CRCRun SourceCapabilityTimer\nSend Capabilities messages\nuntil GoodCRC response is\nreceived.\n12: Hard Reset CompletePower Sink ResetPower Supply Reset\nTurn on V CONNChannel disabled\nChannel disabled\n7: Hard Reset Complete\nChannel enabled\nChannel enabled\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 535Table 8.59, \"Steps for Source initiated Hard Reset - Sink long reset\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.32, \"Source initiated reset - Sink long reset\" above.\nTable 8.59 Steps for Source initiated Hard Reset - Sink long reset\nStep Source Sink\n1The Policy Engine directs the Protocol Layer to\ngenerate Hard Reset Signaling .\nThe Policy Engine starts the NoResponseTimer and\nrequests the DPM to reset the power supply to USB\nDefault Operation . The Policy Engine requests the\nDPM to reset the Port Data Role to DFP and to turn off\nVCONN if this is on.\n2Protocol Layer resets MessageIDCounter , stored copy\nof MessageID and RetryCounter .\nProtocol Layer requests the PHY Layer send Hard Reset\nSignaling .\n3PHY Layer sends the Hard Reset Signaling and then\ndisables the PHY Layer communications channel for\ntransmission and reception.PHY Layer receives the Hard Reset Signaling and\ndisables the PHY Layer communications channel for\ntransmission and reception.\n4PHY Layer informs the Protocol Layer of the Hard Reset .\nProtocol Layer resets MessageIDCounter , stored copy\nof MessageID and RetryCounter .\n5The Protocol Layer Informs the Policy Engine of the\nHard Reset .\nThe Policy Engine requests the DPM to reset the Power\nSink to USB Default Operation . The Policy Engine\nrequests the DPM to reset the Port Data Role to UFP\nand to turn off VCONN if this is on.\n6The power supply is reset to USB Default Operation and\nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the\npower supply has been reset.\n7The Protocol Layer informs the PHY Layer that the Hard\nReset is complete.\nThe PHY Layer enables the PHY Layer communications\nchannel for transmission and reception.\nThe reset is complete and protocol communication can restart.\n8Policy Engine directs the Protocol Layer to send a\nSource_Capabilities Message that represents the\npower supply’s present capabilities. Policy Engine\nstarts the SourceCapabilityTimer . The\nSourceCapabilityTimer times out one or more times\nuntil a GoodCRC Message response is received.\n9Protocol Layer creates the Message and passes to PHY\nLayer .\n10PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .Note: Source_Capabilities Message not received since\nchannel is disabled.\n11The Power Sink returns to USB Default Operation . The\nPolicy Engine informs the Protocol Layer that the\nPower Sink has been reset.\nPage 536 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1012The Protocol Layer informs the PHY Layer that the Hard\nReset is complete.\nThe PHY Layer enables the PHY Layer communications\nchannel for transmission and reception.\nThe reset is complete and protocol communication can restart.\n13Policy Engine directs the Protocol Layer to send a\nSource_Capabilities Message that represents the\npower supply’s present capabilities. Starts the\nSourceCapabilityTimer .\n14Protocol Layer creates the Message and passes to PHY\nLayer .\n15PHY Layer appends CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .PHY Layer receives the Source_Capabilities Message\nand checks the CRC to verify the Message .\n16PHY Layer removes the CRC and forwards the\nSource_Capabilities Message to the Protocol Layer .\n17Protocol Layer stores the MessageID of the incoming\nMessage .\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it.\n18Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n19PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n20PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n21Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nPolicy Engine stops the SourceCapabilityTimer , stops\nthe NoResponseTimer and starts the\nSenderResponseTimer .\nUSB Power Delivery communication is re-established.Table 8.59 Steps for Source initiated Hard Reset - Sink long reset\nStep Source Sink\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5378.3.2.7 Power Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.7.1",
    "title": "Source Initiated Power Role Swap",
    "full_path": "8.3.2.7.1 Source Initiated Power Role Swap",
    "page": 537,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.7.1.1",
    "title": "Source Initiated Power Role Swap (Accept)",
    "full_path": "8.3.2.7.1.1 Source Initiated Power Role Swap (Accept)",
    "page": 537,
    "level": 6,
    "parent_id": "8.3.2.7.1",
    "tags": [],
    "content": "This is an example of a successful Power Role Swap operation initiated by a Port which initially, at the start of this\nMessage sequence, is acting as a Source and therefore has Rp pulled up on its CC wire. It does not include any\nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2,\n\"Power Negotiation\" ).\nThere are four distinct phases to the Power Role Swap :\n A PR_Swap Message is sent.\n An Accept Message in response to the PR_Swap Message .\n The New Sink sets its power output to vSafe0V , then asserts Rd and sends a PS_RDY Message when this\nprocess is complete.\n The New Source asserts Rp, then sets its power output to vSafe5V and sends a PS_RDY Message when it\nis ready to supply power.\nFigure 8.33, \"Successful Power Role Swap Sequence Initiated by the Source\" shows the Message s as they flow across\nthe bus and within the devices to accomplish the Power Role Swap sequence.\nPage 538 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.33 Successful Power Role Swap Sequence Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sentStop PSSourceOffTimer\nCC -> R p\nSet Power Supply to 5V outputEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Source Port Initial Sink Port\nStart PSSourceOffTimer\nTell Power Sink to stop\nsinking currentPower Supply stops sourcing power\nCC -> R d\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\n36: PS_RDY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimerStart PSSourceOnTimerPort Power Role -> SourcePort Power Role -> SinkStop SenderResponseTimer\nTell Power Supply to stop sourcing power\nPower Supply reaches 5V\noutput\nStop PSSourceOnTimer\nTell Power Sink to start\nsinking power\nReset Protocol Layer\nNew Power RolesPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 539Table 8.60, \"Steps for a Successful Source Initiated Power Role Swap Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.33, \"Successful Power Role Swap Sequence Initiated by\nthe Source\" above.\nTable 8.60 Steps for a Successful Source Initiated Power Role Swap Sequence\nStep Initial Source Port Initially Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Source and decides that it is able and willing to do the\nPower Role Swap. It tells the Protocol Layer to form an\nAccept Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Accept\nMessage .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine requests its power supply to stop\nsupplying power and stops the SenderResponseTimer .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 540 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine starts the PSSourceOffTimer and tells the power\nsupply to stop sinking current.\n19The Policy Engine determines its power supply is no\nlonger supplying VBUS. The Policy Engine requests the\nDPM to assert the Rd pull down on the CC wire. The\nPolicy Engine then directs the Protocol Layer to\ngenerate a PS_RDY Message , with the Port Power Role\nMessage set to Sink , to tell its Port Partner that it can\nbegin to source VBUS.\n20Protocol Layer sets the Port Power Role Message to\nSink , creates the Message and passes to PHY Layer .\n21PHY Layer appends CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and checks the\nCRC to verify the Message .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it. The Policy Engine stops the\nPSSourceOffTimer , directs the DPM to apply the Rp pull\nup and then starts switching the power supply to\nvSafe5V Source operation.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n26PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. Policy Engine\nstarts PSSourceOnTimer .\n28Policy Engine , when its power supply is ready to supply\npower, tells the Protocol Layer to form a PS_RDY\nMessage . The Port Power Role Message is set to Source .\n29Protocol Layer creates the PS_RDY Message and passes\nto PHY Layer .Table 8.60 Steps for a Successful Source Initiated Power Role Swap Sequence\nStep Initial Source Port Initially Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 54130PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .\n31PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n32Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it.\n33Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n34PHY Layer appends a CRC and sends the GoodCRC\nMessage . The Policy Engine stops the\nPSSourceOnTimer , informs the power supply it can\nnow sink power and resets the Protocol Layer .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n35PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n36Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. The Policy\nEngine resets the CapsCounter , resets the Protocol\nLayer and starts the SwapSourceStartTimer which\nmust timeout before sending any Source_Capabilities\nMessage s.\nThe Power Role Swap is complete, the Power Role s have been reversed and the Port Partner s are free to Negotiate for more\npower.Table 8.60 Steps for a Successful Source Initiated Power Role Swap Sequence\nStep Initial Source Port Initially Sink Port\nPage 542 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.7.1.2 Source Initiated Power Role Swap (Reject)\nThis is an example of a rejected Power Role Swap operation initiated by a Port which initially, at the start of this\nMessage sequence, is acting as a Source and therefore has Rp pulled up on its CC wire.\nThere are several phases to the Power Role Swap :\n A PR_Swap Message is sent.\n An Reject Message in response to the PR_Swap Message .\nFigure 8.34, \"Rejected Power Role Swap Sequence Initiated by the Source\" shows the Message s as they flow across\nthe bus and within the devices.\nFigure 8.34 Rejected Power Role Swap Sequence Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Source Port Initial Sink Port\nStop SenderResponseTimer\nTell Power Supply to stop sourcing powerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 543Table 8.61, \"Steps for a Rejected Source Initiated Power Role Swap Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.34, \"Rejected Power Role Swap Sequence Initiated by the Source\"\nabove.\nTable 8.61 Steps for a Rejected Source Initiated Power Role Swap Sequence\nStep Initial Source Port Initially Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Source and decides that it is unable and unwilling to\ndo the Power Role Swap. It tells the Protocol Layer to\nform a Reject Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Reject\nMessage .PHY Layer appends a CRC and sends the Reject\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 543,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 544 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent. Table 8.61 Steps for a Rejected Source Initiated Power Role Swap Sequence\nStep Initial Source Port Initially Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5458.3.2.7.1.3 Source Initiated Power Role Swap (Wait)\nThis is an example of a Power Role Swap operation, with a wait response, initiated by a Port which initially, at the\nstart of this Message sequence, is acting as a Source and therefore has Rp pulled up on its CC wire.\nThere are several phases to the Power Role Swap :\n A PR_Swap Message is sent.\n A Wait Message in response to the PR_Swap Message .\nFigure 8.35, \"Power Role Swap Sequence with wait Initiated by the Source\" shows the Message s as they flow across\nthe bus and within the devices.\nFigure 8.35 Power Role Swap Sequence with wait Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Source Port Initial Sink Port\nStop SenderResponseTimer\nTell Power Supply to stop sourcing powerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 546 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.62, \"Steps for a Source Initiated Power Role Swap with Wait Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.35, \"Power Role Swap Sequence with wait Initiated by the Source\"\nabove.\nTable 8.62 Steps for a Source Initiated Power Role Swap with Wait Sequence\nStep Initial Source Port Initially Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Source and decides that it is able and willing to do the\nPower Role Swap but not at this time. It tells the Protocol\nLayer to form a Wait Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Wait\nMessage .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 546,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 54716PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sent. Table 8.62 Steps for a Source Initiated Power Role Swap with Wait Sequence\nStep Initial Source Port Initially Sink Port\nPage 548 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.7.2 Sink Initiated Power Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.7.2.1",
    "title": "Sink Initiated Power Role Swap (Accept)",
    "full_path": "8.3.2.7.2.1 Sink Initiated Power Role Swap (Accept)",
    "page": 548,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of a successful Power Role Swap operation initiated by a Port which initially, at the start of this\nMessage sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire. It does not include any\nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2,\n\"Power Negotiation\" ).\nThere are four distinct phases to the Power Role Swap :\n A PR_Swap Message is sent.\n An Accept Message in response to the PR_Swap Message .\n The New Sink sets its power output to vSafe0V , then asserts Rd and sends a PS_RDY Message when this\nprocess is complete.\n The New Source asserts Rp, then sets its power output to vSafe5V and sends a PS_RDY Message when it\nis ready to supply power.\nFigure 8.36, \"Successful Power Role Swap Sequence Initiated by the Sink\" shows the Message s as they flow across the\nbus and within the devices to accomplish the Power Role Swap .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 549Figure 8.36 Successful Power Role Swap Sequence Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sentEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Sink Port Initial Source Port\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimerStart PSSourceOnTimerPort Power Role -> SourcePort Power Role -> SinkStop SenderResponseTimer\nStart PSSourceOffTimer\nTell Power Sink to stop\nsinking current\nPower Supply reaches 5V\noutput\nStop PSSourceOnTimer\nTell Power Supply to start\nsinking power\nReset Protocol LayerTell Power Supply to stop sourcing power\nPower Supply stops sourcing power\nCC -> R d\nStop PSSourceOffTimer\nCC -> R p\nSet Power Supply to 5V output\nNew Power RolesPort Power Role = Sink\nCC = R dPort Power Role = Source\nCC = R p\nPage 550 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.63, \"Steps for a Successful Sink Initiated Power Role Swap Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.36, \"Successful Power Role Swap Sequence Initiated by the Sink\"\nabove.\nTable 8.63 Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep Initial Sink Port Initial Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Sink and decides that it is able and willing to do the\nPower Role Swap. It tells the Protocol Layer to form an\nAccept Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Accept\nMessage .PHY Layer appends a CRC and sends the Accept Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer ,\nstarts the PSSourceOffTimer and tells the power supply\nto stop sinking current.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 55115Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine tells the power supply to stop supplying power.\n19The Policy Engine determines its power supply is no\nlonger supplying VBUS. The Policy Engine requests the\nDPM to assert the Rd pull down on the CC wire. The\nPolicy Engine then directs the Protocol Layer to\ngenerate a PS_RDY Message , with the Port Power Role\nMessage set to Sink , to tell its Port Partner that it can\nbegin to source VBUS.\n20Protocol Layer sets the Port Power Role Message to Sink ,\ncreates the Message and passes to PHY Layer .\n21PHY Layer receives the PS_RDY Message and checks the\nCRC to verify the Message .PHY Layer appends CRC and sends the PS_RDY Message .\nStarts CRCReceiveTimer .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it. The Policy Engine stops the\nPSSourceOffTimer , directs the DPM to apply the Rp\npull up and then starts switching the power supply to\nvSafe5V Source operation.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. Policy Engine\nstarts PSSourceOnTimer .\n28Policy Engine , when its power supply is ready to\nsupply power, tells the Protocol Layer to form a PS_RDY\nMessage . The Port Power Role Message is set to Source .\n29Protocol Layer creates the PS_RDY Message and passes\nto PHY Layer .Table 8.63 Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep Initial Sink Port Initial Source Port\nPage 552 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1030PHY Layer appends a CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n31PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n32Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it. The Policy Engine stops the\nPSSourceOnTimer , informs the power supply that it can\nstart consuming power.\n33Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n34PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage . The Policy Engine stops the\nPSSourceOnTimer , informs the power supply it can\nnow sink power and resets the Protocol Layer .\n35PHY Layer removes the CRC and forwards the GoodCRC\nto the Protocol Layer .\n36Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. The Policy\nEngine resets the CapsCounter , resets the Protocol\nLayer and starts the SwapSourceStartTimer which\nmust timeout before sending any Source_Capabilities\nMessage s.\nThe Power Role Swap is complete, the Power Role s have been reversed and the Port Partner s are free to Negotiate for more\npower.Table 8.63 Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep Initial Sink Port Initial Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5538.3.2.7.2.2 Sink Initiated Power Role Swap (Reject)\nThis is an example of a rejected Power Role Swap operation initiated by a Port which initially, at the start of this\nMessage sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire.\nThere are several phases to the Power Role Swap :\n A PR_Swap Message is sent.\n A Reject Message in response to the PR_Swap Message .\nFigure 8.37, \"Rejected Power Role Swap Sequence Initiated by the Sink\" shows the Message s as they flow across the\nbus and within the devices.\nFigure 8.37 Rejected Power Role Swap Sequence Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Sink Port Initial Source Port\nStop SenderResponseTimerPort Power Role = Sink\nCC = R dPort Power Role = Source\nCC = R p\nPage 554 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.64, \"Steps for a Rejected Sink Initiated Power Role Swap Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.37, \"Rejected Power Role Swap Sequence Initiated by the Sink\" above.\nTable 8.64 Steps for a Rejected Sink Initiated Power Role Swap Sequence\nStep Initial Sink Port Initial Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Sink and decides that it is unable and unwilling to do\nthe Power Role Swap . It tells the Protocol Layer to form a\nReject Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Reject\nMessage .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 554,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 55516PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sentTable 8.64 Steps for a Rejected Sink Initiated Power Role Swap Sequence\nStep Initial Sink Port Initial Source Port\nPage 556 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.7.2.3 Sink Initiated Power Role Swap (Wait)\nThis is an example of a Power Role Swap operation, responded to with wait, initiated by a Port which initially, at the\nstart of this Message sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire.\nThere are several phases to the Power Role Swap :\n A PR_Swap Message is sent.\n A Wait Message in response to the PR_Swap Message .\nFigure 8.38, \"Power Role Swap Sequence with wait Initiated by the Sink\" shows the Message s as they flow across the\nbus and within the devices.\nFigure 8.38 Power Role Swap Sequence with wait Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate PR_Swap\nrequest\n: Policy Engine\n: Policy EngineInitial Sink Port Initial Source Port\nStop SenderResponseTimerPort Power Role = Sink\nCC = R dPort Power Role = Source\nCC = R p\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 557Table 8.65, \"Steps for a Sink Initiated Power Role Swap with Wait Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.38, \"Power Role Swap Sequence with wait Initiated by the Sink\"\nabove.\nTable 8.65 Steps for a Sink Initiated Power Role Swap with Wait Sequence\nStep Initial Sink Port Initial Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nPR_Swap Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the PR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Sink and decides that it is able and willing to do the\nPower Role Swap but not at this time. It tells the Protocol\nLayer to form a Wait Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Wait\nMessage .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 557,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 558 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Wait\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sentTable 8.65 Steps for a Sink Initiated Power Role Swap with Wait Sequence\nStep Initial Sink Port Initial Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5598.3.2.8 Fast Role Swap\nThis is an example of a successful Fast Role Swap operation initiated by a Port that is initially a Source and therefore\nhas Rp pulled up on its CC wire and which has lost power and needs to get vSafe5V quickly. It does not include any\nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2,\n\"Power Negotiation\" ).\nThere are several distinct phases to the Fast Role Swap Negotiation :\n The Initial Source stops driving its power output which starts transitioning to vSafe0V and send the\nFast Role Swap Request on the CC wire; these could occur in either order or simultaneously.\n The Initial Sink stops sinking power. At this point the New Source still has Rd asserted and the New Sink\nstill has Rp asserted.\n An FR_Swap Message is sent by the New Source within tFRSwapInit of detecting the Fast Swap signal.\n An Accept Message is sent by the New Sink in response to the FR_Swap Message .\n The New Sink asserts Rd and sends a PS_RDY Message indicating that the voltage on VBUS is at or below\nvSafe5V .\n The New Source asserts Rp and sends a PS_RDY Message indicating that it is acting as a Source and is sup -\nplying vSafe5V .\nNote: The New Source can start applying VBUS when VBUS is at or below vSafe5V (max) but will start driving\nVBUS to vSafe5V no later than tSrcFRSwap after detecting both the Fast Role Swap Request and that VBUS\nhas dropped below vSafe5V (min).\nFigure 8.39, \"Successful Fast Role Swap Sequence\" shows the Message s as they flow across the bus and within the\ndevices to accomplish the Fast Role Swap .\nPage 560 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.39 Successful Fast Role Swap Sequence\n: Protocol\n1: Send FR_Swap\n: PHY\n: PHY\n: Protocol\n2:FR_Swap\n3: FR_Swap + CRC\n4: FR_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: FR_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:FR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sentEvaluate FR_Swap request\n: Policy Engine\n: Policy EngineInitial Sink Port Initial Source Port\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimerStart PSSourceOnTimerPort Power Role -> SourcePort Power Role -> SinkStop SenderResponseTimer\nStart PSSourceOffTimer\nStop PSSourceOnTimer\nReset Protocol LayerPower Supply acting as a Sink and\nVBUSat or below vSafe5V\nCC -> R d\nvSafe5V is being sourced by the new Source\nStop PSSourceOffTimer\nCC -> R p\nNew Power RolesPort Power Role = Sink\nCC = R dPort Power Role = Source\nCC = R p\nTell Power Supply to Stop sourcing power and\nswitch to Sink operation\nSignal Fast Swap on the CC Wire\nFast Role Swap signal detected on CC Wire\nTell Power Supply to stop sinking current.Fast Swap signal\n(CC driven to Gnd through\nrFRSwapTx or\nrFRSwapCableTx)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 561Table 8.66, \"Steps for a Successful Fast Role Swap Sequence\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.39, \"Successful Fast Role Swap Sequence\" above.\nTable 8.66 Steps for a Successful Fast Role Swap Sequence\nStep Initial Sink Port Initial Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nThe DPM detects Fast Swap on the CC wire and tells the\npower supply to stop sinking current.\nThe Policy Engine directs the Protocol Layer to send an\nFR_Swap Message within tFRSwapInit of detecting the\nFast Swap signal.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nThe DPM tells the Power Supply to stop sourcing power\nand switch to Sink operation.\nThe DPM signals Fast Swap on the CC wire by driving CC\nto ground with a resistance of less than rFRSwapTx for\nat least tFRSwapTx .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the FR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the FR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the PR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received FR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the PR_Swap Message sent by\nthe Sink and decides that it is able and willing to do the\nPower Role Swap. It tells the Protocol Layer to form an\nAccept Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Accept\nMessage .PHY Layer appends a CRC and sends the Accept Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer ,\nstarts the PSSourceOffTimer .\nPage 562 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\n19The Policy Engine determines its power supply is no\nlonger supplying VBUS and is acting as a Sink . The Policy\nEngine requests the DPM to assert the Rd pull down on\nthe CC wire. The Policy Engine then directs the Protocol\nLayer to generate a PS_RDY Message , with the Port\nPower Role Message set to Sink , to tell its Port Partner\nthat it can begin to source VBUS.\n20Protocol Layer sets the Port Power Role Message to Sink ,\ncreates the Message and passes to PHY Layer .\n21PHY Layer receives the PS_RDY Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the PS_RDY Message .\nStarts CRCReceiveTimer .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it. The Policy Engine stops the\nPSSourceOffTimer .\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. Policy Engine\nstarts PSSourceOnTimer .Table 8.66 Steps for a Successful Fast Role Swap Sequence\nStep Initial Sink Port Initial Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 56328The Policy Engine directs the DPM to apply the Rp pull\nup.\nNote: At some point (either before or after receiving\nthe PS_RDY Message ) the New Source has ap -\nplied vSafe5V no later than tSrcFRSwap after\ndetecting the Fast Role Swap Request and that\nVBUS has dropped below vSafe5V .\nPolicy Engine , when its power supply is ready to\nsupply power, tells the Protocol Layer to form a PS_RDY\nMessage . The Port Power Role Message is set to Source .\n29Protocol Layer creates the PS_RDY Message and passes\nto PHY Layer .\n30PHY Layer appends a CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n31PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n32Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it. The Policy Engine stops the\nPSSourceOnTimer .\n33Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n34PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage . The Policy Engine resets the Protocol Layer .\n35PHY Layer removes the CRC and forwards the\nGoodCRC to the Protocol Layer .\n36Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent. The Policy\nEngine resets the CapsCounter , resets the Protocol\nLayer and starts the SwapSourceStartTimer which\nmust timeout before sending any Source_Capabilities\nMessage s.\nThe Fast Role Swap is complete, the Power Role s have been reversed and the Port Partner s are free to Negotiate for more\npower.Table 8.66 Steps for a Successful Fast Role Swap Sequence\nStep Initial Sink Port Initial Source Port\nPage 564 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9 Data Role Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.9.1",
    "title": "Data Role Swap, Initiated by UFP Operating as Sink",
    "full_path": "8.3.2.9.1 Data Role Swap, Initiated by UFP Operating as Sink",
    "page": 564,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.9.1.1",
    "title": "Data Role Swap, Initiated by UFP Operating as Sink (Accept)",
    "full_path": "8.3.2.9.1.1 Data Role Swap, Initiated by UFP Operating as Sink (Accept)",
    "page": 564,
    "level": 6,
    "parent_id": "8.3.2.9.1",
    "tags": [],
    "content": "Figure 8.40, \"Data Role Swap, UFP operating as Sink initiates\" shows an example sequence between a Port , which is\ninitially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP (Host ) and a Source (Rp asserted).\nA Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their operation as either a\nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Role s between DFP (Host ) and UFP (Device ).\nFigure 8.40 Data Role Swap, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nNew Host/Device RolesCC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)CC = R d(Sink)\nPort Data Role -> DFP (Host)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 565Table 8.67, \"Steps for Data Role Swap, UFP operating as Sink initiates\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.40, \"Data Role Swap, UFP operating as Sink initiates\" above.\nTable 8.67 Steps for Data Role Swap, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap . It tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Accept Message and passes\nto PHY Layer .\n12PHY Layer receives the Accept Message and checks\nthe CRC to verify the Message .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 565,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 566 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18The Policy Engine requests that Data Role is changed\nfrom UFP (Device ) to DFP (Host ).\nThe Power Delivery Data Role is now a DFP (Host ),\nwith Port Data Role set to DFP , still operating as a Sink\n(Rd asserted).Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe Policy Engine requests that the Data Role is\nchanged to UFP (Device ), with Port Data Role set to\nUFP and continues supplying power as a Source (Rp\nasserted).\nThe Data Role Swap is complete; the Data Role s have been reversed while maintaining the direction of power flow.Table 8.67 Steps for Data Role Swap, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5678.3.2.9.1.2 Data Role Swap, Initiated by UFP Operating as Sink (Reject)\nFigure 8.41, \"Rejected Data Role Swap, UFP operating as Sink initiates\" shows an example sequence between a Port ,\nwhich is initially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP (Host ) and a Source (Rp\nasserted). A Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is rejected.\nFigure 8.41 Rejected Data Role Swap, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nCC = R p(Source)\nPort Data Role -> DFP (Host)CC = R d(Sink)\nPort Data Role -> UFP (Device)CC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nPage 568 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.68, \"Steps for Rejected Data Role Swap, UFP operating as Sink initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.41, \"Rejected Data Role Swap, UFP operating as Sink\ninitiates\" above.\nTable 8.68 Steps for Rejected Data Role Swap, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is unable and unwilling to do the Data\nRole Swap . It tells the Protocol Layer to form a Reject\nMessage .\n11Protocol Layer creates the Reject Message and passes\nto PHY Layer .\n12PHY Layer receives the Reject Message and checks the\nCRC to verify the Message .PHY Layer appends a CRC and sends the Reject\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 568,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 56916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent. Table 8.68 Steps for Rejected Data Role Swap, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nPage 570 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9.1.3 Data Role Swap, Initiated by UFP Operating as Sink (Wait)\nFigure 8.42, \"Data Role Swap with Wait, UFP operating as Sink initiates\" shows an example sequence between a Port ,\nwhich is initially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP (Host ) and a Source (Rp\nasserted). A Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is delayed with a\nwait.\nFigure 8.42 Data Role Swap with Wait, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nCC = R p(Source)\nPort Data Role -> DFP (Host)CC = R d(Sink)\nPort Data Role -> UFP (Device)CC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 571Table 8.69, \"Steps for Data Role Swap with Wait, UFP operating as Sink initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.42, \"Data Role Swap with Wait, UFP operating as Sink\ninitiates\" above.\nTable 8.69 Steps for Data Role Swap with Wait, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap but not at this time . It tells the Protocol Layer\nto form a Wait Message .\n11Protocol Layer creates the Wait Message and passes to\nPHY Layer .\n12PHY Layer receives the Wait Message and checks the\nCRC to verify the Message .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 571,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 572 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nWait Message was successfully sent. Table 8.69 Steps for Data Role Swap with Wait, UFP operating as Sink initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5738.3.2.9.2 Data Role Swap, Initiated by UFP Operating as Source"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.9.2.1",
    "title": "Data Role Swap, Initiated by UFP Operating as Source (Accept)",
    "full_path": "8.3.2.9.2.1 Data Role Swap, Initiated by UFP Operating as Source (Accept)",
    "page": 573,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.43, \"Data Role Swap, UFP operating as Source initiates\" shows an example sequence between a Port , which\nis initially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink (Rd\nasserted). A Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) but exchange Data Role s between DFP (Host ) and\nUFP (Device ).\nFigure 8.43 Data Role Swap, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initially DFP Sink Port\nStop SenderResponseTimer\nNew Host/Device RolesCC = R d(Sink)\nPort Data Role -> UFP (Device)CC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> DFP (Host)\nPage 574 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.70, \"Steps for Data Role Swap, UFP operating as Source initiates\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.43, \"Data Role Swap, UFP operating as Source initiates\" above.\nTable 8.70 Steps for Data Role Swap, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap . It tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Accept Message and passes\nto PHY Layer .\n12PHY Layer receives the Accept Message and checks\nthe CRC to verify the Message .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 574,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 57517PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18The Policy Engine requests that Data Role is changed\nfrom UFP (Device ) to DFP (Host ).\nThe Power Delivery Data Role is now a DFP (Host ), and\nPort Data Role set to DFP and continues supplying\npower as a Source (Rp asserted).Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine requests that the Data Role is changed to UFP\n(Device ), with Port Data Role set to UFP and still\noperating as a Sink (Rp asserted).\nThe Data Role Swap is complete; the Data Role s have been reversed while maintaining the direction of power flow.Table 8.70 Steps for Data Role Swap, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nPage 576 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9.2.2 Data Role Swap, Initiated by UFP Operating as Source (Reject)\nFigure 8.44, \"Rejected Data Role Swap, UFP operating as Source initiates\" shows an example sequence between a\nPort , which is initially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink\n(Rd asserted). A Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their\noperation as either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is\nrejected.\nFigure 8.44 Rejected Data Role Swap, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initially DFP Sink Port\nStop SenderResponseTimer\nCC = R d(Sink)\nPort Data Role -> DFP (Host)CC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 577Table 8.71, \"Steps for Rejected Data Role Swap, UFP operating as Source initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.44, \"Rejected Data Role Swap, UFP operating as Source\ninitiates\" above.\nTable 8.71 Steps for Rejected Data Role Swap, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is unable and unwilling to do the Data\nRole Swap . It tells the Protocol Layer to form a Reject\nMessage .\n11Protocol Layer creates the Reject Message and passes\nto PHY Layer .\n12PHY Layer receives the Reject Message and checks the\nCRC to verify the Message .PHY Layer appends a CRC and sends the Reject\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 577,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 578 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent.Table 8.71 Steps for Rejected Data Role Swap, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5798.3.2.9.2.3 Data Role Swap, Initiated by UFP Operating as Source (Wait)\nFigure 8.45, \"Data Role Swap with Wait, UFP operating as Source initiates\" shows an example sequence between a\nPort , which is initially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink\n(Rd asserted). A Data Role Swap is initiated by the UFP . During the process the Port Partner s maintain their\noperation as either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is delayed\nwith a wait.\nFigure 8.45 Data Role Swap with Wait, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initially DFP Sink Port\nStop SenderResponseTimer\nCC = R d(Sink)\nPort Data Role -> DFP (Host)CC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)\nPage 580 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.72, \"Steps for Data Role Swap with Wait, UFP operating as Source initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.45, \"Data Role Swap with Wait, UFP operating as Source\ninitiates\" above.\nTable 8.72 Steps for Data Role Swap with Wait, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap but not at this time . It tells the Protocol Layer to\nform a Wait Message .\n11Protocol Layer creates the Wait Message and passes to\nPHY Layer .\n12PHY Layer receives the Wait Message and checks the\nCRC to verify the Message .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 580,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 58116PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nWait Message was successfully sent.Table 8.72 Steps for Data Role Swap with Wait, UFP operating as Source initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nPage 582 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9.3 Data Role Swap, Initiated by DFP Operating as Source"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.9.3.1",
    "title": "Data Role Swap, Initiated by DFP Operating as Source (Accept)",
    "full_path": "8.3.2.9.3.1 Data Role Swap, Initiated by DFP Operating as Source (Accept)",
    "page": 582,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.46, \"Data Role Swap, DFP operating as Source initiates\" shows an example sequence between a Port , which\nis initially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp asserted). A\nData Role Swap is initiated by the DFP . During the process the Port Partner s maintain their operation as either a\nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Role s between DFP (Host ) and UFP (Device ).\nFigure 8.46 Data Role Swap, DFP operating as Source initiates\n: Protocol\n10: Send Accept\n: PHY\n: PHY\n: Protocol\n11:Accept\n12: Accept + CRC\n13: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Accept sent\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nNew Host/Device RolesCC = R d(Sink)\nPort Data Role -> DFP (Host)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)CC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 583Table 8.73, \"Steps for Data Role Swap, DFP operating as Source initiates\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.46, \"Data Role Swap, DFP operating as Source initiates\" above.\nTable 8.73 Steps for Data Role Swap, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and passes\nto PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the DR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap . It tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Accept Message and passes\nto PHY Layer .\n12PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Accept Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 583,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\nPage 584 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine requests that the Data Role is changed to DFP\n(Host ), with Port Data Role set to DFP , still operating as\na Sink (Rd asserted).The Policy Engine requests that Data Role is changed\nfrom DFP (Host ) to UFP (Device ).\nThe Power Delivery Data Role is now a UFP (Device ),\nwith Port Data Role set to UFP and continues supplying\npower as a Source (Rp asserted).\nThe Data Role Swap is complete; the Data Role s have been reversed while maintaining the direction of power flow.Table 8.73 Steps for Data Role Swap, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5858.3.2.9.3.2 Data Role Swap, Initiated by DFP Operating as Source (Reject)\nFigure 8.47, \"Rejected Data Role Swap, DFP operating as Source initiates\" shows an example sequence between a\nPort , which is initially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp\nasserted). A Data Role Swap is initiated by the DFP . During the process the Port Partners maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is rejected.\nFigure 8.47 Rejected Data Role Swap, DFP operating as Source initiates\n: Protocol\n10: Send Reject\n: PHY\n: PHY\n: Protocol\n11:Reject\n12: Reject + CRC\n13: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Reject sent\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nCC = R d(Sink)\nPort Data Role -> UFP (Device)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)CC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> DFP (Host)\nPage 586 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.74, \"Steps for Rejected Data Role Swap, DFP operating as Source initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.47, \"Rejected Data Role Swap, DFP operating as Source\ninitiates\" above.\nTable 8.74 Steps for Rejected Data Role Swap, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and passes\nto PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the DR_Swap\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is unable and unwilling to do the Data\nRole Swap . It tells the Protocol Layer to form an Reject\nMessage .\n11Protocol Layer creates the Reject Message and passes to\nPHY Layer .\n12PHY Layer appends a CRC and sends the Reject Message .\nStarts CRCReceiveTimer .PHY Layer receives the Reject Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 586,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 58716PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent.Table 8.74 Steps for Rejected Data Role Swap, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nPage 588 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9.3.3 Data Role Swap, Initiated by DFP Operating as Source (Wait)\nFigure 8.48, \"Data Role Swap with Wait, DFP operating as Source initiates\" shows an example sequence between a\nPort , which is initially a UFP (Device ) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp\nasserted). A Data Role Swap is initiated by the DFP . During the process the Port Partners maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is delayed by wait.\nFigure 8.48 Data Role Swap with Wait, DFP operating as Source initiates\n: Protocol\n10: Send Wait\n: PHY\n: PHY\n: Protocol\n11:Wait\n12: Wait + CRC\n13: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Wait sent\n: Policy Engine\n: Policy EngineInitial UFP Sink Port Initial DFP Source Port\nStop SenderResponseTimer\nCC = R d(Sink)\nPort Data Role -> UFP (Device)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)CC = R d(Sink)\nPort Data Role = UFP (Device)CC = R p(Source)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> DFP (Host)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 589Table 8.75, \"Steps for Data Role Swap with Wait, DFP operating as Source initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.48, \"Data Role Swap with Wait, DFP operating as\nSource initiates\" above.\nTable 8.75 Steps for Data Role Swap with Wait, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\n1Port starts as a UFP (Device ) operating as a Sink with Rd\nasserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as Source with Rp\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and passes\nto PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy Engine\nstarts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap but not at this time . It tells the Protocol Layer to\nform an Wait Message .\n11Protocol Layer creates the Wait Message and passes to\nPHY Layer .\n12PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .PHY Layer receives the Wait Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 589,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\nPage 590 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sent.Table 8.75 Steps for Data Role Swap with Wait, DFP operating as Source initiates\nStep Initial UFP Sink Port Initial DFP Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5918.3.2.9.4 Data Role Swap, Initiated by DFP Operating as Sink"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.9.4.1",
    "title": "Data Role Swap, Initiated by DFP Operating as Sink (Accept)",
    "full_path": "8.3.2.9.4.1 Data Role Swap, Initiated by DFP Operating as Sink (Accept)",
    "page": 591,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.49, \"Data Role Swap, DFP operating as Sink initiates\" shows an example sequence between a Port , which is\ninitially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink (Rd asserted).\nA Data Role Swap is initiated by the DFP . During the process the Port Partner s maintain their operation as either a\nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Role s between DFP (Host ) and UFP (Device ).\nFigure 8.49 Data Role Swap, DFP operating as Sink initiates\n: Protocol\n10: Send Accept\n: PHY\n: PHY\n: Protocol\n11:Accept\n12: Accept + CRC\n13: Accept Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Accept sent\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initial DFP Sink Port\nStop SenderResponseTimer\nNew Host/Device RolesCC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> DFP (Host)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = R p(Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\nPage 592 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.76, \"Steps for Data Role Swap, DFP operating as Sink initiates\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.49, \"Data Role Swap, DFP operating as Sink initiates\" above.\nTable 8.76 Steps for Data Role Swap, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap . It tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Accept Message and passes\nto PHY Layer .\n12PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Accept Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 592,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 59317PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine requests that the Data Role is changed to DFP\n(Host ), with Port Data Role set to DFP and continues\nsupplying power as a Source (Rp asserted).The Policy Engine requests that Data Role is changed\nfrom DFP (Host ) to UFP (Device ).\nThe Power Delivery Data Role is now a UFP (Device ),\nwith Port Data Role set to UFP , still operating as a Sink\n(Rd asserted).\nThe Data Role Swap is complete; the Data Role s have been reversed while maintaining the direction of power flow.Table 8.76 Steps for Data Role Swap, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nPage 594 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.9.4.2 Data Role Swap, Initiated by DFP Operating as Sink (Reject)\nFigure 8.50, \"Rejected Data Role Swap, DFP operating as Sink initiates\" shows an example sequence between a Port ,\nwhich is initially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink (Rd\nasserted). A Data Role Swap is initiated by the DFP . During the process the Port Partners maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is rejected.\nFigure 8.50 Rejected Data Role Swap, DFP operating as Sink initiates\n: Protocol\n10: Send Reject\n: PHY\n: PHY\n: Protocol\n11:Reject\n12: Reject + CRC\n13: Reject Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Reject sent\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initial DFP Sink Port\nStop SenderResponseTimerCC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = R d(Sink)\nPort Data Role -> DFP (Host)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 595Table 8.77, \"Steps for Rejected Data Role Swap, DFP operating as Sink initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.50, \"Rejected Data Role Swap, DFP operating as Sink\ninitiates\" above.\nTable 8.77 Steps for Rejected Data Role Swap, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is unable and unwilling to do the Data\nRole Swap . It tells the Protocol Layer to form an Reject\nMessage .\n11Protocol Layer creates the Reject Message and passes\nto PHY Layer .\n12PHY Layer appends a CRC and sends the Reject\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Reject Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 595,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 596 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent.Table 8.77 Steps for Rejected Data Role Swap, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 5978.3.2.9.4.3 Data Role Swap, Initiated by DFP Operating as Sink (Wait)\nFigure 8.51, \"Data Role Swap with Wait, DFP operating as Sink initiates\" shows an example sequence between a Port ,\nwhich is initially a UFP (Device ) and a Source (Rp asserted), and a Port which is initially a DFP (Host ) and a Sink (Rd\nasserted). A Data Role Swap is initiated by the DFP . During the process the Port Partners maintain their operation\nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Role s is delayed with a\nwait.\nFigure 8.51 Data Role Swap with Wait, DFP operating as Sink initiates\n: Protocol\n10: Send Wait\n: PHY\n: PHY\n: Protocol\n11:Wait\n12: Wait + CRC\n13: Wait Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Wait sent\n: Policy Engine\n: Policy EngineInitial UFP Source Port Initial DFP Sink Port\nStop SenderResponseTimerCC = R p(Source)\nPort Data Role = UFP (Device)CC = R d(Sink)\nPort Data Role = DFP (Host)\nCC = R p(Source)\nPort Data Role -> UFP (Device)1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = R d(Sink)\nPort Data Role -> DFP (Host)\nPage 598 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.78, \"Steps for Data Role Swap with Wait, DFP operating as Sink initiates\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.51, \"Data Role Swap with Wait, DFP operating as Sink\ninitiates\" above.\nTable 8.78 Steps for Data Role Swap with Wait, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\n1Port starts as a UFP (Device ) operating as Source with\nRp asserted and Port Data Role set to UFP .Port starts as a DFP (Host ) operating as a Sink with Rd\nasserted and Port Data Role set to DFP . The Policy\nEngine directs the Protocol Layer to send a DR_Swap\nMessage .\n2Protocol Layer creates the DR_Swap Message and\npasses to PHY Layer .\n3PHY Layer receives the DR_Swap Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the DR_Swap\nMessage . Starts CRCReceiveTimer .\n4PHY Layer removes the CRC and forwards the\nDR_Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends CRC and sends the GoodCRC\nMessage .PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDR_Swap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine evaluates the DR_Swap Message and\ndecides that it is able and willing to do the Data Role\nSwap but not at this time . It tells the Protocol Layer to\nform a Wait Message .\n11Protocol Layer creates the Wait Message and passes to\nPHY Layer .\n12PHY Layer appends a CRC and sends the Wait\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Wait Message and checks the\nCRC to verify the Message .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 598,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 59916PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nWait Message was successfully sent.Table 8.78 Steps for Data Role Swap with Wait, DFP operating as Sink initiates\nStep Initial UFP Source Port Initial DFP Sink Port\nPage 600 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.10 V CONN Swap"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.10.1",
    "title": "V CONN Source Swap, initiated by V CONN Source",
    "full_path": "8.3.2.10.1 V CONN Source Swap, initiated by V CONN Source",
    "page": 600,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.10.1.1",
    "title": "V CONN Source Swap, initiated by V CONN Source (Accept)",
    "full_path": "8.3.2.10.1.1 V CONN Source Swap, initiated by V CONN Source (Accept)",
    "page": 600,
    "level": 6,
    "parent_id": "8.3.2.10.1",
    "tags": [],
    "content": "Figure 8.52, \"Successful VCONN Source Swap, initiated by V CONN Source\" shows an example sequence where the\nVCONN Source and tells its Port Partner to supply VCONN . During the process the Port Partner s, keep their Power Role\nas Source or Sink , maintain their operation as either a Source or a Sink (power remains constant) but exchange the\nVCONN Source role.\nFigure 8.52 Successful VCONN Source Swap, initiated by V CONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN Source Port Initially V CONN off\nVconn is on\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerStop SenderResponseTimer\nStart VCONNOnTimer\nStop VCONNOnTimer\nTell power supply to turn off V CONN\nVCONN has been swappedVCONN off VCONN Source\nTell power supply to\nstart supplying V CONN\nVCONN is off\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 601Table 8.79, \"Steps for Source to Sink V CONN Source Swap\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.52, \"Successful VCONN Source Swap, initiated by V CONN Source\" above.\nTable 8.79 Steps for Source to Sink V CONN Source Swap\nStep Initially V CONN Source Initially V CONN off\n1The VCONN Source ’s Policy Engine directs the Protocol\nLayer to send a VCONN _Swap Message .VCONN is off.\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is able and willing to do\nthe VCONN Swap . It tells the Protocol Layer to form an\nAccept Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Accept Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Accept\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer\nand starts the VCONN OnTimer .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 602 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent. The Policy\nEngine asks the DPM to turn on VCONN .\n19The DPM informs the Policy Engine that its power\nsupply is supplying VCONN . The Policy Engine directs\nthe Protocol Layer to generate a PS_RDY Message to tell\nthe Source it can turn off V CONN .\n20Protocol Layer creates the PS_RDY Message and passes\nto PHY Layer .\n21PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer appends a CRC and sends the GoodCRC\nMessage . The Policy Engine stops the V CONN OnTimer ,\nand tells the power supply to stop sourcing VCONN .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "VCONN is off.Protocol Layer verifies and increments the",
    "full_path": "27 VCONN is off.Protocol Layer verifies and increments the",
    "page": 602,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "MessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.\nThe Port Partner s have swapped VCONN Source role.Table 8.79 Steps for Source to Sink V CONN Source Swap\nStep Initially V CONN Source Initially V CONN off\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6038.3.2.10.1.2 V CONN Source Swap, initiated by VCONN Source (Reject)\nFigure 8.53, \"Rejected VCONN Source Swap, initiated by V CONN Source\" shows an example sequence where the VCONN\nSource and tells its Port Partner to supply V CONN and is rejected. During the process the Port Partner s, keep their\nPower Role as Source or Sink , maintain their operation as either a Source or a Sink (power remains constant) and\ndon't exchange the VCONN Source role.\nFigure 8.53 Rejected VCONN Source Swap, initiated by V CONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN Source Port Initially V CONN off\nStop SenderResponseTimerVCONN off VCONN Source\nPage 604 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.80, \"Steps for Rejected V CONN Source Swap\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.53, \"Rejected VCONN Source Swap, initiated by V CONN Source\" above.\nTable 8.80 Steps for Rejected V CONN Source Swap\nStep Initially V CONN Source Initially V CONN off\n1The VCONN Source ’s Policy Engine directs the Protocol\nLayer to send a VCONN _Swap Message .VCONN is off.\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is unable and unwilling\nto do the VCONN Swap . It tells the Protocol Layer to form\nan Reject Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Reject Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Reject Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer\nand starts the VCONN OnTimer .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 60517PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sentTable 8.80 Steps for Rejected V CONN Source Swap\nStep Initially V CONN Source Initially V CONN off\nPage 606 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.10.1.3 V CONN Source Swap, initiated by V CONN Source (Wait)\nFigure 8.54, \"V CONN Source Swap with Wait, initiated by V CONN Source\" shows an example sequence where the VCONN\nSource and tells its Port Partner to supply VCONN and is told to wait. During the process the Port Partner s, keep their\nPower Role as Source or Sink , maintain their operation as either a Source or a Sink (power remains constant) and\ndon't exchange the VCONN Source role.\nFigure 8.54 V CONN Source Swap with Wait, initiated by V CONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN Source Port Initially V CONN off\nStop SenderResponseTimerVCONN off VCONN Source\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 607Table 8.81, \"Steps for V CONN Source Swap with Wait\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.54, \"V CONN Source Swap with Wait, initiated by V CONN Source\" above.\nTable 8.81 Steps for V CONN Source Swap with Wait\nStep Initially V CONN Source Initially V CONN off\n1The VCONN Source ’s Policy Engine directs the Protocol\nLayer to send a VCONN _Swap Message .VCONN is off.\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is able and willing to do\nthe VCONN Swap but not at this time. It tells the Protocol\nLayer to form an Wait Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Wait Message and compares the\nCRC it calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it.\n14The Policy Engine stops the SenderResponseTimer\nand starts the VCONN OnTimer .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 608 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sentTable 8.81 Steps for V CONN Source Swap with Wait\nStep Initially V CONN Source Initially V CONN off\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6098.3.2.10.2 V CONN Source Swap, initiated by non-V CONN Source"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.10.2.1",
    "title": "V CONN Source Swap, initiated by non-V CONN Source (Accept)",
    "full_path": "8.3.2.10.2.1 V CONN Source Swap, initiated by non-V CONN Source (Accept)",
    "page": 609,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.55, \"V CONN Source Swap, initiated by non-V CONN Source\" shows an example where the Port which is not\ninitially supplying VCONN and requests a V CONN Swap . During the process the Port Partner s, keep their Power Role\nas Source or Sink , maintain their operation as either a Source or a Sink (power remains constant) but exchange the\nVCONN Source .\nFigure 8.55 V CONN Source Swap, initiated by non-V CONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN off Initially V CONN Source Port\nVconn is onStart VCONNOnTimerVCONN Source VCONN Off\nStop SenderResponseTimer\nTell power supply to start\nsupplying V CONN\n19: Send PS_RDY20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nSource is supplying V CONNStop VCONNOnTimer\nTell power supply to turn off V CONN\nVCONN is off\nPage 610 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.82, \"Steps for V CONN Source Swap, Initiated by non-V CONN Source\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.55, \"V CONN Source Swap, initiated by non-V CONN Source\" above.\nTable 8.82 Steps for V CONN Source Swap, Initiated by non-V CONN Source\nStep Initially V CONN off Initially V CONN Source\n1The Source starts with VCONN off. The Policy Engine\ndirects the Protocol Layer to send a VCONN _Swap\nMessage .The Sink starts as the V CONN Source .\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is able and willing to do\nthe VCONN Swap . It tells the Protocol Layer to form an\nAccept Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Accept Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Accept Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer .\nThe Policy Engine tells the DPM to turn on VCONN .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 61117PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nThe Policy Engine starts the VCONN OnTimer .\n19The DPM tells the Policy Engine that its power supply\nis supplying V CONN . The Policy Engine directs the\nProtocol Layer to generate a PS_RDY Message to tell the\nSink it can turn off V CONN .\n20Protocol Layer creates the PS_RDY Message and passes\nto PHY Layer .\n21PHY Layer appends a CRC and sends the PS_RDY\nMessage . Starts CRCReceiveTimer .PHY Layer receives the PS_RDY Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n22PHY Layer removes the CRC and forwards the PS_RDY\nMessage to the Protocol Layer .\n23Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY\nMessage information to the Policy Engine that\nconsumes it.\n24Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n25PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the GoodCRC\nMessage . The Policy Engine stops the VCONN OnTimer ,\nand tells the power supply to stop sourcing VCONN .\n26PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n27Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPS_RDY Message was successfully sent.VCONN is off.\nThe Port Partner s have swapped VCONN Source role.Table 8.82 Steps for V CONN Source Swap, Initiated by non-V CONN Source\nStep Initially V CONN off Initially V CONN Source\nPage 612 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.10.2.2 V CONN Source Swap, initiated by non-V CONN Source (Reject)\nFigure 8.56, \"Rejected V CONN Source Swap, initiated by non-V CONN Source\" shows an example where the Port which\nis not initially supplying VCONN and requests a VCONN Swap which is rejected. During the process the Port Partner s,\nkeep their Power Role as Source or Sink , maintain their operation as either a Source or a Sink (power remains\nconstant) and don't exchange the VCONN Source .\nFigure 8.56 Rejected V CONN Source Swap, initiated by non-V CONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN off Initially V CONN Source Port\nVCONN Source VCONN Off\nStop SenderResponseTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 613Table 8.83, \"Steps for Rejected V CONN Source Swap, Initiated by non-V CONN Source\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.56, \"Rejected V CONN Source Swap, initiated by non-\nVCONN Source\" above.\nTable 8.83 Steps for Rejected V CONN Source Swap, Initiated by non-V CONN Source\nStep Initially V CONN off Initially V CONN Source\n1The Source starts with VCONN off. The Policy Engine\ndirects the Protocol Layer to send a VCONN _Swap\nMessage .The Sink starts as the V CONN Source .\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is unable and unwilling\nto do the VCONN Swap . It tells the Protocol Layer to form a\nReject Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Reject Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .PHY Layer appends a CRC and sends the Reject Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it.\n14The Policy Engine stops the SenderResponseTimer .\nThe Policy Engine tells the DPM to turn on VCONN .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 614 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent. Table 8.83 Steps for Rejected V CONN Source Swap, Initiated by non-V CONN Source\nStep Initially V CONN off Initially V CONN Source\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6158.3.2.10.2.3 V CONN Source Swap (Wait)\nFigure 8.57, \"V CONN Source Swap with Wait\" shows an example where the Port requests a VCONN Swap which is\ndelayed with a wait. During the process the Port Partner s, keep their Power Role as Source or Sink , maintain their\noperation as either a Source or a Sink (power remains constant) and don't exchange the VCONN Source .\nFigure 8.57 V CONN Source Swap with Wait\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerEvaluate VCONN_Swap\nrequest\n: Policy Engine\n: Policy EngineInitially V CONN off Initially V CONN Source Port\nVCONN Source VCONN Off\nStop SenderResponseTimer\nPage 616 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.84, \"Steps for V CONN Source Swap with Wait\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.57, \"V CONN Source Swap with Wait\" above.\nTable 8.84 Steps for V CONN Source Swap with Wait\nStep Initially V CONN off Initially V CONN Source\n1The Source starts with VCONN off. The Policy Engine\ndirects the Protocol Layer to send a VCONN _Swap\nMessage .The Sink starts as the V CONN Source .\n2Protocol Layer creates the VCONN _Swap Message and\npasses to PHY Layer .\n3PHY Layer appends CRC and sends the VCONN _Swap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the VCONN _Swap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVCONN _Swap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN _Swap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVCONN _Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine evaluates the VCONN _Swap Message sent\nby the Source and decides that it is able and willing to do\nthe VCONN Swap but not at this time. It tells the Protocol\nLayer to form a Wait Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Wait Message and compares the\nCRC it calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Wait Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it.\n14The Policy Engine stops the SenderResponseTimer .\nThe Policy Engine tells the DPM to turn on VCONN .\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 61717PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sent. Table 8.84 Steps for V CONN Source Swap with Wait\nStep Initially V CONN off Initially V CONN Source\nPage 618 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11 Additional Capabilities, Status and Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.1",
    "title": "Alert",
    "full_path": "8.3.2.11.1 Alert",
    "page": 618,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.1.1",
    "title": "Source sends Alert to a Sink",
    "full_path": "8.3.2.11.1.1 Source sends Alert to a Sink",
    "page": 618,
    "level": 6,
    "parent_id": "8.3.2.11.1",
    "tags": [],
    "content": "Figure 8.58, \"Source Alert to Sink\" shows an example sequence between a Source and a Sink where the Source alerts\nthe Sink that there has been a status change. This AMS will be followed by getting the Source status to determine\nfurther details of the alert (see Section 8.3.2.11.2, \"Status\" ).\nFigure 8.58 Source Alert to Sink\n: Sink Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Source Policy EngineSink Port Source Port\n1: Send Alert\n2: Alert\n3: Alert + CRC\n4: Alert\nCheck MessageID against local copy\nStore copy of MessageID\n5: Alert received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Alert sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 619Table 8.85, \"Steps for Source Alert to Sink\" below provides a detailed explanation of what happens at each labeled\nstep in Figure 8.58, \"Source Alert to Sink\" above.\nTable 8.85 Steps for Source Alert to Sink\nStep Sink Source\n1The DPM indicates a Source alert condition. The Policy\nEngine tells the Protocol Layer to form an Alert\nMessage .\n2Protocol Layer creates the Alert Message and passes to\nPHY Layer .\n3PHY Layer receives the Alert Message and compares the\nCRC it calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Alert Message .\nStarts CRCReceiveTimer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Alert\nMessage to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine informs the DPM .",
    "full_path": "5 The Policy Engine informs the DPM .",
    "page": 619,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Alert\nMessage was successfully sent.\nPage 620 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.1.2 Sink sends Alert to a Source\nFigure 8.59, \"Sink Alert to Source\" shows an example sequence between a Source and a Sink where the Sink alerts\nthe Source that there has been a status change. This AMS will be followed by getting the Sink status to determine\nfurther details of the alert (see Section 8.3.2.11.2, \"Status\" ).\nFigure 8.59 Sink Alert to Source\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy EngineSource Port Sink Port\n1: Send Alert\n2: Alert\n3: Alert + CRC\n4: Alert\nCheck MessageID against local copy\nStore copy of MessageID\n5: Alert received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Alert sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 621Table 8.86, \"Steps for Sink Alert to Source\" below provides a detailed explanation of what happens at each labeled\nstep in Figure 8.59, \"Sink Alert to Source\" above.\nTable 8.86 Steps for Sink Alert to Source\nStep Source Sink\n1The DPM indicates a Sink alert condition. The Policy\nEngine tells the Protocol Layer to form an Alert\nMessage .\n2Protocol Layer creates the Alert Message and passes to\nPHY Layer .\n3PHY Layer receives the Alert Message and compares the\nCRC it calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Alert Message .\nStarts CRCReceiveTimer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Alert\nMessage to the Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine informs the DPM .",
    "full_path": "5 The Policy Engine informs the DPM .",
    "page": 621,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Alert\nMessage was successfully sent.\nPage 622 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.2 Status"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.2.1",
    "title": "Sink Gets Source Status",
    "full_path": "8.3.2.11.2.1 Sink Gets Source Status",
    "page": 622,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.60, \"Sink Gets Source Status\" shows an example sequence between a Source and a Sink where, after the Sink\nhas received an alert (see Section 8.3.2.11.2, \"Status\" ) that there has been a status change, the Sink gets more details\non the change.\nFigure 8.60 Sink Gets Source Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source Status\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\n18: Status sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 623Table 8.87, \"Steps for a Sink getting Source Status Sequence\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.60, \"Sink Gets Source Status\" above.\nTable 8.87 Steps for a Sink getting Source Status Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Status Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Status\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Status Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Status Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nstatus which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nStatus Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Status\nMessage .PHY Layer appends a CRC and sends the Status\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 623,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 624 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nStatus Message was successfully sent.\nThe Source has informed the Sink of its present status.Table 8.87 Steps for a Sink getting Source Status Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6258.3.2.11.2.2 Source Gets Sink Status\nFigure 8.61, \"Source Gets Sink Status\" shows an example sequence between a Source and a Sink where, after the\nSource has received an alert (see Section 8.3.2.11.2, \"Status\" ) that there has been a status change, the Source gets\nmore details on the change.\nFigure 8.61 Source Gets Sink Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Sink Status\nInformation from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\nStop SenderResponseTimerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\n18: Status sent\nPage 626 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.88, \"Steps for a Source getting Sink Status Sequence\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.61, \"Source Gets Sink Status\" above.\nTable 8.88 Steps for a Source getting Sink Status Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Status Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Status\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Status Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Status Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nstatus which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nStatus Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Status\nMessage .PHY Layer appends a CRC and sends the Status Message .\nStarts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 626,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 62716PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nStatus Message was successfully sent.\nThe Sink has informed the Source of its present status.Table 8.88 Steps for a Source getting Sink Status Sequence\nStep Source Port Sink Port\nPage 628 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.2.3 V CONN Source Gets Cable Plug Status\nFigure 8.62, \"V CONN Source Gets Cable Plug Status\" shows an example sequence between a VCONN Source and a Cable\nPlug where, after the VCONN Source has received an alert (see Section 8.3.2.11.2, \"Status\" ) that there has been a\nstatus change, the VCONN Source gets more details on the change.\nFigure 8.62 V CONN Source Gets Cable Plug Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Status Information\nfrom DPM\n: Policy Engine\n: Policy EngineVCONN Source Port Cable Plug\nStop SenderResponseTimer\n18: Status sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 629Table 8.89, \"Steps for a V CONN Source getting Cable Plug Status Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.62, \"V CONN Source Gets Cable Plug Status\" above.\nTable 8.89 Steps for a V CONN Source getting Cable Plug Status Sequence\nStep VCONN Source Port Cable Plug\n1Policy Engine directs the Protocol Layer to send a\nGet_Status Message .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Status\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Status Message and checks\nthe CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Status Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nstatus which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nStatus Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Status\nMessage .PHY Layer appends a CRC and sends the Status\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 629,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nPage 630 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1018Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nStatus Message was successfully sent.\nThe Cable Plug has informed the VCONN Source of its present status.Table 8.89 Steps for a V CONN Source getting Cable Plug Status Sequence\nStep VCONN Source Port Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6318.3.2.11.2.4 Sink Gets Source PPS Status\nFigure 8.63, \"Sink Gets Source PPS Status\" shows an example sequence between a Source and a Sink where, after the\nSink has received an alert (see Section 8.3.2.11.2, \"Status\" ) that there has been a PPS status change, the Sink gets\nmore details on the change.\nFigure 8.63 Sink Gets Source PPS Status\n: Protocol\n1: Send Get_PPS_Status\n: PHY\n: PHY\n: Protocol\n2:Get_PPS_Status\n3: Get_PPS_Status + CRC\n4: Get_PPS_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_PPS_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_PPS_Status sent\nStart SenderResponseTimer\n10: Send PPS_Status\n11: PPS_Status\n12: PPS_Status + CRC\n13: PPS_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: PPS_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source PPS Status\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\n18: PPS_Status sent\nPage 632 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.90, \"Steps for a Sink getting Source PPS status Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.63, \"Sink Gets Source PPS Status\" above.\nTable 8.90 Steps for a Sink getting Source PPS status Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_PPS_Status Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_PPS_Status\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_PPS_Status Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_PPS_Status Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_PPS_Status Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nstatus which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nPPS_Status Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the PPS_Status\nMessage .PHY Layer appends a CRC and sends the PPS_Status\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PPS_Status\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 632,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 63316PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nPPS_Status Message was successfully sent.\nThe Source has informed the Sink of its present PPS status.Table 8.90 Steps for a Sink getting Source PPS status Sequence\nStep Sink Port Source Port\nPage 634 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.3 Source/Sink Capabilities"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.3.1",
    "title": "SPR",
    "full_path": "8.3.2.11.3.1 SPR",
    "page": 634,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.3.1.1",
    "title": "Sink Gets Source Capabilities",
    "full_path": "8.3.2.11.3.1.1 Sink Gets Source Capabilities",
    "page": 634,
    "level": 7,
    "parent_id": "8.3.2.11.3.1",
    "tags": [],
    "content": "Figure 8.64, \"Sink Gets Source's Capabilities\" shows an example sequence between a Source and a Sink when the Sink\ngets the Source Capabilities .\nFigure 8.64 Sink Gets Source's Capabilities\n: Protocol\n1: Send Get_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap\n3: Get_Source_Cap + CRC\n4: Get_Source_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap sent\nStart SenderResponseTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n13: Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimerPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\n18: Source_Capabilities sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 635Table 8.91, \"Steps for a Sink getting Source Capabilities Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.64, \"Sink Gets Source's Capabilities\" above.\nTable 8.91 Steps for a Sink getting Source Capabilities Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Cap Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Source_Cap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Source_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nCapabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSource_Capabilities Message .PHY Layer appends a CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 635,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 636 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nThe Source has informed the Sink of its capabilities.Table 8.91 Steps for a Sink getting Source Capabilities Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6378.3.2.11.3.1.2 Dual-Role Source Gets Source Capabilities from a Dual-Role Sink\nFigure 8.65, \"Dual-Role Source Gets Dual-Role Sink's Capabilities as a Source\" shows an example sequence between\na Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink Capabilities as a Source .\nFigure 8.65 Dual-Role Source Gets Dual-Role Sink's Capabilities as a Source\n: Protocol\n1: Send Get_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap\n3: Get_Source_Cap + CRC\n4: Get_Source_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap sent\nStart SenderResponseTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n13: Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineDual -Role Source Port Dual -Role Sink Port\nStop SenderResponseTimer\n18: Source_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 638 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.92, \"Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\" below provides\na detailed explanation of what happens at each labeled step in Figure 8.65, \"Dual-Role Source Gets Dual-Role Sink's\nCapabilities as a Source\" above.\nTable 8.92 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Cap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Cap Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Source_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nCapabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSource_Capabilities Message .PHY Layer appends a CRC and sends the\nSource_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 638,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 63916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its capabilities.Table 8.92 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\nPage 640 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.3.1.3 Source Gets Sink Capabilities\nFigure 8.66, \"Source Gets Sink's Capabilities\" shows an example sequence between a Source and a Sink when the\nSource gets the Sink Capabilities .\nFigure 8.66 Source Gets Sink's Capabilities\n: Protocol\n1: Send Get_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap\n3: Get_Sink_Cap + CRC\n4: Get_Sink_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities\n11: Sink_Capabilities\n12: Sink_Capabilities + CRC\n13: Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Sink capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\nStop SenderResponseTimer\n18: Sink_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 641Table 8.93, \"Steps for a Source getting Sink Capabilities Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.66, \"Source Gets Sink's Capabilities\" above.\nTable 8.93 Steps for a Source getting Sink Capabilities Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Sink_Cap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Sink_Cap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Sink_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Sink_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Sink_Cap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Sink_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Sink\nCapabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSink_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSink_Capabilities Message .PHY Layer appends a CRC and sends the\nSink_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSink_Capabilities Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 641,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nPage 642 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSink_Capabilities Message was successfully sent.\nThe Sink has informed the Source of its capabilities.Table 8.93 Steps for a Source getting Sink Capabilities Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6438.3.2.11.3.1.4 Dual-Role Sink Get Sink Capabilities from a Dual-Role Source\nFigure 8.67, \"Dual-Role Sink Gets Dual-Role Source's Capabilities as a Sink\" shows an example sequence between a\nDual-Role Power Source and a Dual-Role Power Sink when the Dual-Role Power Sink gets the Dual-Role Power Source\nCapabilities as a Sink .\nFigure 8.67 Dual-Role Sink Gets Dual-Role Source's Capabilities as a Sink\n: Protocol\n1: Send Get_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap\n3: Get_Sink_Cap + CRC\n4: Get_Sink_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities\n11: Sink_Capabilities\n12: Sink_Capabilities + CRC\n13: Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Sink capability\nInformation from DPM\n: Policy Engine\n: Policy EngineDual -Role Sink Port Dual -Role Source Port\nStop SenderResponseTimer\n18: Sink_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 644 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.94, \"Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.67, \"Dual-Role Sink Gets Dual-Role Source's\nCapabilities as a Sink\" above.\nTable 8.94 Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\nStep Dual-Role Sink Port Dual-Role Source Port\n1The Port has Port Power Role set to Dual-Role Power\nSink with the Rd pull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Sink_Cap Message .The Port has Port Power Role set to Dual-Role Power\nSource and the Rp pull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Sink_Cap\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Sink_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Sink_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Sink_Cap\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Sink_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Dual-\nRole Power Source Capabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSink_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSink_Capabilities Message .PHY Layer appends a CRC and sends the\nSink_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSink_Capabilities Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 644,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 64516PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSink_Capabilities Message was successfully sent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Capabilities as a Sink .Table 8.94 Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\nStep Dual-Role Sink Port Dual-Role Source Port\nPage 646 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.3.2 EPR"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.3.2.1",
    "title": "Sink Gets EPR Source Capabilities",
    "full_path": "8.3.2.11.3.2.1 Sink Gets EPR Source Capabilities",
    "page": 646,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.68, \"Sink Gets Source's EPR Capabilities\" shows an example sequence between a Source and a Sink when\nthe Sink gets the Source 's EPR Capabilities .\nFigure 8.68 Sink Gets Source's EPR Capabilities\n: Protocol\n1: Send EPR_Get_EPR_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Source_Cap\n3: EPR_Get_EPR_Source_Cap + CRC\n4: EPR_Get_EPR_Source_CapStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Source_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Source_Capabilities11: EPR_Source_Capabilities\n12: EPR_Source_Capabilities + CRC\n13: EPR_Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Source_Capabilities received\n15: GoodCRC 16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet EPR Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: EPR_Source_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 647Table 8.95, \"Steps for a Sink getting EPR Source Capabilities Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.68, \"Sink Gets Source's EPR Capabilities\" above.\nTable 8.95 Steps for a Sink getting EPR Source Capabilities Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nEPR_Get_Source_Cap Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nEPR_Get_Source_Cap Message . Starts\nCRCReceiveTimer .PHY Layer receives the EPR_Get_Source_Cap Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Get_Source_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Get_Source_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Get_Source_Cap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present EPR\nSource Capabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form an\nEPR_Source_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nEPR_Source_Capabilities Message .PHY Layer appends a CRC and sends the\nEPR_Source_Capabilities Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Source_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 647,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 648 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities Message was successfully sent.\nThe Source has informed the Sink of its EPR Capabilities .Table 8.95 Steps for a Sink getting EPR Source Capabilities Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6498.3.2.11.3.2.2 Dual-Role Source Gets Source Capabilities from a Dual-Role EPR\nSink\nFigure 8.69, \"Dual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source\" shows an example sequence\nbetween a Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink Capabilities as an EPR\nSource .\nFigure 8.69 Dual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source\n: Protocol\n1: Send EPR_Get_EPR_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Source_Cap\n3: EPR_Get_EPR_Source_Cap + CRC\n4: EPR_Get_EPR_Source_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Source_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Source_Capabilities\n11: EPR_Source_Capabilities\n12: EPR_Source_Capabilities + CRC 13: EPR_Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Source_Capabilities received\n15: GoodCRC16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet EPR Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineDual -Role Source Port Dual -Role Sink Port\nStop SenderResponseTimer\n18: EPR_Source_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 650 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.96, \"Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\" below\nprovides a detailed explanation of what happens at each labeled step in Figure 8.69, \"Dual-Role Source Gets Dual-\nRole Sink's Capabilities as an EPR Source\" above.\nTable 8.96 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nEPR_Get_Source_Cap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nEPR_Get_Source_Cap Message . Starts\nCRCReceiveTimer .PHY Layer receives the EPR_Get_Source_Cap Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Get_Source_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Get_Source_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Get_Source_Cap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nCapabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form an\nEPR_Source_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nEPR_Source_Capabilities Message .PHY Layer appends a CRC and sends the\nEPR_Source_Capabilities Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Source_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 650,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 65116PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Source_Capabilities Message was successfully\nsent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its EPR Capabilities .Table 8.96 Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\nPage 652 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.3.2.3 Source Gets Sink EPR Capabilities\nFigure 8.70, \"Source Gets Sink's EPR Capabilities\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's EPR Capabilities .\nFigure 8.70 Source Gets Sink's EPR Capabilities\n: Protocol\n1: Send EPR_Get_EPR_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Sink_Cap\n3: EPR_Get_EPR_Sink_Cap + CRC\n4: EPR_Get_EPR_Sink_CapStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Sink_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Sink_Capabilities11: EPR_Sink_Capabilities\n12: EPR_Sink_Capabilities + CRC\n13: EPR_Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Sink_Capabilities received\n15: GoodCRC 16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet EPR Sink capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\nStop SenderResponseTimer\n18: EPR_Sink_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 653Table 8.97, \"Steps for a Source getting Sink EPR Capabilities Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.70, \"Source Gets Sink's EPR Capabilities\" above.\nTable 8.97 Steps for a Source getting Sink EPR Capabilities Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nEPR_Get_Sink_Cap Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nEPR_Get_Sink_Cap Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Get_Sink_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Get_Sink_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Get_Sink_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Get_Sink_Cap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Sink\nCapabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form an\nEPR_Sink_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nEPR_Sink_Capabilities Message .PHY Layer appends a CRC and sends the\nEPR_Sink_Capabilities Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Sink_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 653,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 654 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Sink_Capabilities Message was successfully sent.\nThe Sink has informed the Source of its EPR Capabilities .Table 8.97 Steps for a Source getting Sink EPR Capabilities Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6558.3.2.11.3.2.4 Dual-Role Sink Get Sink EPR Capabilities from a Dual-Role\nSource\nFigure 8.71, \"Dual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink\" shows an example sequence\nbetween a Dual-Role Power Source and a Dual-Role Power Sink when the Dual-Role Power Sink gets the Dual-Role\nPower Source Capabilities as a Sink .\nFigure 8.71 Dual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink\n: Protocol\n1: Send EPR_Get_EPR_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Sink_Cap\n3: EPR_Get_EPR_Sink_Cap + CRC\n4: EPR_Get_EPR_Sink_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Sink_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Sink_Capabilities\n11: EPR_Sink_Capabilities\n12: EPR_Sink_Capabilities + CRC 13: EPR_Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Sink_Capabilities received\n15: GoodCRC16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet EPR Sink capability\nInformation from DPM\n: Policy Engine\n: Policy EngineDual -Role Sink Port Dual -Role Source Port\nStop SenderResponseTimer\n18: EPR_Sink_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 656 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.98, \"Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\" below\nprovides a detailed explanation of what happens at each labeled step in Figure 8.71, \"Dual-Role Sink Gets Dual-Role\nSource's Capabilities as an EPR Sink\" above.\nTable 8.98 Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\nStep Dual-Role Sink Port Dual-Role Source Port\n1The Port has Port Power Role set to Dual-Role Power\nSink with the Rd pull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nEPR_Get_Sink_Cap Message .The Port has Port Power Role set to Dual-Role Power\nSource and the Rp pull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nEPR_Get_Sink_Cap Message . Starts CRCReceiveTimer .PHY Layer receives the EPR_Get_Sink_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nEPR_Get_Sink_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Get_Sink_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Get_Sink_Cap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Dual-\nRole Power Source Capabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form an\nEPR_Sink_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nEPR_Sink_Capabilities Message .PHY Layer appends a CRC and sends the\nEPR_Sink_Capabilities Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nEPR_Sink_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 656,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 65716PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEPR_Sink_Capabilities Message was successfully sent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Capabilities as an EPR Sink .Table 8.98 Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\nStep Dual-Role Sink Port Dual-Role Source Port\nPage 658 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.4 Extended Capabilities"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.4.1",
    "title": "Sink Gets Source Extended Capabilities",
    "full_path": "8.3.2.11.4.1 Sink Gets Source Extended Capabilities",
    "page": 658,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.72, \"Sink Gets Source's Extended Capabilities\" shows an example sequence between a Source and a Sink\nwhen the Sink gets the Source 's Extended Capabilities .\nFigure 8.72 Sink Gets Source's Extended Capabilities\n: Protocol\n1: Send Get_Source_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap_Extended\n3: Get_Source_Cap_Extended + CRC\n4: Get_Source_Cap_Extended Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap_Extended\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Source_Capabilities_Extended\n11: Source_Capabilities_Extended 12: Source_Capabilities_Extended\n+ CRC\n13: Source_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet extended Source\ncapability Information\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Source_Capabilities_Extended sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 659Table 8.99, \"Steps for a Sink getting Source Extended Capabilities Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.72, \"Sink Gets Source's Extended Capabilities\" above.\nTable 8.99 Steps for a Sink getting Source Extended Capabilities Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Cap_Extended Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Cap_Extended Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Source_Cap_Extended\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Cap_Extended Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Cap_Extended Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Cap_Extended Message was successfully\nsent. Policy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nExtended Capabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Capabilities_Extended Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSource_Capabilities_Extended Message .PHY Layer appends a CRC and sends the\nSource_Capabilities_Extended Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities_Extended Message information to\nthe Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 659,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 660 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities_Extended Message was\nsuccessfully sent.\nThe Source has informed the Sink of its Extended Capabilities .Table 8.99 Steps for a Sink getting Source Extended Capabilities Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6618.3.2.11.4.2 Dual-Role Source Gets Source Capabilities Extended from a Dual-\nRole Sink\nFigure 8.73, \"Dual-Role Source Gets Dual-Role Sink's Extended Capabilities\" shows an example sequence between a\nSource and a Sink when the Dual-Role Power Source gets the Dual-Role Power Sink 's Extended Capabilities as a\nSource .\nFigure 8.73 Dual-Role Source Gets Dual-Role Sink's Extended Capabilities\n: Protocol\n1: Send Get_Source_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap_Extended\n3: Get_Source_Cap_Extended + CRC\n4: Get_Source_Cap_Extended Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap_Extended\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Source_Capabilities_Extended\n11: Source_Capabilities_Extended 12: Source_Capabilities_Extended\n+ CRC\n13: Source_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet extended Source\ncapability Information\nfrom DPM\n: Policy Engine\n: Policy EngineDual -Role Source Port Dual -Role Sink Port\nStop SenderResponseTimer\n18: Source_Capabilities_Extended sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 662 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.100, \"Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.73, \"Dual-Role Source Gets Dual-Role Sink's\nExtended Capabilities\" above.\nTable 8.100 Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Cap_Extended Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Cap_Extended Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Source_Cap_Extended\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Cap_Extended Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Cap_Extended Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Cap_Extended Message was successfully\nsent. Policy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Extended\nCapabilities as a Source which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Capabilities_Extended Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSource_Capabilities_Extended Message .PHY Layer appends a CRC and sends the\nSource_Capabilities_Extended Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSource_Capabilities_Extended Message information to\nthe Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 662,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 66315Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Capabilities_Extended Message was\nsuccessfully sent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its Extended Capabilities as a Source .Table 8.100 Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\nPage 664 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.4.3 Source Gets Sink Extended Capabilities\nFigure 8.74, \"Source Gets Sink's Extended Capabilities\" shows an example sequence between a Source and a Sink\nwhen the Source gets the Sink 's Extended Capabilities .\nFigure 8.74 Source Gets Sink's Extended Capabilities\n: Protocol\n1: Send Get_Sink_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap_Extended\n3: Get_Sink_Cap_Extended + CRC\n4: Get_Sink_Cap_Extended Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap_Extended\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities_Extended\n11: Sink_Capabilities_Extended 12: Sink_Capabilities_Extended\n+ CRC\n13: Sink_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet extended Sink\ncapability Information\nfrom DPM\n: Policy Engine\n: Policy EngineSink PortSource Port\nStop SenderResponseTimer\n18: Sink_Capabilities_Extended sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 665Table 8.101, \"Steps for a Source getting Sink Extended Capabilities Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.74, \"Source Gets Sink's Extended Capabilities\" above.\nTable 8.101 Steps for a Source getting Sink Extended Capabilities Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Sink_Cap_Extended Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Cap_Extended Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Sink_Cap_Extended\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Sink_Cap_Extended Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Sink_Cap_Extended Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Sink_Cap_Extended Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Sink\nExtended Capabilities which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSink_Capabilities_Extended Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSink_Capabilities_Extended Message .PHY Layer appends a CRC and sends the\nSink_Capabilities_Extended Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSink_Capabilities_Extended Message information to\nthe Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 665,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 666 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSink_Capabilities_Extended Message was successfully\nsent.\nThe Sink has informed the Source of its Extended Capabilities .Table 8.101 Steps for a Source getting Sink Extended Capabilities Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6678.3.2.11.4.4 Dual-Role Sink Gets Sink Capabilities Extended from a Dual-Role\nSource\nFigure 8.75, \"Dual-Role Sink Gets Dual-Role Source's Extended Capabilities\" shows an example sequence between a\nSource and a Sink when the Dual-Role Power Sink gets the Dual-Role Power Source 's Extended Capabilities as a Sink .\nFigure 8.75 Dual-Role Sink Gets Dual-Role Source's Extended Capabilities\n: Protocol\n1: Send Get_Sink_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap_Extended\n3: Get_Sink_Cap_Extended + CRC\n4: Get_Sink_Cap_Extended Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap_Extended\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities_Extended\n11: Sink_Capabilities_Extended 12: Sink_Capabilities_Extended\n+ CRC\n13: Sink_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet extended Sink\ncapability Information\nfrom DPM\n: Policy Engine\n: Policy EngineDual -Role Sink Port Dual -Role Source Port\nStop SenderResponseTimer\n18: Sink_Capabilities_Extended sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 668 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.102, \"Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.75, \"Dual-Role Sink Gets Dual-Role Source's\nExtended Capabilities\" above.\nTable 8.102 Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Sink_Cap_Extended Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Sink_Cap_Extended Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Sink_Cap_Extended\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Sink_Cap_Extended Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Sink_Cap_Extended Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Sink_Cap_Extended Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Extended\nCapabilities as a Sink which are provided.\nThe Policy Engine tells the Protocol Layer to form a\nSink_Capabilities_Extended Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSink_Capabilities_Extended Message .PHY Layer appends a CRC and sends the\nSink_Capabilities_Extended Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSink_Capabilities_Extended Message information to\nthe Policy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 668,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 66916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSink_Capabilities_Extended Message was successfully\nsent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Extended Capabilities as a Sink .Table 8.102 Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\nPage 670 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.5 Battery Capabilities and Status"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.5.1",
    "title": "Sink Gets Battery Capabilities",
    "full_path": "8.3.2.11.5.1 Sink Gets Battery Capabilities",
    "page": 670,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.76, \"Sink Gets Source's Battery Capabilities\" shows an example sequence between a Source and a Sink when\nthe Sink gets the Source 's Battery capabilities for a given Battery .\nFigure 8.76 Sink Gets Source's Battery Capabilities\n: Protocol\n1: Send Get_Battery_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Cap\n3: Get_Battery_Cap + CRC\n4: Get_Battery_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Cap sent\nStart SenderResponseTimer\n10: Send Battery_Capabilities\n11: Battery_Capabilities\n12: Battery_Capabilities + CRC\n13: Battery_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Battery capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Battery_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 671Table 8.103, \"Steps for a Sink getting Source Battery capabilities Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.76, \"Sink Gets Source's Battery Capabilities\" above.\nTable 8.103 Steps for a Sink getting Source Battery capabilities Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Battery_Cap Message containing the number of the\nBattery for which capabilities are being requested.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Battery_Cap Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Battery_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Battery_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Battery_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Battery_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nBattery capabilities, for the requested Battery number,\nwhich are provided.\nThe Policy Engine tells the Protocol Layer to form a\nBattery_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nBattery_Capabilities Message .PHY Layer appends a CRC and sends the\nBattery_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nBattery_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 671,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 672 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nBattery_Capabilities Message was successfully sent.\nThe Source has informed the Sink of the Battery capabilities for the requested Battery .Table 8.103 Steps for a Sink getting Source Battery capabilities Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6738.3.2.11.5.2 Source Gets Battery Capabilities\nFigure 8.77, \"Source Gets Sink's Battery Capabilities\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's Battery capabilities for a given Battery .\nFigure 8.77 Source Gets Sink's Battery Capabilities\n: Protocol\n1: Send Get_Battery_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Cap\n3: Get_Battery_Cap + CRC\n4: Get_Battery_Cap Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Cap sent\nStart SenderResponseTimer\n10: Send Battery_Capabilities\n11: Battery_Capabilities\n12: Battery_Capabilities + CRC\n13: Battery_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Battery capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\nStop SenderResponseTimer\n18: Battery_Capabilities sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 674 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.104, \"Steps for a Source getting Sink Battery capabilities Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.77, \"Source Gets Sink's Battery Capabilities\" above.\nTable 8.104 Steps for a Source getting Sink Battery capabilities Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Battery_Cap Message containing the number of the\nBattery for which capabilities are being requested.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Battery_Cap Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Battery_Cap Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Battery_Cap Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Battery_Cap Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Battery_Cap Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nBattery capabilities, for the requested Battery number,\nwhich are provided.\nThe Policy Engine tells the Protocol Layer to form a\nBattery_Capabilities Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nBattery_Capabilities Message .PHY Layer appends a CRC and sends the\nBattery_Capabilities Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nBattery_Capabilities Message information to the\nPolicy Engine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 674,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 67516PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nBattery_Capabilities Message was successfully sent.\nThe Sink has informed the Source of the Battery capabilities for the requested Battery .Table 8.104 Steps for a Source getting Sink Battery capabilities Sequence\nStep Source Port Sink Port\nPage 676 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.5.3 Sink Gets Battery Status\nFigure 8.78, \"Sink Gets Source's Battery Status\" shows an example sequence between a Source and a Sink when the\nSink gets the Source 's Battery status for a given Battery .\nFigure 8.78 Sink Gets Source's Battery Status\n: Protocol\n1: Send Get_Battery_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Status\n3: Get_Battery_Status + CRC\n4: Get_Battery_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Status sent\nStart SenderResponseTimer\n10: Send Battery_Status\n11: Battery_Status\n12: Battery_Status + CRC\n13: Battery_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Battery status\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Battery_Status sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 677Table 8.105, \"Steps for a Sink getting Source Battery status Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.78, \"Sink Gets Source's Battery Status\" above.\nTable 8.105 Steps for a Sink getting Source Battery status Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Battery_Status Message containing the number of\nthe Battery for which status is being requested.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Battery_Status Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Battery_Status Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Battery_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Battery_Status Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Battery_Status Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nBattery status, for the requested Battery number, which\nare provided.\nThe Policy Engine tells the Protocol Layer to form a\nBattery_Status Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nBattery_Status Message .PHY Layer appends a CRC and sends the Battery_Status\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nBattery_Status Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 677,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 678 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nBattery_Status Message was successfully sent.\nThe Source has informed the Sink of the Battery status for the requested Battery .Table 8.105 Steps for a Sink getting Source Battery status Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6798.3.2.11.5.4 Source Gets Battery Status\nFigure 8.79, \"Source Gets Sink's Battery Status\" shows an example sequence between a Source and a Sink when the\nSource gets the Sink 's Battery status for a given Battery .\nFigure 8.79 Source Gets Sink's Battery Status\n: Protocol\n1: Send Get_Battery_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Status\n3: Get_Battery_Status + CRC\n4: Get_Battery_Status Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Status sent\nStart SenderResponseTimer\n10: Send Battery_Status\n11: Battery_Status\n12: Battery_Status + CRC\n13: Battery_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Battery status\nInformation from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\nStop SenderResponseTimer\n18: Battery_Status sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 680 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.106, \"Steps for a Source getting Sink Battery status Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.79, \"Source Gets Sink's Battery Status\" above.\nTable 8.106 Steps for a Source getting Sink Battery status Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Battery_Status Message containing the number of\nthe Battery for which status is being requested.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Battery_Status Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Battery_Status Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Battery_Status Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Battery_Status Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Battery_Status Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\nBattery status, for the requested Battery number, which\nare provided.\nThe Policy Engine tells the Protocol Layer to form a\nBattery_Status Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nBattery_Status Message .PHY Layer appends a CRC and sends the Battery_Status\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nBattery_Status Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 680,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 68116PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nBattery_Status Message was successfully sent.\nThe Sink has informed the Source of the Battery status for the requested Battery .Table 8.106 Steps for a Source getting Sink Battery status Sequence\nStep Source Port Sink Port\nPage 682 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.6 Manufacturer Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.6.1",
    "title": "Source Gets Port Manufacturer Information from a Sink",
    "full_path": "8.3.2.11.6.1 Source Gets Port Manufacturer Information from a Sink",
    "page": 682,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.80, \"Source Gets Sink's Port Manufacturer Information\" shows an example sequence between a Source and\na Sink when the Source gets the Sink 's Manufacturer information for the Port .\nFigure 8.80 Source Gets Sink's Port Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info 12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Manufacturer\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 683Table 8.107, \"Steps for a Source getting Sink's Port Manufacturer Information Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.80, \"Source Gets Sink's Port Manufacturer Information\"\nabove.\nTable 8.107 Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Manufacturer_Info Message with a request for\nPort information.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Manufacturer_Info Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Manufacturer_Info Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Manufacturer_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Manufacturer_Info Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Manufacturer_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nManufacturer_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nManufacturer_Info Message .PHY Layer appends a CRC and sends the\nManufacturer_Info Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nManufacturer_Info Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 683,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 684 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the Port.Table 8.107 Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6858.3.2.11.6.2 Sink Gets Port Manufacturer Information from a Source\nFigure 8.81, \"Sink Gets Source's Port Manufacturer Information\" shows an example sequence between a Source and\na Sink when the Source gets the Sink 's Manufacturer information for the Port .\nFigure 8.81 Sink Gets Source's Port Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info 12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Manufacturer\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 686 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.108, \"Steps for a Source getting Sink's Port Manufacturer Information Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.81, \"Sink Gets Source's Port Manufacturer Information\"\nabove.\nTable 8.108 Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Manufacturer_Info Message with a request for\nPort information.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Manufacturer_Info Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Manufacturer_Info Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Manufacturer_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Manufacturer_Info Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Manufacturer_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nManufacturer_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nManufacturer_Info Message .PHY Layer appends a CRC and sends the\nManufacturer_Info Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nManufacturer_Info Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 686,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 68715Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the Port.Table 8.108 Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep Sink Port Source Port\nPage 688 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.6.3 Source Gets Battery Manufacturer Information from a Sink\nFigure 8.82, \"Source Gets Sink's Battery Manufacturer Information\" shows an example sequence between a Source\nand a Sink when the Source gets the Sink 's Manufacturer information for one of its Batteries.\nFigure 8.82 Source Gets Sink's Battery Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info 12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Manufacturer\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 689Table 8.109, \"Steps for a Source getting Sink's Battery Manufacturer Information Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.82, \"Source Gets Sink's Battery Manufacturer\nInformation\" above.\nTable 8.109 Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Manufacturer_Info Message with a request for\nBattery information for a given Battery .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Manufacturer_Info Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Manufacturer_Info\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Manufacturer_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Manufacturer_Info Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Manufacturer_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Battery ’s\nmanufacturer information for a given Battery which is\nprovided.\nThe Policy Engine tells the Protocol Layer to form a\nManufacturer_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nManufacturer_Info Message .PHY Layer appends a CRC and sends the\nManufacturer_Info Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nManufacturer_Info Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 689,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 690 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the requested Battery .Table 8.109 Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6918.3.2.11.6.4 Sink Gets Battery Manufacturer Information from a Source\nFigure 8.83, \"Sink Gets Source's Battery Manufacturer Information\" shows an example sequence between a Source\nand a Sink when the Source gets the Sink 's Manufacturer information for the Port .\nFigure 8.83 Sink Gets Source's Battery Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info 12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Manufacturer\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 692 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.110, \"Steps for a Source getting Sink's Battery Manufacturer Information Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.83, \"Sink Gets Source's Battery Manufacturer\nInformation\" above.\nTable 8.110 Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Manufacturer_Info Message with a request for\nBattery information for a given Battery .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Manufacturer_Info Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Manufacturer_Info\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Manufacturer_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Manufacturer_Info Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Manufacturer_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Battery ’s\nmanufacturer information for a given Battery which is\nprovided.\nThe Policy Engine tells the Protocol Layer to form a\nManufacturer_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nManufacturer_Info Message .PHY Layer appends a CRC and sends the\nManufacturer_Info Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nManufacturer_Info Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 692,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 69315Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the requested Battery .Table 8.110 Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep Sink Port Source Port\nPage 694 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.6.5 V CONN Source Gets Manufacturer Information from a Cable Plug\nFigure 8.84, \"V CONN Source Gets Cable Plug's Manufacturer Information\" shows an example sequence between a\nVCONN Source (Source or Sink ) and a Cable Plug when the VCONN Source gets the Cable Plug 's Manufacturer\ninformation.\nFigure 8.84 V CONN Source Gets Cable Plug's Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info 12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Manufacturer\nInformation from DPM\n: Policy Engine\n: Policy EngineCable Plug VCONN Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 695Table 8.111, \"Steps for a V CONN Source getting Sink's Port Manufacturer Information Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.84, \"V CONN Source Gets Cable Plug's\nManufacturer Information\" above.\nTable 8.111 Steps for a V CONN Source getting Sink's Port Manufacturer Information Sequence\nStep VCONN Source Cable Plug\n1The Port is currently acting as the VCONN Source .\nPolicy Engine directs the Protocol Layer to send a\nGet_Manufacturer_Info Message with a request for\nPort information.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Manufacturer_Info Message . Starts\nCRCReceiveTimer .PHY Layer receives the Get_Manufacturer_Info\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Manufacturer_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Manufacturer_Info Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Manufacturer_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Cable Plug ’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nManufacturer_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nManufacturer_Info Message .PHY Layer appends a CRC and sends the\nManufacturer_Info Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nManufacturer_Info Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 695,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 696 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nManufacturer_Info Message was successfully sent.\nThe Cable Plug has informed the Source of its manufacturer information.Table 8.111 Steps for a V CONN Source getting Sink's Port Manufacturer Information Sequence\nStep VCONN Source Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 6978.3.2.11.7 Country Codes"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.7.1",
    "title": "8.3.2.12.7.1Source Gets Country Codes from a Sink",
    "full_path": "8.3.2.11.7.1 8.3.2.12.7.1Source Gets Country Codes from a Sink",
    "page": 697,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.85, \"Source Gets Sink's Country Codes\" shows an example sequence between a Source and a Sink when the\nSource gets the Sink 's Country Codes.\nFigure 8.85 Source Gets Sink's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes 12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Country Codes\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Country_Codes sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 698 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.112, \"Steps for a Source getting Country Codes Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.85, \"Source Gets Sink's Country Codes\" above.\nTable 8.112 Steps for a Source getting Country Codes Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Codes Message with a request for Port\ninformation.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Codes Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Codes Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Codes Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Codes Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Codes Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Codes Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Codes Message .PHY Layer appends a CRC and sends the\nCountry_Codes Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nCountry_Codes Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 698,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 69916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Codes Message was successfully sent.\nThe Sink has informed the Source of the country codes.Table 8.112 Steps for a Source getting Country Codes Sequence\nStep Source Port Sink Port\nPage 700 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.7.2 Sink Gets Country Codes from a Source\nFigure 8.86, \"Sink Gets Source's Country Codes\" shows an example sequence between a Source and a Sink when the\nSource gets the Sink 's country codes.\nFigure 8.86 Sink Gets Source's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes 12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet country codes\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Country_Codes sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 701Table 8.113, \"Steps for a Source getting Sink's Country Codes Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.86, \"Sink Gets Source's Country Codes\" above.\nTable 8.113 Steps for a Source getting Sink's Country Codes Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Codes Message with a request for Port\ninformation.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Codes Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Codes Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Codes Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Codes Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Codes Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Codes Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Codes Message .PHY Layer appends a CRC and sends the\nCountry_Codes Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nCountry_Codes Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 701,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 702 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Codes Message was successfully sent.\nThe Sink has informed the Source of the country codes.Table 8.113 Steps for a Source getting Sink's Country Codes Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7038.3.2.11.7.3 V CONN Source Gets Country Codes from a Cable Plug\nFigure 8.87, \"V CONN Source Gets Cable Plug's Country Codes\" shows an example sequence between a VCONN Source\n(Source or Sink ) and a Cable Plug when the VCONN Source gets the Cable Plug 's Country Codes.\nFigure 8.87 V CONN Source Gets Cable Plug's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes 12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet country codes from\nDPM\n: Policy Engine\n: Policy EngineCable Plug VCONN Source Port\nStop SenderResponseTimer\n18: Country_Codes sent\nPage 704 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.114, \"Steps for a V CONN Source getting Sink's Country Codes Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.87, \"V CONN Source Gets Cable Plug's Country Codes\" above.\nTable 8.114 Steps for a V CONN Source getting Sink's Country Codes Sequence\nStep VCONN Source Cable Plug\n1The Port is currently acting as the VCONN Source .\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Codes Message with a request for Port\ninformation.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Codes Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Codes Message\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Codes Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Codes Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Codes Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Cable Plug ’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Codes Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Codes Message .PHY Layer appends a CRC and sends the Country_Codes\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nCountry_Codes Message information to the Policy\nEngine that consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 704,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 70516PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Codes Message was successfully sent.\nThe Cable Plug has informed the Source of its country codes.Table 8.114 Steps for a V CONN Source getting Sink's Country Codes Sequence\nStep VCONN Source Cable Plug\nPage 706 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.8 Country Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.8.1",
    "title": "Source Gets Country Information from a Sink",
    "full_path": "8.3.2.11.8.1 Source Gets Country Information from a Sink",
    "page": 706,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.88, \"Source Gets Sink's Country Information\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's country information.\nFigure 8.88 Source Gets Sink's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info 12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Country Information\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Country_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 707Table 8.115, \"Steps for a Source getting Country Information Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.88, \"Source Gets Sink's Country Information\" above.\nTable 8.115 Steps for a Source getting Country Information Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Info Message with a request for Port\ninformation for a specific Country Code.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Info Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Info Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Info Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Info Message .PHY Layer appends a CRC and sends the Country_Info\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 707,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 708 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Info Message was successfully sent.\nThe Sink has informed the Source of the country information.Table 8.115 Steps for a Source getting Country Information Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7098.3.2.11.8.2 Sink Gets Country Information from a Source\nFigure 8.89, \"Sink Gets Source's Country Information\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's country codes.\nFigure 8.89 Sink Gets Source's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info 12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet country information\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Country_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 710 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.116, \"Steps for a Source getting Sink's Country Information Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.89, \"Sink Gets Source's Country Information\" above.\nTable 8.116 Steps for a Source getting Sink's Country Information Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Info Message with a request for Port\ninformation for a specific country code.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Info Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Info Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Info Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Info Message .PHY Layer appends a CRC and sends the Country_Info\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 710,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 71116PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Info Message was successfully sent.\nThe Sink has informed the Source of the country information.Table 8.116 Steps for a Source getting Sink's Country Information Sequence\nStep Sink Port Source Port\nPage 712 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.8.3 V CONN Source Gets Country Information from a Cable Plug\nFigure 8.90, \"V CONN Source Gets Cable Plug's Country Information\" shows an example sequence between a VCONN\nSource (Source or Sink ) and a Cable Plug when the VCONN Source gets the Cable Plug 's country information.\nFigure 8.90 V CONN Source Gets Cable Plug's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info 12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Country Information\nfrom DPM\n: Policy Engine\n: Policy EngineCable Plug VCONN Source Port\nStop SenderResponseTimer\n18: Country_Info sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 713Table 8.117, \"Steps for a V CONN Source getting Sink's Country Information Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.90, \"V CONN Source Gets Cable Plug's Country\nInformation\" above.\nTable 8.117 Steps for a V CONN Source getting Sink's Country Information Sequence\nStep VCONN Source Cable Plug\n1The Port is currently acting as the VCONN Source .\nPolicy Engine directs the Protocol Layer to send a\nGet_Country_Info Message with a request for Port\ninformation for a specific country code.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Country_Info Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Country_Info Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Country_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Country_Info Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Country_Info Message was successfully sent.\nPolicy Engine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Cable Plug ’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nCountry_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nCountry_Info Message .PHY Layer appends a CRC and sends the Country_Info\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 713,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 714 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nCountry_Info Message was successfully sent.\nThe Cable Plug has informed the Source of its country information.Table 8.117 Steps for a V CONN Source getting Sink's Country Information Sequence\nStep VCONN Source Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7158.3.2.11.9 Revision Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.9.1",
    "title": "Source Gets Revision Information from a Sink",
    "full_path": "8.3.2.11.9.1 Source Gets Revision Information from a Sink",
    "page": 715,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.91, \"Source Gets Sink's Revision Information\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's Revision information.\nFigure 8.91 Source Gets Sink's Revision Information\n: Protocol\n1: Send Get_Revision\n: PHY\n: PHY\n: Protocol\n2:Get_Revision\n3: Get_Revision + CRC\n4: Get_Revision Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Revision\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Revision sent\nStart SenderResponseTimer\n10: Send Revision\n11: Revision 12: Revision\n+ CRC\n13: Revision\nCheck MessageID against local copy\nStore copy of MessageID\n14: Revision\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Country Information\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Revision sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 716 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.118, \"Steps for a Source getting Revision Information Sequence\" below provides a detailed explanation of\nwhat happens at each labeled step in Figure 8.91, \"Source Gets Sink's Revision Information\" above.\nTable 8.118 Steps for a Source getting Revision Information Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Revision Message with a request for Port\ninformation for a specific Revision Code.The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Revision\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Revision Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Revision Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Revision Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nRevision Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nRevision_Info Message .PHY Layer appends a CRC and sends the Revision\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 716,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 71716PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nRevision Message was successfully sent.\nThe Sink has informed the Source of the Revision information.Table 8.118 Steps for a Source getting Revision Information Sequence\nStep Source Port Sink Port\nPage 718 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.9.2 Sink Gets Revision Information from a Source\nFigure 8.92, \"Sink Gets Source's Revision Information\" shows an example sequence between a Source and a Sink when\nthe Source gets the Sink 's Revision codes.\nFigure 8.92 Sink Gets Source's Revision Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info 12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet country information\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Country_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 719Table 8.119, \"Steps for a Source getting Sink's Revision Information Sequence\" below provides a detailed explanation\nof what happens at each labeled step in Figure 8.92, \"Sink Gets Source's Revision Information\" above.\nTable 8.119 Steps for a Source getting Sink's Revision Information Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Revision Message with a request for Port\ninformation for a specific Revision code.The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Revision\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Revision Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Revision Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Revision Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Port’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nRevision Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nRevision_Info Message .PHY Layer appends a CRC and sends the Revision\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 719,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 720 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nRevision Message was successfully sent.\nThe Sink has informed the Source of the Revision information.Table 8.119 Steps for a Source getting Sink's Revision Information Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7218.3.2.11.9.3 V CONN Source Gets Revision Information from a Cable Plug\nFigure 8.93, \"V CONN Source Gets Cable Plug's Revision Information\" shows an example sequence between a VCONN\nSource (Source or Sink ) and a Cable Plug when the VCONN Source gets the Cable Plug 's Revision information.\nFigure 8.93 V CONN Source Gets Cable Plug's Revision Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info\nreceived6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info 12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Country Information\nfrom DPM\n: Policy Engine\n: Policy EngineCable Plug VCONN Source Port\nStop SenderResponseTimer\n18: Country_Info sent\nPage 722 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.120, \"Steps for a V CONN Source getting Sink's Revision Information Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.93, \"V CONN Source Gets Cable Plug's Revision\nInformation\" above.\nTable 8.120 Steps for a V CONN Source getting Sink's Revision Information Sequence\nStep VCONN Source Cable Plug\n1The Port is currently acting as the VCONN Source .\nPolicy Engine directs the Protocol Layer to send a\nGet_Revision Message with a request for Port\ninformation for a specific Revision code.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Get_Revision\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Get_Revision Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Revision Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Revision Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the Cable Plug ’s\nmanufacturer information which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nRevision Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Revision\nMessage .PHY Layer appends a CRC and sends the Revision\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 722,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 72316PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nRevision Message was successfully sent.\nThe Cable Plug has informed the Source of its Revision information.Table 8.120 Steps for a V CONN Source getting Sink's Revision Information Sequence\nStep VCONN Source Cable Plug\nPage 724 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.11.10 Source Information"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.11.10.1",
    "title": "Sink Gets Source Information",
    "full_path": "8.3.2.11.10.1 Sink Gets Source Information",
    "page": 724,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.94, \"Sink Gets Source's Information\" shows an example sequence between a Source and a Sink when the Sink\ngets the Source 's information.\nFigure 8.94 Sink Gets Source's Information\n: Protocol\n1: Send Get_Source_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Info\n3: Get_Source_Info + CRC\n4: Get_Source_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Info received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Info sent\nStart SenderResponseTimer\n10: Send Source_Info\n11: Source_Info\n12: Source_Info + CRC\n13: Source_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Info received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\nStop SenderResponseTimer\n18: Source_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 725Table 8.121, \"Steps for a Sink getting Source Information Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.94, \"Sink Gets Source's Information\" above.\nTable 8.121 Steps for a Sink getting Source Information Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Info Message .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Info Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Source_Info Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Info Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Info Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\ninformation which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Source_Info\nMessage .PHY Layer appends a CRC and sends the Source_Info\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Source_Info\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 725,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 726 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Info Message was successfully sent.\nThe Source has provided the Sink with its information.Table 8.121 Steps for a Sink getting Source Information Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7278.3.2.11.10.2 Dual-Role Source Gets Source Information from a Dual-Role Sink\nFigure 8.95, \"Dual-Role Source Gets Dual-Role Sink's Information as a Source\" shows an example sequence between\na Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink 's Information as a Source .\nFigure 8.95 Dual-Role Source Gets Dual-Role Sink's Information as a Source\n: Protocol\n1: Send Get_Source_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Info\n3: Get_Source_Info + CRC\n4: Get_Source_Info Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Info received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Info sent\nStart SenderResponseTimer\n10: Send Source_Info\n11: Source_Info\n12: Source_Info + CRC\n13: Source_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Info received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet Source capability\nInformation from DPM\n: Policy Engine\n: Policy EngineDual -Role Source Port Dual -Role Sink Port\nStop SenderResponseTimer\n18: Source_Info sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 728 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.122, \"Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\" below\nprovides a detailed explanation of what happens at each labeled step in Figure 8.95, \"Dual-Role Source Gets Dual-\nRole Sink's Information as a Source\" above.\nTable 8.122 Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nGet_Source_Info Message .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nGet_Source_Info Message . Starts CRCReceiveTimer .PHY Layer receives the Get_Source_Info Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nGet_Source_Info Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nGet_Source_Info Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nGet_Source_Info Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine requests the DPM for the present Source\ninformation which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nSource_Info Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Source_Info\nMessage .PHY Layer appends a CRC and sends the Source_Info\nMessage . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Source_Info\nMessage information to the Policy Engine that\nconsumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "The Policy Engine stops the SenderResponseTimer .",
    "full_path": "14 The Policy Engine stops the SenderResponseTimer .",
    "page": 728,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 72916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSource_Info Message was successfully sent.\nThe Dual-Role Power Sink has provided the Dual-Role Power Source with its information.Table 8.122 Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\nStep Dual-Role Source Port Dual-Role Sink Port\nPage 730 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.12 Security"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.12.1",
    "title": "Source requests security exchange with Sink",
    "full_path": "8.3.2.12.1 Source requests security exchange with Sink",
    "page": 730,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.96, \"Source requests security exchange with Sink\" shows an example sequence for a security exchange\nbetween a Source and a Sink .\nFigure 8.96 Source requests security exchange with Sink\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet security response\nfrom DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\n18: Security_Response sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 731Table 8.123, \"Steps for a Source requesting a security exchange with a Sink Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.96, \"Source requests security exchange with Sink\"\nabove.\nTable 8.123 Steps for a Source requesting a security exchange with a Sink Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nSecurity_Request Message using a Payload supplied by\nthe DPM .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSecurity_Request Message . Starts CRCReceiveTimer .PHY Layer receives the Security_Request Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSecurity_Request Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Request Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Request Message was successfully sent.\n10Policy Engine requests the DPM for the response to the\nsecurity request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nSecurity_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSecurity_Response Message .PHY Layer appends a CRC and sends the\nSecurity_Response Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Response Message information to the Policy\nEngine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n15PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nPage 732 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Response Message was successfully sent.\nThe security exchange is complete.Table 8.123 Steps for a Source requesting a security exchange with a Sink Sequence\nStep Source Port Sink Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7338.3.2.12.2 Sink requests security exchange with Source\nFigure 8.97, \"Sink requests security exchange with Source\" shows an example sequence for a security exchange\nbetween a Sink and a Source .\nFigure 8.97 Sink requests security exchange with Source\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet security response\nfrom DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\n18: Security_Response sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 734 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.124, \"Steps for a Sink requesting a security exchange with a Source Sequence\" below provides a detailed\nexplanation of what happens at each labeled step in Figure 8.97, \"Sink requests security exchange with Source\"\nabove.\nTable 8.124 Steps for a Sink requesting a security exchange with a Source Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nSecurity_Request Message using a Payload supplied by\nthe DPM .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSecurity_Request Message . Starts CRCReceiveTimer .PHY Layer receives the Security_Request Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSecurity_Request Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Request Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Request Message was successfully sent.\n10Policy Engine requests the DPM for the response to the\nsecurity request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nSecurity_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSecurity_Response Message .PHY Layer appends a CRC and sends the\nSecurity_Response Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Response Message information to the Policy\nEngine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 73515PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n16PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Response Message was successfully sent.\nThe security exchange is complete.Table 8.124 Steps for a Sink requesting a security exchange with a Source Sequence\nStep Sink Port Source Port\nPage 736 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.12.3 V CONN Source requests security exchange with Cable Plug\nFigure 8.98, \"V CONN Source requests security exchange with Cable Plug\" shows an example sequence for a security\nexchange between a VCONN Source and a Cable Plug .\nFigure 8.98 V CONN Source requests security exchange with Cable Plug\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet security response\nfrom DPM\n: Policy Engine\n: Policy EngineVconn Source Cable Plug\n18: Security_Response sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 737Table 8.125, \"Steps for a V CONN Source requesting a security exchange with a Cable Plug Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.98, \"V CONN Source requests security exchange\nwith Cable Plug\" above.\nTable 8.125 Steps for a V CONN Source requesting a security exchange with a Cable Plug Sequence\nStep VCONN Source Cable Plug\n1Policy Engine directs the Protocol Layer to send a\nSecurity_Request Message using a Payload supplied by\nthe DPM .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nSecurity_Request Message . Starts CRCReceiveTimer .PHY Layer receives the Security_Request Message and\nchecks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nSecurity_Request Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Request Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Request Message was successfully sent.\n10Policy Engine requests the DPM for the response to the\nsecurity request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nSecurity_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nSecurity_Response Message .PHY Layer appends a CRC and sends the\nSecurity_Response Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nSecurity_Response Message information to the Policy\nEngine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n15PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 738 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nSecurity_Response Message was successfully sent.\nThe security exchange is complete.Table 8.125 Steps for a V CONN Source requesting a security exchange with a Cable Plug Sequence\nStep VCONN Source Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7398.3.2.13 Firmware Update"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.13.1",
    "title": "Source requests firmware update exchange with Sink",
    "full_path": "8.3.2.13.1 Source requests firmware update exchange with Sink",
    "page": 739,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.99, \"Source requests firmware update exchange with Sink\" shows an example sequence for a firmware\nupdate exchange between a Source and a Sink .\nFigure 8.99 Source requests firmware update exchange with Sink\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC4: Firmware_Update_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet firmware update\nresponse from DPM\n: Policy Engine\n: Policy EngineSource Port Sink Port\n18: Firmware_Update_Response sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nPage 740 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.126, \"Steps for a Source requesting a firmware update exchange with a Sink Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.99, \"Source requests firmware update\nexchange with Sink\" above.\nTable 8.126 Steps for a Source requesting a firmware update exchange with a Sink Sequence\nStep Source Port Sink Port\n1The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nFirmware_Update_Request Message using a Payload\nsupplied by the DPM .The Port has Port Power Role set to Sink with the Rd pull\ndown on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nFirmware_Update_Request Message . Starts\nCRCReceiveTimer .PHY Layer receives the Firmware_Update_Request\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nFirmware_Update_Request Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Request Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Request Message was successfully\nsent.\n10Policy Engine requests the DPM for the response to the\nfirmware update request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nFirmware_Update_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nFirmware_Update_Response Message .PHY Layer appends a CRC and sends the\nFirmware_Update_Response Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Response Message information to\nthe Policy Engine that consumes it.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 74114Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n15PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n16PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Response Message was successfully\nsent.\nThe firmware update exchange is complete.Table 8.126 Steps for a Source requesting a firmware update exchange with a Sink Sequence\nStep Source Port Sink Port\nPage 742 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.13.2 Sink requests firmware update exchange with Source\nFigure 8.100, \"Sink requests firmware update exchange with Source\" shows an example sequence for a firmware\nupdate exchange between a Sink and a Source .\nFigure 8.100 Sink requests firmware update exchange with Source\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC4: Firmware_Update_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet firmware update\nresponse from DPM\n: Policy Engine\n: Policy EngineSink Port Source Port\n18: Firmware_Update_Response sentPort Power Role = Source\nCC = R pPort Power Role = Sink\nCC = R d\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 743Table 8.127, \"Steps for a Sink requesting a firmware update exchange with a Source Sequence\" below provides a\ndetailed explanation of what happens at each labeled step in Figure 8.100, \"Sink requests firmware update exchange\nwith Source\" above.\nTable 8.127 Steps for a Sink requesting a firmware update exchange with a Source Sequence\nStep Sink Port Source Port\n1The Port has Port Power Role set to Sink with the Rd\npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a\nFirmware_Update_Request Message using a Payload\nsupplied by the DPM .The Port has Port Power Role set to Source and the Rp\npull up on its CC wire.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nFirmware_Update_Request Message . Starts\nCRCReceiveTimer .PHY Layer receives the Firmware_Update_Request\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nFirmware_Update_Request Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Request Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Request Message was successfully\nsent.\n10Policy Engine requests the DPM for the response to the\nfirmware update request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nFirmware_Update_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nFirmware_Update_Response Message .PHY Layer appends a CRC and sends the\nFirmware_Update_Response Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Response Message information to\nthe Policy Engine that consumes it.\nPage 744 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1014Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n15PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n16PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Response Message was successfully\nsent.\nThe firmware update exchange is complete.Table 8.127 Steps for a Sink requesting a firmware update exchange with a Source Sequence\nStep Sink Port Source Port\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7458.3.2.13.3 V CONN Source requests firmware update exchange with Cable\nPlug\nFigure 8.101, \"V CONN Source requests firmware update exchange with Cable Plug\" shows an example sequence for a\nfirmware update exchange between a VCONN Source and a Cable Plug .\nFigure 8.101 V CONN Source requests firmware update exchange with Cable Plug\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC4: Firmware_Update_Request Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRCStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerGet firmware update\nresponse from DPM\n: Policy Engine\n: Policy EngineVCONN Source Cable Plug\n18: Firmware_Update_Response sent\nPage 746 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.128, \"Steps for a V CONN Source requesting a firmware update exchange with a Cable Plug Sequence\" below\nprovides a detailed explanation of what happens at each labeled step in Figure 8.101, \"V CONN Source requests\nfirmware update exchange with Cable Plug\" above.\nTable 8.128 Steps for a V CONN Source requesting a firmware update exchange with a Cable Plug Sequence\nStep VCONN Source Cable Plug\n1Policy Engine directs the Protocol Layer to send a\nFirmware_Update_Request Message using a Payload\nsupplied by the DPM .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the\nFirmware_Update_Request Message . Starts\nCRCReceiveTimer .PHY Layer receives the Firmware_Update_Request\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nFirmware_Update_Request Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Request Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Request Message was successfully\nsent.\n10Policy Engine requests the DPM for the response to the\nfirmware update request which is provided.\nThe Policy Engine tells the Protocol Layer to form a\nFirmware_Update_Response Message .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the\nFirmware_Update_Response Message .PHY Layer appends a CRC and sends the\nFirmware_Update_Response Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received\nFirmware_Update_Response Message information to\nthe Policy Engine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 74715PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n16PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nFirmware_Update_Response Message was successfully\nsent.\nThe firmware update exchange is complete.Table 8.128 Steps for a V CONN Source requesting a firmware update exchange with a Cable Plug Sequence\nStep VCONN Source Cable Plug\nPage 748 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14 Structured VDM"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.14.1",
    "title": "Discover Identity",
    "full_path": "8.3.2.14.1 Discover Identity",
    "page": 748,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.14.1.1",
    "title": "Initiator to Responder Discover Identity (ACK)",
    "full_path": "8.3.2.14.1.1 Initiator to Responder Discover Identity (ACK)",
    "page": 748,
    "level": 6,
    "parent_id": "8.3.2.14.1",
    "tags": [],
    "content": "Figure 8.102, \"Initiator to Responder Discover Identity (ACK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator discovers identity information\nfrom the Responder .\nFigure 8.102 Initiator to Responder Discover Identity (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity ACK\n11: Discover Identity ACK\n12: Discover Identity ACK + CRC\n13: Discover Identity ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity ACK received\nStop VDMResponseTimer\nDPM evaluates Identity\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Identity information from\nDevice Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 749Table 8.129, \"Steps for Initiator to UFP Discover Identity (ACK)\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.102, \"Initiator to Responder Discover Identity (ACK)\" above.\nTable 8.129 Steps for Initiator to UFP Discover Identity (ACK)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nIdentity Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover Identity Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover\nIdentity Command request. Starts CRCReceiveTimer .PHY Layer receives the Discover Identity Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nIdentity Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Identity Command ACK response.\n11Protocol Layer creates the Discover Identity Command\nACK response and passes to PHY Layer .\n12PHY Layer receives the Discover Identity Command\nACK response and compares the CRC it calculated with\nthe one sent to verify the Message .PHY Layer appends a CRC and sends the Discover\nIdentity Command ACK response. Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command ACK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 750 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command ACK response was\nsuccessfully sent.Table 8.129 Steps for Initiator to UFP Discover Identity (ACK)\nStep Initiator Responder\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7518.3.2.14.1.2 Initiator to Responder Discover Identity (NAK)\nFigure 8.103, \"Initiator to Responder Discover Identity (NAK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover identity\ninformation from the Responder but receives a NAK .\nFigure 8.103 Initiator to Responder Discover Identity (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity NAK\n11: Discover Identity NAK\n12: Discover Identity NAK + CRC\n13: Discover Identity NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity NAK received\nStop VDMResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity NAK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Identity information from\nDevice Policy Manager\nPage 752 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.130, \"Steps for Initiator to UFP Discover Identity (NAK)\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.103, \"Initiator to Responder Discover Identity (NAK)\" above.\nTable 8.130 Steps for Initiator to UFP Discover Identity (NAK)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nIdentity Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover Identity Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover\nIdentity Command request. Starts CRCReceiveTimer .PHY Layer receives the Discover Identity Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nIdentity Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Identity Command NAK response.\n11Protocol Layer creates the Discover Identity Command\nNAK response and passes to PHY Layer .\n12PHY Layer receives the Discover Identity Command\nNAK response and compares the CRC it calculated with\nthe one sent to verify the Message .PHY Layer appends a CRC and sends the Discover\nIdentity Command NAK response. Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command NAK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 75316PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command NAK response was\nsuccessfully sent.Table 8.130 Steps for Initiator to UFP Discover Identity (NAK)\nStep Initiator Responder\nPage 754 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.1.3 Initiator to Responder Discover Identity (BUSY)\nFigure 8.104, \"Initiator to Responder Discover Identity (BUSY)\" shows an example sequence between an Initiator\nand Responder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover identity\ninformation from the Responder but receives a BUSY .\nFigure 8.104 Initiator to Responder Discover Identity (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity BUSY\n11: Discover Identity BUSY\n12: Discover Identity BUSY + CRC\n13: Discover Identity BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity BUSY received\nStop VDMResponseTimer15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity BUSY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Identity information from\nDevice Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 755Table 8.131, \"Steps for Initiator to UFP Discover Identity (BUSY)\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.104, \"Initiator to Responder Discover Identity (BUSY)\" above.\nTable 8.131 Steps for Initiator to UFP Discover Identity (BUSY)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nIdentity Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover Identity Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover\nIdentity Command request. Starts CRCReceiveTimer .PHY Layer receives the Discover Identity Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nIdentity Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Identity Command BUSY response.\n11Protocol Layer creates the Discover Identity Command\nBUSY response and passes to PHY Layer .\n12PHY Layer receives the Discover Identity Command\nBUSY response and compares the CRC it calculated with\nthe one sent to verify the Message .PHY Layer appends a CRC and sends the Discover\nIdentity Command BUSY response. Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nIdentity Command BUSY response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 756 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Identity Command NAK response was\nsuccessfully sent.Table 8.131 Steps for Initiator to UFP Discover Identity (BUSY)\nStep Initiator Responder\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7578.3.2.14.2 Discover SVIDs"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.14.2.1",
    "title": "Initiator to Responder Discover SVIDs (ACK)",
    "full_path": "8.3.2.14.2.1 Initiator to Responder Discover SVIDs (ACK)",
    "page": 757,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.105, \"Initiator to Responder Discover SVIDs (ACK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator discovers SVID information from\nthe Responder .\nFigure 8.105 Initiator to Responder Discover SVIDs (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs ACK\n11: Discover_SVIDs ACK\n12: Discover_SVIDs ACK + CRC\n13: Discover_SVIDs ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs ACK received\nStop VDMResponseTimer\nDPM evaluates SVIDs\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest SVIDs from Device Policy\nManager\nPage 758 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.132, \"Steps for DFP to UFP Discover SVIDs (ACK)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.105, \"Initiator to Responder Discover SVIDs (ACK)\" above.\nTable 8.132 Steps for DFP to UFP Discover SVIDs (ACK)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nSVIDs Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover SVIDs Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover SVIDs\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Discover SVIDs Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nSVIDs Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover SVIDs Command ACK response.\n11Protocol Layer creates the Discover SVIDs Command\nACK response and passes to PHY Layer .\n12PHY Layer receives the Discover SVIDs Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Discover SVIDs\nCommand ACK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command ACK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 75916PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command ACK response was\nsuccessfully sent.Table 8.132 Steps for DFP to UFP Discover SVIDs (ACK)\nStep Initiator Responder\nPage 760 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.2.2 Initiator to Responder Discover SVIDs (NAK)\nFigure 8.106, \"Initiator to Responder Discover SVIDs (NAK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover SVID\ninformation from the Responder but receives a NAK .\nFigure 8.106 Initiator to Responder Discover SVIDs (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs NAK\n11: Discover_SVIDs NAK\n12: Discover_SVIDs NAK + CRC\n13: Discover_SVIDs NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs NAK received\nStop VDMResponseTimer\nDPM evaluates SVIDs\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs NAK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest SVIDs from Device Policy\nManager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 761Table 8.133, \"Steps for DFP to UFP Discover SVIDs (NAK)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.106, \"Initiator to Responder Discover SVIDs (NAK)\" above.\nTable 8.133 Steps for DFP to UFP Discover SVIDs (NAK)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nSVIDs Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover SVIDs Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover SVIDs\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Discover SVIDs Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nSVIDs Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover SVIDs Command NAK response.\n11Protocol Layer creates the Discover SVIDs Command\nNAK response and passes to PHY Layer .\n12PHY Layer receives the Discover SVIDs Command NAK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Discover SVIDs\nCommand NAK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command NAK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\nPage 762 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command NAK response was\nsuccessfully sent.Table 8.133 Steps for DFP to UFP Discover SVIDs (NAK)\nStep Initiator Responder\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7638.3.2.14.2.3 Initiator to Responder Discover SVIDs (BUSY)\nFigure 8.107, \"Initiator to Responder Discover SVIDs (BUSY)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover SVID\ninformation from the Responder but receives a BUSY .\nFigure 8.107 Initiator to Responder Discover SVIDs (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs BUSY\n11: Discover_SVIDs BUSY\n12: Discover_SVIDs BUSY + CRC\n13: Discover_SVIDs BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs BUSY received\nStop VDMResponseTimer\nDPM evaluates SVIDs\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs BUSY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest SVIDs from Device Policy\nManager\nPage 764 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.134, \"Steps for DFP to UFP Discover SVIDs (BUSY)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.107, \"Initiator to Responder Discover SVIDs (BUSY)\" above.\nTable 8.134 Steps for DFP to UFP Discover SVIDs (BUSY)\nStep Initiator Responder\n1The Initiator has an Explicit Contract . The Policy\nEngine directs the Protocol Layer to send a Discover\nSVIDs Command request.The Responder has an Explicit Contract .\n2Protocol Layer creates the Discover SVIDs Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover SVIDs\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Discover SVIDs Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nSVIDs Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover SVIDs Command BUSY response.\n11Protocol Layer creates the Discover SVIDs Command\nBUSY response and passes to PHY Layer .\n12PHY Layer receives the Discover SVIDs Command BUSY\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Discover SVIDs\nCommand BUSY response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nSVIDs Command BUSY response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 76516PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover SVIDs Command BUSY response was\nsuccessfully sent.Table 8.134 Steps for DFP to UFP Discover SVIDs (BUSY)\nStep Initiator Responder\nPage 766 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.3 Discover Modes"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.14.3.1",
    "title": "Initiator to Responder Discover Modes (ACK)",
    "full_path": "8.3.2.14.3.1 Initiator to Responder Discover Modes (ACK)",
    "page": 766,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.108, \"Initiator to Responder Discover Modes (ACK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator discovers Mode information from\nthe Responder .\nFigure 8.108 Initiator to Responder Discover Modes (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes ACK\n11: Discover_Modes ACK\n12: Discover_Modes ACK + CRC\n13: Discover_Modes ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes ACK received\nStop VDMResponseTimer\nDPM evaluates Modes\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Modes information from\nDevice Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 767Table 8.135, \"Steps for DFP to UFP Discover Modes (ACK)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.108, \"Initiator to Responder Discover Modes (ACK)\" .\nTable 8.135 Steps for DFP to UFP Discover Modes (ACK)\nStep DFP UFP\n1The DFP has an Explicit Contract . The Policy Engine\ndirects the Protocol Layer to send a Discover Modes\nCommand request.The UFP has an Explicit Contract .\n2Protocol Layer creates the Discover Modes Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover\nModes Command request. Starts CRCReceiveTimer .PHY Layer receives the Discover Modes Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nModes Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Modes Command ACK response.\n11Protocol Layer creates the Discover Modes Command\nACK response and passes to PHY Layer .\n12PHY Layer receives the Discover Modes Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Discover\nModes Command ACK response. Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command ACK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 768 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command ACK response was\nsuccessfully sent.Table 8.135 Steps for DFP to UFP Discover Modes (ACK)\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7698.3.2.14.3.2 Initiator to Responder Discover Modes (NAK)\nFigure 8.109, \"Initiator to Responder Discover Modes (NAK)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover Mode\ninformation from the Responder but receives a NAK .\nFigure 8.109 Initiator to Responder Discover Modes (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes NAK\n11: Discover_Modes NAK\n12: Discover_Modes NAK + CRC\n13: Discover_Modes NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes NAK received\nStop VDMResponseTimer\nDPM evaluates Modes\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes NAK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Modes information from\nDevice Policy Manager\nPage 770 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.136, \"Steps for DFP to UFP Discover Modes (NAK)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.109, \"Initiator to Responder Discover Modes (NAK)\" .\nTable 8.136 Steps for DFP to UFP Discover Modes (NAK)\nStep DFP UFP\n1The DFP has an Explicit Contract . The Policy Engine\ndirects the Protocol Layer to send a Discover Modes\nCommand request.The UFP has an Explicit Contract .\n2Protocol Layer creates the Discover Modes Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover\nModes Command request. Starts CRCReceiveTimer .PHY Layer receives the Discover Modes Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nModes Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Modes Command NAK response.\n11Protocol Layer creates the Discover Modes Command\nNAK response and passes to PHY Layer .\n12PHY Layer receives the Discover Modes Command\nNAK response and compares the CRC it calculated with\nthe one sent to verify the Message .PHY Layer appends a CRC and sends the Discover Modes\nCommand NAK response. Starts CRCReceiveTimer.\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command NAK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 77116PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command NAK response was\nsuccessfully sent.Table 8.136 Steps for DFP to UFP Discover Modes (NAK)\nStep DFP UFP\nPage 772 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.3.3 Initiator to Responder Discover Modes (BUSY)\nFigure 8.110, \"Initiator to Responder Discover Modes (BUSY)\" shows an example sequence between an Initiator and\nResponder , where both Port Partner s are in an Explicit Contract and the Initiator attempts to discover Mode\ninformation from the Responder but receives a BUSY .\nFigure 8.110 Initiator to Responder Discover Modes (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineInitiator Responder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes BUSY\n11: Discover_Modes BUSY\n12: Discover_Modes BUSY + CRC\n13: Discover_Modes BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes BUSY received\nStop VDMResponseTimer\nDPM evaluates Modes\ninformation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes BUSY sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerExplicit PD Contract Explicit PD Contract\nRequest Modes information from\nDevice Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 773Table 8.137, \"Steps for DFP to UFP Discover Modes (BUSY)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.110, \"Initiator to Responder Discover Modes (BUSY)\" .\nTable 8.137 Steps for DFP to UFP Discover Modes (BUSY)\nStep DFP UFP\n1The DFP has an Explicit Contract . The Policy Engine\ndirects the Protocol Layer to send a Discover Modes\nCommand request.The UFP has an Explicit Contract .\n2Protocol Layer creates the Discover Modes Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Discover Modes\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Discover Modes Command\nrequest and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Discover\nModes Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command request information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command request was successfully\nsent.\nPolicy Engine starts the VDMResponseTimer.\n10Policy Engine requests the identity information from\nthe DPM . The Policy Engine tells the Protocol Layer to\nform a Discover Modes Command NAK response.\n11Protocol Layer creates the Discover Modes Command\nNAK response and passes to PHY Layer .\n12PHY Layer receives the Discover Modes Command\nNAK response and compares the CRC it calculated with\nthe one sent to verify the Message .PHY Layer appends a CRC and sends the Discover Modes\nCommand NAK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover\nModes Command NAK response information to the\nPolicy Engine that consumes it.\n14The Policy Engine stops the VDMResponseTimer and\npassed the Identity information to the DPM for\nevaluation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 774 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nDiscover Modes Command NAK response was\nsuccessfully sent.Table 8.137 Steps for DFP to UFP Discover Modes (BUSY)\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7758.3.2.14.4 Enter/Exit Mode"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.14.4.1",
    "title": "DFP to UFP Enter Mode",
    "full_path": "8.3.2.14.4.1 DFP to UFP Enter Mode",
    "page": 775,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.111, \"DFP to UFP Enter Mode\" shows an example sequence between a DFP and a UFP that occurs after the\nDFP has discovered supported SVID s and Modes at which point it selects and enters a Mode.\nFigure 8.111 DFP to UFP Enter Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: UFP Policy EngineDFP UFP\nSupported SVIDS/Modes discovered\nEnter USB Safe State\n37: Send Enter Mode\n38: Enter Mode\n39: Enter Mode + CRC\n40: Enter Mode Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n41: Enter Mode received42: GoodCRC\n43: GoodCRC + CRC\n44: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n45: Enter Mode sent\nStart VDMModeEntryTimer\n46: Send Enter Mode ACK\n47: Enter Mode ACK\n48: Enter Mode ACK + CRC\n49: Enter Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n50: Enter Mode ACK received\nStop VDMModeEntryTimer\nEnter New Mode51: GoodCRC\n52: GoodCRC + CRC\n53: GoodCRC\n54: Enter Mode ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerUSB Operation USB Operation\nEvaluate Enter Mode request\nEnter New Mode\nNew Mode Entered\nPage 776 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.138, \"Steps for DFP to UFP Enter Mode\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.111, \"DFP to UFP Enter Mode\" above.\nTable 8.138 Steps for DFP to UFP Enter Mode\nStep DFP UFP\n1The DFP has an Explicit Contract\nThe DFP has discovered the supported SVID S using the\nDiscover SVIDs Command request and the supported\nModes using the Discover Modes Command request\nThe DFP goes to USB Safe State . The DPM requests the\nPolicy Engine to enter a Mode.\nThe Policy Engine directs the Protocol Layer to send an\nEnter Mode Command request.The UFP has an Explicit Contract .\n2Protocol Layer creates the Enter Mode Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Enter Mode\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Enter Mode Command request\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Enter\nMode Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode\nCommand request information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter Mode Command request was successfully sent.\nPolicy Engine starts the VDMModeEntryTimer .\n10Policy Engine requests the DPM to enter the new\nMode. The Policy Engine tells the Protocol Layer to\nform an Enter Mode Command ACK response.\n11Protocol Layer creates the Enter Mode Command ACK\nresponse and passes to PHY Layer .\n12PHY Layer receives the Enter Mode Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Enter Mode\nCommand ACK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode\nCommand ACK response information to the Policy\nEngine that consumes it.\n14The Policy Engine stops the VDMModeEntryTimer\nand requests the DPM to enter the new Mode.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 77715Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Enter\nMode Command ACK response was successfully sent.\nDFP and UFP are operating in the new ModeTable 8.138 Steps for DFP to UFP Enter Mode\nStep DFP UFP\nPage 778 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.4.2 DFP to UFP Exit Mode\nFigure 8.112, \"DFP to UFP Exit Mode\" shows an example sequence between a DFP and a UFP , where the DFP\ncommands the UFP to exit the only Active Mode .\nFigure 8.112 DFP to UFP Exit Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: UFP Policy EngineDFP UFP\n1: Send Exit Mode\n2: Exit Mode\n3: Exit Mode + CRC\n4: Exit Mode Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Exit Mode received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Exit Mode sent\nStart VDMModeExitTimer\n10: Send Exit Mode ACK\n11: Exit Mode ACK\n12: Exit Mode ACK + CRC\n13: Exit Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Exit Mode ACK received\nStop VDMModeExitTimer\nEnter USB Operation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Exit Mode ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerIn ModeIn Mode\nEnter USB Safe State\nEvaluate Exit Mode request\nEnter USB Operation\nUSB operation\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 779Table 8.139, \"Steps for DFP to UFP Exit Mode\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.112, \"DFP to UFP Exit Mode\" above.\nTable 8.139 Steps for DFP to UFP Exit Mode\nStep DFP UFP\n1The DFP is in a Mode and then enters USB Safe State .\nThe Policy Engine directs the Protocol Layer to send an\nExit Mode Command request.The UFP is in a Mode.\n2Protocol Layer creates the Exit Mode Command request\nand passes to PHY Layer .\n3PHY Layer appends CRC and sends the Exit Mode\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Exit Mode Command request\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Exit\nMode Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode\nCommand request information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Exit\nMode Command request was successfully sent.\nPolicy Engine starts the VDMModeExitTimer .\n10Policy Engine requests the DPM to enter USB\noperation. The Policy Engine tells the Protocol Layer to\nform an Exit Mode Command ACK response.\n11Protocol Layer creates the Exit Mode Command ACK\nresponse and passes to PHY Layer .\n12PHY Layer receives the Exit Mode Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Exit Mode\nCommand ACK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode\nCommand ACK response information to the Policy\nEngine that consumes it.\n14The Policy Engine stops the VDMModeExitTimer and\nrequests the DPM to enter USB Operation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nPage 780 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Exit\nMode Command ACK response was successfully sent.\nBoth DFP and UFP are in USB OperationTable 8.139 Steps for DFP to UFP Exit Mode\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7818.3.2.14.4.3 DFP to Cable Plug Enter Mode\nFigure 8.113, \"DFP to Cable Plug Enter Mode\" shows an example sequence between a DFP and a Cable Plug that\noccurs after the DFP has discovered supported SVID s and Modes at which point it selects and enters a Mode.\nFigure 8.113 DFP to Cable Plug Enter Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Cable Plug Policy EngineDFP Cable Plug\nSupported SVIDs/Modes Discovered\nEnter USB Safe Mode\nWait tCableMessage before\ntransmission\n19: Send Enter Mode\n20: Enter Mode\n21: Enter Mode + CRC\n22: Enter Mode Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Enter Mode received24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Enter Mode sent\nStart VDMModeEntryTimer\n10: Send Enter Mode ACK\n11: Enter Mode ACK\n12: Enter Mode ACK + CRC\n13: Enter Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Enter Mode ACK received\nStop VDMModeEntryTimer\nEnter New Mode15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Enter Mode ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerUSB Mode USB Mode\nEvaluate Enter Mode request\nEnter New Mode\nWait tCableMessage before transmission\nNew Mode Entered\nPage 782 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.140, \"Steps for DFP to Cable Plug Enter Mode\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.113, \"DFP to Cable Plug Enter Mode\" above.\nTable 8.140 Steps for DFP to Cable Plug Enter Mode\nStep DFP Cable Plug\n1The DFP has an Explicit Contract\nThe DFP has discovered the supported SVID S using the\nDiscover SVIDs Command request and the supported\nModes using the Discover Modes Command request\nThe DFP goes to USB Safe State . The DPM requests the\nPolicy Engine to enter a Mode.\ntCableMessage after the last GoodCRC Message was\nsent the Policy Engine directs the Protocol Layer to\nsend an Enter Mode Command request.\n2Protocol Layer creates the Enter Mode Command\nrequest and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Enter Mode\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Enter Mode Command request\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Enter\nMode Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode\nCommand request information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter Mode Command request was successfully sent.\nPolicy Engine starts the VDMModeEntryTimer .\n10Policy Engine requests the DPM to enter the new\nMode. tCableMessage after the GoodCRC Message was\nsent the Policy Engine tells the Protocol Layer to form\nan Enter Mode Command ACK response.\n11Protocol Layer creates the Enter Mode Command ACK\nresponse and passes to PHY Layer .\n12PHY Layer receives the Enter Mode Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Enter Mode\nCommand ACK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode\nCommand ACK response information to the Policy\nEngine that consumes it.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 78314The Policy Engine stops the VDMModeEntryTimer\nand requests the DPM to enter the new Mode.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Enter\nMode Command ACK response was successfully sent.\nDFP and Cable Plug are operating in the new ModeTable 8.140 Steps for DFP to Cable Plug Enter Mode\nStep DFP Cable Plug\nPage 784 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.14.4.4 DFP to Cable Plug Exit Mode\nFigure 8.114, \"DFP to Cable Plug Exit Mode\" shows an example sequence between a USB Type-C® DFP and a Cable\nPlug , where the DFP commands the Cable Plug to exit an Active Mode .\nFigure 8.114 DFP to Cable Plug Exit Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Cable Plug Policy EngineDFP Cable Plug\n1: Send Exit Mode\n2: Exit Mode\n3: Exit Mode + CRC\n4: Exit Mode Start CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Exit Mode received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Exit Mode sent\nStart VDMModeExitTimer\n10: Send Exit Mode ACK\n11: Exit Mode ACK\n12: Exit Mode ACK + CRC\n13: Exit Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Exit Mode ACK received\nStop VDMModeExitTimer\nEnter USB Operation15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Exit Mode ACK sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerIn ModeIn Mode\nEnter USB Safe State\nEvaluate Exit Mode request\nEnter USB Operation\nWait tCableMessage before transmission\nUSB operation\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 785Table 8.141, \"Steps for DFP to Cable Plug Exit Mode\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.114, \"DFP to Cable Plug Exit Mode\" above.\nTable 8.141 Steps for DFP to Cable Plug Exit Mode\nStep DFP Cable Plug\n1The DFP is in a Mode and then enters USB Safe State .\nThe Policy Engine directs the Protocol Layer to send an\nExit Mode Command request.The Cable Plug is in a Mode.\n2Protocol Layer creates the Exit Mode Command request\nand passes to PHY Layer .\n3PHY Layer appends CRC and sends the Exit Mode\nCommand request. Starts CRCReceiveTimer .PHY Layer receives the Exit Mode Command request\nand checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the Exit\nMode Command request to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode\nCommand request information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Exit\nMode Command request was successfully sent.\nPolicy Engine starts the VDMModeExitTimer .\n10Policy Engine requests the DPM to enter USB\noperation. tCableMessage after the GoodCRC Message\nwas sent the Policy Engine tells the Protocol Layer to\nform an Exit Mode Command ACK response.\n11Protocol Layer creates the Exit Mode Command ACK\nresponse and passes to PHY Layer .\n12PHY Layer receives the Exit Mode Command ACK\nresponse and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Exit Mode\nCommand ACK response. Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode\nCommand ACK response information to the Policy\nEngine that consumes it.\n14The Policy Engine stops the VDMModeExitTimer and\nrequests the DPM to enter USB Operation.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 786 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1016PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Exit\nMode Command ACK response was successfully sent.\nBoth DFP and Cable Plug are in USB OperationTable 8.141 Steps for DFP to Cable Plug Exit Mode\nStep DFP Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7878.3.2.14.4.5 Initiator to Responder Attention\nFigure 8.115, \"Initiator to Responder Attention\" shows an example sequence between an Initiator and a Responder ,\nwhere the Initiator requests attention from the Responder .\nFigure 8.115 Initiator to Responder Attention\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy EngineResponder Initiator\n1: Send Attention\n2: Attention\n3: Attention + CRC\n4: Attention\nCheck MessageID against local copy\nStore copy of MessageID\n5: Attention received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Attention sentStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nPage 788 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.142, \"Steps for Initiator to Responder Attention\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.115, \"Initiator to Responder Attention\" above.\nTable 8.142 Steps for Initiator to Responder Attention\nStep Responder Initiator\n1The DPM requests attention. The Policy Engine tells\nthe Protocol Layer to form an Attention Command\nrequest.\n2Protocol Layer creates the Attention Command request\nand passes to PHY Layer .\n3PHY Layer receives the Attention Command request\nand compares the CRC it calculated with the one sent to\nverify the Message .PHY Layer appends a CRC and sends the Attention\nCommand request. Starts CRCReceiveTimer .\n4Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Attention\nCommand request information to the Policy Engine\nthat consumes it."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "The Policy Engine informs the DPM",
    "full_path": "5 The Policy Engine informs the DPM",
    "page": 788,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAttention Command request was successfully sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7898.3.2.15 Built in Self- Test (BIST)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.15.1",
    "title": "BIST Carrier Mode",
    "full_path": "8.3.2.15.1 BIST Carrier Mode",
    "page": 789,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The following is an example of a BIST Carrier Mode test between a Tester and a UUT . When the UUT is connected to\nthe Tester the sequence below is executed.\nFigure 8.116, \"BIST Carrier Mode Test\" shows the Message s as they flow across the bus and within the devices. This\ntest enables the measurement of power supply noise and frequency drift.\n1) Connection is established and stable.\n2) Tester sends a BIST Message with a BIST Carrier Mode BIST Data Object .\n3) UUT answers with a GoodCRC Message .\n4) UUT starts sending the Test Pattern .\n5) Operator does the measurements.\n6) The test ends after tBISTContMode .\nSee also Section 5.9.1, \"BIST Carrier Mode\" and Section 6.4.3.1, \"BIST Carrier Mode\" .\nFigure 8.116 BIST Carrier Mode Test\n: Protocol\n1: Send BIST(Carrier Mode)\n: PHY\n: PHY\n: Protocol\n2: BIST(Carrier Mode)\n3: BIST(Carrier Mode) + CRC\n4: BIST(Carrier Mode) Start CRCReceiveTimer\n5: BIST(Carrier Mode) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Carrier Mode) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Carrier ModeTester UUT\n12: Send Test Pattern\n13: Send Test Pattern\n14: Test PatternCheck and increment MessageIDCounter\nStop CRCReceiveTimerCheck MessageID against\nlocal copy\nStore copy of MessageID\nEnd of Test (after tBISTContMode)Enter BIST Carrier Mode mode10: Go to BIST Carrier Mode\n11: Go to BIST Carrier Mode\nPage 790 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.143, \"Steps for BIST Carrier Mode Test\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.116, \"BIST Carrier Mode Test\" above.\nTable 8.143 Steps for BIST Carrier Mode Test\nStep Tester UUT\n1The Policy Engine directs the Protocol Layer to\ngenerate a BIST Message , with a BIST Data Object of\nBIST Carrier Mode , to put the UUT into BIST Carrier\nMode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the BIST Message .\nStarts CRCReceiveTimer .PHY Layer receives the BIST Message and checks the\nCRC to verify the Message .\n4PHY Layer removes the CRC and forwards the BIST\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message\ninformation to the Policy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the BIST\nMessage was successfully sent.\n10Policy Engine tells Protocol Layer to go into BIST\nCarrier Mode . The Policy Engine goes to BIST Carrier\nMode .\n11Protocol Layer tells PHY Layer to go into BIST Carrier\nMode .\nUUT enters BIST Carrier Mode .\n12The Policy Engine directs the Protocol Layer to start\ngeneration of the Test Pattern .\n13Protocol Layer directs the PHY Layer to generate the Test\nPattern ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "PHY Layer receives the Test Pattern stream. PHY Layer generates a continuous Test Pattern stream.",
    "full_path": "14 PHY Layer receives the Test Pattern stream. PHY Layer generates a continuous Test Pattern stream.",
    "page": 790,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "The UUT exits BIST Carrier Mode after tBISTContMode .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7918.3.2.15.2 BIST Test Data Mode\nThe following is an example of a BIST Test Data Mode test between a Tester and a UUT . When the UUT is connected\nto the Tester the sequence below is executed.\nFigure 8.117, \"BIST Test Data Test\" shows the Message s as they flow across the bus and within the devices.\n1) Connection is established and stable.\n2) Tester sends a BIST Message with a BIST Test Data BIST Data Object .\n3) UUT answers with a GoodCRC Message .\n4) Steps 2and 3 are repeated any number of times.\n5) The test ends after Hard Reset Signaling is issued.\nSee also Section 5.9.2, \"BIST Test Data Mode\" and Section 6.4.3.2, \"BIST Test Data Mode\" .\nPage 792 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.117 BIST Test Data Test\n: Protocol\n1: Send BIST(Test Data)\n: PHY\n: PHY\n: Protocol\n2: BIST(Test Data)\n3: BIST(Test Data) + CRC\n4: BIST(Test Data) Start CRCReceiveTimer\n5: BIST(Test Data) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Test Data) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Test Data modeTester UUT\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerCheck MessageID against\nlocal copy\nStore copy of MessageID\nEnd of Test (Hard Reset)Enter BIST Test Data mode\n10: Send BIST(Test Data)\n11: BIST(Test Data)\n12: BIST(Test Data) + CRC\n13: BIST(Test Data) Start CRCReceiveTimer\n14: BIST(Test Data) received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: BIST(Test Data) sentCheck and increment MessageIDCounter\nStop CRCReceiveTimerCheck MessageID against\nlocal copy\nStore copy of MessageID\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 793Table 8.144, \"Steps for BIST Test Data Test\" below provides a detailed explanation of what happens at each labeled\nstep in Figure 8.117, \"BIST Test Data Test\" above.\nTable 8.144 Steps for BIST Test Data Test\nStep Tester UUT\n1The Policy Engine directs the Protocol Layer to\ngenerate a BIST Message , with a BIST Data Object of\nBIST Test Data , to put the UUT into BIST Test Data\nMode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the BIST Message .\nStarts CRCReceiveTimer .PHY Layer receives the BIST Message and checks the CRC\nto verify the Message .\n4PHY Layer removes the CRC and forwards the BIST\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message\ninformation to the Policy Engine that consumes it.\nThe Policy Engine goes into BIST Test Data Mode Mode\nwhere it sends no further Message s except for GoodCRC\nMessage s in response to received Message s (see Section\n6.4.3.2, \"BIST Test Data Mode\" ).\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the BIST\nMessage was successfully sent.\nUUT enters BIST Test Data Mode .\n10The Policy Engine directs the Protocol Layer to\ngenerate a BIST Message , with a BIST Data Object of\nBIST Test Data , to put the UUT into BIST Test Data\nMode .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer appends CRC and sends the BIST Message .\nStarts CRCReceiveTimer .PHY Layer receives the BIST Message and checks the CRC\nto verify the Message .\n13PHY Layer removes the CRC and forwards the BIST\nMessage to the Protocol Layer .\nPage 794 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1014Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message\ninformation to the Policy Engine that consumes it.\nThe Policy Engine goes into BIST Test Data Mode Mode\nwhere it sends no further Message s except for GoodCRC\nMessage s in response to received Message s (see Section\n6.4.3.2, \"BIST Test Data Mode\" ).\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n17PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n18Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the BIST\nMessage was successfully sent.\nRepeat steps 10-18 any number of times\nThe UUT exits BIST Test Data Mode after a Hard ResetTable 8.144 Steps for BIST Test Data Test\nStep Tester UUT\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 7958.3.2.15.3 BIST Shared Capacity Test Mode\nThe following is an example of a BIST Shared Capacity Test Mode test between a Tester and a UUT . When the UUT\nis connected to the Tester the sequence below is executed.\nFigure 8.118, \"BIST Share Capacity Mode Test\" shows the Message s as they flow across the bus and within the\ndevices. This test places the UUT in a compliance test mode where the maximum Source capability is always offered\non every Port , regardless of the availability of shared power i.e., all shared power management is disabled.\n1) Connection is established and stable.\n2) Tester sends a BIST Message with a BIST Shared Test Mode Entry BIST Data Object .\n3) UUT answers with a GoodCRC Message .\n4) UUT enters BIST Shared Capacity Test Mode .\n5) Operator does the measurements.\n6) Tester sends a BIST Message with a BIST Shared Test Mode Exit BIST Data Object .\n7) UUT answers with a GoodCRC Message .\n8) UUT exits BIST Shared Capacity Test Mode .\nSee also Section 5.9.1, \"BIST Carrier Mode\" and Section 6.4.3.3, \"BIST Shared Capacity Test Mode\" .\nFigure 8.118 BIST Share Capacity Mode Test\n12: Send BIST(Shared Capacity Test Mode Exit)\n13: BIST(Shared Capacity Test Mode Exit)\n14: BIST(Shared Capacity Test Mode Exit) + CRC\n15: BIST(Shared Capacity Test Mode Exit) Start CRCReceiveTimer\n16: BIST(Shared Capacity Test Mode Exit) received\n17: GoodCRC\n18: GoodCRC + CRC\n19: GoodCRC\n20: BIST(Shared Capacity Test Mode) sentGo to BIST Shared Capacity\nTest Mode\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerCheck MessageID against\nlocal copy\nStore copy of MessageID\nEXit BIST Shared Capacity Test Mode mode21: Exit BIST Shared Capacity Test Mode\n22: Exit BIST Shared Capacity Test Mode\n: Protocol\n1: Send BIST(Shared Capacity Test Mode Entry)\n: PHY\n: PHY\n: Protocol\n2: BIST(Shared Capacity Test Mode Entry)\n3: BIST(Shared Capacity Test Mode Entry) + CRC\n4: BIST(Shared Capacity Test Mode Entry) Start CRCReceiveTimer\n5: BIST(Shared Capacity Test Mode Entry) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Shared Capacity Test Mode) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Shared Capacity\nTest ModeTester UUT\nCheck and increment MessageIDCounter\nStop CRCReceiveTimerCheck MessageID against\nlocal copy\nStore copy of MessageID\nEnter BIST Shared Capacity Test Mode mode10: Go to BIST Shared Capacity Test Mode\n11: Go to BIST Shared Capacity Test Mode\nTester Performs Tests\nPage 796 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.145, \"Steps for BIST Shared Capacity Test Mode Test\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.118, \"BIST Share Capacity Mode Test\" above.\nTable 8.145 Steps for BIST Shared Capacity Test Mode Test\nStep Tester UUT\n1The Policy Engine directs the Protocol Layer to\ngenerate a BIST Message , with a BIST Data Object of\nBIST Shared Test Mode Entry , to put the UUT into BIST\nShared Capacity Test Mode .\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the BIST Message .\nStarts CRCReceiveTimer .PHY Layer receives the BIST Message and checks the CRC\nto verify the Message .\n4PHY Layer removes the CRC and forwards the BIST\nMessage to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message\ninformation to the Policy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY LayerPHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the BIST\nMessage was successfully sent.\n10Policy Engine tells Protocol Layer to go into BIST\nShared Capacity Test Mode . The Policy Engine goes to\nBIST Shared Capacity Test Mode .\n11Protocol Layer tells PHY Layer to go into BIST Shared\nCapacity Test Mode .\nUUT enters BIST Shared Capacity Test Mode . Tester performs tests.\n12The Policy Engine directs the Protocol Layer to\ngenerate a BIST Message , with a BIST Data Object of\nBIST Shared Test Mode Exit, to take the UUT out of BIST\nShared Capacity Test Mode .\n13Protocol Layer creates the Message and passes to PHY\nLayer .\n14PHY Layer appends CRC and sends the BIST Message .\nStarts CRCReceiveTimer .PHY Layer receives the BIST Message and checks the\nCRC to verify the Message .\n15PHY Layer removes the CRC and forwards the BIST\nMessage to the Protocol Layer .\n16Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message\ninformation to the Policy Engine that consumes it.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 79717Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n18PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n19PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n20Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the BIST\nMessage was successfully sent.\n21Policy Engine tells Protocol Layer to exit BIST Shared\nCapacity Test Mode . The Policy Engine exits to BIST\nShared Capacity Test Mode .\n22Protocol Layer tells PHY Layer to exit BIST Shared\nCapacity Test Mode .\nUUT exits BIST Shared Capacity Test Mode .Table 8.145 Steps for BIST Shared Capacity Test Mode Test\nStep Tester UUT\nPage 798 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.16 Enter USB"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.16.1",
    "title": "UFP Entering USB4 Mode",
    "full_path": "8.3.2.16.1 UFP Entering USB4 Mode",
    "page": 798,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.16.1.1",
    "title": "UFP Entering USB4 Mode (Accept)",
    "full_path": "8.3.2.16.1.1 UFP Entering USB4 Mode (Accept)",
    "page": 798,
    "level": 6,
    "parent_id": "8.3.2.16.1",
    "tags": [],
    "content": "This is an example of an Enter USB operation where the DFP requests [USB4] mode when this is a Valid mode of\noperation for the UFP . Figure 8.119, \"UFP Entering USB4 Mode (Accept)\" shows the Message s as they flow across the\nbus and within the devices to accomplish the Enter USB process.\nFigure 8.119 UFP Entering USB4 Mode (Accept)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode enteredDFP UFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 799Table 8.146, \"Steps for UFP USB4 Mode Entry (Accept)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.119, \"UFP Entering USB4 Mode (Accept)\" above.\nTable 8.146 Steps for UFP USB4 Mode Entry (Accept)\nStep DFP UFP\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nPage 800 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1018Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nBoth Port Partner s enter [USB4] operation.Table 8.146 Steps for UFP USB4 Mode Entry (Accept)\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8018.3.2.16.1.2 UFP Entering USB4 Mode (Reject)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is an Invalid mode\nof operation for the UFP . Figure 8.120, \"UFP Entering USB4 Mode (Reject)\" shows the Message s as they flow across\nthe bus and within the devices to accomplish the Enter USB process.\nFigure 8.120 UFP Entering USB4 Mode (Reject)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanismsDFP UFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nPage 802 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.147, \"Steps for UFP USB4 Mode Entry (Reject)\" below provides a detailed explanation of what happens at\neach labeled step in Figure 8.120, \"UFP Entering USB4 Mode (Reject)\" above.\nTable 8.147 Steps for UFP USB4 Mode Entry (Reject)\nStep DFP UFP\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Reject\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 80318Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent.\nPort Partner s do not enter [USB4] operation.Table 8.147 Steps for UFP USB4 Mode Entry (Reject)\nStep DFP UFP\nPage 804 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.16.1.3 UFP Entering USB4 Mode (Wait)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is not possible for\nthe UFP at this time. Figure 8.121, \"UFP Entering USB4 Mode (Wait)\" shows the Message s as they flow across the bus\nand within the devices to accomplish the Enter USB process.\nFigure 8.121 UFP Entering USB4 Mode (Wait)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\n14: Wait received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Wait sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanismsDFP UFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 805Table 8.148, \"Steps for UFP USB4 Mode Entry (Wait)\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.121, \"UFP Entering USB4 Mode (Wait)\" above.\nTable 8.148 Steps for UFP USB4 Mode Entry (Wait)\nStep DFP UFP\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Wait\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nPage 806 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1018Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sent.\nPort Partner s do not enter [USB4] operation.Table 8.148 Steps for UFP USB4 Mode Entry (Wait)\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8078.3.2.16.2 Cable Plug Entering USB4 Mode"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.16.2.1",
    "title": "Cable Plug Entering USB4 Mode (Accept)",
    "full_path": "8.3.2.16.2.1 Cable Plug Entering USB4 Mode (Accept)",
    "page": 807,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "This is an example of an Enter USB operation where the DFP requests [USB4] mode when this is a Valid mode of\noperation for the Cable Plug . Figure 8.122, \"Cable Plug Entering USB4 Mode (Accept)\" shows the Message s as they\nflow across the bus and within the devices to accomplish the Enter USB process.\nFigure 8.122 Cable Plug Entering USB4 Mode (Accept)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Accept sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode enteredDFP Cable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nPage 808 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.149, \"Steps for Cable Plug USB4 Mode Entry (Accept)\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.122, \"Cable Plug Entering USB4 Mode (Accept)\" above.\nTable 8.149 Steps for Cable Plug USB4 Mode Entry (Accept)\nStep DFP Cable Plug\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC to\nverify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Accept\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Accept\nMessage information to the Policy Engine that\nconsumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 80918Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nAccept Message was successfully sent.\nCable Plug enters [USB4] operation.Table 8.149 Steps for Cable Plug USB4 Mode Entry (Accept)\nStep DFP Cable Plug\nPage 810 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.16.2.2 Cable Plug Entering USB4 Mode (Reject)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is an Invalid mode\nof operation for the Cable Plug . Figure 8.123, \"Cable Plug Entering USB4 Mode (Reject)\" shows the Message s as they\nflow across the bus and within the devices to accomplish the Enter USB process.\nFigure 8.123 Cable Plug Entering USB4 Mode (Reject)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanismsDFP Cable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 811Table 8.150, \"Steps for Cable Plug USB4 Mode Entry (Reject)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.123, \"Cable Plug Entering USB4 Mode (Reject)\" above.\nTable 8.150 Steps for Cable Plug USB4 Mode Entry (Reject)\nStep DFP Cable Plug\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Reject\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Reject\nMessage information to the Policy Engine that\nconsumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nPage 812 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1018Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nReject Message was successfully sent.\nCable Plug does not enter [USB4] operation.Table 8.150 Steps for Cable Plug USB4 Mode Entry (Reject)\nStep DFP Cable Plug\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8138.3.2.16.2.3 Cable Plug Entering USB4 Mode (Wait)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is not possible for\nthe Cable Plug at this time. Figure 8.124, \"Cable Plug Entering USB4 Mode (Wait)\" shows the Message s as they flow\nacross the bus and within the devices to accomplish the Enter USB process.\nFigure 8.124 Cable Plug Entering USB4 Mode (Wait)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)Start CRCReceiveTimer\n5: Enter_USB (USB4) received6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer15: GoodCRC 16: GoodCRC + CRC17: GoodCRC\n18: Reject sentStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanismsDFP Cable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nPage 814 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.151, \"Steps for Cable Plug USB4 Mode Entry (Wait)\" below provides a detailed explanation of what happens\nat each labeled step in Figure 8.124, \"Cable Plug Entering USB4 Mode (Wait)\" above.\nTable 8.151 Steps for Cable Plug USB4 Mode Entry (Wait)\nStep DFP Cable Plug\n1The Policy Engine directs the Protocol Layer to\ngenerate an Enter_USB Message to request entry to\n[USB4] mode.\n2Protocol Layer creates the Message and passes to PHY\nLayer .\n3PHY Layer appends CRC and sends the Enter_USB\nMessage . Starts CRCReceiveTimer .PHY Layer receives the Enter_USB Message and\ncompares the CRC it calculated with the one sent to verify\nthe Message .\n4PHY Layer removes the CRC and forwards the\nEnter_USB Message to the Protocol Layer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB\nMessage information to the Policy Engine that\nconsumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC and checks the CRC\nto verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nEnter_USB Message was successfully sent. Policy\nEngine starts SenderResponseTimer .\n10Policy Engine tells the Protocol Layer to form an Wait\nMessage .\n11Protocol Layer creates the Message and passes to PHY\nLayer .\n12PHY Layer receives the Message and compares the CRC\nit calculated with the one sent to verify the Message .PHY Layer appends a CRC and sends the Message . Starts\nCRCReceiveTimer .\n13Protocol Layer stores the MessageID of the incoming\nMessage .\n14The Protocol Layer forwards the received Wait Message\ninformation to the Policy Engine that consumes it.\n15Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n16PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n17PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 81518Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the Wait\nMessage was successfully sent.\nCable Plug does not enter [USB4] operation.Table 8.151 Steps for Cable Plug USB4 Mode Entry (Wait)\nStep DFP Cable Plug\nPage 816 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.2.17 Unstructured Vendor Defined Messages"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.2.17.1",
    "title": "Unstructured VDM",
    "full_path": "8.3.2.17.1 Unstructured VDM",
    "page": 816,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.125, \"Unstructured VDM Message Sequence\" shows an example sequence of an Unstructured VDM\nTransaction between a DFP and UFP . The figure below shows the Message s as they flow across the bus after UFP\nEnters into Modal Operation .\nFigure 8.125 Unstructured VDM Message Sequence\n: Protocol\n: DFP Policy Engine\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nNew Mode Entered"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "20",
    "title": ": Send Unstructured VDM",
    "full_path": "20 : Send Unstructured VDM",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Start CRCReceive Timer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "21",
    "title": ": Unstructured VDM",
    "full_path": "21 : Unstructured VDM",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "22",
    "title": ": Unstructured VDM +",
    "full_path": "22 : Unstructured VDM +",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "CRC"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "23",
    "title": ": Unstructured VDM",
    "full_path": "23 : Unstructured VDM",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Check MessageID against local copy\nStore Copy of MessageID"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "23",
    "title": ": Unstructured VDM Received",
    "full_path": "23 : Unstructured VDM Received",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Evaluate Unstructured VDM\nReply with the application specific\nresponse which can be again a\nUnstructured VDM\nStart CRCReceive Timer\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer10: Send Unstructured VDM\n11: Unstructured VDM\n18: Unstructured VDM Sent17: GoodCRC\nCheck MessageID against local copy\nStore Copy of MessageID"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": ": Unstructured VDM + CRC",
    "full_path": "12 : Unstructured VDM + CRC",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "16: GoodCRC + CRC11: Unstructured VDM\n15: GoodCRC\n14: Unstructured VDM Received\nProcess Unstructured VDM as required24 : GoodCRC25 : GoodCRC + CRC26 : GoodCRC\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": ": Unstructured VDM Sent",
    "full_path": "27 : Unstructured VDM Sent",
    "page": 816,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 817Table 8.152, \"Steps for Unstructured VDM Message Sequence\" below provides a detailed explanation of what\nhappens at each labeled step in Figure 8.125, \"Unstructured VDM Message Sequence\" above.\nTable 8.152 Steps for Unstructured VDM Message Sequence\nStep DFP UFP\n1The DFP has an Explicit Contract and has entered an\nActive Mode with the UFP . The Policy Engine directs\nthe Protocol Layer to send an Unstructured\nVendor_Defined Message .The UFP has an Explicit Contract and has entered an\nActive Mode with the UFP\n2Protocol Layer creates the Unstructured\nVendor_Defined Message and passes to PHY Layer .\n3PHY Layer appends CRC and sends the Unstructured\nVendor_Defined Message . Starts CRCReceiveTimer .PHY Layer receives the Unstructured Vendor_Defined\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nUnstructured Vendor_Defined Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the Unstructured\nVendor_Defined Message information to the Policy\nEngine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY Layer receives the GoodCRC Message and checks\nthe CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nUnstructured Vendor_Defined Message was\nsuccessfully sent.\n10In this example the Vendor protocol requires a\nresponse. The Policy Engine tells the Protocol Layer to\nform an Unstructured Vendor_Defined Message .\n11Protocol Layer creates the Unstructured\nVendor_Defined Message and passes to PHY Layer .\n12PHY Layer receives the Unstructured Vendor_Defined\nMessage and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the Unstructured\nVendor_Defined Message . Starts CRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the Unstructured\nVendor_Defined Message information to the Policy\nEngine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\nPage 818 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1015PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares the\nCRC it calculated with the one sent to verify the Message .\n16PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nUnstructured Vendor_Defined Message was successfully\nsent.Table 8.152 Steps for Unstructured VDM Message Sequence\nStep DFP UFP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8198.3.2.17.2 VDEM\nFigure 8.126, \"VDEM Message Sequence\" shows an example sequence of an VDEM transaction between a DFP and\nUFP . The figure below shows the Message s as they flow across the bus after UFP Enters into Modal Operation .\nFigure 8.126 VDEM Message Sequence\n: Protocol\n: DFP Policy Engine\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nNew Mode Entered"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "20",
    "title": ": Send VDEM",
    "full_path": "20 : Send VDEM",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Start CRCReceive Timer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "21",
    "title": ": VDEM",
    "full_path": "21 : VDEM",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "22",
    "title": ": VDEM + CRC",
    "full_path": "22 : VDEM + CRC",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "23",
    "title": ": VDEM",
    "full_path": "23 : VDEM",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Check MessageID against local copy\nStore Copy of MessageID"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "23",
    "title": ": VDEM Received",
    "full_path": "23 : VDEM Received",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Evaluate VDEM\nReply with the application specific\nresponse which can be again a VDEM\nStart CRCReceive Timer\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer10: Send VDEM\n11: VDEM\n18: VDEM Sent17: GoodCRC\nCheck MessageID against local copy\nStore Copy of MessageID"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": ": VDEM + CRC",
    "full_path": "12 : VDEM + CRC",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "16: GoodCRC + CRC11: VDEM\n15: GoodCRC\n14: VDEM Received\nProcess VDEM as required24 : GoodCRC25 : GoodCRC + CRC26 : GoodCRC\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": ": VDEM Sent",
    "full_path": "27 : VDEM Sent",
    "page": 819,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 820 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Table 8.153, \"Steps for VDEM Message Sequence\" below provides a detailed explanation of what happens at each\nlabeled step in Figure 8.126, \"VDEM Message Sequence\" above.\nTable 8.153 Steps for VDEM Message Sequence\nStep DFP UFP\n1The DFP has an Explicit Contract and has entered an\nActive Mode with the UFP . The Policy Engine directs\nthe Protocol Layer to send a Vendor_Defined_Extended\nMessage .The UFP has an Explicit Contract and has entered an\nActive Mode with the UFP\n2Protocol Layer creates the Vendor_Defined_Extended\nMessage and passes to PHY Layer .\n3PHY Layer appends CRC and sends the\nVendor_Defined_Extended Message . Starts\nCRCReceiveTimer .PHY Layer receives the Vendor_Defined_Extended\nMessage and checks the CRC to verify the Message .\n4PHY Layer removes the CRC and forwards the\nVendor_Defined_Extended Message to the Protocol\nLayer .\n5Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the\nVendor_Defined_Extended Message information to the\nPolicy Engine that consumes it.\n6Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n7PHY LayerPHY Layer receives the GoodCRC Message\nand checks the CRC to verify the Message .PHY Layer appends CRC and sends the GoodCRC\nMessage .\n8PHY Layer removes the CRC and forwards the\nGoodCRC Message to the Protocol Layer .\n9Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer .\nProtocol Layer informs the Policy Engine that the\nVendor_Defined_Extended Message was successfully\nsent.\n10In this example the Vendor protocol requires a\nresponse. The Policy Engine tells the Protocol Layer to\nform a Vendor_Defined_Extended Message .\n11Protocol Layer creates the Vendor_Defined_Extended\nMessage and passes to PHY Layer .\n12PHY Layer receives the Vendor_Defined_Extended\nMessage and compares the CRC it calculated with the\none sent to verify the Message .PHY Layer appends a CRC and sends the\nVendor_Defined_Extended Message . Starts\nCRCReceiveTimer .\n13Protocol Layer checks the MessageID in the incoming\nMessage is different from the previously stored value\nand then stores a copy of the new value.\nThe Protocol Layer forwards the\nVendor_Defined_Extended Message information to the\nPolicy Engine that consumes it.\n14Protocol Layer generates a GoodCRC Message and\npasses it PHY Layer .\n15PHY Layer appends a CRC and sends the GoodCRC\nMessage .PHY Layer receives GoodCRC Message and compares\nthe CRC it calculated with the one sent to verify the\nMessage .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 82116PHY Layer removes the CRC and forwards the GoodCRC\nMessage to the Protocol Layer .\n17Protocol Layer verifies and increments the\nMessageIDCounter and stops CRCReceiveTimer.\nProtocol Layer informs the Policy Engine that the\nVendor_Defined_Extended Message was successfully\nsent.Table 8.153 Steps for VDEM Message Sequence\nStep DFP UFP\nPage 822 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3 State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.1",
    "title": "Introduction to state diagrams used in Chapter 8",
    "full_path": "8.3.3.1 Introduction to state diagrams used in Chapter 8",
    "page": 822,
    "level": 4,
    "parent_id": "8.3.3",
    "tags": [],
    "content": "The state diagrams defined in Section 8.3.3, \"State Diagrams\" are Normative and Shall define the operation of the\nPower Delivery Policy Engine .\nNote: These state diagrams are not intended to replace a well written and robust design.\nFigure 8.127 Outline of States\nFigure 8.127, \"Outline of States\" shows an outline of the states defined in the following sections. At the top there is\nthe name of the state. This is followed by \"Actions on entry\" a list of actions carried out on entering the state. If\nthere are also \"Actions on exit\" a list of actions carried out on exiting the state, then these are listed as well;\notherwise, this box is omitted from the state. At the bottom the status of PD is listed:\n “Power\" which indicates the present output power for a Source Port or input power for a Sink Port .\n “PD\" which indicates the present Attachment status either \" Attached \", \"Detached \", or \"unknown\".\nTransitions from one state to another are indicated by arrows with the conditions listed on the arrow. Where there\nare multiple conditions, these are connected using either a logical OR \"|\" or a logical AND \"&\".\nIn some cases, there are transitions which can occur from any state to a particular state. These are indicated by an\narrow which is unconnected to a state at one end, but with the other end (the point) connected to the final state.\nIn some state diagrams it is necessary to enter or exit from states in other diagrams (e.g., Source Port or Sink Port\nstate diagrams). Figure 8.128, \"References to states\" indicates how such references are made. The reference is\nindicated with a hatched box. The box contains the name of the state and whether the state is a DFP or UFP . It has\nalso been necessary to indicate conditional entry to either Source Port or Sink Port state diagrams. This is achieved\nby the use of a bulleted list indicating the preconditions (see example in Figure 8.129, \"Example of state reference\nwith conditions\" ). It is also possible that the entry and return states are the same. Figure 8.130, \"Example of state\nreference with the same entry and exit\" indicates a state reference where each referenced state corresponds to\neither the entry state or the exit state.<Name of State>\nActions on entry:\n“List of actions to carry out on entering the state”\nPower (VI) = “Present power level”\nPD = “attachment status”Actions on exit:“List of actions to carry out on exiting the state”\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 823Figure 8.128 References to states\nFigure 8.129 Example of state reference with conditions\nFigure 8.130 Example of state reference with the same entry and exit\nTimers are included in many of the states. Timers are initialized (set to their starting condition) and run (timer is\ncounting) in the particular state it is referenced. As soon as the state is exited then the timer is no longer active.\nWhere the timers continue to run outside of the state (such as the NoResponseTimer ), this is called out in the text.\nTimeouts of the timers are listed as conditions on state transitions.\nThe SenderResponseTimer is a special case, as it May be stopped and started from outside the states in which it\nis used. To allow this to be done without over-complicating the state diagrams, the SenderResponseTimer is\ndescribed with its own state diagram ( Figure 8.131, \"SenderResponseTimer Policy Engine State Diagram\" ). The\ncontrol of this Timer is shared between the Policy Engine and the Chunking Layer .\n<Name of reference state>\n(<DFP | UFP>)\nHard Reset:\n•Consumer or\nConsumer/Provider ->\nPE_SNK_....\n•Provider/Consumer in\nSource role -> PE_SRC_...\n<Name of reference state 1> or\n<Name of reference state 2>\n(<DFP | UFP>)\nPage 824 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Conditions listed on state transitions will come from one of three sources and, when there is a conflict, Should be\nserviced in the following order:\n1) Message and related indications passed up to the Policy Engine from the Protocol Layer (Message sent;\nMessage received etc.).\n2) Events triggered within the Policy Engine e.g., timer timeouts.\n3) Information and requests coming from the Device Policy Manager relating either to Local Policy , or to\nother modules which the Device Policy Manager controls such as power supply and USB-C® Port Control .\nNote: The following state diagrams are not intended to cover all possible corner cases that could be\nencountered. For example, where an outgoing Message is Discarded , due to an incoming Message by the\nProtocol Layer (see Section 6.12.2.3, \"Protocol Layer Message Reception\" ) it will be necessary for the\nhigher layers of the system to handle a retry of the AMS that was being initiated, after first handling the\nincoming Message .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8258.3.3.1.1 SenderResponseTimer State Diagram\nFigure 8.131, \"SenderResponseTimer Policy Engine State Diagram\" below shows the state diagram for the Policy\nEngine in a Source Port or a Sink Port . The following sections describe operation in each of the states.\nFigure 8.131 SenderResponseTimer Policy Engine State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.1.1.1",
    "title": "SRT_Stopped State",
    "full_path": "8.3.3.1.1.1 SRT_Stopped State",
    "page": 825,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The SRT_Stopped State Shall be the starting state for the SenderResponseTimer either on power up or after a\nHard Reset . On entry to this state the Policy Engine Shall stop incrementing the SR_Timer.\nThe Policy Engine Shall transition to the SRT_Running State:\n When the SenderResponseTimer is started from within a Policy Engine state, or\n When a Start_SRT is requested from the Chunking Layer ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.1.1.2",
    "title": "SRT_Running State",
    "full_path": "8.3.3.1.1.2 SRT_Running State",
    "page": 825,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the SRT_Running State the SenderResponseTimer state machine Shall :\n Set the SR_Timer to zero\n Start running SR_Timer.\nThe SenderResponseTimer state machine Shall transition to the SRT_Expired State:\n When the SR_Timer reaches its maximum count\nThe SenderResponseTimer state machine Shall transition to the SRT_Stopped State:\n When the SenderResponseTimer is stopped by exiting a Policy Engine state, or\n When a Stop_SRT is requested from the Chunking LayerSRT_Stopped\nActions on entry:\nStop Incrementing SR_Timer1Power-up |\nHard Reset |\nSenderResponseTimer stopped on exit from Policy Engine State |\nStop_SRT requested from Chunking Layer\nActions on entry:Zero SR_TimerStart Incrementing SR_Timer1SRT_RunningSenderResponseTimer started\nfrom within Policy Engine State |\nStart_SRT requested from Chunking Layer\nActions on entry:Inform Policy Engine of SenderResponseTimer timeoutSRT_ExpiredSR_Timer1 reached\nmaximum count\nPolicy Engine informed\n1)The SR_Timer is regarded as the mechanism within the SenderResponseTimer state diagram that implements the SenderResponseTimer.\nPage 826 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.1.1.3 SRT_Expired State\nOn entry to the SRT_Running State the SenderResponseTimer state machine Shall Inform Policy Engine of\nSenderResponseTimer timeout\nThe Policy Engine Shall then transition to the SRT_Stopped state:\n When the Policy Engine has been informed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8278.3.3.2 Policy Engine Source Port State Diagram\nFigure 8.132, \"Source Port State Diagram\" below shows the state diagram for the Policy Engine in a Source Port . The\nfollowing sections describe operation in each of the states.\nFigure 8.132 Source Port State Diagram\n1) Implementation of the CapsCounter is Optional . In the case where this is not implemented the Source Shall continue\nto send Source_Capabilities Message s each time the SourceCapabilityTimer times out.\n2) Since the Sink is required to make a Valid request from the offered capabilities the expected transition is via \"Request\ncan be met\" unless the Source Capabilities have changed since the last offer.\n3) “Contract Invalid\" means that the previously Negotiated voltage and Current values are no longer included in the\nSource 's new Capabilities. If the Sink fails to make a Valid Request in this case, then Power Delivery operation is no lon -\nger possible and Power Delivery mode is exited with a Hard Reset .Protocol LayerReset4|\nSwapSourceStartTimer timeout\nPE_SRC_Discovery\nActions on entry:\nInitialize and run SourceCapabilityTimer\nPower = Default (5V) or Implicit Contract\nPD = not Connected\nPE_SRC_Ready\nActions on entry:Notify Protocol Layer of end of AMS\n8\nInitialize and run DiscoverIdentityTimer7\nInitialize and run SourcePPSCommTimer10\nInitialize and run SourceEPRKeepAliveTimer11\nPower = Explicit Contract\nPD = ConnectedPE_SRC_Transition_Supply\nActions on entry:Send Accept message (within tReceiverResponse)Request Device Policy Manager to transition Power Supply\nPower = transition\nPD = ConnectedActions on exit:Send PS_RDY message(In SPR Mode & Request Message) |\n(In EPR Mode & EPR_Request Message)PE_SRC_Negotiate_Capability\nActions on entry:Get Device Policy Manager evaluation of sink request:\n•Can be met\n•Can’t be met\n•Could be met later from Power Reserve\nIf the sink request for Operating Current or Operating Power can be\nmet, but the sink still requires more power (“Capability Mismatch”) this information will be passed to Device Policy Manager\n4\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = ConnectedPE_SRC_Capability_Response\nActions on entry:Send Reject message if request can’t be metSend Wait message if request could be met later from the Power Reserve and present Contract is still valid\nPower = DefauIt (5V) or Implicit/\nExplicit Contract\nPD = ConnectedStart\nExplicit Contract\n(Reject message sent &\nContract still valid) |\nWait message sentPE_SRC_Send_Capabilities\nActions on entry:Request present source capabilities from Device Policy ManagerIn SPR Mode Send Source_Capabilities MessageIn EPR Mode Send EPR_Source_Capabilities MessageIncrement CapsCounter (optional)\n1\nIf GoodCRC received:\n•stop NoResponseTimer\n•reset HardResetCounter and CapsCounter\n•initialize and run SenderResponseTimer\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected/not ConnectedPE_SRC_Hard_Reset\nActions on entry:\nGenerate Hard Reset signallingInitialize and start NoResponseTimerStart PSHardResetTimerIncrement HardResetCounter\nPower = DefauIt (5V) or\nImplicit/Explicit Contract\nPD = Connected/not Connected\nRequest can’t be met |\nRequest met later\nfrom Power ReserveExplicit Contract &\nReject message sent &\nContract Invalid4PSHardResetTimer\ntimeout\nRequest can be met\nPower supply readyPower source at default\n(SourceCapabilityTimer timeout &\nCapsCounter nCapsCount1)Capabilities message sending failure\n(without GoodCRC) &not presently PD Connected6\nIn SPR Mode Request Message received |\nIn EPR Mode EPR_Request Message received\nPE_SRC_Get_Sink_Cap\nActions on entry:If SPR Mode capabilities requested send Get_Sink_Cap MessageIf EPR Mode capabilities requested send EPR_Get_Sink_Cap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connectedget sink capabilities request\nfrom Device Policy Manager12\n(SPR Sink Capabilities requested\n& Sink_Capabilities Message) |\n(EPR Sink Capabilities requested\n& EPR_Sink_Capabilities Message) |\nSenderResponseTimer timeoutActions on exit:Pass sink capabilities/outcome to Device Policy ManagerHard reset signalling received\nSenderResponseTimer timeoutnot previously PD Connected6&\nNoResponseTimer timeout &\nHardResetCounter > nHardResetCount1PSHardResetTimer\ntimeout\n(SourceCapabilityTimer timeout & CapsCounter > nCapsCount1) |\n(not previously PD Connected6 &\nNoResponseTimer timeout &\nHardResetCounter > nHardResetCount1)PE_SRC_Startup\nActions on entry:Reset CapsCounterReset Protocol LayerStart SwapSourceStartTimer (only after Swap)\nPower = DefauIt (0V or 5V) or Implicit Contract\nPD = Connected/not ConnectedPE_SRC_Transition_to_default\nActions on entry:Request Device Policy Manager to request power supply Hard Resets to vSafe5V via vSafe0VReset local HWRequest Device Policy Manager to set Port Data Role to DFP and turn off V\nCONN\nPower = rising/falling to default (5V)\nPD = not Connected\nPE_SRC_Disabled\nActions on entry:Disable Power Delivery\nPower = DefauIt (5V)\nPD =not ConnectedActions on exit:Request Device Policy Manager to turn on V\nCONN\nInform Protocol Layer Hard Reset complete\nErrorRecoverypreviously PD Connected6&\nNoResponseTimer timeout &\nHardResetCount\n> nHardResetCountPE_SRC_Wait_New_Capabilities\nActions on entry:\nWait for new Source Capabilities9\nPower = DefauIt (5V)\nPD =ConnectedPE_SRC_Hard_Reset_Received\nActions on entry:Start PSHardResetTimerInitialize and start NoResponseTimer\nPower = DefauIt (5V) or\nImplicit/Explicit Contract\nPD = Connected/not Connected\nSource capability\nchange\n(from Device\nPolicy Manager)\nno Explicit Contract &\n(Reject message sent |\nWait message sent)\nSource capability change\n(from Device Policy Manager) |\n(In SPR Mode & Get_Source_Cap Message) |\n(In EPR Mode & EPR_Get_Source_Cap Message)Protocol Error\nActions on exit:If the Source is initiating an AMS then notify the Protocol Layer than the first Message in an AMS will follow\n8SourcePPSCommTimer timeout |\nSourceEPRKeepAliveTimer timeoutPE_SRC_EPR_Keep_Alive\nActions on entry:Send EPR_Keep_Alive_Ack Message\nPower = Explicit Contract\nPD = ConnectedEPR_Keep_Alive Message\nEPR_Keep_Alive_Ack SentHard Reset request from\nDevice Policy Manager |\nEPR Mode & Request Message received |\nEPR Capable & SPR Mode & EPR_Request Message received\n(In EPR Mode & Get_Source_Cap Message) |\n(In SPR Mode & EPR_Get_Source_Cap Message) Source capabilities\nmessage sent\nPE_SRC_Give_Source_Cap\nActions on entry:Get present Source capabilities from Device Policy ManagerSend Capabilities message (based on Device Policy Manager response):\n•If Get_Source_Cap Message received send Source_Capabilities Message.\n•In EPR_Get_Source_Cap Message received send EPR_Source_Capabilities Message\nPower = Explicit Contract\nPD = Connected\nPage 828 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-104) After a Power Swap the New Source is required to wait an additional tSwapSourceStart before sending a\nSource_Capabilities Message . This delay is not required when first starting up a system.\n5) PD Connected is defined as a situation when the Port Partner s are actively communicating. The Port Partner s remain PD\nConnected after a Swap until there is a transition to Disabled or the connector is able to identify a Detach .\n6) Port Partner s are no longer PD Connected after a Hard Reset , but consideration needs to be given as to whether there has\nbeen a PD Connection while the Ports have been Attached to prevent unnecessary USB Type-C Error Recovery .\n7) The DiscoverIdentityTimer is run when this is a VCONN Source and a PD Connection with a Cable Plug needs to be es -\ntablished i.e. no GoodCRC Message has yet been received in response to a Discover Identity Command .\n8) See Section 5.7, \"Collision Avoidance\" , Section 6.6.16, \"Collision Avoidance Timers\" and Section 6.10, \"Collision Avoidance\" .\n9) In the PE_SRC_Wait_New_Capabilities State the Device Policy Manager Should either decide to send no further Source\nCapabilities or Should send a different set of Source Capabilities . Continuing to send the same set of Source Capabilities\ncould result in a live lock situation.\n10) The SourcePPSCommTimer is only initialized and run when the present Explicit Contract is for an SPR PPS APDO . Sourc -\nes that do not support SPR PPS do not need to implement the SourcePPSCommTimer .\n11) The SourceEPRKeepAliveTimer is only initialized and run when the Source is in EPR Mode ; Sources that do not support\nEPR Mode do not need to implement the SourceEPRKeepAliveTimer .\n12) Either SPR or EPR Sink Capabilities May be requested, regardless of whether or not the Source is currently operating in\nSPR or EPR Mode ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.1",
    "title": "PE_SRC_Startup State",
    "full_path": "8.3.3.2.1 PE_SRC_Startup State",
    "page": 828,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "PE_SRC_Startup Shall be the starting state for a Source Policy Engine either on power up or after a Hard Reset . On\nentry to this state the Policy Engine Shall reset the CapsCounter and reset the Protocol Layer .\nNote: Resetting the Protocol Layer will also reset the MessageIDCounter and stored MessageID (see Section\n6.12.2.3, \"Protocol Layer Message Reception\" ).\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state:\n When the Protocol Layer reset has completed if the PE_SRC_Startup state was entered due to the\nsystem first starting up.\n When the SwapSourceStartTimer times out if the PE_SRC_Startup state was entered as the result of a\nPower Role Swap .\nNote: Sources Shall remain in the PE_SRC_Startup state, without sending any Source_Capabilities Message s\nuntil a plug is Attached ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.2",
    "title": "PE_SRC_Discovery State",
    "full_path": "8.3.3.2.2 PE_SRC_Discovery State",
    "page": 828,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_Discovery state the Policy Engine Shall initialize and run the SourceCapabilityTimer in\norder to trigger sending a Source_Capabilities Message .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n The SourceCapabilityTimer times out and CapsCounter ≤ nCapsCount .\nThe Policy Engine May Optionally go to the PE_SRC_Disabled state when:\n The Port Partner s are not presently PD Connected\n And the SourceCapabilityTimer times out\n And CapsCounter > nCapsCount .\nThe Policy Engine Shall go to the PE_SRC_Disabled state when:\n The Port Partner s have not been PD Connected (the Source Port remains Attached to a Port it has not\nhad a PD Connection with during this Attachment )\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 829 And the NoResponseTimer times out\n And the HardResetCounter > nHardResetCount .\nNote: In the PE_SRC_Disabled state the Attached device is assumed to be unresponsive. The Policy Engine\noperates as if the device is Detached until such time as a Detach /Re-attach is detected."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.3",
    "title": "PE_SRC_Send_Capabilities State",
    "full_path": "8.3.3.2.3 PE_SRC_Send_Capabilities State",
    "page": 829,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Note: This state can be entered from the PE_SRC_Soft_Reset state.\nOn entry to the PE_SRC_Send_Capabilities state the Policy Engine Shall request the present Port capabilities from\nthe Device Policy Manager . The Policy Engine Shall then request the Protocol Layer to send a capabilities Message\ncontaining these capabilities. The Policy Engine Shall request:\n A Source_Capabilities Message if the Source is in SPR Mode or\n An EPR_Source_Capabilities Message if the Source is in EPR Mode .\nThe Policy Engine Shall then increment the CapsCounter (if implemented).\nIf a GoodCRC Message is received, then the Policy Engine Shall :\n Stop the NoResponseTimer .\n Reset the HardResetCounter and CapsCounter to zero.\nNote: The HardResetCounter Shall only be set to zero in this state and at power up; its value Shall be\nmaintained during a Hard Reset .\n Initialize and run the SenderResponseTimer .\nOnce a Source_Capabilities Message has been received and acknowledged by a GoodCRC Message , the Sink is\nrequired to then send a Request Message within tSenderResponse .\nThe Policy Engine Shall transition to the PE_SRC_Negotiate_Capability state when:\n A Request Message is received from the Sink and the Source is operating in SPR Mode or\n An EPR_Request Message is received from the Sink and the Source is operating in EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Discovery state when:\n The Protocol Layer indicates that the Message has not been sent and we are presently not Connected .\nThis is part of the Capabilities sending process whereby successful Message sending indicates\nconnection to a PD Sink Port .\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n The SenderResponseTimer times out. In this case a transition back to USB Default Operation is\nrequired.\nWhen:\n The Port Partner s have not been PD Connected (the Source Port remains Attached to a Port it has not\nhad a PD Connection with during this Attachment )\n And the NoResponseTimer times out\n And the HardResetCounter > nHardResetCount .\nThe Policy Engine Shall do one of the following:\n Transition to the PE_SRC_Discovery state.\n Transition to the PE_SRC_Disabled state.\nPage 830 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Note: That in either case the Attached device is assumed to be unresponsive. The Policy Engine Should operate\nas if the device is Detached until such time as a Detach /Re-attach is detected.\nThe Policy Engine Shall go to the ErrorRecovery state when:\n The Port Partner s have previously been PD Connected (the Source Port remains Attached to a Port it has\nhad a PD Connection with during this Attachment )\n And the NoResponseTimer times out.\n And the HardResetCounter > nHardResetCount ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.4",
    "title": "PE_SRC_Negotiate_Capability State",
    "full_path": "8.3.3.2.4 PE_SRC_Negotiate_Capability State",
    "page": 830,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_Negotiate_Capability state the Policy Engine Shall ask the Device Policy Manager to\nevaluate the Request from the Attached Sink . The response from the Device Policy Manager Shall be one of the\nfollowing:\n The Request can be met.\n The Request cannot be met\n The Request could be met later from the Power Reserve.\nThe Policy Engine Shall transition to the PE_SRC_Transition_Supply state when:\n The Request can be met.\nThe Policy Engine Shall transition to the PE_SRC_Capability_Response state when:\n The Request cannot be met.\n Or the Request can be met later from the Power Reserve."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.5",
    "title": "PE_SRC_Transition_Supply State",
    "full_path": "8.3.3.2.5 PE_SRC_Transition_Supply State",
    "page": 830,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall be in the PE_SRC_Transition_Supply state while the power supply is transitioning from one\npower to another.\nOn entry to the PE_SRC_Transition_Supply state, the Policy Engine Shall request the Protocol Layer to send an\nAccept Message and inform the Device Policy Manager that it Shall transition the power supply to the Requested\npower level.\nNote: If the power supply is currently operating at the requested power no change will be necessary.\nOn exit from the PE_SRC_Transition_Supply state the Policy Engine Shall request the Protocol Layer to send a\nPS_RDY Message .\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n The Device Policy Manager informs the Policy Engine that the power supply is ready.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.6",
    "title": "PE_SRC_Ready State",
    "full_path": "8.3.3.2.6 PE_SRC_Ready State",
    "page": 830,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In the PE_SRC_Ready state the PD Source Shall be operating at a stable power with no ongoing Negotiation . It Shall\nrespond to requests from the Sink , events from the Device Policy Manager .\nOn entry to the PE_SRC_Ready state the Source Shall notify the Protocol Layer of the end of the Atomic Message\nSequence (AMS ). If the transition into PE_SRC_Ready is the result of Protocol Error that has not caused a Soft Reset\n(see Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\" ) then the notification to the\nProtocol Layer of the end of the AMS Shall Not be sent since there is a Message to be processed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 831On entry to the PE_SRC_Ready state if this is a V CONN Source which needs to establish communication with a Cable\nPlug , the Policy Engine Shall :\n Initialize and run the DiscoverIdentityTimer (no GoodCRC Message response yet received to Discover\nIdentity Message ).\nOn entry to the PE_SRC_Ready state if the current Explicit Contract is for an SPR PPS APDO , then the Policy Engine\nShall do the following:\n Initialize and run the SourcePPSCommTimer .\nOn entry to the PE_SRC_Ready state if the current Explicit Contract is for EPR Mode , then the Policy Engine Shall do\nthe following:\n Initialize and run the SourceEPRKeepAliveTimer .\nOn exit from the PE_SRC_Ready , if the Source is initiating an AMS , then the Policy Engine Shall notify the Protocol\nLayer that the first Message in an AMS will follow.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n The Device Policy Manager indicates that Source Capabilities have changed or\n A Get_Source_Cap Message is received, and the Source is in SPR Mode or\n An EPR_Get_Source_Cap Message is received, and the Source is in EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Negotiate_Capability state when:\n A Request Message is received, and the Source is in SPR Mode or\n An EPR_Request Message is received, and the Source is in EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Get_Sink_Cap state when:\n The Device Policy Manager asks for the Sink Capabilities .\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n The Source is operating as an SPR PPS and the SourcePPSCommTimer Timer times-out or\n The Source is in EPR Mode and the SourceEPRKeepAliveTimer Timer times-out.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Keep_Alive state when:\n An EPR_KeepAlive Message is received.\nThe Policy Engine Shall transition to the PE_SRC_Give_Source_Cap State when:\n In EPR Mode and a Get_Source_Cap Message is received or\n In SPR Mode and an EPR_Get_Source_Cap Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.7",
    "title": "PE_SRC_Disabled State",
    "full_path": "8.3.3.2.7 PE_SRC_Disabled State",
    "page": 831,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In the PE_SRC_Disabled state the PD Source supplies default power and is unresponsive to USB Power Delivery\nmessaging, but not to Hard Reset Signaling ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.8",
    "title": "PE_SRC_Capability_Response State",
    "full_path": "8.3.3.2.8 PE_SRC_Capability_Response State",
    "page": 831,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall enter the PE_SRC_Capability_Response state if there is a Request received from the Sink\nthat cannot be met based on the present capabilities. When the present Explicit Contract is not within the present\ncapabilities it is regarded as Invalid and a Hard Reset will be triggered.\nOn entry to the PE_SRC_Hard_Reset state the Policy Engine Shall request the Protocol Layer to send one of the\nfollowing:\nPage 832 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Reject Message - if the request cannot be met or the present Explicit Contract is Invalid .\n Wait Message - if the request could be met later from the Power Reserve. A Wait Message Shall Not be\nsent if the present Explicit Contract is Invalid .\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n There is an Explicit Contract and\n A Reject Message has been sent and the present Explicit Contract is still Valid or\n A Wait Message has been sent.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n There is an Explicit Contract and\n The Reject Message has been sent and the present Explicit Contract is Invalid (i.e., the Sink had to\nrequest a new value so instead we will return to USB Default Operation ).\nThe Policy Engine Shall transition to the PE_SRC_Wait_New_Capabilities state when:\n There is no Explicit Contract and\n A Reject Message has been sent or\n A Wait Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.9",
    "title": "PE_SRC_Hard_Reset State",
    "full_path": "8.3.3.2.9 PE_SRC_Hard_Reset State",
    "page": 832,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_Hard_Reset state from any state when:\n Hard Reset request from Device Policy Manager or\n In EPR Mode and a Request Message is received or\n EPR Capable and in SPR Mode and an EPR_Request Message is received.\nOn entry to the PE_SRC_Hard_Reset state the Policy Engine Shall :\n request the generation of Hard Reset Signaling by the PHY Layer\n initialize and run the NoResponseTimer .\nNote: The NoResponseTimer Shall continue to run in every state until it is stopped or times out.\n initialize and run the PSHardResetTimer and increment the HardResetCounter .\nThe Policy Engine Shall transition to the PE_SRC_Transition_to_default state when:\n The PSHardResetTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.10",
    "title": "PE_SRC_Hard_Reset_Received State",
    "full_path": "8.3.3.2.10 PE_SRC_Hard_Reset_Received State",
    "page": 832,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition from any state to the PE_SRC_Hard_Reset_Received state when:\n Hard Reset Signaling is detected.\nOn entry to the PE_SRC_Hard_Reset_Received state the Policy Engine Shall :\n initialize and run the PSHardResetTimer\n initialize and run the NoResponseTimer .\nNote: The NoResponseTimer Shall continue to run in every state until it is stopped or times out.\nThe Policy Engine Shall transition to the PE_SRC_Transition_to_default state when:\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 833 The PSHardResetTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.11",
    "title": "PE_SRC_Transition_to_default State",
    "full_path": "8.3.3.2.11 PE_SRC_Transition_to_default State",
    "page": 833,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_Transition_to_default state the Policy Engine Shall :\n indicate to the Device Policy Manager that the power supply Shall Hard Reset (see Section 7.1.5,\n\"Response to Hard Resets\" ).\n request a reset of the local hardware\n request the Device Policy Manager to set the Port Data Role to DFP and turn off VCONN .\nOn exit from the PE_SRC_Transition_to_default state the Policy Engine Shall :\n request the Device Policy Manager to turn on VCONN\n inform the Protocol Layer that the Hard Reset is complete.\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n The Device Policy Manager indicates that the power supply has reached the default level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.12",
    "title": "PE_SRC_Get_Sink_Cap State",
    "full_path": "8.3.3.2.12 PE_SRC_Get_Sink_Cap State",
    "page": 833,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In this state the Policy Engine , due to a request from the Device Policy Manager , Shall request the capabilities from\nthe Attached Sink .\nOn entry to the PE_SRC_Get_Sink_Cap state the Policy Engine Shall request the Protocol Layer to send a\nGet_Sink_Cap Message in order to retrieve the Sink Capabilities . The Policy Engine Shall send:\n A Get_Sink_Cap Message when the Device Policy Manager requests SPR capabilities or\n An EPR_Get_Sink_Cap Message when the Device Policy Manager requests EPR Capabilities .\nThe Policy Engine Shall then start the SenderResponseTimer .\nOn exit from the PE_SRC_Get_Sink_Cap state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n SPR Sink Capabilities were requested and a Sink_Capabilities Message is received or\n EPR Sink Capabilities were requested and an EPR_Sink_Capabilities Message is received or\n The SenderResponseTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.13",
    "title": "PE_SRC_Wait_New_Capabilities State",
    "full_path": "8.3.3.2.13 PE_SRC_Wait_New_Capabilities State",
    "page": 833,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In this state the Policy Engine has been unable to Negotiate an Explicit Contract and is waiting for new Capabilities\nfrom the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n The Device Policy Manager indicates that Source Capabilities have changed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.2.14",
    "title": "PE_SRC_EPR_Keep_Alive State",
    "full_path": "8.3.3.2.14 PE_SRC_EPR_Keep_Alive State",
    "page": 833,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_EPR_Keep_Alive State the Policy Engine Shall send a EPR_KeepAlive_Ack Message .\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n The EPR_KeepAlive_Ack Message has been sent.\nPage 834 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.2.15 8.3.3.2.15PE_SRC_Give_Source_Cap State\n On entry to the PE_SRC_Give_Source_Cap State the Policy Engine Shall request the Device Policy\nManager for the current system capabilities.\nThe Policy Engine Shall then request the Protocol Layer to send a Source Capabilities Message containing these\ncapabilities.\nThe Policy Engine Shall send:\n A Source_Capabilities Message when a Get_Source_Cap Message is received or\n An EPR_Source_Capabilities Message when a EPR_Get_Source_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n The Source Capabilities Message has been successfully sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8358.3.3.3 Policy Engine Sink Port State Diagram\nFigure 8.133, \"Sink Port State Diagram\" below shows the state diagram for the Policy Engine in a Sink Port . The\nfollowing sections describe operation in each of the states.\nFigure 8.133 Sink Port State Diagram\n1) Source Capabilities Message s received in States other than PE_SNK_Wait_for_Capabilities , PE_SNK_Ready or\nPE_SNK_Get_Source_Cap constitute a Protocol Error .\n2) The SinkRequestTimer Should Not be stopped if a Ping ( Deprecated ) Message is received in the PE_SNK_Ready state\nsince it represents the maximum time between requests after a Wait Message which is not reset by a Ping ( Deprecat -\ned) Message .\n3) During a Hard Reset the Source voltage will transition to vSafe0V and then transition to vSafe5V . Sink s need to ensure\nthat VBUS present is not indicated until after the Source has completed the Hard Reset process by detecting both of these\ntransitions.New power required |\nSinkRequestTimer\nTimeout |\nSinkPPSPeriodicTimer\nTimeoutStart\nExplicit Contract &\n(Reject message received |\nWait message received)Hard reset signalling received\nPower Sink\nat default\nProtocol Layer Reset\nHard Reset complete\nVBUS6 present3\n((SPR Mode & Source_Capabilities Message) |\n(EPR Mode & EPR_Source_Capabilities Message received))1\nDevice Policy Manager Response received\nAccept message received\nPS_RDY message\nreceived\nGet_Sink_Cap Message |\nEPR_Get_Sink_Cap MessageSink capabilities\nmessage sent((SinkWaitCapTimer timeout |\nPSTransitionTimer timeout) &\n(HardResetCounter  nHardResetCount)) |\nHard Reset request from\nDevice Policy Manager |\nEPR Mode & (EPR_Source _Capabilites message\nwith An EPR PDO in positions 1..7 |\nSource_Capabilities Message not\nrequested by Get_Source_caps)PE_SNK_Startup\nActions on entry:\nReset Protocol Layer\nPower = DefauIt (0V or 5V) or Implicit Contract\nPD = Connected/not Connected\nSenderResponseTimer\nTimeoutPE_SNK_Discovery\nActions on entry:Wait for V\nBUS6\nPower = Default (0V or 5V) or Implicit Contract\nPD = Connected/not Connected\nPE_SNK_Wait_for_Capabilities\nActions on entry:Initialize and run SinkWaitCapTimer\nPower = Default (5V) or Implicit Contract\nPD = Connected/not Connected\nPE_SNK_Evaluate_Capability\nActions on entry:Reset HardResetCounter to zero.Ask Device Policy Manager to evaluate the options based on supplied capabilities, any Power Reserve that it needs, and respond indicating the selected capability and, Optionally, a “Capability Mismatch”.\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected\nPE_SNK_Select_Capability\nActions on entry:Send Request based on Device Policy Manager response:\n• Request from present capabilities\n• Optionally Indicate that other capabilities would be preferred\n(“Capability Mismatch”)\nInitialize and run SenderResponseTimer\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected\nPE_SNK_Transition_Sink\nActions on entry:\nInitialize and run PSTransitionTimer\nPower = transition\nPD = ConnectedActions on exit:Request Device Policy Manager transitions sink power supply to new power (if required)\nPE_SNK_Ready\nActions on entry:Initialize and run SinkRequestTimer2 (on receiving Wait)\nInitialize and run DiscoverIdentityTimer4\nInitialize and run the SinkPPSPeriodicTimer5\nIn EPR Mode Initialize and run the SinkEPRKeepAliveTimer8\nIf Sink supports Fast Role Swap send Get_Sink_Cap Message7\nPower = Explicit Contract\nPD = Connected\nPE_SNK_Give_Sink_Cap\nActions on entry:Get present sink capabilities from Device Policy ManagerSend Capabilities message (based on Device Policy Manager response):\n• If Get_Sink_Cap Message received send Sink_Capabilities Message.\n• In EPR_Get_Sink Cap Message received send EPR_Sink_Capabilities Message\nPower = Explicit Contract\nPD = ConnectedPE_SNK_Hard_Reset\nActions on entry:\nGenerate Hard Reset signalling.Increment HardResetCounter.\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected/not ConnectedPE_SNK_Transition_to_default\nActions on entry:\nRequest Device Policy Manager to request power sink transition to defaultReset local HWSet Port Data Role to UFP and turn off V\nCONN\nPower = rising/falling to default (5V)\nPD = not ConnectedActions on exit:\nInform Protocol Layer Hard Reset complete\nno Explicit Contract &\n(Reject message received |\nWait message received)\n((SPR Mode & Source_Capabilities Message) |\n(EPR Mode & EPR_Source Capabilities Message))1\nActions on exit:If the Sink is initiating an AMS then notify the Protocol Layer that the first Message in the AMS will follow.Protocol Error\nPE_SNK_EPR_Keep_Alive\nActions on entry:Send EPR_KeepAlive MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedSinkEPRKeepAliveTimer Timeout\nEPR_KeepAlive_Ack MessageSenderResponseTimer Timeout\nPE_SNK_Get_Source_Cap\nActions on entry:If SPR Mode capabilities requested send Get_Source_Cap MessageIf EPR Mode capabilities requested send EPR_Get_Source_Cap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connectedget source capabilities request\nfrom Device Policy Manager\n(EPR Mode &\nSPR Source Capabilities requested &\nSource_Capabilities Message\nreceived) |\n(SPR MODE &\nEPR Source Capabilities requested &\nEPR_Source_Capabilities Message\nreceived) |\nSenderResponseTimer timeoutActions on exit:Pass Source capabilities/outcome to Device Policy Manager(SPR Mode &\nSPR Source Capabilities requested &\nSource_Capabilities Message) |\n(EPR MODE &\nEPR Source Capabilities requested &\nEPR_Source_Capabilities Message)\nPage 836 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-104) The DiscoverIdentityTimer is run when this is a VCONN Source and a PD Connection with a Cable Plug needs to be es -\ntablished i.e. no GoodCRC Message has yet been received in response to a Discover Identity Command .\n5) The SinkPPSPeriodicTimer is only initialized and run when the present Explicit Contract is for an SPR PPS APDO .\nSink s that do not support PPS do not need to implement the SinkPPSPeriodicTimer .\n6) A Sink that is a VPD May use VCONN as a proxy for VBUS.\n7) To be sent once, and only required if Fast Role Swap is supported by the Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.1",
    "title": "PE_SNK_Startup State",
    "full_path": "8.3.3.3.1 PE_SNK_Startup State",
    "page": 836,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "PE_SNK_Startup Shall be the starting state for a Sink Policy Engine either on power up or after a Hard Reset . On\nentry to this state the Policy Engine Shall reset the Protocol Layer .\nNote: Resetting the Protocol Layer will also reset the MessageIDCounter and stored MessageID (see Section\n6.12.2.3, \"Protocol Layer Message Reception\" ).\nOnce the reset process completes, the Policy Engine Shall transition to the PE_SNK_Discovery state."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.2",
    "title": "PE_SNK_Discovery State",
    "full_path": "8.3.3.3.2 PE_SNK_Discovery State",
    "page": 836,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In the PE_SNK_Discovery state the Sink Policy Engine waits for VBUS to be present.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n The Device Policy Manager indicates that VBUS has been detected."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.3",
    "title": "PE_SNK_Wait_for_Capabilities State",
    "full_path": "8.3.3.3.3 PE_SNK_Wait_for_Capabilities State",
    "page": 836,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SNK_Wait_for_Capabilities state the Policy Engine Shall initialize and start the\nSinkWaitCapTimer .\nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability state when:\n The Sink is in SPR Mode and a Source_Capabilities Message is received or\n The Sink is in EPR Mode and an EPR_Source_Capabilities Message is received.\nWhen the SinkWaitCapTimer times out, the Policy Engine will perform a Hard Reset ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.4",
    "title": "PE_SNK_Evaluate_Capability State",
    "full_path": "8.3.3.3.4 PE_SNK_Evaluate_Capability State",
    "page": 836,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Evaluate_Capability state is first entered when the Sink receives its first Source_Capabilities\nMessage from the Source . At this point the Sink knows that it is Attached to and communicating with a PD capable\nSource .\nOn entry to the PE_SNK_Evaluate_Capability state the Policy Engine Shall request the Device Policy Manager to\nevaluate the supplied Source Capabilities based on Local Policy . The Device Policy Manager Shall indicate to the\nPolicy Engine the new power level required, selected from the present offered capabilities. The Device Policy\nManager Shall also indicate to the Policy Engine a Capabilities Mismatch if the offered power does not meet the\ndevice's requirements.\nThe Policy Engine Shall transition to the PE_SNK_Select_Capability state when:\n A response is received from the Device Policy Manager ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.5",
    "title": "PE_SNK_Select_Capability State",
    "full_path": "8.3.3.3.5 PE_SNK_Select_Capability State",
    "page": 836,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SNK_Select_Capability state the Policy Engine Shall request the Protocol Layer to send a\nresponse Message , based on the evaluation from the Device Policy Manager . The Message Shall be one of the\nfollowing:\n A Request from the offered Source Capabilities .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 837 A Request from the offered Source Capabilities with an indication that another power level would be\npreferred ( Capability Mismatch bit set).\nWhen in SPR Mode a Request Message Shall be sent.\nWhen in EPR Mode an EPR_Request Message Shall be sent.\nThe Policy Engine Shall initialize and run the SenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SNK_Transition_Sink state when:\n An Accept Message is received from the Source .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n There is no Explicit Contract in place and\n A Reject Message is received from the Source or\n A Wait Message is received from the Source .\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n There is an Explicit Contract in place and\n A Reject Message is received from the Source or\n A Wait Message is received from the Source .\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n A SenderResponseTimer timeout occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.6",
    "title": "PE_SNK_Transition_Sink State",
    "full_path": "8.3.3.3.6 PE_SNK_Transition_Sink State",
    "page": 837,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SNK_Transition_Sink state the Policy Engine Shall initialize and run the PSTransitionTimer\n(timeout will lead to a Hard Reset see Section 8.3.3.3.8, \"PE_SNK_Hard_Reset State\" and Shall then request the Device\nPolicy Manager to transition the Sink 's power supply to the new power level.\nNote: If there is no power level change the Device Policy Manager Should Not affect any change to the power\nsupply.\nOn exit from the PE_SNK_Transition_Sink state the Policy Engine Shall request the Device Policy Manager to\ntransition the Sink 's power supply to the new power level.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n A PS_RDY Message is received from the Source .\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.7",
    "title": "PE_SNK_Ready State",
    "full_path": "8.3.3.3.7 PE_SNK_Ready State",
    "page": 837,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "In the PE_SNK_Ready state the PD Sink Shall be operating at a stable power level with no ongoing Negotiation . It\nShall respond to requests from the Source , events from the Device Policy Manager .\nOn entry to the PE_SNK_Ready state as the result of a wait the Policy Engine Should do the following:\n Initialize and run the SinkRequestTimer.\nOn entry to the PE_SNK_Ready state if this is a VCONN Source which needs to establish communication with a Cable\nPlug , then the Policy Engine Shall do the following:\n Initialize and run the DiscoverIdentityTimer (no GoodCRC Message response yet received to Discover\nIdentity Message ).\nPage 838 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10On entry to the PE_SNK_Ready state if the current Explicit Contract is for an SPR PPS APDO , then the Policy Engine\nShall do the following:\n Initialize and run the SinkPPSPeriodicTimer.\nOn entry to the PE_SNK_Ready state if the Sink supports Fast Role Swap , then the Policy Engine Shall do the\nfollowing:\n Send a Get_Sink_Cap Message .\nOn exit from the PE_SNK_Ready state, if the transition is as a result of a DPM request to start a new Atomic Message\nSequence (AMS ) then the Policy Engine Shall notify the Protocol Layer that the first Message in an AMS will follow.\nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability state when:\n In SPR Mode and a Source_Capabilities Message is received or\n In EPR Mode and an EPR_Source_Capabilities Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Select_Capability state when:\n A new power level is requested by the Device Policy Manager or\n A SinkRequestTimer timeout occurs or\n A SinkPPSPeriodicTimer timeout occurs.\nThe Policy Engine Shall transition to the PE_SNK_Give_Sink_Cap state when:\n Get_Sink_Cap Message is received or\n EPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Get_Source_Cap state when:\n The Device Policy Manager requests an update of the remote Source Capabilities .\nThe Policy Engine Shall transition to the PE_SNK_EPR_Keep_Alive state when:\n The SinkEPRKeepAliveTimer timeouts out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.8",
    "title": "PE_SNK_Hard_Reset State",
    "full_path": "8.3.3.3.8 PE_SNK_Hard_Reset State",
    "page": 838,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SNK_Hard_Reset state from any state when:\n (PSTransitionTimer times out) and\n (HardResetCounter ≤ nHardResetCount )) |\n Hard Reset request from Device Policy Manager or\n In EPR Mode and\n An EPR_Source_Capabilities Message is received with an EPR (A)PDO in object positions 1…7 or\n A Source_Capabilities Message is received that has not been requested using a Get_Source_Cap\nMessage .\nThe Policy Engine May transition to the PE_SNK_Hard_Reset state from any state when:\n SinkWaitCapTimer times out\nNote: If the SinkWaitCapTimer times out and the HardResetCounter is greater than nHardResetCount the\nSink Shall assume that the Source is non-responsive.\nNote: The HardResetCounter is reset on a power cycle or Detach .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 839On entry to the PE_SNK_Hard_Reset state the Policy Engine Shall request the generation of Hard Reset Signaling\nby the PHY Layer and increment the HardResetCounter .\nThe Policy Engine Shall transition to the PE_SNK_Transition_to_default state when:\n The Hard Reset is complete."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.9",
    "title": "PE_SNK_Transition_to_default State",
    "full_path": "8.3.3.3.9 PE_SNK_Transition_to_default State",
    "page": 839,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition from any state to PE_SNK_Transition_to_default state when:\n Hard Reset Signaling is detected.\nWhen Hard Reset Signaling is received or transmitted then the Policy Engine Shall transition from any state to\nPE_SNK_Transition_to_default . This state can also be entered from the PE_SNK_Hard_Reset state.\nOn entry to the PE_SNK_Transition_to_default state the Policy Engine Shall :\n indicate to the Device Policy Manager that the Sink Shall transition to default\n request a reset of the local hardware\n request the Device Policy Manager that the Port Data Role is set to UFP .\nThe Policy Engine Shall transition to the PE_SNK_Startup state when:\n The Device Policy Manager indicates that the Sink has reached the default level."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.10",
    "title": "PE_SNK_Give_Sink_Cap State",
    "full_path": "8.3.3.3.10 PE_SNK_Give_Sink_Cap State",
    "page": 839,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": " On entry to the PE_SNK_Give_Sink_Cap state the Policy Engine Shall request the Device Policy Manager\nfor the current system capabilities. The Policy Engine Shall then request the Protocol Layer to send a\nSink_Capabilities Message containing these capabilities. The Policy Engine Shall send:\n A Sink_Capabilities Message when a Get_Sink_Cap Message is received or\n An EPR_Sink_Capabilities Message when a EPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n The Sink_Capabilities Message has been successfully sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.11",
    "title": "PE_SNK_EPR_Keep_Alive",
    "full_path": "8.3.3.3.11 PE_SNK_EPR_Keep_Alive",
    "page": 839,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SNK_EPR_Keep_Alive State the Policy Engine Shall send an EPR_KeepAlive Message and\ninitialize and run the SenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n A EPR_KeepAlive_Ack Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n The SenderResponseTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.3.12",
    "title": "PE_SNK_Get_Source_Cap State",
    "full_path": "8.3.3.3.12 PE_SNK_Get_Source_Cap State",
    "page": 839,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": " On entry to the PE_SNK_Get_Source_Cap state the Policy Engine Shall request the Protocol Layer to send\na get Source Capabilities Message in order to retrieve the Source Capabilities . The Policy Engine Shall\nsend:\n A Get_Source_Cap Message when the Device Policy Manager requests SPR capabilities or\n An EPR_Get_Source_Cap Message when the Device Policy Manager requests EPR Capabilities .\nThe Policy Engine Shall then start the SenderResponseTimer .\nPage 840 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10On exit from the PE_SNK_Get_Source_Cap State the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n In EPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received\nor\n In SPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is\nreceived or\n The SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability State when:\n In SPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received\nor\n In EPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is\nreceived.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8418.3.3.4 SOP Soft Reset and Protocol Error State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.1",
    "title": "SOP Source Port Soft Reset and Protocol Error State Diagram",
    "full_path": "8.3.3.4.1 SOP Source Port Soft Reset and Protocol Error State Diagram",
    "page": 841,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.134, \"SOP Source Port Soft Reset and Protocol Error State Diagram\" below shows the state diagram for the\nPolicy Engine in a Source Port when performing a Soft Reset of its Port Partner i.e., using SOP . The following sections\ndescribe operation in each of the states.\nFigure 8.134 SOP Source Port Soft Reset and Protocol Error State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.1.1",
    "title": "PE_SRC_Send_Soft_Reset State",
    "full_path": "8.3.3.4.1.1 PE_SRC_Send_Soft_Reset State",
    "page": 841,
    "level": 6,
    "parent_id": "8.3.3.4.1",
    "tags": [],
    "content": "The PE_SRC_Send_Soft_Reset state Shall be entered from any state when:\n A Protocol Error on SOP is detected by the Protocol Layer during a Non-interruptible AMS (see Section\n6.8.1, \"Soft Reset and Protocol Error\" ) or\n A Message has not been sent after retries to the Sink or\n When not in an Explicit Contract and Protocol Error s occurred on SOP during any AMS where the first\nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected\nGoodCRC Message response or\n When in SPR Mode and the EPR Mode entry process fails.\nThe main exceptions to this rule are when:\n The Source is in the PE_SRC_Send_Capabilities state, there is a Source_Capabilities Message sending\nfailure on SOP (without a GoodCRC Message ) and the Source is not presently Attached (as indicated in\nFigure 8.132, \"Source Port State Diagram\" ). In this case, the PE_SRC_Discovery state is entered (see\nSection 8.3.3.2.2, \"PE_SRC_Discovery State\" ).\n When the voltage is in transition due to a new Explicit Contract being Negotiated (see Section 8.3.3.2,\n\"Policy Engine Source Port State Diagram\" ). In this case Hard Reset Signaling will be generated.\n During a Power Role Swap when the power supply is in transition (see Section 8.3.3.19.3, \"Policy Engine\nin Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to Source\nPower Role Swap State Diagram\" ). In this case USB Type-C Error Recovery will be triggered directly.\n During a Data Role Swap when there is a mismatch in the Port Data Role field (see Section 6.2.1.1.6,\n\"Port Data Role\" ). In this case USB Type-C Error Recovery will be triggered directly.PE_SRC_Send_Soft_Reset\nActions on entry:\nReset Protocol LayerSend Soft Reset message to SOPInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP (no GoodCRC received)1 |\nProtocol Error2on SOP during AMS |\n(Not in Explicit Contract &\nProtocol Error2on SOP before first Message\nin AMS sent (no GoodCRC received) |\n(SPR Mode & EPR Mode Entry process fails)3SenderResponseTimer\nTimeout |\nTransmission\nError indication\nfrom Protocol LayerAccept message\nReceived from SOP\nAccept message\nSent to SOP\nSoft Reset message\nReceived on SOPPE_SRC_Soft_Reset\nActions on entry:Reset Protocol LayerSend Accept message to SOP\nPower = DefauIt/Implicit or\nExplicit Contract\nPD = Connected\nPE_SRC_Send_Capabilities\nTransmission\nError indication\nfrom Protocol Layer\nPE_SRC_Ready\nIn Explicit Contract &\nProtocol Error2before first Message\nin AMS sent (no GoodCRC received)\nPE_SRC_Hard_Reset\n1)Excludes the Soft_Reset Message itself.\n2)An Unrecognized or Unsupported Message received on SOP will result in a Not_Supported Message response being generated on SOP (see Section 6.3.16 “Not_Supported Message” ).\n3)See Section 6.4.10.1 “Process to enter EPR Mode” for the conditions when a Soft_Reset Message Shall be sent by the Source during the EPR Mode entry process.\nPage 842 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Protocol Error s occurring in the following situations Shall Not lead to a Soft Reset , but Shall result in a transition\nto the PE_SRC_Ready state where the Message received will be handled as if it had been received in the\nPE_SRC_Ready state:\n When in an Explicit Contract and Protocol Error s occurred on SOP during any AMS where the first\nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected\nGoodCRC Message response.\nOn entry to the PE_SRC_Send_Soft_Reset state the Policy Engine Shall request the SOP Protocol Layer to perform a\nSoft Reset , then Shall send a Soft_Reset Message to the Sink on SOP , and initialize and run the\nSenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n An Accept Message has been received on SOP .\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n A SenderResponseTimer timeout occurs.\n Or the Protocol Layer indicates that a transmission error has occurred."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.1.2",
    "title": "PE_SRC_Soft_Reset State",
    "full_path": "8.3.3.4.1.2 PE_SRC_Soft_Reset State",
    "page": 842,
    "level": 6,
    "parent_id": "8.3.3.4.1",
    "tags": [],
    "content": "The PE_SRC_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received on SOP from\nthe Protocol Layer .\nOn entry to the PE_SRC_Soft_Reset state the Policy Engine Shall reset the SOP Protocol Layer and Shall then request\nthe Protocol Layer to send an Accept Message on SOP .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state (see Section 8.3.3.2.3,\n\"PE_SRC_Send_Capabilities State\" ) when:\n The Accept Message has been sent on SOP .\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n The Protocol Layer indicates that a transmission error has occurred.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8438.3.3.4.2 SOP Sink Port Soft Reset and Protocol Error State Diagram\nFigure 8.135, \"Sink Port Soft Reset and Protocol Error Diagram\" below shows the state diagram for the Policy Engine\nin a Sink Port when performing a Soft Reset of its Port Partner i.e., using SOP . The following sections describe\noperation in each of the states.\nFigure 8.135 Sink Port Soft Reset and Protocol Error Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.2.1",
    "title": "PE_SNK_Send_Soft_Reset State",
    "full_path": "8.3.3.4.2.1 PE_SNK_Send_Soft_Reset State",
    "page": 843,
    "level": 6,
    "parent_id": "8.3.3.4.2",
    "tags": [],
    "content": "The PE_SNK_Send_Soft_Reset state Shall be entered from any state when:\n A Protocol Error on SOP is detected by the Protocol Layer during an AMS (see Section 6.8.1, \"Soft Reset\nand Protocol Error\" ) or\n A Message has not been sent after retries to the Sink or\n When not in an Explicit Contract and Protocol Error s occurred on SOP during any AMS where the first\nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected\nGoodCRC Message response.\n When in SPR Mode and the EPR Mode entry process fails.\nThe main exceptions to this rule are when:\n When the voltage is in transition due to a new Explicit Contract being Negotiated (see Section 8.3.3.3,\n\"Policy Engine Sink Port State Diagram\" ). In this case a Hard Reset will be generated.\n During a Power Role Swap when the power supply is in transition (see Section 8.3.3.19.3, \"Policy Engine\nin Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to Source\nPower Role Swap State Diagram\" ). In this case a Hard Reset will be triggered directly.\n During a Data Role Swap when the DFP /UFP Data Role s are changing. In this case USB Type-C Error\nRecovery will be triggered directly.\nNote: Protocol Error s occurring in the following situations Shall Not lead to a Soft Reset , but Shall result in a\ntransition to the PE_SNK_Ready state where the Message received will be handled as if it had been\nreceived in the PE_SNK_Ready state:\n When in an Explicit Contract and Protocol Error s occurred on SOP during any AMS where the first\nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected\nGoodCRC Message response.PE_SNK_Send_Soft_Reset\nActions on entry:\nReset SOP Protocol LayerSend Soft Reset Message to SOPInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP (no GoodCRC received)1 |\nProtocol Error2on SOP during AMS |\n(Not in Explicit Contract &\nProtocol Error on SOP before first Message\nin AMS sent (no GoodCRC received) |\n(SPR Mode & EPR Mode Entry process fails)3SenderResponseTimer\nTimeout |\nTransmission\nError indication\nfrom Protocol LayerAccept Message\nReceived on SOP\nAccept Message\nSent to SOP\nSoft Reset Message\nReceived on SOPPE_SNK_Soft_Reset\nActions on entry:Reset SOP Protocol LayerSend Accept Message to SOP\nPower = DefauIt/Implicit or\nExplicit Contract\nPD = Connected\nPE_SNK_Wait_for_Capabilities\nTransmission\nError indication\nfrom Protocol Layer\nPE_SNK_Ready\nIn Explicit Contract &\nProtocol Error2on SOP before first Message\nin AMS sent (no GoodCRC received)\nPE_SNK_Hard_Reset\n1)Excludes the Soft_Reset Message itself.\n2)An Unrecognized or Unsupported Message will result in a Not_Supported Message response being generated (see Section 6.3.16 “Not_Supported Message” ).\n3)See Section 6.4.10.1 “Process to enter EPR Mode” for the conditions when a Soft_Reset Message Shall be sent by the Sink during the EPR Mode entry process.\nPage 844 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10On entry to the PE_SNK_Send_Soft_Reset state the Policy Engine Shall request the SOP Protocol Layer to perform a\nSoft Reset , then Shall send a Soft_Reset Message on SOP to the Source , and initialize and run the\nSenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n An Accept Message has been received on SOP .\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n A SenderResponseTimer timeout occurs.\n Or the Protocol Layer indicates that a transmission error has occurred."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.4.2.2",
    "title": "PE_SNK_Soft_Reset State",
    "full_path": "8.3.3.4.2.2 PE_SNK_Soft_Reset State",
    "page": 844,
    "level": 6,
    "parent_id": "8.3.3.4.2",
    "tags": [],
    "content": "The PE_SNK_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received on SOP from\nthe Protocol Layer .\nOn entry to the PE_SNK_Soft_Reset state the Policy Engine Shall reset the SOP Protocol Layer and Shall then request\nthe Protocol Layer to send an Accept Message on SOP .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n The Accept Message has been sent on SOP .\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n The Protocol Layer indicates that a transmission error has occurred.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8458.3.3.5 Data Reset State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1",
    "title": "DFP Data_Reset Message State Diagrams",
    "full_path": "8.3.3.5.1 DFP Data_Reset Message State Diagrams",
    "page": 845,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.136, \"DFP Data_Reset Message State Diagram\" shows the state diagram for a Data_Reset Message sent or\nreceived by a DFP .\nFigure 8.136 DFP Data_Reset Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1.1",
    "title": "PE_DDR_Send_Data_Reset State",
    "full_path": "8.3.3.5.1.1 PE_DDR_Send_Data_Reset State",
    "page": 845,
    "level": 6,
    "parent_id": "8.3.3.5.1",
    "tags": [],
    "content": "The PE_DDR_Send_Data_Reset State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when\nrequested by the Device Policy Manager .\nOn entry to the PE_DDR_Send_Data_Reset State the Policy Engine Shall request the Protocol Layer to send a\nData_Reset Message and then initialize and start the SenderResponseTimer .\nOn exit from the PE_DDR_Send_Data_Reset State the Policy Engine Shall initialize and start the\nDataResetFailTimer .\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n An Accept Message has been received and\n The DFP is presently the VCONN Source .\nThe Policy Engine Shall transition to the PE_DDR_Wait_For_V CONN _Off State when:\n An Accept Message has been received andPE_DDR_Send_Data_Reset\nActions on entry:\nSend Data_Reset MessageInitialize and start SenderResponseTimer\nPower = Explicit Contract\nPD = connectedData Reset request from DPM\nAccept Message Received &\nVCONN Source\nPE_SRC_Ready or\nPE_SNK_Ready (DFP)\nPE_DDR_Data_Reset_Received\nActions on entry:\nInform Device Policy Manager of Data_Reset MessageSend Accept Message\nPower = Explicit Contract\nPD = connectedData_Reset Message\nreceived\nAccept Message Sent &\nVCONN Source\nErrorRecoverySenderResponseTimer Timeout |\nProtocol Error\nPE_DDR_Wait_for_V CONN _Off\nActions on entry:\nInitialize and start V CONN DischargeTimer\nPower = Explicit Contract\nPD = connectedAccept Message Received &\nNot V CONN SourceVCONNDischargeTimer Timeout |\nProtocol Error\nPS_RDY Received\nPE_DDR_Perform_Data_Reset\nActions on entry:Tell Device Policy Manager to perform Data Reset\nPower = Explicit Contract\nPD = connected\nPE_SRC_Ready or\nPE_SNK_Ready (DFP)Data Reset process is completeAccept Message Sent &\nNot V CONN SourceProtocol Error\nDataResetFailTimer Timeout |\nProtocol Error\nActions on exit:\nStop DataResetFailTimerSend Data_Reset_Complete MessageActions on exit:Initialize and start DataResetFailTimer\n1Actions on exit:Initialize and start DataResetFailTimer\n1\n1)Note that the DataResetFailTimer Shall continue to run in every state until it is stopped or times out.\nPage 846 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The DFP is not presently the VCONN Source .\nThe Policy Engine Shall transition to ErrorRecovery when:\n A SenderResponseTimer timeout occurs or\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1.2",
    "title": "PE_DDR_Data_Reset_Received State",
    "full_path": "8.3.3.5.1.2 PE_DDR_Data_Reset_Received State",
    "page": 846,
    "level": 6,
    "parent_id": "8.3.3.5.1",
    "tags": [],
    "content": "The PE_DDR_Data_Reset_Received State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when a\nData_Reset Message is received.\nOn entry to the PE_DDR_Data_Reset_Received State the Policy Engine Shall inform the Device Policy Manager and\nthen Shall send an Accept Message .\nOn exit from the PE_DDR_Data_Reset_Received State the Policy Engine Shall initialize and start the\nDataResetFailTimer .\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n An Accept Message has been sent and\n The DFP is presently the VCONN Source .\nThe Policy Engine Shall transition to the PE_DDR_Wait_For_V CONN _Off State when:\n An Accept Message has been sent and\n The DFP is not presently the VCONN Source .\nThe Policy Engine Shall transition to ErrorRecovery when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1.3",
    "title": "PE_DDR_Wait_For_V CONN _Off State",
    "full_path": "8.3.3.5.1.3 PE_DDR_Wait_For_V CONN _Off State",
    "page": 846,
    "level": 6,
    "parent_id": "8.3.3.5.1",
    "tags": [],
    "content": "On entry to the PE_DDR_Wait_For_V CONN _Off State the Policy Engine Shall initialize and start the\nVCONN DischargeTimer .\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n A PS_RDY Message is received.\nThe Policy Engine Shall transition to ErrorRecovery when:\n The V CONN DischargeTimer has timed out or\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.1.4",
    "title": "PE_DDR_Perform_Data_Reset State",
    "full_path": "8.3.3.5.1.4 PE_DDR_Perform_Data_Reset State",
    "page": 846,
    "level": 6,
    "parent_id": "8.3.3.5.1",
    "tags": [],
    "content": "On entry to the PE_DDR_Perform_Data_Reset State the Policy Engine Shall request the Device Policy Manager to\ncomplete the Data Reset process as defined in Section 6.3.14, \"Data_Reset Message\" .\nOn exit from the PE_DDR_Perform_Data_Reset State the Policy Engine Shall stop the DataResetFailTimer and\nsend a Data_Reset_Complete Message .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State depending on the DFP 's\nPower Role when:\n The DPM indicates that Data Reset process is complete (see Section 6.3.14, \"Data_Reset Message\" ).\nThe Policy Engine Shall transition to ErrorRecovery when:\n The DataResetFailTimer times out\n A Protocol Error occurs.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8478.3.3.5.2 UFP Data_Reset Message State Diagrams\nFigure 8.137, \"UFP Data_Reset Message State Diagram\" shows the state diagram for a Data_Reset Message sent or\nreceived by a UFP .\nFigure 8.137 UFP Data_Reset Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.2.1",
    "title": "PE_UDR_Send_Data_Reset State",
    "full_path": "8.3.3.5.2.1 PE_UDR_Send_Data_Reset State",
    "page": 847,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_UDR_Send_Data_Reset State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when\nrequested by the Device Policy Manager .\nOn entry to the PE_UDR_Send_Data_Reset State the Policy Engine Shall request the Protocol Layer to send a\nData_Reset Message and then initialize and run the SenderResponseTimer .\nOn exit from the PE_UDR_Send_Data_Reset State the Policy Engine Shall initialize and run the\nDataResetFailUFPTimer .\nThe Policy Engine Shall transition to the PE_UDR_Turn_Off_V CONN State when:\n An Accept Message has been received and\n The UFP is presently the VCONN Source .\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n An Accept Message has been received and\n The UFP is not presently the VCONN Source .\nThe Policy Engine Shall transition to ErrorRecovery when:PE_UDR_Send_Data_Reset\nActions on entry:\nSend Data_Reset MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = connectedData Reset request from DPM\nAccept Message Received &\nVCONN Source\nPE_SRC_Ready or\nPE_SNK_Ready (UFP)\nPE_UDR_Data_Reset_Received\nActions on entry:\nInform Device Policy Manager of Data_Reset MessageSend Accept Message\nPower = Explicit Contract\nPD = connectedData_Reset Message\nreceived\nAccept Message Sent &\nVCONN Source\nErrorRecoverySenderResponseTimer Timeout |\nProtocol Error\nPE_UDR_Turn_Off_V CONN\nActions on entry:\nTell Device Policy Manager to turn off V CONN\nPower = Explicit Contract\nPD = connected\nPE_UDR_Send_Ps_Rdy\nActions on entry:Send PS_RDY Message\nPower = Explicit Contract\nPD = connectedVCONN Off1\nPE_SRC_Ready or\nPE_SNK_Ready (UFP)Accept Message Received &\nNot V CONN Source\nPS_RDY Message Sent\nAccept Message Sent &\nNot V CONN SourceProtocol Error\nPE_UDR_Wait_For_Data_Reset_Complete\nActions on entry:\nWait for Data_Reset_Complete Message\nPower = Explicit Contract\nPD = connected\nData_Reset_Complete Message\nreceivedProtocol Error\nProtocol Error\nDataResetFailUFPTimer Timeout2|\nProtocol ErrorActions on exit:Stop DataResetFailUFPTimer\n2Actions on exit:Initialize and run DataResetFailUFPTimer\n2\nActions on exit:Initialize and run DataResetFailUFPTimer\n2\n1)VCONN Shall be fully discharged see Section 7.1.15 “Vconn Power Cycle” .\n2)Note that the DataResetFailUFPTimer Shall continue to run in every state until it is stopped or times out.\nPage 848 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The SenderResponseTimer has timed out or\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.2.2",
    "title": "PE_UDR_Data_Reset_Received State",
    "full_path": "8.3.3.5.2.2 PE_UDR_Data_Reset_Received State",
    "page": 848,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_UDR_Data_Reset_Received State Shall be entered from either the PE_SRC_Ready or PE_SNK_Ready State\nwhen a Data_Reset Message is received.\nOn entry to the PE_UDR_Data_Reset_Received State the Policy Engine Shall inform the Device Policy Manager and\nthen Shall send an Accept Message .\nOn exit from the PE_UDR_Data_Reset_Received State the Policy Engine Shall initialize and run the\nDataResetFailUFPTimer .\nThe Policy Engine Shall transition to the PE_UDR_Turn_Off_V CONN State when:\n An Accept Message has been sent and\n The UFP is presently the VCONN Source .\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n An Accept Message has been sent and\n The UFP is not presently the VCONN Source .\nThe Policy Engine Shall transition to ErrorRecovery when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.2.3",
    "title": "PE_UDR_Turn_Off_V CONN State",
    "full_path": "8.3.3.5.2.3 PE_UDR_Turn_Off_V CONN State",
    "page": 848,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_UDR_Turn_Off_V CONN State the Policy Engine Shall request the Device Policy Manager to turn off\nVCONN .\nThe Policy Engine Shall transition to the PE_UDR_Send_Ps_Rdy State when:\n The DPM indicates that VCONN has been turned off (V CONN below vRaReconnect see [USB Type-C 2.4] ).\nThe Policy Engine Shall transition to ErrorRecovery when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.2.4",
    "title": "PE_UDR_Send_Ps_Rdy State",
    "full_path": "8.3.3.5.2.4 PE_UDR_Send_Ps_Rdy State",
    "page": 848,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_UDR_Send_Ps_Rdy State the Policy Engine Shall send a PS_RDY Message .\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n The PS_RDY Message has been sent.\nThe Policy Engine Shall transition to ErrorRecovery when:\n A Protocol Error occurs."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.5.2.5",
    "title": "PE_UDR_Wait_For_Data_Reset_Complete State",
    "full_path": "8.3.3.5.2.5 PE_UDR_Wait_For_Data_Reset_Complete State",
    "page": 848,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_UDR_Wait_For_Data_Reset_Complete State the Policy Engine Shall wait for the\nData_Reset_Complete Message .\nOn exit from the PE_UDR_Wait_For_Data_Reset_Complete State the Policy Engine Shall stop the\nDataResetFailUFPTimer .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State depending on the UFP 's\nPower Role when:\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 849 The Data_Reset_Complete Message is received.\nThe Policy Engine Shall transition to ErrorRecovery when:\n The DataResetFailUFPTimer times out or\n A Protocol Error occurs.\nPage 850 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.6 Not Supported Message State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.1",
    "title": "Source Port Not Supported Message State Diagram",
    "full_path": "8.3.3.6.1 Source Port Not Supported Message State Diagram",
    "page": 850,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.138, \"Source Port Not Supported Message State Diagram\" shows the state diagram for a Not_Supported\nMessage sent or received by a Source Port .\nFigure 8.138 Source Port Not Supported Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.1.1",
    "title": "PE_SRC_Send_Not_Supported State",
    "full_path": "8.3.3.6.1.1 PE_SRC_Send_Not_Supported State",
    "page": 850,
    "level": 6,
    "parent_id": "8.3.3.6.1",
    "tags": [],
    "content": "The PE_SRC_Send_Not_Supported state Shall be entered from the PE_SRC_Ready state either as the result of a\nProtocol Error received during an interruptible AMS or as a result of an Unsupported Message being received in the\nPE_SRC_Ready state directly except for the first Chunk in a multi- Chunk Message (see also Section 6.12.2.1, \"Protocol\nLayer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\" ).\nOn entry to the PE_SRC_Send_Not_Supported state (from the PE_SRC_Ready state) the Policy Engine Shall request\nthe Protocol Layer to send a Not_Supported Message .\nThe Policy Engine Shall transition back to the previous state ( PE_SRC_Ready see Figure 8.132, \"Source Port State\nDiagram\" ) when:\n The Not_Supported Message has been successfully sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.1.2",
    "title": "PE_SRC_Not_Supported_Received State",
    "full_path": "8.3.3.6.1.2 PE_SRC_Not_Supported_Received State",
    "page": 850,
    "level": 6,
    "parent_id": "8.3.3.6.1",
    "tags": [],
    "content": "The PE_SRC_Not_Supported_Received state Shall be entered from the PE_SRC_Ready state when a Not_Supported\nMessage is received.\nOn entry to the PE_SRC_Not_Supported_Received state the Policy Engine Shall inform the Device Policy Manager .\nThe Policy Engine Shall transition back to the previous state ( PE_SRC_Ready see Figure 8.132, \"Source Port State\nDiagram\" ) when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.1.3",
    "title": "PE_SRC_Chunk_Received State",
    "full_path": "8.3.3.6.1.3 PE_SRC_Chunk_Received State",
    "page": 850,
    "level": 6,
    "parent_id": "8.3.3.6.1",
    "tags": [],
    "content": "The PE_SRC_Chunk_Received state Shall be entered from the PE_SRC_Ready state as a result of an Unsupported\nMessage being received in the PE_SRC_Ready state directly where the Message is a Chunk in a multi- Chunk Message\n(see also Section 6.12.2.1, \"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol\nError State Diagram\" ).PE_SRC_Send_Not_Supported\nActions on entry:\nSend Not_Supported Message\nPower = Explicit Contract\nPD = connectedProtocol Error1&\nnot a Chunk from\na multi-Chunk Message\nNot_Supported\nMessage sent\nPE_SRC_ReadyPE_SRC_Not_Supported_Received\nActions on entry:\nInform Device Policy Manager of Not_Supported Message\nPower = Explicit Contract\nPD = connectedNot_Supported Message\nreceived1\nDPM informedPE_SRC_Chunk_Received\nActions on entry:Start ChunkingNotSupportedTimer\nPower = Explicit Contract\nPD = connected\nProtocol Error1&\nChunk from\na multi-Chunk Message2ChunkingNotSupportedTimer\ntimeout\n1)Transition as a result of an unsupported Message being received in the PE_SRC_Ready state directly\n(see also Section 8.3.3.4.1 “SOP Source Port Soft Reset and Protocol Error State Diagram” ).\n2)Transition can only occur where a manufacturer has opted not to implement a Chunking state machine (see Section 6.12.2.1 “Protocol Layer Chunking” )\nand is communicating with a system which is attempting to send it Chunks.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 851On entry to the PE_SRC_Chunk_Received state (from the PE_SRC_Ready state) the Policy Engine Shall initialize and\nrun the ChunkingNotSupportedTimer .\nThe Policy Engine Shall transition to PE_SRC_Send_Not_Supported when:\n The ChunkingNotSupportedTimer has timed out.\nPage 852 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.6.2 Sink Port Not Supported Message State Diagram\nFigure 8.139, \"Sink Port Not Supported Message State Diagram\" shows the state diagram for a Not_Supported\nMessage sent or received by a Sink Port .\nFigure 8.139 Sink Port Not Supported Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.2.1",
    "title": "PE_SNK_Send_Not_Supported State",
    "full_path": "8.3.3.6.2.1 PE_SNK_Send_Not_Supported State",
    "page": 852,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Send_Not_Supported state Shall be entered from the PE_SNK_Ready state either as the result of a\nProtocol Error received during an interruptible AMS or as a result of an Unsupported Message being received in the\nPE_SNK_Ready state directly except for the first Chunk in a multi- Chunk Message (see also Section 6.12.2.1,\n\"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\" ).\nOn entry to the PE_SNK_Send_Not_Supported state (from the PE_SNK_Ready state) the Policy Engine Shall request\nthe Protocol Layer to send a Not_Supported Message .\nThe Policy Engine Shall transition back to the previous state ( PE_SNK_Ready see Figure 8.133, \"Sink Port State\nDiagram\" ) when:\n The Not_Supported Message has been successfully sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.2.2",
    "title": "PE_SNK_Not_Supported_Received State",
    "full_path": "8.3.3.6.2.2 PE_SNK_Not_Supported_Received State",
    "page": 852,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Not_Supported_Received state Shall be entered from the PE_SNK_Ready state when a\nNot_Supported Message is received.\nOn entry to the PE_SNK_Not_Supported_Received state the Policy Engine Shall inform the Device Policy Manager .\nThe Policy Engine Shall transition back to the previous state ( PE_SNK_Ready see Figure 8.133, \"Sink Port State\nDiagram\" ) when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.6.2.3",
    "title": "PE_SNK_Chunk_Received State",
    "full_path": "8.3.3.6.2.3 PE_SNK_Chunk_Received State",
    "page": 852,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Chunk_Received state Shall be entered from the PE_SNK_Ready state as a result of an Unsupported\nMessage being received in the PE_SNK_Ready state directly where the Message is a Chunk in a multi- Chunk Message\n(see also Section 6.12.2.1, \"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol\nError State Diagram\" ).\nOn entry to the PE_SNK_Chunk_Received state (from the PE_SNK_Ready state) the Policy Engine Shall initialize and\nrun the ChunkingNotSupportedTimer .\nThe Policy Engine Shall transition to PE_SNK_Send_Not_Supported when:PE_SNK_Send_Not_Supported\nActions on entry:\nSend Not_Supported Message\nPower = Explicit Contract\nPD = connectedProtocol Error1&\nnot a Chunk from\na multi-Chunk Message\nNot_Supported\nMessage sent\nPE_SNK_ReadyPE_SNK_Not_Supported_Received\nActions on entry:\nInform Device Policy Manager of Not_Supported Message\nPower = Explicit Contract\nPD = connectedNot_Supported Message\nreceived1\nDPM informedPE_SNK_Chunk_Received\nActions on entry:Start ChunkingNotSupportedTimer\nPower = Explicit Contract\nPD = connected\nProtocol Error1&\nChunk from\na multi-Chunk Message2ChunkingNotSupportedTimer\ntimeout\n1)Transition as a result of an unsupported Message being received in the PE_SNK_Ready state directly\n(see also Section 8.3.3.4.2 “SOP Sink Port Soft Reset and Protocol Error State Diagram”).\n2)Transition can only occur where a manufacturer has opted not to implement a Chunking state machine (see Section 6.12.2.1 “Protocol Layer Chunking” )\nand is communicating with a system which is attempting to send it Chunks.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 853 The ChunkingNotSupportedTimer has timed out.\nPage 854 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.7 Alert State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.1",
    "title": "Source Port Source Alert State Diagram",
    "full_path": "8.3.3.7.1 Source Port Source Alert State Diagram",
    "page": 854,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.140, \"Source Port Source Alert State Diagram\" shows the state diagram for an Alert Message sent by a\nSource Port .\nFigure 8.140 Source Port Source Alert State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.1.1",
    "title": "PE_SRC_Send_Source_Alert State",
    "full_path": "8.3.3.7.1.1 PE_SRC_Send_Source_Alert State",
    "page": 854,
    "level": 6,
    "parent_id": "8.3.3.7.1",
    "tags": [],
    "content": "The PE_SRC_Send_Source_Alert state Shall be entered from the PE_SRC_Ready state when the Device Policy\nManager indicates that there is a Source alert condition to be reported.\nOn entry to the PE_SRC_Send_Source_Alert state the Policy Engine Shall request the Protocol Layer to send an Alert\nMessage .\nThe Policy Engine Shall transition to the PE_SRC_Wait_for_Get_Status State when:\n The Alert Message has been successfully sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.1.2",
    "title": "PE_SRC_Wait_for_Get_Status State",
    "full_path": "8.3.3.7.1.2 PE_SRC_Wait_for_Get_Status State",
    "page": 854,
    "level": 6,
    "parent_id": "8.3.3.7.1",
    "tags": [],
    "content": "On entry to the PE_SRC_Wait_for_Get_Status State the Policy Engine Shall initialize and run the\nSenderResponseTimer .\nThe Policy Engine Shall transition back to the PE_Give_Status State (see Figure 8.151, \"Give Status State Diagram\" )\nwhen:\n A Get_Status Message is received.\nThe Policy Engine Shall transition back to PE_SRC_Ready (see Figure 8.132, \"Source Port State Diagram\" ) when:\n The SenderResponseTimer times out.PE_SRC_Send_Source_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract\nPD = connectedDPM indicates Source\nalert condition\nAlert\nMessage sent\nPE_SRC_Ready\nSenderResponseTimer\nTimeout\nPE_SRC_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nPE_Give_StatusGet_Status\nMessage received\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8558.3.3.7.2 Sink Port Source Alert State Diagram\nFigure 8.141, \"Sink Port Source Alert State Diagram\" shows the state diagram for an Alert Message received by a\nSink Port .\nFigure 8.141 Sink Port Source Alert State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.2.1",
    "title": "PE_SNK_Source_Alert_Received State",
    "full_path": "8.3.3.7.2.1 PE_SNK_Source_Alert_Received State",
    "page": 855,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Source_Alert_Received state Shall be entered from the PE_SNK_Ready state when an Alert Message\nis received.\nOn entry to the PE_SNK_Source_Alert_Received state the Policy Engine Shall inform the Device Policy Manager of\nthe details of the Source alert.\nThe Policy Engine Shall transition to the PE_Get_Status State (see Figure 8.150, \"Get Status State Diagram\" ) when:\n The DPM requests status.\nThe Policy Engine Shall transition back to the PE_SNK_Ready State (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n The DPM does not request status.PE_SRC_Send_Source_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract\nPD = connectedDPM indicates Source\nalert condition\nAlert\nMessage sent\nPE_SRC_Ready\nSenderResponseTimer\nTimeout\nPE_SRC_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nPE_Give_StatusGet_Status\nMessage received\nPage 856 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.7.3 Sink Port Sink Alert State Diagram\nFigure 8.142, \"Sink Port Sink Alert State Diagram\" shows the state diagram for an Alert Message sent by a Sink Port .\nFigure 8.142 Sink Port Sink Alert State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.3.1",
    "title": "PE_SNK_Send_Sink_Alert State",
    "full_path": "8.3.3.7.3.1 PE_SNK_Send_Sink_Alert State",
    "page": 856,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SNK_Send_Sink_Alert state Shall be entered from the PE_SNK_Ready state when the Device Policy Manager\nindicates that there is a Source alert condition to be reported.\nOn entry to the PE_SNK_Send_Sink_Alert state the Policy Engine Shall request the Protocol Layer to send an Alert\nMessage .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Get_Status State when:\n The Alert Message has been successfully sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.3.2",
    "title": "PE_SNK_Wait_for_Get_Status State",
    "full_path": "8.3.3.7.3.2 PE_SNK_Wait_for_Get_Status State",
    "page": 856,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SNK_Wait_for_Get_Status State the Policy Engine Shall initialize and run the\nSenderResponseTimer .\nThe Policy Engine Shall transition back to the PE_Give_Status State (see Figure 8.151, \"Give Status State Diagram\" )\nwhen:\n A Get_Status Message is received.\nThe Policy Engine Shall transition back to the PE_SNK_Ready (see Figure 8.133, \"Sink Port State Diagram\" ) when:\n The SenderResponseTimer times out.PE_SNK_Send_Sink_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract\nPD = connectedDPM indicates Sink\nalert condition\nAlert\nMessage sent\nPE_SNK_Ready\nSenderResponseTimer\nTimeout\nPE_SNK_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nPE_Give_StatusGet_Status\nMessage received\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8578.3.3.7.4 Source Port Sink Alert State Diagram\nFigure 8.143, \"Source Port Sink Alert State Diagram\" shows the state diagram for an Alert Message received by a\nSource Port .\nFigure 8.143 Source Port Sink Alert State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.7.4.1",
    "title": "PE_SRC_Sink_Alert_Received State",
    "full_path": "8.3.3.7.4.1 PE_SRC_Sink_Alert_Received State",
    "page": 857,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_SRC_Sink_Alert_Received state Shall be entered from the PE_SRC_Ready state when an Alert Message is\nreceived.\nOn entry to the PE_SRC_Sink_Alert_Received state the Policy Engine Shall inform the Device Policy Manager of the\ndetails of the Source alert.\nThe Policy Engine Shall transition to the PE_Get_Status State (see Figure 8.150, \"Get Status State Diagram\" ) when:\n The DPM requests status.\nThe Policy Engine Shall transition back to the PE_SRC_Ready (see Figure 8.132, \"Source Port State Diagram\" ) when:\n The DPM does not request status.PE_SRC_Sink_Alert_Received\nActions on entry:\nInform DPM of the detail of the alert\nPower = Explicit Contract\nPD = connectedSink Alert Message\nreceived\nDPM does not\nrequest status\nPE_SRC_Ready\nPE_Get_StatusDPM Requests Status\nPage 858 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.8 Source/Sink Capabilities Extended State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.8.1",
    "title": "Sink Port Get Source Capabilities Extended State Diagram",
    "full_path": "8.3.3.8.1 Sink Port Get Source Capabilities Extended State Diagram",
    "page": 858,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.144, \"Sink Port Get Source Capabilities Extended State Diagram\" shows the state diagram for a Sink on\nreceiving a request from the Device Policy Manager to get the Port Partner 's extended Source Capabilities . See also\nSection 6.5.1, \"Source_Capabilities_Extended Message\" .\nFigure 8.144 Sink Port Get Source Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.8.1.1",
    "title": "PE_SNK_Get_Source_Cap_Ext State",
    "full_path": "8.3.3.8.1.1 PE_SNK_Get_Source_Cap_Ext State",
    "page": 858,
    "level": 6,
    "parent_id": "8.3.3.8.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SNK_Get_Source_Cap_Ext state, from the PE_SNK_Ready state, due to\na request to get the remote extended Source Capabilities from the Device Policy Manager .\nOn entry to the PE_SNK_Get_Source_Cap_Ext state the Policy Engine Shall send a Get_Source_Cap_Extended\nMessage and initialize and run the SenderResponseTimer .\nOn exit from the PE_SNK_Get_Source_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n A Source_Capabilities_Extended Message is received\n Or SenderResponseTimer times out.get extended source capabilities\nrequest\nfrom Device Policy Manager\nSource_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_ReadyPE_SNK_Get_Source_Cap_Ext\nActions on entry:\nSend Get_Source_Cap_Extended MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass source extended capabilities/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8598.3.3.8.2 Source Give Source Capabilities Extended State Diagram\nFigure 8.145, \"Source Give Source Capabilities Extended State Diagram\" shows the state diagram for a Source on\nreceiving a Get_Source_Cap_Extended Message . See also Section 6.5.1, \"Source_Capabilities_Extended Message\" .\nFigure 8.145 Source Give Source Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.8.2.1",
    "title": "PE_SRC_Give_Source_Cap_Ext State",
    "full_path": "8.3.3.8.2.1 PE_SRC_Give_Source_Cap_Ext State",
    "page": 859,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_Give_Source_Cap_Ext state, from the PE_SRC_Ready state, when\na Get_Source_Cap_Extended Message is received.\nOn entry to the PE_SRC_Give_Source_Cap_Ext state the Policy Engine Shall request the present extended Source\nCapabilities from the Device Policy Manager and then send a Source_Capabilities_Extended Message based on\nthese capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n The Source_Capabilities_Extended Message has been successfully sent.Get_Source_Cap_Extended Message\nreceived\nSource_Capabilities_Extended\nMessage sent\nPE_SRC_ReadyPE_SRC_Give_Source_Cap_Ext\nActions on entry:\nGet present extended source capabilities from Device Policy ManagerSend Source_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 860 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.8.3 Source Port Get Sink Capabilities Extended State Diagram\nFigure 8.146, \"Source Port Get Sink Capabilities Extended State Diagram\" shows the state diagram for a Source on\nreceiving a request from the Device Policy Manager to get the Port Partner 's extended Sink Capabilities . See also\nSection 6.5.13, \"Sink_Capabilities_Extended Message\" .\nFigure 8.146 Source Port Get Sink Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.8.3.1",
    "title": "PE_SRC_Get_Sink_Cap_Ext State",
    "full_path": "8.3.3.8.3.1 PE_SRC_Get_Sink_Cap_Ext State",
    "page": 860,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_Get_Sink_Cap_Ext state, from the PE_SRC_Ready state, due to a\nrequest to get the remote extended Source Capabilities from the Device Policy Manager .\nOn entry to the PE_SRC_Get_Sink_Cap_Ext state the Policy Engine Shall send a Get_Sink_Cap_Extended Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_SRC_Get_Sink_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n A Sink_Capabilities_Extended Message is received\n Or SenderResponseTimer times out.get extended Sink capabilities\nrequest\nfrom Device Policy Manager\nSink_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_ReadyPE_SRC_Get_Sink_Cap_Ext\nActions on entry:\nSend Get_Sink_Cap_Extended MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass sink extended capabilities/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8618.3.3.8.4 Sink Give Sink Capabilities Extended State Diagram\nFigure 8.147, \"Sink Give Sink Capabilities Extended State Diagram\" shows the state diagram for a Source on receiving\na Get_Sink_Cap_Extended Message . See also Section 6.5.13, \"Sink_Capabilities_Extended Message\" .\nFigure 8.147 Sink Give Sink Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.8.4.1",
    "title": "PE_SNK_Give_Sink_Cap_Ext State",
    "full_path": "8.3.3.8.4.1 PE_SNK_Give_Sink_Cap_Ext State",
    "page": 861,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SNK_Give_Sink_Cap_Ext state, from the PE_SNK_Ready state, when a\nGet_Sink_Cap_Extended Message is received.\nOn entry to the PE_SNK_Give_Sink_Cap_Ext state the Policy Engine Shall request the present extended Source\nCapabilities from the Device Policy Manager and then send a Sink_Capabilities_Extended Message based on these\ncapabilities.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n The Sink_Capabilities_Extended Message has been successfully sent.Get_Sink_Cap_Extended Message\nreceived\nSink_Capabilities_Extended\nMessage sent\nPE_SNK_ReadyPE_SNK_Give_Sink_Cap_Ext\nActions on entry:\nGet present extended Sink capabilities from Device Policy ManagerSend Sink_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 862 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.9 Source Information State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.9.1",
    "title": "Sink Port Get Source Information State Diagram",
    "full_path": "8.3.3.9.1 Sink Port Get Source Information State Diagram",
    "page": 862,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.148, \"Sink Port Get Source Information State Diagram\" shows the state diagram for a Sink on receiving a\nrequest from the Device Policy Manager to get the Port Partner 's Source information. See also Section 6.3.23,\n\"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info Message\" .\nFigure 8.148 Sink Port Get Source Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.9.1.1",
    "title": "PE_SNK_Get_Source_Info State",
    "full_path": "8.3.3.9.1.1 PE_SNK_Get_Source_Info State",
    "page": 862,
    "level": 6,
    "parent_id": "8.3.3.9.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SNK_Get_Source_Info state, from the PE_SNK_Ready state, due to a\nrequest to get the remote Source information from the Device Policy Manager .\nOn entry to the PE_SNK_Get_Source_Info state the Policy Engine Shall send a Get_Source_Info Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_SNK_Get_Source_Info state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (information or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n A Source_Info Message is received\n Or SenderResponseTimer times out.get source information request\nfrom Device Policy Manager\nSource_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_ReadyPE_SNK_Get_Source_Info\nActions on entry:\nSend Get_Source_Info MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass source information/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8638.3.3.9.2 Source Give Source Information State Diagram\nFigure 8.149, \"Source Give Source Information State Diagram\" shows the state diagram for a Source on receiving a\nGet_Source_Info Message . See also Section 6.3.23, \"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info\nMessage\" .\nFigure 8.149 Source Give Source Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.9.2.1",
    "title": "PE_SRC_Give_Source_Info State",
    "full_path": "8.3.3.9.2.1 PE_SRC_Give_Source_Info State",
    "page": 863,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_Give_Source_Info state, from the PE_SRC_Ready state, when a\nGet_Source_Info Message is received.\nOn entry to the PE_SRC_Give_Source_Info state the Policy Engine Shall request the present Source information\nfrom the Device Policy Manager and then send a Source_Info Message based on this information.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n The Source_Info Message has been successfully sent.Get_Source_Info Message\nreceived\nSource_Info Message sent\nPE_SRC_ReadyPE_SRC_Give_Source_Info\nActions on entry:\nGet present source information from Device Policy ManagerSend Source_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 864 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.10 Status State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.10.1",
    "title": "Get Status State Diagram",
    "full_path": "8.3.3.10.1 Get Status State Diagram",
    "page": 864,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.150, \"Get Status State Diagram\" shows the state diagram for a Port on receiving a request from the Device\nPolicy Manager to get the Port Partner or Cable Plug 's Status. See also Section 6.5.2, \"Status Message\" .\nFigure 8.150 Get Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.10.1.1",
    "title": "PE_Get_Status State",
    "full_path": "8.3.3.10.1.1 PE_Get_Status State",
    "page": 864,
    "level": 6,
    "parent_id": "8.3.3.10.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Status state, from the PE_SRC_Ready or PE_SNK_Ready States, due\nto a request to get the Port Partner or Cable Plug 's status from the Device Policy Manager .\nOn entry to the PE_Get_Status state the Policy Engine Shall send a Get_Status Message and initialize and run the\nSenderResponseTimer .\nOn exit from the PE_Get_Status state the Policy Engine Shall inform the Device Policy Manager of the outcome\n(status or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready or PE_SNK_Ready States as appropriate (see Figure\n8.132, \"Source Port State Diagram\" or Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Status Message is received\n Or SenderResponseTimer times out.get status request\nfrom Device Policy Manager\nStatus\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready,\nPE_SRC_ReadyPE_Get_Status\nActions on entry:\nSend Get_Status MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Source status/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8658.3.3.10.2 Give Status State Diagram\nFigure 8.151, \"Give Status State Diagram\" shows the state diagram for a Source on receiving a Get_Status Message .\nSee also Section 6.5.2, \"Status Message\" .\nFigure 8.151 Give Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.10.2.1",
    "title": "PE_Give_Status State",
    "full_path": "8.3.3.10.2.1 PE_Give_Status State",
    "page": 865,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Status state, from the PE_SRC_Ready , PE_SNK_Ready or\nPE_CBL_Ready States, when a Get_Status Message is received.\nOn entry to the PE_Give_Status state the Policy Engine Shall request the present Source status from the Device\nPolicy Manager and then send a Status Message based on these capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready States as\nappropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure\n8.203, \"Cable Ready State Diagram\" ) when:\n The Status Message has been successfully sent.Get_Status Message\nreceived\nStatus\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready,\nPE_CBL_ReadyPE_Give_Status\nActions on entry:Get present Status from Device Policy ManagerSend Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 866 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.10.3 Sink Port Get Source PPS Status State Diagram\nFigure 8.152, \"Sink Port Get Source PPS Status State Diagram\" shows the state diagram for a Sink on receiving a\nrequest from the Device Policy Manager to get the Port Partner 's Source status when operating as a PPS. See also\nSection 6.5.10, \"PPS_Status Message\" .\nFigure 8.152 Sink Port Get Source PPS Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.10.3.1",
    "title": "PE_SNK_Get_PPS_Status State",
    "full_path": "8.3.3.10.3.1 PE_SNK_Get_PPS_Status State",
    "page": 866,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SNK_Get_PPS_Status state, from the PE_SNK_Ready state, due to a\nrequest to get the remote Source PPS status from the Device Policy Manager .\nOn entry to the PE_SNK_Get_PPS_Status state the Policy Engine Shall send a Get_PPS_Status Message and initialize\nand run the SenderResponseTimer .\nOn exit from the PE_SNK_Get_PPS_Status state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (status or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n A PPS_Status Message is received\n Or SenderResponseTimer times out.get PPS status request\nfrom Device Policy Manager\nPPS_Status\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_ReadyPE_SNK_Get_PPS_Status\nActions on entry:\nSend Get_PPS_Status MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Source status/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8678.3.3.10.4 Source Give Source PPS Status State Diagram\nFigure 8.153, \"Source Give Source PPS Status State Diagram\" shows the state diagram for a Source on receiving a\nGet_PPS_Status Message . See also Section 6.5.10, \"PPS_Status Message\" .\nFigure 8.153 Source Give Source PPS Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.10.4.1",
    "title": "PE_SRC_Give_PPS_Status State",
    "full_path": "8.3.3.10.4.1 PE_SRC_Give_PPS_Status State",
    "page": 867,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_Give_PPS_Status state, from the PE_SRC_Ready state, when a\nGet_PPS_Status Message is received.\nOn entry to the PE_SRC_Give_PPS_Status state the Policy Engine Shall request the present Source PPS status from\nthe Device Policy Manager and then send a PPS_Status Message based on these capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n The PPS_Status Message has been successfully sent.Get_PPS_Status Message\nreceived\nPPS_Status\nMessage sent\nPE_SRC_ReadyPE_SRC_Give_PPS_Status\nActions on entry:\nGet present Source PPS status from Device Policy ManagerSend PPS_Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 868 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.11 Battery Capabilities State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.11.1",
    "title": "Get Battery Capabilities State Diagram",
    "full_path": "8.3.3.11.1 Get Battery Capabilities State Diagram",
    "page": 868,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.154, \"Get Battery Capabilities State Diagram\" shows the state diagram for a Source or Sink on receiving a\nrequest from the Device Policy Manager to get the Port Partner 's Battery capabilities for a specified Battery . See also\nSection 6.5.5, \"Battery_Capabilities Message\" .\nFigure 8.154 Get Battery Capabilities State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.11.1.1",
    "title": "PE_Get_Battery_Cap State",
    "full_path": "8.3.3.11.1.1 PE_Get_Battery_Cap State",
    "page": 868,
    "level": 6,
    "parent_id": "8.3.3.11.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Battery_Cap state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to get the remote Battery capabilities, for a specified Battery , from the Device\nPolicy Manager .\nOn entry to the PE_Get_Battery_Cap state the Policy Engine Shall send a Get_Battery_Cap Message and initialize\nand run the SenderResponseTimer .\nOn exit from the PE_Get_Battery_Cap state the Policy Engine Shall inform the Device Policy Manager of the outcome\n(capabilities or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Battery_Capabilities Message is received\n Or SenderResponseTimer times out.get Battery capabilities\nrequest\nfrom Device Policy Manager\nBattery_Capabilities\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Battery_Cap\nActions on entry:\nSend Get_Battery_Cap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Battery capabilities/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8698.3.3.11.2 Give Battery Capabilities State Diagram\nFigure 8.155, \"Give Battery Capabilities State Diagram\" shows the state diagram for a Source or Sink on receiving a\nGet_Battery_Cap Message . See also Section 6.5.5, \"Battery_Capabilities Message\" .\nFigure 8.155 Give Battery Capabilities State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.11.2.1",
    "title": "PE_Give_Battery_Cap State",
    "full_path": "8.3.3.11.2.1 PE_Give_Battery_Cap State",
    "page": 869,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Battery_Cap state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, when a Get_Battery_Cap Message is received.\nOn entry to the PE_Give_Battery_Cap state the Policy Engine Shall request the present Battery capabilities, for the\nrequested Battery , from the Device Policy Manager and then send a Battery_Capabilities Message based on these\ncapabilities.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Battery_Capabilities Message has been successfully sent.Get_Battery_Cap Message\nreceived\nBattery_Capabilities\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Give_Battery_Cap\nActions on entry:\nGet present Battery capabilities from Device Policy ManagerSend Battery_Capabilities Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 870 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.12 Battery Status State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.12.1",
    "title": "Get Battery Status State Diagram",
    "full_path": "8.3.3.12.1 Get Battery Status State Diagram",
    "page": 870,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.156, \"Get Battery Status State Diagram\" shows the state diagram for a Source or Sink on receiving a request\nfrom the Device Policy Manager to get the Port Partner 's Battery status for a specified Battery . See also Section 6.5.4,\n\"Get_Battery_Status Message\" .\nFigure 8.156 Get Battery Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.12.1.1",
    "title": "PE_Get_Battery_Status State",
    "full_path": "8.3.3.12.1.1 PE_Get_Battery_Status State",
    "page": 870,
    "level": 6,
    "parent_id": "8.3.3.12.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Battery_Status state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to get the remote Battery status, for a specified Battery , from the Device\nPolicy Manager .\nOn entry to the PE_Get_Battery_Status state the Policy Engine Shall send a Get_Battery_Status Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_Get_Battery_Status state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (status or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Battery_Status Message is received\n Or SenderResponseTimer times out.get Battery status\nrequest\nfrom Device Policy Manager\nBattery_Status\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Battery_Status\nActions on entry:\nSend Get_Battery_Status MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Battery status/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8718.3.3.12.2 Give Battery Status State Diagram\nFigure 8.157, \"Give Battery Status State Diagram\" shows the state diagram for a Source or Sink on receiving a\nGet_Battery_Status Message . See also Section 6.5.4, \"Get_Battery_Status Message\" .\nFigure 8.157 Give Battery Status State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.12.2.1",
    "title": "PE_Give_Battery_Status State",
    "full_path": "8.3.3.12.2.1 PE_Give_Battery_Status State",
    "page": 871,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Battery_Status state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, when a Get_Battery_Status Message is received.\nOn entry to the PE_Give_Battery_Status state the Policy Engine Shall request the present Battery status, for the\nrequested Battery , from the Device Policy Manager and then send a Battery_Status Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Battery_Status Message has been successfully sent.Get_Battery_Status Message\nreceived\nBattery_Status\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Give_Battery_Status\nActions on entry:\nGet present Battery status from Device Policy ManagerSend Battery_Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 872 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.13 Manufacturer Information State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.13.1",
    "title": "Get Manufacturer Information State Diagram",
    "full_path": "8.3.3.13.1 Get Manufacturer Information State Diagram",
    "page": 872,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.158, \"Get Manufacturer Information State Diagram\" shows the state diagram for a Source or Sink on\nreceiving a request from the Device Policy Manager to get the Port Partner or Cable Plug 's Manufacturer\nInformation. See also Section 6.5.6, \"Get_Manufacturer_Info Message\" .\nFigure 8.158 Get Manufacturer Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.13.1.1",
    "title": "PE_Get_Manufacturer_Info State",
    "full_path": "8.3.3.13.1.1 PE_Get_Manufacturer_Info State",
    "page": 872,
    "level": 6,
    "parent_id": "8.3.3.13.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Manufacturer_Info state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to get the remote Manufacturer Information from the Device Policy Manager .\nOn entry to the PE_Get_Manufacturer_Info state the Policy Engine Shall send a Get_Manufacturer_Info Message\nand initialize and run the SenderResponseTimer .\nOn exit from the PE_Get_Manufacturer_Info state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Manufacturer_Info Message is received\n Or SenderResponseTimer times out.get manufacturer information\nrequest\nfrom Device Policy Manager\nManufacturer_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Manfacturer_Info\nActions on entry:\nSend Get_Manfacturer_Info MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Manufacturer Information/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8738.3.3.13.2 Give Manufacturer Information State Diagram\nFigure 8.159, \"Give Manufacturer Information State Diagram\" shows the state diagram for a Source , Sink or Cable\nPlug on receiving a Get_Manufacturer_Info Message . See also Section 6.5.6, \"Get_Manufacturer_Info Message\" .\nFigure 8.159 Give Manufacturer Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.13.2.1",
    "title": "PE_Give_Manufacturer_Info State",
    "full_path": "8.3.3.13.2.1 PE_Give_Manufacturer_Info State",
    "page": 873,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Manufacturer_Info state, from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state, when a Get_Manufacturer_Info Message is received.\nOn entry to the PE_Give_Manufacturer_Info state the Policy Engine Shall request the manufacturer information\nfrom the Device Policy Manager and then send a Manufacturer_Info Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state as\nappropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure\n8.203, \"Cable Ready State Diagram\" ) when:\n The Manufacturer_Info Message has been successfully sent.Get_Manufacturer_Info Message\nreceived\nManufacturer_Info\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_CBL_ReadyPE_Give_Manufacturer_Info\nActions on entry:\nGet present Manufacturer Information from Device Policy ManagerSend Manufacturer_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 874 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.14 Country Codes and Information State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.14.1",
    "title": "Get Country Codes State Diagram",
    "full_path": "8.3.3.14.1 Get Country Codes State Diagram",
    "page": 874,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.160, \"Get Country Codes State Diagram\" shows the state diagram for a Source or Sink on receiving a request\nfrom the Device Policy Manager to get the Port Partner or Cable Plug 's Country Codes. See also Section 6.5.11,\n\"Country_Codes Message\" .\nFigure 8.160 Get Country Codes State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.14.1.1",
    "title": "PE_Get_Country_Codes State",
    "full_path": "8.3.3.14.1.1 PE_Get_Country_Codes State",
    "page": 874,
    "level": 6,
    "parent_id": "8.3.3.14.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Country_Codes state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to get the remote Country Codes from the Device Policy Manager .\nOn entry to the PE_Get_Country_Codes state the Policy Engine Shall send a Get_Country_Codes Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_Get_Country_Codes state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (Country Codes or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Country_Codes Message is received\n Or SenderResponseTimer times out.get country codes request\nfrom Device Policy Manager\nCountry_Codes\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Country_Codes\nActions on entry:\nSend Get_Country_Codes MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Country Codes/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8758.3.3.14.2 Give Country Codes State Diagram\nFigure 8.161, \"Give Country Codes State Diagram\" shows the state diagram for a Source or Sink on receiving a\nGet_Country_Codes Message . See also Section 6.5.11, \"Country_Codes Message\" .\nFigure 8.161 Give Country Codes State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.14.2.1",
    "title": "PE_Give_Country_Codes State",
    "full_path": "8.3.3.14.2.1 PE_Give_Country_Codes State",
    "page": 875,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Country_Codes state, from either the PE_SRC_Ready or\nPE_SNK_Ready State, when a Get_Country_Codes Message is received.\nOn entry to the PE_Give_Country_Codes state the Policy Engine Shall request the country codes from the Device\nPolicy Manager and then send a Country_Codes Message containing these codes.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Country_Codes Message has been successfully sent.Get_Country_Codes Message\nreceived\nCountry_Codes\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Give_Country_Codes\nActions on entry:\nGet present Country Codes from Device Policy ManagerSend Country_Codes Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 876 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.14.3 Get Country Information State Diagram\nFigure 8.162, \"Get Country Information State Diagram\" shows the state diagram for a Source or Sink on receiving a\nrequest from the Device Policy Manager to get the Port Partner or Cable Plug 's Country Information. See also Section\n6.5.12, \"Country_Info Message\" .\nFigure 8.162 Get Country Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.14.3.1",
    "title": "PE_Get_Country_Info State",
    "full_path": "8.3.3.14.3.1 PE_Get_Country_Info State",
    "page": 876,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Country_Info state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to get the remote Manufacturer Information from the Device Policy Manager .\nOn entry to the PE_Get_Country_Info state the Policy Engine Shall send a Get_Manufacturer_Info Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_Get_Country_Info state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (country information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Country_Info Message is received\n Or SenderResponseTimer times out.get country information\nrequest\nfrom Device Policy Manager\nCountry_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Country_Info\nActions on entry:\nSend Get_Country_Info MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Country Information/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8778.3.3.14.4 Give Country Information State Diagram\nFigure 8.163, \"Give Country Information State Diagram\" shows the state diagram for a Source or Sink on receiving a\nGet_Country_Info Message . See also Section 6.5.12, \"Country_Info Message\" .\nFigure 8.163 Give Country Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.14.4.1",
    "title": "PE_Give_Country_Info State",
    "full_path": "8.3.3.14.4.1 PE_Give_Country_Info State",
    "page": 877,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Country_Info state, from either the PE_SRC_Ready or\nPE_SNK_Ready State, when a Get_Country_Info Message is received.\nOn entry to the PE_Give_Country_Info state the Policy Engine Shall request the country information from the\nDevice Policy Manager and then send a Country_Info Message containing this country information.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Country_Info Message has been successfully sent.Get_Country_Info Message\nreceived\nCountry_Info\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Give_Country_Info\nActions on entry:\nGet present Country Information from Device Policy ManagerSend Country_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 878 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.15 Revision State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.15.1",
    "title": "Get Revision State Diagram",
    "full_path": "8.3.3.15.1 Get Revision State Diagram",
    "page": 878,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.164, \"Get Revision State Diagram\" shows the state diagram for a Source or Sink on receiving a request from\nthe Device Policy Manager to get the Port Partner or Cable Plug 's Revision Information. See also Section 6.3.24,\n\"Get_Revision Message\" and Section 6.4.12, \"Revision Message\" .\nFigure 8.164 Get Revision State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.15.1.1",
    "title": "PE_Get_Revision State",
    "full_path": "8.3.3.15.1.1 PE_Get_Revision State",
    "page": 878,
    "level": 6,
    "parent_id": "8.3.3.15.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Get_Revision state, from either the PE_SRC_Ready or PE_SNK_Ready\nstate, due to a request to get the remote Revision Information from the Device Policy Manager .\nOn entry to the PE_Get_Revision state the Policy Engine Shall send a Get_Revision Message and initialize and run\nthe SenderResponseTimer .\nOn exit from the PE_Get_Revision state the Policy Engine Shall inform the Device Policy Manager of the outcome\n(Revision information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n A Revision Message is received\n Or SenderResponseTimer times out.get Revision\nrequest\nfrom Device Policy Manager\nRevision\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Get_Revision\nActions on entry:\nSend Get_Revision MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Revision Information/outcome to Device Policy Manager\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8798.3.3.15.2 Give Revision State Diagram\nFigure 8.165, \"Give Revision State Diagram\" shows the state diagram for a Source , Sink or Cable Plug on receiving a\nGet_Revision Message . See also Section 6.3.24, \"Get_Revision Message\" and Section 6.4.12, \"Revision Message\" .\nFigure 8.165 Give Revision State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.15.2.1",
    "title": "PE_Give_Revision State",
    "full_path": "8.3.3.15.2.1 PE_Give_Revision State",
    "page": 879,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Give_Revision state, from either the PE_SRC_Ready , PE_SNK_Ready or\nPE_CBL_Ready state, when a Get_Revision Message is received.\nOn entry to the PE_Give_Revision state the Policy Engine Shall request the Revision information from the Device\nPolicy Manager and then send a Revision Message based on this information.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state as\nappropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure\n8.203, \"Cable Ready State Diagram\" ) when:\n The Revision Message has been successfully sent.Get_Revision Message\nreceived\nRevision\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_CBL_ReadyPE_Give_Revision\nActions on entry:\nGet present Revision Information from Device Policy ManagerSend Revision Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 880 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.16 Enter_USB Message State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.16.1",
    "title": "DFP Enter_USB Message State Diagrams",
    "full_path": "8.3.3.16.1 DFP Enter_USB Message State Diagrams",
    "page": 880,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.166, \"DFP Enter_USB Message State Diagram\" shows the state diagram for an Enter_USB Message sent by\na DFP .\nFigure 8.166 DFP Enter_USB Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.16.1.1",
    "title": "PE_DEU_Send_Enter_USB State",
    "full_path": "8.3.3.16.1.1 PE_DEU_Send_Enter_USB State",
    "page": 880,
    "level": 6,
    "parent_id": "8.3.3.16.1",
    "tags": [],
    "content": "The PE_DEU_Send_Enter_USB State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when\nrequested by the Device Policy Manager and the Port is operating as a DFP .\nOn entry to the PE_DEU_Send_Enter_USB State the Policy Engine Shall request the Protocol Layer to send an\nEnter_USB Message and then initialize and run the SenderResponseTimer .\nOn exit from the PE_DEU_Send_Enter_USB state the Policy Engine Shall inform the Device Policy Manager of the\noutcome: Accept Message received, Reject Message received, SenderResponseTimer timeout.\nThe Policy Engine Shall transition back to the PE_SRC_Ready or PE_SNK_Ready State depending on the Ports Power\nRole when:\n An Accept Message has been received or\n A Wait Message has been received or\n A Reject Message has been received\n There is a SenderResponseTimer timeout.PE_DEU_Send_Enter_USB\nActions on entry:\nSend Enter_USB MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = connectedEnter USB (USB Mode)\nrequest from DPM\nAccept Message Received |\nReject Message Received |\nWait Message Received |\nSenderResponseTimer timeout\nPE_SRC_Ready or\nPE_SNK_Ready (DFP)Actions on exit:\nInform Device Policy Manager of Accept, Wait, Reject or timeout.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8818.3.3.16.2 UFP or Cable Plug Enter_USB Message State Diagrams\nFigure 8.167, \"UFP Enter_USB Message State Diagram\" shows the state diagram for an Enter_USB Message received\nby a UFP or Cable Plug .\nFigure 8.167 UFP Enter_USB Message State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.16.2.1",
    "title": "PE_UEU_Enter_USB_Received State",
    "full_path": "8.3.3.16.2.1 PE_UEU_Enter_USB_Received State",
    "page": 881,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The PE_UEU_Enter_USB_Received state Shall be entered from the PE_SRC_Ready , PE_SNK_Ready or\nPE_CBL_Ready state as appropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State\nDiagram\" and Figure 8.203, \"Cable Ready State Diagram\" ) when an Enter_USB Message is received and the Port is\noperating as a UFP or is a Cable Plug .\nOn entry to the PE_UEU_Enter_USB_Received state the Policy Engine Shall inform the Device Policy Manager . The\nDevice Policy Manager responds with an indication of whether the Enter_USB Message is to be accepted or rejected.\nThe Policy Engine Shall send either an Accept Message , a Wait Message or a Reject Message as appropriate.\nThe Policy Engine Shall transition back to the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state as\nappropriate when:\n Either an Accept Message , a Wait Message or a Reject Message has been sent.\nPE_SRC_Ready (UFP),\nPE_SNK_Ready (UFP) or\nPE_CBL_ReadyPE_UEU_Enter_USB_Received\nActions on entry:\nInform Device Policy Manager of Enter_USB MessageSend Accept/Wait/Reject Message based on DPM response\nPower = Explicit Contract\nPD = connectedEnter_USB Message\nReceived\nAccept/Wait/Reject\nMessage sent\nPage 882 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.17 Security State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.17.1",
    "title": "Send Security Request State Diagram",
    "full_path": "8.3.3.17.1 Send Security Request State Diagram",
    "page": 882,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.168, \"Send security request State Diagram\" shows the state diagram for a Source or Sink on receiving a\nrequest from the Device Policy Manager to send a security request. See also Section 6.5.8, \"Security Messages\" .\nFigure 8.168 Send security request State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.17.1.1",
    "title": "PE_Send_Security_Request State",
    "full_path": "8.3.3.17.1.1 PE_Send_Security_Request State",
    "page": 882,
    "level": 6,
    "parent_id": "8.3.3.17.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Send_Security_Request state, from either the PE_SRC_Ready or\nPE_SNK_Ready state, due to a request to send a security request from the Device Policy Manager .\nOn entry to the PE_Send_Security_Request state the Policy Engine Shall send a Security_Request Message .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Security_Request Message has been sent.Send security request\nfrom Device Policy Manager\nSecurity_Request\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Send_Security_Request\nActions on entry:\nSend Security_Request Message\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8838.3.3.17.2 Send Security Response State Diagram\nFigure 8.169, \"Send security response State Diagram\" shows the state diagram for a Source , Sink or Cable Plug on\nreceiving a Security_Request Message . See also Section 6.5.8, \"Security Messages\" .\nFigure 8.169 Send security response State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.17.2.1",
    "title": "PE_Send_Security_Response State",
    "full_path": "8.3.3.17.2.1 PE_Send_Security_Response State",
    "page": 883,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Send_Security_Response state, from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state, when a Security_Request Message is received.\nOn entry to the PE_Send_Security_Response state the Policy Engine Shall request the appropriate response from\nthe Device Policy Manager and then send a Security_Response Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state as\nappropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure\n8.203, \"Cable Ready State Diagram\" ) when:\n The Security_Response Message has been successfully sent.Security_Request Message\nreceived\nSecurity_Response\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_CBL_ReadyPE_Send_Security_Response\nActions on entry:\nGet present Security response from Device Policy ManagerSend Security_Response Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nPage 884 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.17.3 Security Response Received State Diagram\nFigure 8.170, \"Security response received State Diagram\" shows the state diagram for a Source or Sink on receiving\na Security_Response Message . See also Section 6.5.8, \"Security Messages\" .\nFigure 8.170 Security response received State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.17.3.1",
    "title": "PE_Security_Response_Received State",
    "full_path": "8.3.3.17.3.1 PE_Security_Response_Received State",
    "page": 884,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Security_Response_Received state, from either the PE_SRC_Ready or\nPE_SNK_Ready when a Security_Response Message is received.\nOn entry to the PE_Security_Response_Received state the Policy Engine Shall inform the Device Policy Manager of\nthe details of the security response.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure 8.203, \"Cable Ready\nState Diagram\" ) when:\n The Device Policy Manager has been informed.Security_Response Message\nreceived\nDPM informed\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Security_Response_Received\nActions on entry:\nInform Device Policy Manager of the security response details.\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8858.3.3.18 Firmware Update State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.18.1",
    "title": "Send Firmware Update Request State Diagram",
    "full_path": "8.3.3.18.1 Send Firmware Update Request State Diagram",
    "page": 885,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.171, \"Send firmware update request State Diagram\" shows the state diagram for a Source or Sink on\nreceiving a request from the Device Policy Manager to send a firmware update request. See also Section 6.5.9,\n\"Firmware Update Messages\" .\nFigure 8.171 Send firmware update request State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.18.1.1",
    "title": "PE_Send_Firmware_Update_Request State",
    "full_path": "8.3.3.18.1.1 PE_Send_Firmware_Update_Request State",
    "page": 885,
    "level": 6,
    "parent_id": "8.3.3.18.1",
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Send_Firmware_Update_Request state, from either the\nPE_SRC_Ready or PE_SNK_Ready state, due to a request to send a firmware update request from the Device Policy\nManager .\nOn entry to the PE_Send_Firmware_Update_Request state the Policy Engine Shall send a\nFirmware_Update_Request Message .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Firmware_Update_Request Message has been sent.Send firmware update request\nfrom Device Policy Manager\nFirmware_Update_Request\nMessage sent\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Send_Firmware_Update_Request\nActions on entry:\nSend Firmware_Update_Request Message\nPower = Explicit Contract\nPD = Connected\nPage 886 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.18.2 Send Firmware Update Response State Diagram\nFigure 8.172, \"Send firmware update response State Diagram\" shows the state diagram for a Source , Sink or Cable\nPlug on receiving a Firmware_Update_Request Message . See also Section 6.5.9, \"Firmware Update Messages\" .\nFigure 8.172 Send firmware update response State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.18.2.1",
    "title": "PE_Send_Firmware_Update_Response State",
    "full_path": "8.3.3.18.2.1 PE_Send_Firmware_Update_Response State",
    "page": 886,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Send_Firmware_Update_Response state, from either the\nPE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state, when a Firmware_Update_Request Message is received.\nOn entry to the PE_Send_Firmware_Update_Response state the Policy Engine Shall request the appropriate\nresponse from the Device Policy Manager and then send a Firmware_Update_Response Message based on this\nstatus.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state as\nappropriate (see Figure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure\n8.203, \"Cable Ready State Diagram\" ) when:\n The Firmware_Update_Response Message has been successfully sent.Firmware_Update_Request\nMessage received\nFirmware_Update_Response\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_CBL_ReadyPE_Send_Firmware_Update_Response\nActions on entry:\nGet present firmware update response from Device Policy ManagerSend Firmware_Update_Response Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8878.3.3.18.3 Firmware Update Response Received State Diagram\nFigure 8.173, \"Firmware update response received State Diagram\" shows the state diagram for a Source or Sink on\nreceiving a Firmware_Update_Response Message . See also Section 6.5.9, \"Firmware Update Messages\" .\nFigure 8.173 Firmware update response received State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.18.3.1",
    "title": "PE_Firmware_Update_Response_Received State",
    "full_path": "8.3.3.18.3.1 PE_Firmware_Update_Response_Received State",
    "page": 887,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_Firmware_Update_Response_Received state, from either the\nPE_SRC_Ready or PE_SNK_Ready when a Firmware_Update_Response Message is received.\nOn entry to the PE_Firmware_Update_Response_Received state the Policy Engine Shall inform the Device Policy\nManager of the details of the firmware update response.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see\nFigure 8.132, \"Source Port State Diagram\" , Figure 8.133, \"Sink Port State Diagram\" and Figure 8.203, \"Cable Ready\nState Diagram\" ) when:\n The Device Policy Manager has been informed.Firmware_Update_Response\nMessage received\nDPM informed\nPE_SRC_Ready or\nPE_SNK_ReadyPE_Firmware_Update_Response_Received\nActions on entry:\nInform Device Policy Manager of the firmware update response details.\nPower = Explicit Contract\nPD = Connected\nPage 888 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19 Dual-Role Port State Diagrams\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state\nmachines. In addition they Shall have the capability to perform a Power Role Swap from the PE_SRC_Ready or\nPE_SNK_Ready states and Shall return to USB Default Operation on a Hard Reset .\nThe State Diagrams in this section Shall apply to every [USB Type-C 2.4] DRP ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1",
    "title": "DFP to UFP Data Role Swap State Diagram",
    "full_path": "8.3.3.19.1 DFP to UFP Data Role Swap State Diagram",
    "page": 888,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.174, \"DFP to UFP Data Role Swap State Diagram\" shows the additional state diagram required to perform\na Data Role Swap from DFP to UFP operation and the changes that Shall be followed for error and Hard Reset\nhandling.\nFigure 8.174 DFP to UFP Data Role Swap State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.1",
    "title": "PE_SRC_Ready or PE_SNK_Ready State",
    "full_path": "8.3.3.19.1.1 PE_SRC_Ready or PE_SNK_Ready State",
    "page": 888,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "The Data Role Swap process Shall start only from either the PE_SRC_Ready or PE_SNK_Ready state where power\nis stable.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Evaluate_Swap state when:\n A DR_Swap Message is received and\nPE_SRC_Ready or\nPE_SNK_Ready\n(DFP)\nPE_DRS_DFP_UFP_Evaluate_Swap\nActions on entry:\nGet evaluation of Data Role Swap request from Device Policy Manager\nPE_DRS_DFP_UFP_\nChange_to_UFP\nActions on entry:Request Device Policy Manager to change port to UFPData Role Swap required\n(indication from\nDevice Policy Manager)\nPE_DRS_DFP_UFP_\nSend_Swap\nActions on entry:Send Swap DR messageInitialize and run SenderResponseTimerReject message received |\nWait message received |\nSenderResponseTimer\ntimeout\nPE_DRS_DFP_UFP_\nAccept_Swap\nActions on entry:Send Accept MessageAccept receivedPE_DRS_DFP_UFP_\nReject_Swap\nActions on entry:Send Reject or Wait Message as appropriate\nPower = Explicit Contract\nPD = ConnectedMessage sent\nDR_Swap message received &\nnot in Modal Operation\nData Role Swap okData Role Swap not ok |\nFurther evaluation\nrequired\nAccept message\nsent\nPort changed to UFP\nPE_SRC_Ready or\nPE_SNK_Ready\n(UFP)Power = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPE_SRC_Hard_Reset or\nPE_SNK_Hard_ResetDR_Swap message received &\nin Modal Operation\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 889 There are no Active Mode s (not in Modal Operation ).\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset states when:\n A DR_Swap Message is received and\n There are one or more Active Mode s (Modal Operation ).\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Send_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is required."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.2",
    "title": "PE_DRS_DFP_UFP_Evaluate_Swap State",
    "full_path": "8.3.3.19.1.2 PE_DRS_DFP_UFP_Evaluate_Swap State",
    "page": 889,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "On entry to the PE_DRS_DFP_UFP_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager\nwhether a Data Role Swap can be made.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Accept_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is OK.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Reject_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is not OK.\n Or further evaluation of the Data Role Swap request is needed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.3",
    "title": "PE_DRS_DFP_UFP_Accept_Swap State",
    "full_path": "8.3.3.19.1.3 PE_DRS_DFP_UFP_Accept_Swap State",
    "page": 889,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "On entry to the PE_DRS_DFP_UFP_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an\nAccept Message .\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Change_to_UFP state when:\n The Accept Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.4",
    "title": "PE_DRS_DFP_UFP_Change_to_UFP State",
    "full_path": "8.3.3.19.1.4 PE_DRS_DFP_UFP_Change_to_UFP State",
    "page": 889,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "On entry to the PE_DRS_DFP_UFP_Change_to_UFP state the Policy Engine Shall request the Device Policy Manager\nto change the Port from a DFP to a UFP .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Device Policy Manager indicates that the Port has been changed to a UFP ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.5",
    "title": "PE_DRS_DFP_UFP_Send_Swap State",
    "full_path": "8.3.3.19.1.5 PE_DRS_DFP_UFP_Send_Swap State",
    "page": 889,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "On entry to the PE_DRS_DFP_UFP_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a\nDR_Swap Message and Shall start the SenderResponseTimer .\nOn exit from the PE_DRS_DFP_UFP_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer .\nThe Policy Engine Shall continue as a DFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state\nwhen:\n A Reject Message is received.\n Or a Wait Message is received.\n Or the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Change_to_UFP state when:\n An Accept Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.1.6",
    "title": "PE_DRS_DFP_UFP_Reject_Swap State",
    "full_path": "8.3.3.19.1.6 PE_DRS_DFP_UFP_Reject_Swap State",
    "page": 889,
    "level": 6,
    "parent_id": "8.3.3.19.1",
    "tags": [],
    "content": "On entry to the PE_DRS_DFP_UFP_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\nPage 890 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 A Reject Message if the device is unable to perform a Data Role Swap at this time.\n A Wait Message if further evaluation of the Data Role Swap request is required.\nNote: In this case it is expected that one of the Port Partner s will send a DR_Swap Message at a later time (see\nSection 6.3.12.3, \"Wait in response to a DR_Swap Message\" ).\nThe Policy Engine Shall continue as a DFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state\nwhen:\n The Reject or Wait Message has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8918.3.3.19.2 UFP to DFP Data Role Swap State Diagram\nFigure 8.175, \"UFP to DFP Data Role Swap State Diagram\" shows the additional state diagram required to perform\na Data Role Swap from DRP UFP to DFP operation and the changes that Shall be followed for error and Hard Reset\nhandling.\nFigure 8.175 UFP to DFP Data Role Swap State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.1",
    "title": "PE_SRC_Ready or PE_SNK_Ready State",
    "full_path": "8.3.3.19.2.1 PE_SRC_Ready or PE_SNK_Ready State",
    "page": 891,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Data Role Swap process Shall start only from the either the PE_SRC_Ready or PE_SNK_Ready state where\npower is stable.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Evaluate_Swap state when:\n A DR_Swap Message is received and\n There are no Active Mode s (not in Modal Operation ).\nPE_SRC_Ready or\nPE_SNK_Ready\n(UFP)\nPE_DRS_UFP_DFP_Evaluate_Swap\nActions on entry:\nGet evaluation of Data Role Swap request from Device Policy Manager\nPE_DRS_UFP_DFP_\nChange_to_DFP\nActions on entry:Request Device Policy Manager to change port to DFPData Role Swap required\n(indication from\nDevice Policy Manager)\nPE_DRS_UFP_DFP_\nSend_Swap\nActions on entry:Send Swap DR MessageInitialize and run SenderResponseTimerReject Message received |\nWait Message received |\nSenderResponseTimer\ntimeout\nPE_DRS_UFP_DFP_\nAccept_Swap\nActions on entry:Send Accept MessageAccept receivedPE_DRS_UFP_DFP_\nReject_Swap\nActions on entry:Send Reject or Wait Message as appropriate\nPower = Explicit Contract\nPD = ConnectedMessage sentDR_Swap Message received &\nnot in Modal Operation\nData Role Swap okData Role Swap not ok |\nFurther evaluation\nrequired\nAccept Message\nsent\nPort changed to DFP\nPE_SRC_Ready or\nPE_SNK_Ready\n(DFP)Power = Explicit Contract\nPD = Connected Power = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPE_SRC_Hard_Reset or\nPE_SNK_Hard_ResetDR_Swap Message received &\nin Modal Operation\nPage 892 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset states when:\n A DR_Swap Message is received and\n There are one or more Active Mode s (Modal Operation ).\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Send_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is required."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.2",
    "title": "PE_DRS_UFP_DFP_Evaluate_Swap State",
    "full_path": "8.3.3.19.2.2 PE_DRS_UFP_DFP_Evaluate_Swap State",
    "page": 892,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_DRS_UFP_DFP_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager\nwhether a Data Role Swap can be made.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Accept_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is OK.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Reject_Swap state when:\n The Device Policy Manager indicates that a Data Role Swap is not OK.\n Or further evaluation of the Data Role Swap request is needed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.3",
    "title": "PE_DRS_UFP_DFP_Accept_Swap State",
    "full_path": "8.3.3.19.2.3 PE_DRS_UFP_DFP_Accept_Swap State",
    "page": 892,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_DRS_UFP_DFP_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an\nAccept Message .\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Change_to_DFP state when:\n The Accept Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.4",
    "title": "PE_DRS_UFP_DFP_Change_to_DFP State",
    "full_path": "8.3.3.19.2.4 PE_DRS_UFP_DFP_Change_to_DFP State",
    "page": 892,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_DRS_UFP_DFP_Change_to_DFP state the Policy Engine Shall request the Device Policy Manager\nto change the Port from a UFP to a DFP .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Device Policy Manager indicates that the Port has been changed to a DFP ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.5",
    "title": "PE_DRS_UFP_DFP_Send_Swap State",
    "full_path": "8.3.3.19.2.5 PE_DRS_UFP_DFP_Send_Swap State",
    "page": 892,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_DRS_UFP_DFP_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a\nDR_Swap Message and Shall start the SenderResponseTimer .\nOn exit from the PE_DRS_UFP_DFP_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer .\nThe Policy Engine Shall continue as a UFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state\nwhen:\n A Reject Message is received.\n Or a Wait Message is received.\n Or the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Change_to_DFP state when:\n An Accept Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.2.6",
    "title": "PE_DRS_UFP_DFP_Reject_Swap State",
    "full_path": "8.3.3.19.2.6 PE_DRS_UFP_DFP_Reject_Swap State",
    "page": 892,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_DRS_UFP_DFP_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n A Reject Message if the device is unable to perform a Data Role Swap at this time.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 893 A Wait Message if further evaluation of the Data Role Swap request is required.\nNote: In this case it is expected that one of the Port Partner s will send a DR_Swap Message at a later time (see\nSection 6.3.12.3, \"Wait in response to a DR_Swap Message\" ).\nThe Policy Engine Shall continue as a UFP and Shall transition to the either the PE_SRC_Ready or PE_SNK_Ready\nstate when:\n The Reject or Wait Message has been sent.\nPage 894 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.3 Policy Engine in Source to Sink Power Role Swap State Diagram\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state\nmachines. In addition, they Shall have the capability to do a Power Role Swap from the PE_SRC_Ready state and\nShall return to USB Default Operation on a Hard Reset .\nFigure 8.176, \"Dual-Role Port in Source to Sink Power Role Swap State Diagram\" shows the additional state diagram\nrequired to perform a Power Role Swap from Source to Sink Power Role s and the changes that Shall be followed for\nerror handling.\nFigure 8.176 Dual-Role Port in Source to Sink Power Role Swap State Diagram\nPE_SRC_Ready\nPE_PRS_SRC_SNK_\nEvaluate_Swap\nActions on entry:\nGet evaluation of swap request from Device Policy Manager\nPower = Explicit Contract\nPD = Connected\nPE_PRS_SRC_SNK_\nTransition_to_off\nActions on entry:Tell Device Policy Manager to turn off power supply\nPower = Transition to stop sourcing\nPD = Connected\nPE_PRS_SRC_SNK_\nWait_Source_on\nActions on entry:Send PS_RDY MessageInitialize and run PSSourceOnTimer\nPower = Source off\nPD = ConnectedPower Role Swap required\n(indication from\nDevice Policy Manager)\nPE_PRS_SRC_SNK_\nSend_Swap\nActions on entry:Send PR_Swap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedReject Message received |\nWait Message received |\nSenderResponseTimer\ntimeout\nPE_PRS_SRC_SNK_\nAccept_Swap\nActions on entry:Send Accept Message\nPower = Explicit Contract\nPD = ConnectedAccept receivedPE_PRS_SRC_SNK_\nReject_PR_Swap\nActions on entry:Send Reject or Wait Message as appropriate\nPower = Explicit Contract\nPD = ConnectedMessage sent\nPR_Swap Message received\nPower Role Swap okPower Role Swap not ok |\nFurther evaluation\nrequired\nAccept Message\nsent\nPS_RDY Message\nreceived\nPE_SNK_StartupPE_PRS_SRC_SNK_\nAssert_Rd\nActions on entry:\nRequest DPM to assert R d\nPower = Source off\nPD = ConnectedSource turned off\nRdasserted\nErrorRecoveryPSSourceOnTimer Timeout |\nPS_RDY Message not sent after retries (no GoodCRC received)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8958.3.3.19.3.1 PE_SRC_Ready State\nThe Power Role Swap process Shall start only from the PE_SRC_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Evaluate_Swap state when:\n A PR_Swap Message is received.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Send_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is required."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.2",
    "title": "PE_PRS_SRC_SNK_Evaluate_Swap State",
    "full_path": "8.3.3.19.3.2 PE_PRS_SRC_SNK_Evaluate_Swap State",
    "page": 895,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager\nwhether a Power Role Swap can be made.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Accept_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is OK.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Reject_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is not OK.\n Or further evaluation of the Power Role Swap request is needed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.3",
    "title": "PE_PRS_SRC_SNK_Accept_Swap State",
    "full_path": "8.3.3.19.3.3 PE_PRS_SRC_SNK_Accept_Swap State",
    "page": 895,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an\nAccept Message .\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Transition_to_off state when:\n The Accept Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.4",
    "title": "PE_PRS_SRC_SNK_Transition_to_off State",
    "full_path": "8.3.3.19.3.4 PE_PRS_SRC_SNK_Transition_to_off State",
    "page": 895,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Transition_to_off state the Policy Engine Shall request the Device Policy Manager\nto turn off the Source .\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Assert_Rd state when:\n The Device Policy Manager indicates that the Source has been turned off."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.5",
    "title": "PE_PRS_SRC_SNK_Assert_Rd State",
    "full_path": "8.3.3.19.3.5 PE_PRS_SRC_SNK_Assert_Rd State",
    "page": 895,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Assert_Rd state the Policy Engine Shall request the Device Policy Manager to\nchange the resistor asserted on the CC wire from Rp to Rd.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Wait_Source_on state when:\n The Device Policy Manager indicates that Rd is asserted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.6",
    "title": "PE_PRS_SRC_SNK_Wait_Source_on State",
    "full_path": "8.3.3.19.3.6 PE_PRS_SRC_SNK_Wait_Source_on State",
    "page": 895,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Wait_Source_on state the Policy Engine Shall request the Protocol Layer to send\na PS_RDY Message and Shall start the PSSourceOnTimer .\nOn exit from the Source off state the Policy Engine Shall stop the PSSourceOnTimer .\nThe Policy Engine Shall transition to the PE_SNK_Startup when:\n A PS_RDY Message is received indicating that the remote Source is now supplying power.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\nPage 896 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The PSSourceOnTimer times out or\n The PS_RDY Message is not sent after retries (a GoodCRC Message has not been received).\nNote: A Soft Reset Shall Not be initiated in this case."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.7",
    "title": "PE_PRS_SRC_SNK_Send_Swap State",
    "full_path": "8.3.3.19.3.7 PE_PRS_SRC_SNK_Send_Swap State",
    "page": 896,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a\nPR_Swap Message and Shall start the SenderResponseTimer .\nOn exit from the PE_PRS_SRC_SNK_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n A Reject Message is received.\n Or a Wait Message is received.\n Or the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Transition_to_off state when:\n An Accept Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.3.8",
    "title": "PE_PRS_SRC_SNK_Reject_Swap State",
    "full_path": "8.3.3.19.3.8 PE_PRS_SRC_SNK_Reject_Swap State",
    "page": 896,
    "level": 6,
    "parent_id": "8.3.3.19.3",
    "tags": [],
    "content": "On entry to the PE_PRS_SRC_SNK_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n A Reject Message if the device is unable to perform a Power Role Swap at this time.\n A Wait Message if further evaluation of the Power Role Swap request is required.\nNote: In this case it is expected that one of the Port Partner s will send a PR_Swap Message at a later time (see\nSection 6.3.12.2, \"Wait in response to a PR_Swap Message\" ).\nThe Policy Engine Shall transition to the PE_SRC_Ready when:\n The Reject or Wait Message has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 8978.3.3.19.4 Policy Engine in Sink to Source Power Role Swap State Diagram\nDual-Role Ports that combine Sink and Source functionality Shall comprise Sink and Source Policy Engine state\nmachines. In addition, they Shall have the capability to do a Power Role Swap from the PE_SNK_Ready state and\nShall return to USB Default Operation on a Hard Reset .\nFigure 8.177, \"Dual-role Port in Sink to Source Power Role Swap State Diagram\" shows the additional state diagram\nrequired to perform a Power Role Swap from Sink to Source Power Role s and the changes that Shall be followed for\nerror handling.\nPage 898 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.177 Dual-role Port in Sink to Source Power Role Swap State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.1",
    "title": "PE_SNK_Ready State",
    "full_path": "8.3.3.19.4.1 PE_SNK_Ready State",
    "page": 898,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "The Power Role Swap process Shall start only from the PE_SNK_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Evaluate_Swap state when:\nPE_SNK_Ready\nPE_PRS_SNK_SRC_\nEvaluate_Swap\nActions on entry:\nGet evaluation of swap request from Device Policy Manager\nPower = Explicit Contract\nPD = Connected\nPE_PRS_SNK_SRC_\nTransition_to_off\nActions on entry:Initialize and run PSSourceOffTimerTell Device Policy Manager to turn off Power Sink.\nPower = Transition to stop sinking\nPD = ConnectedPower Role Swap required\n(indication from\nDevice Policy Manager)\nPE_PRS_SNK_SRC_\nSend_Swap\nActions on entry:Send PR_Swap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedReject Message received |\nWait Message received |\nSenderResponseTimer\ntimeout\nPE_PRS_SNK_SRC_Accept_Swap\nActions on entry:Send Accept MessageDisable Fast Role Swap Receiver if enabled\nPower = Explicit Contract\nPD = ConnectedAccept Message\nreceivedPE_PRS_SNK_SRC_\nReject_Swap\nActions on entry:Send Reject or Wait Message as appropriate\nPower = Explicit Contract\nPD = ConnectedPR_Swap Message received\nPower Role Swap okPower Role Swap not ok |\nFurther evaluation\nrequired\nAccept Message sent\nPE_PRS_SNK_SRC_\nSource_on\nActions on entry:Tell Device Policy Manager to turn on Source\nPower = Transition to source on\nPD = Connected\nVBUS is at vSafe5VActions on exit:Send PS_RDY Message\nPE_SRC_StartupMessage sent\nPE_PRS_SNK_SRC_\nAssert_Rp\nActions on entry:\nRequest DPM to assert R p\nPower = Source off\nPD = ConnectedPS_RDY Message received\nRpasserted\nErrorRecovery\nPS_RDY Message not sent\nafter retries (no GoodCRC received)PSSourceOffTimer timeout\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 899 A PR_Swap Message is received.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Send_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is required."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.2",
    "title": "PE_PRS_SNK_SRC_Evaluate_Swap State",
    "full_path": "8.3.3.19.4.2 PE_PRS_SNK_SRC_Evaluate_Swap State",
    "page": 899,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Send_Swap state the Policy Engine Shall ask the Device Policy Manager whether\na Power Role Swap can be made.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Accept_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is OK.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Reject_Swap state when:\n The Device Policy Manager indicates that a Power Role Swap is not OK."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.3",
    "title": "PE_PRS_SNK_SRC_Accept_Swap State",
    "full_path": "8.3.3.19.4.3 PE_PRS_SNK_SRC_Accept_Swap State",
    "page": 899,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an\nAccept Message and Shall disable the Fast Role Swap receiver if this is enabled.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Transition_to_off state when:\n The Accept Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.4",
    "title": "PE_PRS_SNK_SRC_Transition_to_off State",
    "full_path": "8.3.3.19.4.4 PE_PRS_SNK_SRC_Transition_to_off State",
    "page": 899,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Transition_to_off state the Policy Engine Shall initialize and run the\nPSSourceOffTimer and then request the Device Policy Manager to turn off the Sink .\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n The PSSourceOffTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Assert_Rp state when:\n A PS_RDY Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.5",
    "title": "PE_PRS_SNK_SRC_Assert_Rp State",
    "full_path": "8.3.3.19.4.5 PE_PRS_SNK_SRC_Assert_Rp State",
    "page": 899,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Assert_Rp state the Policy Engine Shall request the Device Policy Manager to\nchange the resistor asserted on the CC wire from Rd to Rp.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Source_on state when:\n The Device Policy Manager indicates that Rd is asserted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.6",
    "title": "PE_PRS_SNK_SRC_Source_on State",
    "full_path": "8.3.3.19.4.6 PE_PRS_SNK_SRC_Source_on State",
    "page": 899,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Source_on state the Policy Engine Shall request the Device Policy Manager to turn\non the Source .\nOn exit from the PE_PRS_SNK_SRC_Source_on state the Policy Engine Shall send a PS_RDY Message .\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n The Source Port VBUS is at vSafe5V .\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n The PS_RDY Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset\nShall Not be initiated in this case.\nPage 900 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.4.7 PE_PRS_SNK_SRC_Send_Swap State\nOn entry to the PE_PRS_SNK_SRC_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a\nPR_Swap Message and Shall initialize and run the SenderResponseTimer .\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n A Reject Message is received.\n Or a Wait Message is received.\n Or the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Transition_to_off state when:\n An Accept Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.4.8",
    "title": "PE_PRS_SNK_SRC_Reject_Swap State",
    "full_path": "8.3.3.19.4.8 PE_PRS_SNK_SRC_Reject_Swap State",
    "page": 900,
    "level": 6,
    "parent_id": "8.3.3.19.4",
    "tags": [],
    "content": "On entry to the PE_PRS_SNK_SRC_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n A Reject Message if the device is unable to perform a Power Role Swap at this time.\n A Wait Message if further evaluation of the Power Role Swap request is required.\nNote: In this case it is expected that one of the Port Partner s will send a PR_Swap Message at a later time (see\nSection 6.3.12.2, \"Wait in response to a PR_Swap Message\" ).\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n The Reject or Wait Message has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9018.3.3.19.5 Policy Engine in Source to Sink Fast Role Swap State Diagram\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state\nmachines. In addition, they Should have the capability to do a Fast Role Swap from the PE_SRC_Ready state and\nShall return to USB Default Operation on a Hard Reset .\nFigure 8.178, \"Dual-Role Port in Source to Sink Fast Role Swap State Diagram\" shows the additional state diagram\nrequired to perform a Fast Role Swap from Source to Sink Power Role s and the changes that Shall be followed for\nerror handling.\nPage 902 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.178 Dual-Role Port in Source to Sink Fast Role Swap State Diagram\nPE_SRC_Ready\nPE_FRS_SRC_SNK_\nEvaluate_Swap\nActions on entry:\nAsk Device Policy Manager if Fast Role Swap signaled on CC wire\nPower = Implicit Contract\nPD = Connected\nPE_FRS_SRC_SNK_\nTransition_to_off\nActions on entry:Wait for V\nBUS to reach vSafe5V\nPower = Implicit contract\nPD = Connected\nPE_FRS_SRC_SNK_\nWait_Source_on\nActions on entry:Send PS_RDY MessageInitialize and run PSSourceOnTimer\nPower = Implicit contract\nPD = ConnectedPE_FRS_SRC_SNK_\nAccept_Swap\nActions on entry:Send Accept Message\nPower = Implicit Contract\nPD = ConnectedFast Role Swap signaled\nAccept Message\nsent\nPS_RDY Message\nreceived\nPE_SNK_StartupPE_FRS_SRC_SNK_\nAssert_Rd\nActions on entry:\nRequest DPM to assert R d\nPower = Implicit contract\nPD = ConnectedVBUSat vSafe5V\nRdasserted\nErrorRecoveryPSSourceOnTimer Timeout |\nPS_RDY Message not sent after\nretries (no GoodCRC received)Accept Message not sent after\nretries (no GoodCRC received)\nPE_SRC_Hard_ResetFR_Swap Message received\nFast Role Swap not signaled\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9038.3.3.19.5.1 PE_SRC_Ready State\nThe Fast Role Swap process Shall start only from the PE_SRC_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Evaluate_Swap state when:\n An FR_Swap Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.5.2",
    "title": "PE_FRS_SRC_SNK_Evaluate_Swap State",
    "full_path": "8.3.3.19.5.2 PE_FRS_SRC_SNK_Evaluate_Swap State",
    "page": 903,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SRC_SNK_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager\nwhether Fast Role Swap has been signaled on the CC wire.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Accept_Swap state when:\n The Device Policy Manager indicates that a Fast Role Swap has been signaled.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n The Device Policy Manager indicates that a Fast Role Swap is not being signaled."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.5.3",
    "title": "PE_FRS_SRC_SNK_Accept_Swap State",
    "full_path": "8.3.3.19.5.3 PE_FRS_SRC_SNK_Accept_Swap State",
    "page": 903,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SRC_SNK_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an\nAccept Message .\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Transition_to_off state when:\n The Accept Message has been sent.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n The Accept Message is not sent after retries (a GoodCRC Message has not been received).\nNote: A Soft Reset Shall Not be initiated in this case."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.5.4",
    "title": "PE_FRS_SRC_SNK_Transition_to_off State",
    "full_path": "8.3.3.19.5.4 PE_FRS_SRC_SNK_Transition_to_off State",
    "page": 903,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SRC_SNK_Transition_to_off state the Policy Engine Shall wait until VBUS has discharged to\nvSafe5V .\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Assert_Rd state when:\n The Device Policy Manager indicates that VBUS has discharged to vSafe5V ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.5.5",
    "title": "PE_FRS_SRC_SNK_Assert_Rd State",
    "full_path": "8.3.3.19.5.5 PE_FRS_SRC_SNK_Assert_Rd State",
    "page": 903,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SRC_SNK_Assert_Rd state the Policy Engine Shall request the Device Policy Manager to\nchange the resistor asserted on the CC wire from Rp to Rd.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Wait_Source_on state when:\n The Device Policy Manager indicates that Rd is asserted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.5.6",
    "title": "PE_FRS_SRC_SNK_Wait_Source_on State",
    "full_path": "8.3.3.19.5.6 PE_FRS_SRC_SNK_Wait_Source_on State",
    "page": 903,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SRC_SNK_Wait_Source_on state the Policy Engine Shall request the Protocol Layer to send\na PS_RDY Message and Shall start the PSSourceOnTimer .\nOn exit from the Source off state the Policy Engine Shall stop the PSSourceOnTimer .\nThe Policy Engine Shall transition to the PE_SNK_Startup when:\n A PS_RDY Message is received indicating that the New Source is now applying Rp.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\nPage 904 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The PSSourceOnTimer times out or\n The PS_RDY Message is not sent after retries (a GoodCRC Message has not been received).\nNote: A Soft Reset Shall Not be initiated in this case.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9058.3.3.19.6 Policy Engine in Sink to Source Fast Role Swap State Diagram\nDual-Role Ports that combine Sink and Source functionality Shall comprise Sink and Source Policy Engine state\nmachines. In addition, they Should have the capability to do a Fast Role Swap from the PE_SNK_Ready state and\nShall return to USB Default Operation on a Hard Reset .\nFigure 8.179, \"Dual-role Port in Sink to Source Fast Role Swap State Diagram\" shows the additional state diagram\nrequired to perform a Fast Role Swap from Sink to Source Power Role s and the changes that Shall be followed for\nerror handling.\nPage 906 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 8.179 Dual-role Port in Sink to Source Fast Role Swap State Diagram\nPE_FRS_SNK_SRC_\nTransition_to_off\nActions on entry:\nInitialize and run PSSourceOffTimer\nPower = Implicit Contract\nPD = ConnectedFast Swap signal detected on CC Wire\nPE_FRS_SNK_SRC_\nSend_Swap\nActions on entry:Send FR_Swap MessageInitialize and run SenderResponseTimer\nPower = Implicit Contract\nPD = Connected\nAccept Message\nreceived\nPE_FRS_SNK_SRC_\nSource_on\nActions on entry:Send PS_RDY Message\nPower = Transition to source on\nPD = Connected\nPS_RDY Message sent\nPE_SRC_StartupPE_FRS_SNK_SRC_\nAssert_Rp\nActions on entry:\nRequest DPM to assert R p\nPower = Implicit Contract\nPD = ConnectedPS_RDY Message received\nRpasserted\nErrorRecoveryPS_RDY Message not sent\nafter retries (no GoodCRC received)PSSourceOffTimer timeoutSenderResponseTimer timeout |\nFR_Swap Message not sent\nafter retries (no GoodCRC received)\nPE_FRS_SNK_SRC_Vbus_Applied\nActions on entry:\nRequest Device Policy Manager to notify when vSafe5v is being applied by the local power source.\nPower = Implicit Contract\nPD = Connected\nNew Source is applying vSafe5VPE_FRS_SNK_SRC_\nStart_AMS\nActions on entry:Notify the Protocol Layer that the first Message in the AMS will follow.\nPower = Implicit Contract\nPD = Connected\nProtocol Layer notified\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9078.3.3.19.6.1 PE_FRS_SNK_SRC_Start_AMS State\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Start_AMS state from any other state provided there is\nan Explicit Contract in place when:\n The Sink Capabilities received from the Initial Source by the Policy Engine has at least one of the Fast\nRole Swap bits set.\n The system has sufficient reserve power to provide the requested current to the Initial Source , as\nrequested in the Fast Role Swap bits in the Sink Capabilities , and is willing to dedicate it to the Port\n The Device Policy Manager indicates that a Fast Role Swap signal has been detected on the CC wire.\nOn entry to the PE_FRS_SNK_SRC_Start_AMS state the Policy Engine Shall notify the Protocol Layer that the first\nMessage in an AMS will follow.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Send_Swap state when:\n The Protocol Layer has been notified."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.6.2",
    "title": "PE_FRS_SNK_SRC_Send_Swap State",
    "full_path": "8.3.3.19.6.2 PE_FRS_SNK_SRC_Send_Swap State",
    "page": 907,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SNK_SRC_Send_Swap state the Policy Engine Shall request the Protocol Layer to send an\nFR_Swap Message and Shall initialize and run the SenderResponseTimer .\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Transition_to_off state when:\n An Accept Message is received.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n The SenderResponseTimer times out or\n The FR_Swap Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset\nShall Not be initiated in this case."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.6.3",
    "title": "PE_FRS_SNK_SRC_Transition_to_off State",
    "full_path": "8.3.3.19.6.3 PE_FRS_SNK_SRC_Transition_to_off State",
    "page": 907,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SNK_SRC_Transition_to_off state the Policy Engine Shall initialize and run the\nPSSourceOffTimer and then request the Device Policy Manager to turn off the Sink .\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n The PSSourceOffTimer times out.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_V BUS_Applied state when:\n A PS_RDY Message is received."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.6.4",
    "title": "PE_FRS_SNK_SRC_V BUS_Applied State",
    "full_path": "8.3.3.19.6.4 PE_FRS_SNK_SRC_V BUS_Applied State",
    "page": 907,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SNK_SRC_V BUS_Applied state the Policy Engine waits for a notification from the Device\nPolicy Manager that the local power source has applied vSafe5V to VBUS (see Section 5.8.6.3, \"Fast Role Swap\nDetection\" ).\nNote: This could have already been applied prior to entering this state or could be applied while waiting in this\nstate.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Assert_Rp state when:\n The Device Policy Manager indicates that vSafe5V is being applied."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.6.5",
    "title": "PE_FRS_SNK_SRC_Assert_Rp State",
    "full_path": "8.3.3.19.6.5 PE_FRS_SNK_SRC_Assert_Rp State",
    "page": 907,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SNK_SRC_Assert_Rp state the Policy Engine Shall request the Device Policy Manager to\nchange the resistor asserted on the CC wire from Rd to Rp.\nPage 908 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Policy Engine Shall transition to the PE_FRS_SNK_SRC_Source_on state when:\n The Device Policy Manager indicates that Rp is asserted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.6.6",
    "title": "PE_FRS_SNK_SRC_Source_on State",
    "full_path": "8.3.3.19.6.6 PE_FRS_SNK_SRC_Source_on State",
    "page": 908,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_FRS_SNK_SRC_Source_on state the Policy Engine Shall request the Device Policy Manager to turn\non the Source .\nOn exit from the PE_FRS_SNK_SRC_Source_on state the Policy Engine Shall send a PS_RDY Message .\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n The PS_RDY Message has been sent.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n The PS_RDY Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset\nShall Not be initiated in this case.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9098.3.3.19.7 Dual-Role (Source Port) Get Source Capabilities State Diagram\nFigure 8.180, \"Dual-Role (Source) Get Source Capabilities diagram\" shows the state diagram for a Dual-Role device,\npresently operating as a Source , on receiving a request from the Device Policy Manager to get the Port Partner 's\nSource Capabilities . See also Section , \"A Source Port Shall report its Capabilities in a series of 32-bit Power Data\nObject s (see Table 6.7, \"Power Data Object\") as part of a Source_Capabilities Message (see Figure 6.13, \"Example\nCapabilities Message with 2 Power Data Objects\"). Power Data Object s are used to convey a Source Port 's Capabilities\nto provide power including Dual-Role Power ports presently operating as a Sink .\".\nFigure 8.180 Dual-Role (Source) Get Source Capabilities diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.7.1",
    "title": "PE_DR_SRC_Get_Source_Cap State",
    "full_path": "8.3.3.19.7.1 PE_DR_SRC_Get_Source_Cap State",
    "page": 909,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Cap state, from the PE_SRC_Ready state, due to a\nrequest to get the remote Source Capabilities from the Device Policy Manager .\n On entry to the PE_DR_SRC_Get_Source_Cap state the Policy Engine Shall request the Protocol Layer to\nsend a get Source Capabilities Message in order to retrieve the Source Capabilities . The Policy Engine\nShall send:\n A Get_Source_Cap Message when the Device Policy Manager requests SPR capabilities or\n An EPR_Get_Source_Cap Message when the Device Policy Manager requests EPR Capabilities .\nThe Policy Engine Shall then start the SenderResponseTimer .\nOn exit from the PE_DR_SRC_Get_Source_Cap state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready State (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n In SPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received\nor\n In EPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is\nreceived or\n The SenderResponseTimer times out.get source capabilities request\nfrom Device Policy Manager\nSPR Souce Capabilities requested & Source_Capabilities Message received |\nEPR Souce Capabilities requested & EPR_Source_Capabilities Message received |\nSenderResponseTimer Timeout\nPE_SRC_ReadyPE_DR_SRC_Get_Source_Cap\nActions on entry:\nIf SPR Source Capabilities requested Send Get_Source_Cap Message1\nIf EPR Source Capabilities requested Send EPR_Get_Source_Cap Message1\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass source capabilities/outcome to Device Policy Manager\n1)Either SPR or EPR Source Capabilities May be requested, regardless of whether or not the Source is currently operating in SPR or EPR Mode.\nPage 910 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.8 Dual-Role (Source Port) Give Sink Capabilities State Diagram\nFigure 8.181, \"Dual-Role (Source) Give Sink Capabilities diagram\" shows the state diagram for a Dual-Role device,\npresently operating as a Source , on receiving a Get_Sink_Cap Message . See also Section , \"A Source Port Shall report\nits Capabilities in a series of 32-bit Power Data Object s (see Table 6.7, \"Power Data Object\") as part of a\nSource_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\"). Power\nData Object s are used to convey a Source Port 's Capabilities to provide power including Dual-Role Power ports\npresently operating as a Sink .\".\nFigure 8.181 Dual-Role (Source) Give Sink Capabilities diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.8.1",
    "title": "PE_DR_SRC_Give_Sink_Cap State",
    "full_path": "8.3.3.19.8.1 PE_DR_SRC_Give_Sink_Cap State",
    "page": 910,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SRC_Give_Sink_Cap state, from the PE_SRC_Ready state, when a\nGet_Sink_Cap Message or EPR_Get_Sink_Cap Message is received.\n On entry to the PE_DR_SRC_Give_Sink_Cap state the Policy Engine Shall request the Device Policy\nManager for the current system capabilities. The Policy Engine Shall then request the Protocol Layer to\nsend a Sink_Capabilities Message containing these capabilities. The Policy Engine Shall send:\n A Sink_Capabilities Message when a Get_Sink_Cap Message is received or\n An EPR_Sink_Capabilities Message when a EPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n The Sink_Capabilities Message has been successfully sent.Get_Sink_Cap_Extended Message\nreceived\nSink_Capabilities_Extended\nMessage sent\nPE_SRC_ReadyPE_DR_SRC_Give_Sink_Cap_Ext\nActions on entry:\nGet present extended sink capabilities from Device Policy ManagerSend Sink_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9118.3.3.19.9 Dual-Role (Sink Port) Get Sink Capabilities State Diagram\nFigure 8.182, \"Dual-Role (Sink) Get Sink Capabilities State Diagram\" shows the state diagram for a Dual-Role device,\npresently operating as a Sink , on receiving a request from the Device Policy Manager to get the Port Partner 's Sink\nCapabilities . See also Section , \"A Source Port Shall report its Capabilities in a series of 32-bit Power Data Object s (see\nTable 6.7, \"Power Data Object\") as part of a Source_Capabilities Message (see Figure 6.13, \"Example Capabilities\nMessage with 2 Power Data Objects\"). Power Data Object s are used to convey a Source Port 's Capabilities to provide\npower including Dual-Role Power ports presently operating as a Sink .\".\nFigure 8.182 Dual-Role (Sink) Get Sink Capabilities State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.9.1",
    "title": "PE_DR_SNK_Get_Sink_Cap State",
    "full_path": "8.3.3.19.9.1 PE_DR_SNK_Get_Sink_Cap State",
    "page": 911,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SNK_Get_Sink_Cap state, from the PE_SNK_Ready state, due to a\nrequest to get the remote Source Capabilities from the Device Policy Manager .\n On entry to the PE_DR_SNK_Get_Sink_Cap state the Policy Engine Shall request the Protocol Layer to\nsend a Get_Sink_Cap Message in order to retrieve the Sink Capabilities . The Policy Engine Shall send:\n A Get_Sink_Cap Message when the Device Policy Manager requests SPR capabilities or\n An EPR_Get_Sink_Cap Message when the Device Policy Manager requests EPR Capabilities .\nThe Policy Engine Shall then start the SenderResponseTimer .\nOn exit from the PE_SRC_Get_Sink_Cap state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (capabilities or response timeout). If Fast Role Swap is supported, request Device Policy Manager prepare\nor disable 5V source and configure the Fast Role Swap receiver based on the Fast Role Swap required USB Type-\nC Current bits in the received Sink Capabilities .\nThe Policy Engine Shall transition to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" ) when:\n SPR Sink Capabilities were requested and a Sink_Capabilities Message is received or\n EPR Sink Capabilities were requested and an EPR_Sink_Capabilities Message is received or\n The SenderResponseTimer times out.\nPE_SNK_ReadyPE_DR_SNK_Get_Sink_Cap\nActions on entry:\nIf SPR Mode capabilities requested send Get_Sink_Cap MessageIf EPR Mode capabilities requested send EPR_Get_Sink_Cap MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connectedget sink capabilities request\nfrom Device Policy Manager1\n(SPR Sink Capabilities requested\n& Sink_Capabilities Message) |\n(EPR Sink Capabilities requested\n& EPR_Sink_Capabilities Message) |\nSenderResponseTimer timeoutActions on exit:Pass sink capabilities/outcome to Device Policy ManagerRequest Device Policy Manager to configure Fast Role Swap if supported\n1)Either SPR or EPR Sink Capabilities May be requested, regardless of whether or not the Sink is currently operating in SPR or EPR Mode.\nPage 912 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.10 Dual-Role (Sink Port) Give Source Capabilities State Diagram\nFigure 8.182, \"Dual-Role (Sink) Get Sink Capabilities State Diagram\" shows the state diagram for a Dual-Role device,\npresently operating as a Sink , on receiving a Get_Source_Cap Message . See also Section , \"A Source Port Shall report\nits Capabilities in a series of 32-bit Power Data Object s (see Table 6.7, \"Power Data Object\") as part of a\nSource_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\"). Power\nData Object s are used to convey a Source Port 's Capabilities to provide power including Dual-Role Power ports\npresently operating as a Sink .\".\nFigure 8.183 Dual-Role (Sink) Give Source Capabilities State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.10.1",
    "title": "PE_DR_SNK_Give_Source_Cap State",
    "full_path": "8.3.3.19.10.1 PE_DR_SNK_Give_Source_Cap State",
    "page": 912,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Cap state, from the PE_SNK_Ready state, when\na Get_Source_Cap Message is received.\n On entry to the PE_DR_SNK_Give_Source_Cap State the Policy Engine Shall request the Device Policy\nManager for the current system capabilities. The Policy Engine Shall then request the Protocol Layer to\nsend a Source Capabilities Message containing these capabilities.\n The Policy Engine Shall send:\n A Source_Capabilities Message when a Get_Source_Cap Message is received or\n An EPR_Source_Capabilities Message when a EPR_Get_Source_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" ) when:\n The Source Capabilities Message has been successfully sent.(In EPR Mode & Get_Source_Cap Message) |\n(In SPR Mode & EPR_Get_Source_Cap Message)\nSource capabilities Message sent\nPE_SNK_ReadyPE_DR_SNK_Give_Source_Cap\nActions on entry:\nGet present Source capabilities from Device Policy ManagerSend Capabilities Message (based on Device Policy Manager response):\n•If Get_Source_Cap Message received send Source_Capabilities Message.\n•In EPR_Get_Source_Cap Message received send EPR_Source_Capabilities Message\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9138.3.3.19.11 Dual-Role (Source Port) Get Source Capabilities Extended State\nDiagram\nFigure 8.184, \"Dual-Role (Source) Get Source Capabilities Extended State Diagram\" shows the state diagram for a\nDual-Role device, presently operating as a Source , on receiving a request from the Device Policy Manager to get the\nPort Partner 's extended Source Capabilities . See also Section 6.5.1, \"Source_Capabilities_Extended Message\" .\nFigure 8.184 Dual-Role (Source) Get Source Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.11.1",
    "title": "PE_DR_SRC_Get_Source_Cap_Ext State",
    "full_path": "8.3.3.19.11.1 PE_DR_SRC_Get_Source_Cap_Ext State",
    "page": 913,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Cap_Ext state, from the PE_SRC_Ready state, due\nto a request to get the remote extended Source Capabilities from the Device Policy Manager .\nOn entry to the PE_DR_SRC_Get_Source_Cap_Ext state the Policy Engine Shall send a Get_Source_Cap_Extended\nMessage and initialize and run the SenderResponseTimer .\nOn exit from the PE_DR_SRC_Get_Source_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of\nthe outcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n A Source_Capabilities_Extended Message is received\n Or SenderResponseTimer times out.get extended source capabilities\nrequest\nfrom Device Policy Manager\nSource_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_ReadyPE_DR_SRC_Get_Source_Cap_Ext\nActions on entry:\nSend Get_Source_Cap_Extended MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass source extended capabilities/outcome to Device Policy Manager\nPage 914 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.12 Dual-Role (Sink Port) Give Source Capabilities Extended State\nDiagram\nFigure 8.185, \"Dual-Role (Sink) Give Source Capabilities Extended diagram\" shows the state diagram for a Dual-Role\ndevice, presently operating as a Sink , on receiving a Get_Source_Cap_Extended Message . See also Section 6.5.1,\n\"Source_Capabilities_Extended Message\" .\nFigure 8.185 Dual-Role (Sink) Give Source Capabilities Extended diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.12.1",
    "title": "PE_DR_SNK_Give_Source_Cap_Ext State",
    "full_path": "8.3.3.19.12.1 PE_DR_SNK_Give_Source_Cap_Ext State",
    "page": 914,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Cap_Ext state, from the PE_SNK_Ready state,\nwhen a Get_Source_Cap_Extended Message is received.\nOn entry to the PE_DR_SNK_Give_Source_Cap_Ext state the Policy Engine Shall request the present extended\nSource Capabilities from the Device Policy Manager and then send a Source_Capabilities_Extended Message based\non these capabilities.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n The Source_Capabilities_Extended Message has been successfully sent.Get_Source_Cap_Extended Message\nreceived\nSource_Capabilities_Extended\nMessage sent\nPE_SNK_ReadyPE_DR_SNK_Give_Source_Cap_Ext\nActions on entry:\nGet present extended source capabilities from Device Policy ManagerSend Source_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9158.3.3.19.13 Dual-Role (Sink Port) Get Sink Capabilities Extended State Dia -\ngram\nFigure 8.186, \"Dual-Role (Sink) Get Sink Capabilities Extended State Diagram\" shows the state diagram for a Dual-\nRole device, presently operating as a Sink , on receiving a request from the Device Policy Manager to get the Port\nPartner 's extended Sink Capabilities . See also Section 6.5.13, \"Sink_Capabilities_Extended Message\" .\nFigure 8.186 Dual-Role (Sink) Get Sink Capabilities Extended State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.13.1",
    "title": "PE_DR_SNK_Get_Sink_Cap_Ext State",
    "full_path": "8.3.3.19.13.1 PE_DR_SNK_Get_Sink_Cap_Ext State",
    "page": 915,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SNK_Get_Sink_Cap_Ext state, from the PE_SNK_Ready state, due to\na request to get the remote extended Source Capabilities from the Device Policy Manager .\nOn entry to the PE_DR_SNK_Get_Sink_Cap_Ext state the Policy Engine Shall send a Get_Sink_Cap_Extended\nMessage and initialize and run the SenderResponseTimer .\nOn exit from the PE_DR_SNK_Get_Sink_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of\nthe outcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n A Sink_Capabilities_Extended Message is received.\n Or SenderResponseTimer times out.get extended Sink capabilities\nrequest\nfrom Device Policy Manager\nSink_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_ReadyPE_DR_SNK_Get_Sink_Cap_Ext\nActions on entry:\nSend Get_Sink_Cap_Extended MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass Sink extended capabilities/outcome to Device Policy Manager\nPage 916 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.14 Dual-Role (Source Port) Give Sink Capabilities Extended State\nDiagram\nFigure 8.187, \"Dual-Role (Source) Give Sink Capabilities Extended diagram\" shows the state diagram for a Dual-Role\ndevice, presently operating as a Sink , on receiving a Get_Sink_Cap_Extended Message . See also Section 6.5.13,\n\"Sink_Capabilities_Extended Message\" .\nFigure 8.187 Dual-Role (Source) Give Sink Capabilities Extended diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.14.1",
    "title": "PE_DR_SRC_Give_Sink_Cap_Ext State",
    "full_path": "8.3.3.19.14.1 PE_DR_SRC_Give_Sink_Cap_Ext State",
    "page": 916,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SRC_Give_Sink_Cap_Ext state, from the PE_SRC_Ready state, when\na Get_Sink_Cap_Extended Message is received.\nOn entry to the PE_DR_SRC_Give_Sink_Cap_Ext state the Policy Engine Shall request the present extended Sink\nCapabilities from the Device Policy Manager and then send a Sink_Capabilities_Extended Message based on these\ncapabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State\nDiagram\" )when:\n The Sink_Capabilities_Extended Message has been successfully sent._Get_Sink_Cap Message |\nEPR_Get_Sink_Cap Message\nSink Capabilities\nMessage sent\nPE_SRC_ReadyPE_DR_SRC_Give_Sink_Cap\nActions on entry:\nGet present extended sink capabilities from Device Policy ManagerSend Sink_Capabilities_Extended Message (based on Device Policy Manager response):\n•\nIf Get_Sink_Cap Message received send Sink_Capabilities Message.\n•In EPR_Get_Sink Cap Message received send EPR_Sink_Capabilities Message\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9178.3.3.19.15 Dual-Role (Source Port) Get Source Information State Diagram\nFigure 8.188, \"Dual-Role (Source) Get Source Information State Diagram\" shows the state diagram for a Dual-Role\ndevice, presently operating as a Source , on receiving a request from the Device Policy Manager to get the Port\nPartner 's Source information. See also Section 6.3.23, \"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info\nMessage\" .\nFigure 8.188 Dual-Role (Source) Get Source Information State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.15.1",
    "title": "PE_DR_SRC_Get_Source_Info State",
    "full_path": "8.3.3.19.15.1 PE_DR_SRC_Get_Source_Info State",
    "page": 917,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Info state, from the PE_SRC_Ready state, due to a\nrequest to get the remote Source information from the Device Policy Manager .\nOn entry to the PE_DR_SRC_Get_Source_Info state the Policy Engine Shall send a Get_Source_Info Message and\ninitialize and run the SenderResponseTimer .\nOn exit from the PE_DR_SRC_Get_Source_Info state the Policy Engine Shall inform the Device Policy Manager of the\noutcome (information or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\" )\nwhen:\n A Source_Info Message is received.\n Or SenderResponseTimer times out.get source information\nrequest\nfrom Device Policy Manager\nSource_Info Message received |\nSenderResponseTimer\nTimeout\nPE_SRC_ReadyPE_DR_SRC_Get_Source_Info\nActions on entry:\nSend Get_Source_Info MessageInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedActions on exit:Pass source information/outcome to Device Policy Manager\nPage 918 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.19.16 Dual-Role (Sink Port) Give Source Information State Diagram\nFigure 8.189, \"Dual-Role (Source) Give Source Information diagram\" shows the state diagram for a Dual-Role device,\npresently operating as a Sink , on receiving a Get_Source_Info Message . See also Section 6.3.23, \"Get_Source_Info\nMessage\" and Section 6.4.11, \"Source_Info Message\" .\nFigure 8.189 Dual-Role (Source) Give Source Information diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.19.16.1",
    "title": "PE_DR_SNK_Give_Source_Info State",
    "full_path": "8.3.3.19.16.1 PE_DR_SNK_Give_Source_Info State",
    "page": 918,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Info state, from the PE_SNK_Ready state, when\na Get_Source_Info Message is received.\nOn entry to the PE_DR_SNK_Give_Source_Info state the Policy Engine Shall request the present Source information\nfrom the Device Policy Manager and then send a Source_Info Message based on this information.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\" )\nwhen:\n The Source_Info Message has been successfully sent.Get_Source_Info Message\nreceived\nSource_Info Message sent\nPE_SNK_ReadyPE_DR_SNK_Give_Source_Info\nActions on entry:\nGet present source information from Device Policy ManagerSend Source_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9198.3.3.20 V CONN Swap State Diagram\nThe State Diagram in this section Shall apply to Ports that supply VCONN . Figure 8.190, \"V CONN Swap State Diagram\"\nshows the state operation for a Port on sending or receiving a VCONN Swap request.\nFigure 8.190 V CONN Swap State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.1",
    "title": "PE_VCS_Send_Swap State",
    "full_path": "8.3.3.20.1 PE_VCS_Send_Swap State",
    "page": 919,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The PE_VCS_Send_Swap state is entered from either the PE_SRC_Ready or PE_SNK_Ready state when the Policy\nEngine receives a request from the Device Policy Manager to perform a VCONN Swap .\nOn entry to the PE_VCS_Send_Swap state the Policy Engine Shall send a VCONN _Swap Message and start the\nSenderResponseTimer .\nThe Policy Engine Shall transition to the PE_VCS_Wait_For_V CONN state when:\n An Accept Message is received and\n The Port is presently the VCONN Source .\nThe Policy Engine Shall transition to the PE_VCS_Turn_On_V CONN state when:\n An Accept Message is received and\n The Port is not presently the VCONN Source .\nPE_VCS_Evaluate_Swap\nActions on entry:\nGet evaluation of V CONN swap request\nfrom Device Policy Manager\nPower = Explicit Contract\nPD = Connected\nPE_VCS_Turn_On_VCONN\nActions on entry:Tell Device Policy Manager to turn on V\nCONN\nPE_VCS_Send_PS_Rdy\nActions on entry:Send PS_RDY MessagePE_VCS_Accept_Swap\nActions on entry:Send Accept Message\nPower = Explicit Contract\nPD = ConnectedPE_VCS_Reject_VCONN_Swap\nActions on entry:Send Reject or Wait Message as appropriate\nPower = Explicit Contract\nPD = ConnectedMessage sent\nVCONN_Swap Message received\nVCONN Swap ok(Not Presently V CONN SOURCE &\nVCONN Swap not ok) |\nFurther evaluation\nRequired\nAccept Message sent &\nNot presently VCONN Source1\nVCONN turned on\nPS_RDY Message\nsent\nVCONNOnTimer Timeout\nHard Reset:\nConsumer/Provider -> PE_SNK_Hard_Reset\nProvider/Consumer -> PE_SRC_Hard_ResetPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = ConnectedPE_VCS_Wait_for_V CONN\nActions on entry:Start V\nCONN OnTimer\nPower = Explicit Contract\nPD = ConnectedAccept Message sent &\nPresently VCONN Source1\nPE_VCS_Turn_Off_V CONN\nActions on entry:Tell Device Policy Manager to turn off V\nCONN\nPower = Explicit Contract\nPD = ConnectedPS_RDY Message\nreceived\nDevice Policy Manager InformedVCONN Swap required (indication from Device Policy Manager)\nPE_VCS_Send_Swap\nActions on entry:Send V\nCONN _Swap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = ConnectedReject Message received |\nWait Message received |\nSenderResponseTimer\ntimeout\nAccept Message received &\nPresently V CONN Source1\nAccept Message received &\nNot presently V CONN Source1\nPE_VCS_Force_V CONN2\nActions on entry:Tell Device Policy Manager to turn on V\nCONN\nPower = Explicit Contract\nPD = ConnectedNot_Supported Message received &\nNot presently V CONN Source1\nVCONN turned on\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Entry_ACKPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable\nPE_SNK_EPR_Mode_Entry_Wait_For_Response\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable\n1) A Port is presently the V CONN Source if it has the responsibility for supplying V CONN even if V CONN has been turned off.\n2)The PE_VCS_Force_V CONN state is Optional.\nPage 920 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable state when:\n A Reject Message is received or\n A Wait Message is received or\n The SenderResponseTimer times out.\nThe Policy Engine May transition to the PE_VCS_Force_V CONN state when:\n A Not_Supported Message is received and\n The Port is not presently the VCONN Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.2",
    "title": "PE_VCS_Evaluate_Swap State",
    "full_path": "8.3.3.20.2 PE_VCS_Evaluate_Swap State",
    "page": 920,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The PE_VCS_Evaluate_Swap state is entered from either the PE_SRC_Ready or PE_SNK_Ready state when the\nPolicy Engine receives a VCONN _Swap Message .\nOn entry to the PE_VCS_Evaluate_Swap state the Policy Engine Shall request the Device Policy Manager for an\nevaluation of the VCONN Swap request.\nThe Policy Engine Shall transition to the PE_VCS_Accept_Swap state when:\n The Device Policy Manager indicates that a VCONN Swap is OK.\nThe Policy Engine Shall transition to the PE_VCS_Reject_Swap state when:\n The Port is not presently the VCONN Source and the Device Policy Manager indicates that a VCONN Swap\nis not OK or\n The Device Policy Manager indicates that a VCONN Swap cannot be done at this time."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.3",
    "title": "PE_VCS_Accept_Swap State",
    "full_path": "8.3.3.20.3 PE_VCS_Accept_Swap State",
    "page": 920,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Accept_Swap state the Policy Engine Shall send an Accept Message .\nThe Policy Engine Shall transition to the PE_VCS_Wait_For_V CONN state when:\n The Accept Message has been sent and\n The Port's V CONN is on.\nThe Policy Engine Shall transition to the PE_VCS_Turn_On_V CONN state when:\n The Accept Message has been sent and\n The Port's V CONN is off."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.4",
    "title": "PE_VCS_Reject_Swap State",
    "full_path": "8.3.3.20.4 PE_VCS_Reject_Swap State",
    "page": 920,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n A Reject Message if the device is unable to perform a VCONN Swap at this time.\n A Wait Message if further evaluation of the VCONN Swap request is required.\nNote: In this case it is expected that the Port will send a VCONN _Swap Message at a later time.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable state when:\n The Reject or Wait Message has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9218.3.3.20.5 PE_VCS_Wait_for_V CONN State\nOn entry to the PE_VCS_Wait_For_V CONN state the Policy Engine Shall start the VCONN OnTimer .\nThe Policy Engine Shall transition to the PE_VCS_Turn_Off_V CONN state when:\n A PS_RDY Message is received.\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state when:\n The V CONN OnTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.6",
    "title": "PE_VCS_Turn_Off_V CONN State",
    "full_path": "8.3.3.20.6 PE_VCS_Turn_Off_V CONN State",
    "page": 921,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Turn_Off_V CONN state the Policy Engine Shall tell the Device Policy Manager to turn off\nVCONN .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable state when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.7",
    "title": "PE_VCS_Turn_On_V CONN State",
    "full_path": "8.3.3.20.7 PE_VCS_Turn_On_V CONN State",
    "page": 921,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Turn_On_V CONN state the Policy Engine Shall tell the Device Policy Manager to turn on\nVCONN .\nThe Policy Engine Shall transition to the PE_VCS_Send_Ps_Rdy state when:\n The Port's V CONN is on."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.8",
    "title": "PE_VCS_Send_PS_Rdy State",
    "full_path": "8.3.3.20.8 PE_VCS_Send_PS_Rdy State",
    "page": 921,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Send_Ps_Rdy state the Policy Engine Shall send a PS_RDY Message .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable state when:\n The PS_RDY Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.20.9",
    "title": "PE_VCS_Force_V CONN State",
    "full_path": "8.3.3.20.9 PE_VCS_Force_V CONN State",
    "page": 921,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_VCS_Force_V CONN state the Policy Engine Shall tell the Device Policy Manager to turn on VCONN .\nThe Policy Engine Shall transition back to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable state when:\n The Port's V CONN is on."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21",
    "title": "Initiator Structured VDM State Diagrams",
    "full_path": "8.3.3.21 Initiator Structured VDM State Diagrams",
    "page": 921,
    "level": 4,
    "parent_id": "8.3.3",
    "tags": [],
    "content": "The State Diagrams in this section Shall apply to all Initiator s.\nPage 922 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.21.1 Initiator Structured VDM Discover Identity State Diagram\nFigure 8.191, \"Initiator to Port VDM Discover Identity State Diagram\" shows the state diagram for an Initiator when\ndiscovering the identity of its Port Partner or Cable Plug .\nFigure 8.191 Initiator to Port VDM Discover Identity State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.1.1",
    "title": "PE_INIT_PORT_VDM_Identity_Request State",
    "full_path": "8.3.3.21.1.1 PE_INIT_PORT_VDM_Identity_Request State",
    "page": 922,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_INIT_PORT_VDM_Identity_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state when:\n The Device Policy Manager requests the discovery of the identity of the Port Partner or Cable Plug or\n The DiscoverIdentityTimer times out.\nThe Policy Engine transitions to the PE_INIT_PORT_VDM_Identity_Request state from the\nPE_SRC_EPR_Mode_Discover_Cable state when:\n The Cable Plug Discovery Process has been initiated.\nPE_SRC_Ready, PE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_CablePE_INIT_PORT_VDM_Identity_Request\nActions on entry:\nSend Discover Identity requestStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests identity discovery1|\nDiscoverIdentityTimer timeoutDiscover Identity ACK\nreceivedPE_INIT_PORT_VDM_Identity_ACKed\nActions on entry:Inform DPM of identity\nPower = Explicit Contract\nPD = ConnectedPE_INIT_PORT_VDM_Identity_NAKed\nActions on entry:Inform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover Identity NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informedDPM informed\nPE_SRC_Ready, PE_SNK_Ready or PE_SRC_EPR_Mode_Evaluate_Cable_EPR\n1)The DPM in an EPR Source Shall request the discovery of the identity of the Cable Plug at startup.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 923On entry to the PE_INIT_PORT_VDM_Identity_Request state the Policy Engine Shall send a Structured VDM\nDiscover Identity Command request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_ACKed state when:\n A Structured VDM Discover Identity ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_NAKed state when:\n A Structured VDM Discover Identity NAK or BUSY Command response is received or\n The VDMResponseTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.1.2",
    "title": "PE_INIT_PORT_VDM_Identity_ACKed State",
    "full_path": "8.3.3.21.1.2 PE_INIT_PORT_VDM_Identity_ACKed State",
    "page": 923,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_INIT_PORT_VDM_Identity_ACKed state the Policy Engine Shall inform the Device Policy\nManager of the Identity information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.1.3",
    "title": "PE_INIT_PORT_VDM_Identity_NAKed State",
    "full_path": "8.3.3.21.1.3 PE_INIT_PORT_VDM_Identity_NAKed State",
    "page": 923,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_INIT_PORT_VDM_Identity_NAKed state the Policy Engine Shall inform the Device Policy\nManager of the result ( NAK , BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n The Device Policy Manager has been informed.\nPage 924 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.21.2 Initiator Structured VDM Discover SVIDs State Diagram\nFigure 8.192, \"Initiator VDM Discover SVIDs State Diagram\" shows the state diagram for an Initiator when\ndiscovering SVID s of its Port Partner or Cable Plug .\nFigure 8.192 Initiator VDM Discover SVIDs State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.2.1",
    "title": "PE_INIT_VDM_SVIDs_Request State",
    "full_path": "8.3.3.21.2.1 PE_INIT_VDM_SVIDs_Request State",
    "page": 924,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_INIT_VDM_SVIDs_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state when:\n The Device Policy Manager requests the discovery of the SVID s of the Port Partner or a Cable Plug .\nOn entry to the PE_INIT_VDM_SVIDs_Request state the Policy Engine Shall send a Structured VDM Discover SVIDs\nCommand request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_VDM_SVIDs_ACKed state when:\n A Structured VDM Discover SVIDs ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_VDM_SVIDs_NAKed state when:\n A Structured VDM Discover SVIDs NAK or BUSY Command response is received or\n The VDMResponseTimer times out.\nPE_SRC_Ready or PE_SNK_ReadyPE_INIT_VDM_SVIDs_Request\nActions on entry:\nSend Discover SVIDs requestStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests\nSVIDs discoveryDiscover SVIDs ACK\nreceivedPE_INIT_VDM_SVIDs_ACKed\nActions on entry:Inform DPM of SVIDs\nPower = Explicit Contract\nPD = ConnectedPE_INIT_VDM_SVIDs_NAKed\nActions on entry:Inform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover SVIDs NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informedDPM informed\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9258.3.3.21.2.2 PE_INIT_VDM_SVIDs_ACKed State\nOn entry to the PE_INIT_VDM_SVIDs_ACKed state the Policy Engine Shall inform the Device Policy Manager of the\nSVID s information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.2.3",
    "title": "PE_INIT_VDM_SVIDs_NAKed State",
    "full_path": "8.3.3.21.2.3 PE_INIT_VDM_SVIDs_NAKed State",
    "page": 925,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_INIT_VDM_SVIDs_NAKed state the Policy Engine Shall inform the Device Policy Manager of the\nresult ( NAK , BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Device Policy Manager has been informed.\nPage 926 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.21.3 Initiator Structured VDM Discover Modes State Diagram\nFigure 8.193, \"Initiator VDM Discover Modes State Diagram\" shows the state diagram for an Initiator when\ndiscovering Modes of its Port Partner or Cable Plug .\nFigure 8.193 Initiator VDM Discover Modes State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.3.1",
    "title": "PE_INIT_VDM_Modes_Request State",
    "full_path": "8.3.3.21.3.1 PE_INIT_VDM_Modes_Request State",
    "page": 926,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_INIT_VDM_Modes_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state when:\n The Device Policy Manager requests the discovery of the Modes of the Port Partner or a Cable Plug .\nOn entry to the PE_INIT_VDM_Modes_Request state the Policy Engine Shall send a Structured VDM Discover Modes\nCommand request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_VDM_Modes_ACKed state when:\n A Structured VDM Discover Modes ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_VDM_Modes_NAKed state when:\n A Structured VDM Discover Modes NAK or BUSY Command response is received or\n The VDMResponseTimer times out.\nPE_SRC_Ready or PE_SNK_ReadyPE_INIT_VDM_Modes_Request\nActions on entry:\nSend Discover Modes requestStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests\nModes discoveryDiscover Modes ACK\nreceivedPE_INIT_VDM_Modes_ACKed\nActions on entry:Inform DPM of Modes\nPower = Explicit Contract\nPD = ConnectedPE_INIT_VDM_Modes_NAKed\nActions on entry:Inform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover Modes NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informedDPM informed\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9278.3.3.21.3.2 PE_INIT_VDM_Modes_ACKed State\nOn entry to the PE_INIT_VDM_Modes_ACKed state the Policy Engine Shall inform the Device Policy Manager of the\nModes information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.3.3",
    "title": "PE_INIT_VDM_Modes_NAKed State",
    "full_path": "8.3.3.21.3.3 PE_INIT_VDM_Modes_NAKed State",
    "page": 927,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_INIT_VDM_Modes_NAKed state the Policy Engine Shall inform the Device Policy Manager of the\nresult ( NAK , BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n The Device Policy Manager has been informed.\nPage 928 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.21.4 Initiator Structured VDM Attention State Diagram\nFigure 8.194, \"Initiator VDM Attention State Diagram\" shows the state diagram for an Initiator when sending an\nAttention Command request.\nFigure 8.194 Initiator VDM Attention State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.21.4.1",
    "title": "PE_INIT_VDM_Attention_Request State",
    "full_path": "8.3.3.21.4.1 PE_INIT_VDM_Attention_Request State",
    "page": 928,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_INIT_VDM_Attention_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state when:\n When the Device Policy Manager requests attention from its Port Partner .\nOn entry to the PE_INIT_VDM_Attention_Request state the Policy Engine Shall send an Attention Command\nrequest.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Attention Command request has been sent.\nPE_SRC_Ready or PE_SNK_Ready\nPE_INIT_VDM_Attention_Request\nActions on entry:\nSend Attention Command request\nPower = Explicit Contract\nPD = ConnectedAttention request\nfrom DPMAttention Command\nrequest sent\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9298.3.3.22 Responder Structured VDM State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.1",
    "title": "Responder Structured VDM Discover Identity State Diagram",
    "full_path": "8.3.3.22.1 Responder Structured VDM Discover Identity State Diagram",
    "page": 929,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.195, \"Responder Structured VDM Discover Identity State Diagram\" shows the state diagram for a Responder\nreceiving a Discover Identity Command request.\nFigure 8.195 Responder Structured VDM Discover Identity State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.1.1",
    "title": "PE_RESP_VDM_Get_Identity State",
    "full_path": "8.3.3.22.1.1 PE_RESP_VDM_Get_Identity State",
    "page": 929,
    "level": 6,
    "parent_id": "8.3.3.22.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_RESP_VDM_Get_Identity state from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state when:\n A Structured VDM Discover Identity Command request is received.\nOn entry to the PE_RESP_VDM_Get_Identity state the Responder Shall request identity information from the Device\nPolicy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_Identity state when:\n Identity information is received from the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_Identity_NAK state when:\n The Device Policy Manager indicates that the response to the Discover Identity Command request is\nNAK or BUSY ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.1.2",
    "title": "PE_RESP_VDM_Send_Identity State",
    "full_path": "8.3.3.22.1.2 PE_RESP_VDM_Send_Identity State",
    "page": 929,
    "level": 6,
    "parent_id": "8.3.3.22.1",
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Send_Identity state the Responder Shall send the Structured VDM Discover Identity\nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n The Structured VDM Discover Identity ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.1.3",
    "title": "PE_RESP_VDM_Get_Identity_NAK State",
    "full_path": "8.3.3.22.1.3 PE_RESP_VDM_Get_Identity_NAK State",
    "page": 929,
    "level": 6,
    "parent_id": "8.3.3.22.1",
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Get_Identity_NAK state the Policy Engine Shall send a Structured VDM Discover\nIdentity NAK or BUSY Command response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n The Structured VDM Discover Identity NAK or BUSY Command response has been sent.PE_RESP_VDM_Send_Identity\nActions on entry:\nSend Discover Identity ACK\nPower = Explicit Contract\nPD = Connected\nDiscover Identity\nrequestDiscover Identity ACK\nsentPE_RESP_VDM_Get_Identity\nActions on entry:Request Identity information from DPM\nPower = Explicit Contract\nPD = ConnectedIdentity information\nfrom DPMPE_RESP_VDM_Get_Identity_NAK\nActions on entry:Send Discover Identity NAK/BUSY Command response as requested\nPower = Explicit Contract\nPD = ConnectedDPM says\nNAK/BUSY\nDiscover Identity NAK/BUSY\nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\nPage 930 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.22.2 Responder Structured VDM Discover SVIDs State Diagram\nFigure 8.196, \"Responder Structured VDM Discover SVIDs State Diagram\" shows the state diagram for a Responder\nwhen receiving a Discover SVIDs Command .\nFigure 8.196 Responder Structured VDM Discover SVIDs State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.2.1",
    "title": "PE_RESP_VDM_Get_SVIDs State",
    "full_path": "8.3.3.22.2.1 PE_RESP_VDM_Get_SVIDs State",
    "page": 930,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_RESP_VDM_Get_SVIDs state from either the PE_SRC_Ready , PE_SNK_Ready\nor PE_CBL_Ready state when:\n A Structured VDM Discover SVIDs Command request is received.\nOn entry to the PE_RESP_VDM_Get_SVIDs state the Responder Shall request SVID s information from the Device\nPolicy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_SVIDs state when:\n SVID s information is received from the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_SVIDs_NAK state when:\n The Device Policy Manager indicates that the response to the Discover SVIDs Command request is NAK\nor BUSY ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.2.2",
    "title": "PE_UFP_VDM_Send_SVIDs State",
    "full_path": "8.3.3.22.2.2 PE_UFP_VDM_Send_SVIDs State",
    "page": 930,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Send_SVIDs state the Responder Shall send the Structured VDM Discover SVIDs ACK\nCommand response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n The Structured VDM Discover SVIDs ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.2.3",
    "title": "PE_UFP_VDM_Get_SVIDs_NAK State",
    "full_path": "8.3.3.22.2.3 PE_UFP_VDM_Get_SVIDs_NAK State",
    "page": 930,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Get_SVIDs_NAK state the Policy Engine Shall send a Structured VDM Discover SVIDs\nNAK or BUSY Command response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n The Structured VDM Discover SVIDs NAK or BUSY Command response has been sent.PE_RESP_VDM_Send_SVIDs\nActions on entry:\nSend Discover SVIDs ACK\nPower = Explicit Contract\nPD = Connected\nDiscover SVIDs\nrequestDiscover SVIDs ACK\nsentPE_RESP_VDM_Get_SVIDs\nActions on entry:Request SVIDs information from DPM\nPower = Explicit Contract\nPD = ConnectedSVIDs information\nfrom DPMPE_RESP_VDM_Get_SVIDs_NAK\nActions on entry:Send Discover SVIDs NAK/BUSY Command response as requested\nPower = Explicit Contract\nPD = ConnectedDPM says\nNAK/BUSY\nDiscover SVIDs NAK/BUSY\nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9318.3.3.22.3 Responder Structured VDM Discover Modes State Diagram\nFigure 8.197, \"Responder Structured VDM Discover Modes State Diagram\" shows the state diagram for a Responder\non receiving a Discover Modes Command .\nFigure 8.197 Responder Structured VDM Discover Modes State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.3.1",
    "title": "PE_RESP_VDM_Get_Modes State",
    "full_path": "8.3.3.22.3.1 PE_RESP_VDM_Get_Modes State",
    "page": 931,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_RESP_VDM_Get_Modes state from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state when:\n A Structured VDM Discover Modes Command request is received.\nOn entry to the PE_RESP_VDM_Get_Modes state the Responder Shall request Modes information from the Device\nPolicy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_Modes state when:\n Modes information is received from the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_Modes_NAK state when:\n The Device Policy Manager indicates that the response to the Discover Modes Command request is NAK\nor BUSY ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.3.2",
    "title": "PE_RESP_VDM_Send_Modes State",
    "full_path": "8.3.3.22.3.2 PE_RESP_VDM_Send_Modes State",
    "page": 931,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Send_Modes state the Responder Shall send the Structured VDM Discover Modes\nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n The Structured VDM Discover Modes ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.3.3",
    "title": "PE_RESP_VDM_Get_Modes_NAK State",
    "full_path": "8.3.3.22.3.3 PE_RESP_VDM_Get_Modes_NAK State",
    "page": 931,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_RESP_VDM_Get_Modes_NAK state the Policy Engine Shall send a Structured VDM Discover\nModes NAK or BUSY Command response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n The Structured VDM Discover Modes NAK or BUSY Command response has been sent.PE_RESP_VDM_Send_Modes\nActions on entry:\nSend Discover Modes ACK\nPower = Explicit Contract\nPD = Connected\nDiscover Modes\nrequestDiscover Modes ACK\nsentPE_RESP_VDM_Get_Modes\nActions on entry:Request Modes information from DPM\nPower = Explicit Contract\nPD = ConnectedModes information\nfrom DPMPE_RESP_VDM_Get_Modes_\nNAKActions on entry:Send Discover Modes NAK/BUSY Command response as requested\nPower = Explicit Contract\nPD = ConnectedDPM says\nNAK/BUSY\nDiscover Modes NAK/BUSY\nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\nPage 932 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.22.4 Receiving a Structured VDM Attention State Diagram\nFigure 8.198, \"Receiving a Structured VDM Attention State Diagram\" shows the state diagram when receiving an\nAttention Command request.\nFigure 8.198 Receiving a Structured VDM Attention State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.22.4.1",
    "title": "PE_RCV_VDM_Attention_Request State",
    "full_path": "8.3.3.22.4.1 PE_RCV_VDM_Attention_Request State",
    "page": 932,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_RCV_VDM_Attention_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state when:\n An Attention Command request is received.\nOn entry to the PE_RCV_VDM_Attention_Request state the Policy Engine Shall inform the Device Policy Manager of\nthe Attention Command request.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n The Device Policy Manager has been informed.\nPE_SRC_Ready or PE_SNK_Ready\nPE_RCV_VDM_Attention_Request\nActions on entry:\nInform Device Policy Manager of Attention Command request\nPower = Explicit Contract\nPD = ConnectedAttention Command\nrequest receivedDPM informed\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9338.3.3.23 DFP Structured VDM State Diagrams\nThe State Diagrams in this section Shall apply to all DFP s that support Structured VDM s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.23.1",
    "title": "DFP Structured VDM Mode Entry State Diagram",
    "full_path": "8.3.3.23.1 DFP Structured VDM Mode Entry State Diagram",
    "page": 933,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.199, \"DFP VDM Mode Entry State Diagram\" shows the state operation for a DFP when entering a Mode.\nFigure 8.199 DFP VDM Mode Entry State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.23.1.1",
    "title": "PE_DFP_VDM_Mode_Entry_Request State",
    "full_path": "8.3.3.23.1.1 PE_DFP_VDM_Mode_Entry_Request State",
    "page": 933,
    "level": 6,
    "parent_id": "8.3.3.23.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_DFP_VDM_Mode_Entry_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state for a DFP when:\n The Device Policy Manager requests that the Port Partner or a Cable Plug enter a Mode.\nOn entry to the PE_DFP_VDM_Mode_Entry_Request state the Policy Engine Shall send a Structured VDM Enter\nMode Command request and Shall start the VDMModeEntryTimer .\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_ACKed state when:\n A Structured VDM Enter Mode ACK Command response is received.\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_NAKed state when:\n A Structured VDM Enter Mode NAK or BUSY Command response is received or\n The VDMModeEntryTimer times out.\nPE_SRC_Ready or PE_SNK_Ready\n(DFP)DPM requests\nMode entry1PE_DFP_VDM_Mode_Entry_ACKed\nActions on entry:\nRequest DPM to enter the mode\nPower = Explicit Contract\nPD = Connected\nPE_DFP_VDM_Mode_Entry_Request\nActions on entry:Send Mode Entry requestStart VDMModeEntryTimer\nPower = Explicit Contract\nPD = ConnectedMode Entry ACK\nreceived\nMode enteredPE_DFP_VDM_Mode_Entry_NAKed\nActions on entry:Inform DPM of reason for failure\nPower = Explicit Contract\nPD = Connected\nMode Entry NAK/BUSY\nReceived |\nVDMModeEntryTimer timeout |\nProtocol Error3\nDPM informed2\n1)The Device Policy Manager Shall have placed the system into USB Safe State before issuing this request when entering Modal operation.\n2)The Device Policy Manager Shall have returned the system to USB operation if not in Modal operation at this point.\n3)Protocol Errors are handled by informing the DPM, returning to USB Safe State and then processing the Message once the PE_SRC_Ready or\nPE_SNK_Ready state has been entered.\nPage 934 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.23.1.2 PE_DFP_VDM_Mode_Entry_ACKed State\nOn entry to the PE_DFP_VDM_Mode_Entry_ACKed state the Policy Engine Shall request the Device Policy Manager\nto enter the Mode.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n The Mode has been entered."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.23.1.3",
    "title": "PE_DFP_VDM_Mode_Entry_NAKed State",
    "full_path": "8.3.3.23.1.3 PE_DFP_VDM_Mode_Entry_NAKed State",
    "page": 934,
    "level": 6,
    "parent_id": "8.3.3.23.1",
    "tags": [],
    "content": "On entry to the PE_DFP_VDM_Mode_Entry_NAKed state the Policy Engine Shall inform the Device Policy Manager\nof the reason for failure ( NAK , BUSY , timeout or Protocol Error ).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n The Device Policy Manager has been informed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9358.3.3.23.2 DFP Structured VDM Mode Exit State Diagram\nFigure 8.200, \"DFP VDM Mode Exit State Diagram\" shows the state diagram for a DFP when exiting a Mode.\nFigure 8.200 DFP VDM Mode Exit State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.23.2.1",
    "title": "PE_DFP_VDM_Mode_Exit_Request State",
    "full_path": "8.3.3.23.2.1 PE_DFP_VDM_Mode_Exit_Request State",
    "page": 935,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_DFP_VDM_Mode_Exit_Request state from either the PE_SRC_Ready or\nPE_SNK_Ready state for a DFP when:\n The Device Policy Manager requests that the Port Partner or a Cable Plug exit a Mode.\nOn entry to the PE_DFP_VDM_Mode_Exit_Request state the Policy Engine Shall send a Structured VDM Exit Mode\nCommand request and Shall start the VDMModeExitTimer.\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_ACKed state when:\n A Structured VDM Exit Mode ACK or NAK Command response is received.\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state depending on the\npresent Power Role when:\n A Structured VDM Exit Mode BUSY Command response is received or\n The VDMModeExitTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.23.2.2",
    "title": "PE_DFP_VDM_DFP_Mode_Exit_ACKed State",
    "full_path": "8.3.3.23.2.2 PE_DFP_VDM_DFP_Mode_Exit_ACKed State",
    "page": 935,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On Exit to the PE_DFP_VDM_Mode_Entry_ACKed state the Policy Engine Shall inform the Device Policy Manager Of\nthe result: ACK or NAK .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\nPE_SRC_Ready or PE_SNK_Ready\n(DFP)\nPE_DFP_VDM_Mode_Exit_Request\nActions on entry:\nSend Exit Mode requestStart VDMModeExitTimer\nPower = Explicit Contract\nPD = ConnectedDPM indicates\nMode exit\nPE_DFP_VDM_Exit_Mode_ACKed\nActions on entry:Inform DPM of ACK or NAK\nPower = Explicit Contract\nPD = ConnectedExit Mode ACK/NAK\nreceivedDPM informed1\nPE_SRC_Hard_Reset or\nPE_SNK_Hard_Reset\n(DFP)Exit Mode BUSY Received |\nVDMModeExitTimer Timeout\n1)The Device Policy Manager is required to return the system to USB operation at this point when exiting Modal Operation.\nPage 936 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 The Device Policy Manager has been informed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9378.3.3.24 UFP Structured VDM State Diagrams\nThe State Diagrams in this section Shall apply to all UFP s that support Structured VDM s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.24.1",
    "title": "UFP Structured VDM Enter Mode State Diagram",
    "full_path": "8.3.3.24.1 UFP Structured VDM Enter Mode State Diagram",
    "page": 937,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.201, \"UFP Structured VDM Enter Mode State Diagram\" shows the state diagram for a UFP in response to an\nEnter Mode Command .\nFigure 8.201 UFP Structured VDM Enter Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.24.1.1",
    "title": "PE_UFP_VDM_Evaluate_Mode_Entry State",
    "full_path": "8.3.3.24.1.1 PE_UFP_VDM_Evaluate_Mode_Entry State",
    "page": 937,
    "level": 6,
    "parent_id": "8.3.3.24.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_UFP_VDM_Evaluate_Mode_Entry state from either the PE_SRC_Ready or\nPE_SNK_Ready state for a UFP when:\n A Structured VDM Enter Mode Command request is received from the DFP .\nOn Entry to the PE_UFP_VDM_Evaluate_Mode_Entry state the Policy Engine Shall request the Device Policy\nManager to evaluate the Enter Mode Command request and enter the Mode indicated in the Command request if\nthe request is acceptable.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Entry_ACK state when:\n The Device Policy Manager indicates that the Mode has been entered.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Entry_NAK state when:\n The Device Policy Manager indicates that the response to the Mode request is NAK .PE_SRC_Ready or PE_SNK_Ready (UFP)\nActions on entry:\nPower = Explicit Contract\nPD = Connected\nEnter Modes\nrequest1\nPE_UFP_VDM_Mode_Entry_ACK\nActions on entry:\nSend Enter Mode ACK Command\nCable = Awake\nPD = ConnectedEnter Mode ACK\nsentPE_UFP_VDM_Evaluate_Mode_Entry\nActions on entry:Request DPM to evaluate request to enter a Mode\nCable = Awake\nPD = Connected\nPE_UFP_VDM_Mode_Entry_NAK\nActions on entry:Send Enter Mode NAK Command response as requested\nCable = Awake\nPD = ConnectedDPM says\nNAK\nDPM says\nMode enteredEnter Mode NAK sent\n1)The UFP is required to be in USB operation or USB Safe State at this point.\nPage 938 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.24.1.2 PE_UFP_VDM_Mode_Entry_ACK State\nOn entry to the PE_UFP_VDM_Mode_Entry_ACK state the Policy Engine Shall send a Structured VDM Enter Mode\nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n The Structured VDM Enter Mode ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.24.1.3",
    "title": "PE_UFP_VDM_Mode_Entry_NAK State",
    "full_path": "8.3.3.24.1.3 PE_UFP_VDM_Mode_Entry_NAK State",
    "page": 938,
    "level": 6,
    "parent_id": "8.3.3.24.1",
    "tags": [],
    "content": "On entry to the PE_UFP_VDM_Mode_Entry_NAK state the Policy Engine Shall send a Structured VDM Enter Mode\nNAK Command response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n The Structured VDM Enter Mode NAK Command response has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9398.3.3.24.2 UFP Structured VDM Exit Mode State Diagram\nFigure 8.202, \"UFP Structured VDM Exit Mode State Diagram\" shows the state diagram for a UFP in response to an\nExit Mode Command .\nFigure 8.202 UFP Structured VDM Exit Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.24.2.1",
    "title": "PE_UFP_VDM_Mode_Exit State",
    "full_path": "8.3.3.24.2.1 PE_UFP_VDM_Mode_Exit State",
    "page": 939,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_UFP_VDM_Mode_Exit state from either the PE_SRC_Ready or\nPE_SNK_Ready state for a UFP when:\n A Structured VDM Exit Mode Command request is received from the DFP .\nOn entry to the PE_UFP_VDM_Mode_Exit state the Policy Engine Shall request the Device Policy Manager to exit the\nMode indicated in the Command .\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Exit_ACK state when:\n The Device Policy Manager indicates that the Mode has been exited.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Exit_NAK state when:\n The Device Policy Manager indicates that the Command response to the Exit Mode Command request is\nNAK .PE_UFP_VDM_Mode_Exit\nActions on entry:\nRequest DPM to evaluate request to exit the requested Mode\nPower = Explicit Contract\nPD = ConnectedExit Mode request\nreceived\nExit Mode ACK\nsent1\nPE_UFP_VDM_Mode_Exit_ACK\nActions on entry:Send Exit Mode ACK Command\nPower = Explicit Contract\nPD = ConnectedMode exitedPE_SRC_Ready or PE_SNK_Ready (UFP)\nActions on entry:\nPower = Explicit Contract\nPD = Connected\nPE_UFP_VDM_Mode_Exit_NAK\nActions on entry:Send Exit Mode NAK Command\nPower = Explicit Contract\nPD = ConnectedDPM says NAKExit Mode\nNAK sent\n1)The UFP is required to be in USB operation or USB Safe State at this point.\nPage 940 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.24.2.2 PE_UFP_VDM_Mode_Exit_ACK State\nOn entry to the PE_UFP_VDM_Mode_Exit_ACK state the Policy Engine Shall send a Structured VDM Exit Mode ACK\nCommand response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n The Structured VDM Exit Mode ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.24.2.3",
    "title": "PE_UFP_VDM_Mode_Exit_NAK State",
    "full_path": "8.3.3.24.2.3 PE_UFP_VDM_Mode_Exit_NAK State",
    "page": 940,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_UFP_VDM_Mode_Exit_NAK state the Policy Engine Shall send a Structured VDM Exit Mode NAK\nCommand response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to either the either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n The Structured VDM Exit Mode NAK Command response has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9418.3.3.25 Cable Plug Specific State Diagrams\nThe State Diagrams in this section Shall apply to all Cable Plug s that support Structured VDM s."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.1",
    "title": "Cable Plug Cable Ready State Diagram",
    "full_path": "8.3.3.25.1 Cable Plug Cable Ready State Diagram",
    "page": 941,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.203, \"Cable Ready State Diagram\" shows the Cable Ready state diagram for a Cable Plug .\nFigure 8.203 Cable Ready State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.1.1",
    "title": "PE_CBL_Ready State",
    "full_path": "8.3.3.25.1.1 PE_CBL_Ready State",
    "page": 941,
    "level": 6,
    "parent_id": "8.3.3.25.1",
    "tags": [],
    "content": "The PE_CBL_Ready state shown in the following sections is the normal operational state for a Cable Plug and where\nit starts after power up or a Hard/ Cable Reset .PE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/ConnectedPower up |\nHard Reset Complete |\nCable Reset Complete\nPage 942 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.25.2 Soft/Hard/Cable Reset"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.1",
    "title": "Cable Plug Soft Reset State Diagram",
    "full_path": "8.3.3.25.2.1 Cable Plug Soft Reset State Diagram",
    "page": 942,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.204, \"Cable Plug Soft Reset State Diagram\" shows the Cable Plug state diagram on reception of a Soft_Reset\nMessage .\nFigure 8.204 Cable Plug Soft Reset State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.1.1",
    "title": "PE_CBL_Soft_Reset State",
    "full_path": "8.3.3.25.2.1.1 PE_CBL_Soft_Reset State",
    "page": 942,
    "level": 7,
    "parent_id": "8.3.3.25.2.1",
    "tags": [],
    "content": "The PE_CBL_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received from the\nProtocol Layer .\nOn entry to the PE_CBL_Soft_Reset state the Policy Engine Shall reset the Protocol Layer in the Cable Plug and Shall\nthen request the Protocol Layer to send an Accept Message .\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Accept Message has been sent or\n The Protocol Layer indicates that a transmission error has occurred.Accept Message sent |\nTransmission Error indication\nfrom Protocol Layer\nSoft Reset Message\nreceivedPE_CBL_Soft_Reset\nActions on entry:\nReset Protocol LayerSend Accept Message\nCable = Awake\nPD = Connected\nPE_CBL_Ready\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9438.3.3.25.2.2 Cable Plug Hard Reset State Diagram\nFigure 8.205, \"Cable Plug Hard Reset State Diagram\" shows the Cable Plug state diagram for a Hard Reset or Cable\nReset .\nFigure 8.205 Cable Plug Hard Reset State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.2.1",
    "title": "PE_CBL_Hard_Reset State",
    "full_path": "8.3.3.25.2.2.1 PE_CBL_Hard_Reset State",
    "page": 943,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The PE_CBL_Hard_Reset state Shall be entered from any state when either Hard Reset Signaling or Cable Reset\nSignaling is detected.\nOn entry to the PE_CBL_Hard_Reset state the Policy Engine Shall reset the Cable Plug (equivalent to a power cycle).\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Cable Plug reset is complete.Hard Reset signalling\nReceived |\nCable Reset Command\nPE_CBL_Hard_Reset\nActions on entry:\nReset Cable Plug\nCable = Awake/Asleep\nPD = Not Connected\nCable reset complete\nPE_CBL_Ready\nPage 944 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.25.2.3 DFP/V CONN Source SOP'/SOP'' Soft Reset or Cable Reset of a Cable\nPlug or VPD State Diagram\nFigure 8.206, \"DFP/V CONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram\" below shows the\nstate diagram for the Policy Engine in a VCONN Source when performing a Soft Reset or Cable Reset of a Cable Plug or\nVPD on SOP’ /SOP’’ . The following sections describe operation in each of the states.\nFigure 8.206 DFP/V CONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.3.1",
    "title": "PE_DFP_VCS_CBL_Send_Soft_Reset State",
    "full_path": "8.3.3.25.2.3.1 PE_DFP_VCS_CBL_Send_Soft_Reset State",
    "page": 944,
    "level": 7,
    "parent_id": "8.3.3.25.2.3",
    "tags": [],
    "content": "The PE_DFP_VCS_CBL_Send_Soft_Reset state Shall be entered from any state when a Protocol Error is detected on\nSOP’ /SOP’’ by the Protocol Layer (see Section 6.8.1, \"Soft Reset and Protocol Error\" ) or when a Message has not been\nsent after retries on SOP’ /SOP’’ while communicating with a Cable Plug /VPD and when there was previous\ncommunication with the Cable Plug that did not result in a Transmission Error or whenever the Device Policy\nManager directs a Soft Reset on SOP’ /SOP’’ .\nOn entry to the PE_DFP_VCS_CBL_Send_Soft_Reset state the DFP Policy Engine Shall request the SOP’ /SOP’’\nProtocol Layer to perform a Soft Reset , then Shall send a Soft_Reset Message on SOP’ /SOP’’ to the Cable Plug /VPD ,\nand initialize and run the SenderResponseTimer .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the DFP\nVCONN Source 's Power Role , when:\n There is no Explicit Contract in place and\n An Accept Message has been received on SOP’ /SOP’’ .\nThe Policy Engine Shall transition to either the PE_SRC_Send_Capabilities state or PE_SRC_Discovery state,\ndepending on the DFP 's VCONN Source 's Power Role , when:\n There is an Explicit Contract in place and\n An Accept Message has been received on SOP’ /SOP’’ .\nThe Policy Engine Shall transition to the PE_DFP_VCS_CBL_Send_Cable_Reset state when:\n A SenderResponseTimer timeout occurs\n Or the Protocol Layer indicates that a transmission error has occurred\n Or when a Protocol Error is detected on SOP’ /SOP’’ by the Protocol Layer .PE_DFP_VCS_CBL_Send_Soft_Reset\nActions on entry:\nReset Protocol LayerSend Soft Reset Message on SOP’/SOP’’Initialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected; Cable Discovered\nMessage not sent after retries on SOP’/SOP’’ (no GoodCRC received)1 &\nPreviously Cable Discovered |Protocol error detected on SOP’/SOP’’SenderResponseTimer\nTimeout |\nTransmission\nError indication\nfrom Protocol Layer |\nProtocol ErrorIn Explicit Contract &\nAccept Message\nReceived on SOP’/SOP’’\nPE_SRC_Ready or\nPE_SNK_Ready (V CONN Source)\nPE_DFP_VCS_CBL_Send_Cable_Reset\nActions on entry:\nSend Cable Reset Message\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected; Cable Discovered\nCable Reset Request\nfrom Device Policy ManagerCable Reset sent\nPE_SRC_Send_Capabilities or\nPE_SRC_Discovery2\n(VCONN Source)Not in Explicit Contract &\nAccept Message\nReceived on SOP’/SOP’’\n1)Excludes the Soft_Reset Message itself.\n2)Sink only communicates with the Cable Plug when in an Explicit Contract. If the Discover Identity Command is being sent at startup, then the Policy Engine will\nsubsequently transition to the PE_SRC_Send_Capabilities state as normal. Otherwise, the Policy Engine will transition to the PE_SRC_Discovery state.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9458.3.3.25.2.3.2 PE_DFP_VCS_CBL_Send_Cable_Reset State\nThe PE_DFP_VCS_CBL_Send_Cable_Reset state Shall be entered from any state when the Device Policy Manager\nrequests a Cable Reset .\nOn entry to the PE_DFP_VCS_CBL_Send_Cable_Reset state the DFP Policy Engine Shall request the Protocol Layer\nto send Cable Reset Signaling .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the VCONN\nSource 's Power Role , when:\n Cable Reset Signaling has been sent.\nPage 946 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.25.2.4 UFP/V CONN Source SOP'/SOP'' Soft Reset of a Cable Plug or VPD\nState Diagram\nFigure 8.207, \"UFP/V CONN Source Soft Reset of a Cable Plug or VPD State Diagram\" below shows the state diagram\nfor the UFP Policy Engine in a VCONN Source when performing a Soft Reset of a Cable Plug or VPD on SOP’ /SOP’’ . The\nfollowing sections describe operation in each of the states.\nFigure 8.207 UFP/V CONN Source Soft Reset of a Cable Plug or VPD State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.2.4.1",
    "title": "PE_UFP_VCS_CBL_Send_Soft_Reset State",
    "full_path": "8.3.3.25.2.4.1 PE_UFP_VCS_CBL_Send_Soft_Reset State",
    "page": 946,
    "level": 7,
    "parent_id": "8.3.3.25.2.4",
    "tags": [],
    "content": "The PE_UFP_VCS_CBL_Send_Soft_Reset state Shall be entered from any state when a Protocol Error is detected on\nSOP’ /SOP’’ by the Protocol Layer (see Section 6.8.1, \"Soft Reset and Protocol Error\" ) or when a Message has not been\nsent after retries on SOP’ /SOP’’ while communicating with a Cable Plug /VPD and when there was previous\ncommunication with the Cable Plug that did not result in a Transmission Error or whenever the Device Policy\nManager directs a Soft Reset on SOP’ /SOP’’ .\nOn entry to the PE_UFP_VCS_CBL_Send_Soft_Reset state the Policy Engine Shall request the SOP’ /SOP’’ Protocol\nLayer to perform a Soft Reset , then Shall send a Soft_Reset Message on SOP’ /SOP’’ to the Cable Plug , and initialize\nand run the SenderResponseTimer .\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the UFP VCONN\nSource 's Power Role , when:\n An Accept Message has been received on SOP’ /SOP’’ .\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state, depending on the\nUFP VCONN Source 's Power Role , when:\n A SenderResponseTimer timeout occurs\n Or the Protocol Layer indicates that a transmission error has occurred\n Or when a Protocol Error is detected on SOP’ /SOP’’ by the Protocol Layer .PE_UFP_VCS_CBL_Send_Soft_Reset\nActions on entry:\nReset Protocol LayerSend Soft Reset Message on SOP’/SOP’’Initialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP’/SOP’’ (no GoodCRC received)1 &\nPreviously Cable Discovered | Protocol error detected on SOP’/SOP’’SenderResponseTimer\nTimeout |\nTransmission\nError indication\nfrom Protocol Layer |\nProtocol ErrorAccept Message\nReceived on SOP’/SOP’’\nPE_SRC_Ready or\nPE_SNK_Ready (V CONN Source)\nPE_SRC_Hard_Reset or\nPE_SNK_Hard_Reset\n1)Excludes the Soft_Reset Message itself.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9478.3.3.25.3 Source Startup Structured VDM Discover Identity of a Cable Plug\nState Diagram\nFigure 8.208, \"Source Startup Structured VDM Discover Identity State Diagram\" shows the state diagram for Source\ndiscovery of identity information from a Cable Plug during the startup sequence.\nFigure 8.208 Source Startup Structured VDM Discover Identity State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.3.1",
    "title": "PE_SRC_VDM_Identity_Request State",
    "full_path": "8.3.3.25.3.1 PE_SRC_VDM_Identity_Request State",
    "page": 947,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine Shall transition to the PE_SRC_VDM_Identity_Request state from the PE_SRC_Startup state\nwhen:\n The Device Policy Manager requests the discovery of the identity of the Cable Plug .\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_Request state from the PE_SRC_Discovery state\nwhen:\n The Device Policy Manager requests the discovery of the identity of the Cable Plug and\n The DiscoverIdentityCounter < nDiscoverIdentityCount .\nEven though there has been a transition out of the PE_SRC_Discovery state the SourceCapabilityTimer Shall\ncontinue to run during the states shown in Figure 8.208, \"Source Startup Structured VDM Discover Identity State\nDiagram\" and Shall Not be initialized on re-entry to PE_SRC_Discovery .\nPE_SRC_Send_Capabilities or\nPE_SRC_Discovery1PE_SRC_VDM_Identity_Request\nActions on entry:\nSend Discover Identity requestIncrement the DiscoverIdentityCounterStart VDMResponseTimer\nPower = No or Implicit Contract\nCable Plug = Not PD ConnectedDPM requests identity discovery3&\nProtocol Layer Reset Complete\nDiscover Identity ACK\nreceived\nPE_SRC_VDM_Identity_ACKed\nActions on entry:Inform DPM of identityPE_SRC_VDM_Identity_NAKed\nActions on entry:Inform DPM of result\nPower =No or Implicit Contract\nCable Plug = PD ConnectedDiscover Identity NAK/BUSY |\nVDMResponseTimer Timeout |\nDiscover Identity request sending\nfailure (without GoodCRC)\nDPM informed\nDPM informed\nPE_SRC_Startup\nDPM requests identity discovery &\nDiscoverIdentityCounter < nDiscoverIdentityCount2\nPE_SRC_DiscoveryPower = No or Implicit Contract\nCable Plug = PD Connected\n1)If the Discover Identity Command is being sent at startup, then the Policy Engine will subsequently transition to the PE_SRC_Send_Capabilities state as\nnormal. Otherwise, the Policy Engine will transition to the PE_SRC_Discovery state.\n2)The SourceCapabilityTimer continues to run during the states defined in this diagram even though there has been an exit from the PE_SRC_Discovery\nstate. This ensures that Source_Capabilities Messages are sent out at a regular rate.\n3)The DPM in an EPR Source Shall request the discovery of the identity of the Cable Plug at startup.\nPage 948 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Note: An EPR Source is required to discover the identity of the Cable Plug prior to entering the First Explicit\nContract (see Section 6.4.10.1, \"Process to enter EPR Mode\" )\nOn entry to the PE_SRC_VDM_Identity_Request state the Policy Engine Shall send a Structured VDM Discover\nIdentity Command request, Shall increment the DiscoverIdentityCounter and Shall start the\nVDMResponseTimer.\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_ACKed state when:\n A Structured VDM Discover Identity ACK Command response is received.\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_NAKed state when:\n A Structured VDM Discover Identity NAK or BUSY Command response is received or\n The VDMResponseTimer times out or\n The Structured VDM Discover Identity Command request Message sending fails (no GoodCRC Message\nreceived after retries)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.3.2",
    "title": "PE_SRC_VDM_Identity_ACKed State",
    "full_path": "8.3.3.25.3.2 PE_SRC_VDM_Identity_ACKed State",
    "page": 948,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_VDM_Identity_ACKed state the Policy Engine Shall inform the Device Policy Manager of the\nIdentity information.\nThe Policy Engine Shall transition back to either the PE_SRC_Send_Capabilities or PE_SRC_Discovery state when:\n The Device Policy Manager has been informed."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.3.3",
    "title": "PE_SRC_VDM_Identity_NAKed State",
    "full_path": "8.3.3.25.3.3 PE_SRC_VDM_Identity_NAKed State",
    "page": 948,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_SRC_VDM_Identity_NAKed state the Policy Engine Shall inform the Device Policy Manager of the\nresult ( NAK , BUSY or timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Send_Capabilities or PE_SRC_Discovery state when:\n The Device Policy Manager has been informed.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9498.3.3.25.4 Cable Plug Mode Entry/Exit"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.1",
    "title": "Cable Plug Structured VDM Enter Mode State Diagram",
    "full_path": "8.3.3.25.4.1 Cable Plug Structured VDM Enter Mode State Diagram",
    "page": 949,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.209, \"Cable Plug Structured VDM Enter Mode State Diagram\" shows the state diagram for a Cable Plug in\nresponse to an Enter Mode Command .\nFigure 8.209 Cable Plug Structured VDM Enter Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.1.1",
    "title": "PE_CBL_Evaluate_Mode_Entry State",
    "full_path": "8.3.3.25.4.1.1 PE_CBL_Evaluate_Mode_Entry State",
    "page": 949,
    "level": 7,
    "parent_id": "8.3.3.25.4.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_CBL_Evaluate_Mode_Entry state from the PE_CBL_Ready state when:\n A Structured VDM Enter Mode Command request is received from the DFP .\nOn Entry to the PE_CBL_Evaluate_Mode_Entry state the Policy Engine Shall request the Device Policy Manager to\nevaluate the Enter Mode Command request and enter the Mode indicated in the Command request if the request is\nacceptable.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Entry_ACK state when:\n The Device Policy Manager indicates that the Mode has been entered.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Entry_NAK state when:\n The Device Policy Manager indicates that the response to the Mode request is NAK ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.1.2",
    "title": "PE_CBL_Mode_Entry_ACK State",
    "full_path": "8.3.3.25.4.1.2 PE_CBL_Mode_Entry_ACK State",
    "page": 949,
    "level": 7,
    "parent_id": "8.3.3.25.4.1",
    "tags": [],
    "content": "On entry to the PE_CBL_Mode_Entry_ACK state the Policy Engine Shall send a Structured VDM Enter Mode ACK\nCommand response.PE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/Connected\nEnter Modes\nrequest1\nPE_CBL_Mode_Entry_ACK\nActions on entry:\nSend Enter Mode ACK Command\nCable = Awake\nPD = ConnectedEnter Mode ACK\nsentPE_CBL_Evaluate_Mode_Entry\nActions on entry:Request DPM to evaluate request to enter a Mode\nCable = Awake\nPD = Connected\nPE_CBL_Mode_Entry_NAK\nActions on entry:Send Enter Mode NAK Command response as requested\nCable = Awake\nPD = ConnectedDPM says\nNAK\nDPM says\nMode enteredEnter Mode NAK sent\n1)The Cable is required to be in USB operation or USB Safe State at this point.\nPage 950 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Structured VDM Enter Mode ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.1.3",
    "title": "PE_CBL_Mode_Entry_NAK State",
    "full_path": "8.3.3.25.4.1.3 PE_CBL_Mode_Entry_NAK State",
    "page": 950,
    "level": 7,
    "parent_id": "8.3.3.25.4.1",
    "tags": [],
    "content": "On entry to the PE_CBL_Mode_Entry_NAK state the Policy Engine Shall send a Structured VDM Enter Mode NAK\nCommand response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Structured VDM Enter Mode NAK Command response has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9518.3.3.25.4.2 Cable Plug Structured VDM Exit Mode State Diagram\nFigure 8.210, \"Cable Plug Structured VDM Exit Mode State Diagram\" shows the state diagram for a Cable Plug in\nresponse to an Exit Mode Command .\nFigure 8.210 Cable Plug Structured VDM Exit Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.2.1",
    "title": "PE_CBL_Mode_Exit State",
    "full_path": "8.3.3.25.4.2.1 PE_CBL_Mode_Exit State",
    "page": 951,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_CBL_Mode_Exit state from the PE_CBL_Ready state when:\n A Structured VDM Exit Mode Command request is received from the DFP .\nOn entry to the PE_CBL_Mode_Exit state the Policy Engine Shall request the Device Policy Manager to exit the Mode\nindicated in the Command .\nThe Policy Engine Shall transition to the PE_CBL_Mode_Exit_ACK state when:\n The Device Policy Manager indicates that the Mode has been exited.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Exit_NAK state when:\n The Device Policy Manager indicates that the Command response to the Exit Mode Command request is\nNAK ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.2.2",
    "title": "PE_CBL_Mode_Exit_ACK State",
    "full_path": "8.3.3.25.4.2.2 PE_CBL_Mode_Exit_ACK State",
    "page": 951,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_CBL_Mode_Exit_ACK state the Policy Engine Shall send a Structured VDM Exit Mode ACK\nCommand response.PE_CBL_Mode_Exit\nActions on entry:\nRequest DPM to evaluate request to exit the requested Mode\nCable = Awake\nPD = ConnectedExit Mode request\nreceived\nExit Mode ACK\nsent1\nPE_CBL_Mode_Exit_ACK\nActions on entry:Send Exit Mode ACK Command\nCable = Awake\nPD = ConnectedMode exitedPE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/Connected\nPE_CBL_Mode_Exit_NAK\nActions on entry:Send Exit Mode NAK Command\nCable = Awake\nPD = ConnectedDPM says NAKExit Mode\nNAK sent\n1)The Cable is required to be in USB operation or USB Safe State at this point.\nPage 952 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10The Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Structured VDM Exit Mode ACK Command response has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.25.4.2.3",
    "title": "PE_CBL_Mode_Exit_NAK State",
    "full_path": "8.3.3.25.4.2.3 PE_CBL_Mode_Exit_NAK State",
    "page": 952,
    "level": 7,
    "parent_id": null,
    "tags": [],
    "content": "On entry to the PE_CBL_Mode_Exit_NAK state the Policy Engine Shall send a Structured VDM Exit Mode NAK\nCommand response as indicated by the Device Policy Manager .\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n The Structured VDM Exit Mode NAK Command response has been sent.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9538.3.3.26 EPR Mode State Diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.1",
    "title": "Source EPR Mode Entry State Diagram",
    "full_path": "8.3.3.26.1 Source EPR Mode Entry State Diagram",
    "page": 953,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.211, \"Source EPR Mode Entry State Diagram\" shows the state diagram for an EPR Source in response to an\nEPR_Mode Message .\nFigure 8.211 Source EPR Mode Entry State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.1.1",
    "title": "PE_SRC_Evaluate_EPR_Mode_Entry State",
    "full_path": "8.3.3.26.1.1 PE_SRC_Evaluate_EPR_Mode_Entry State",
    "page": 953,
    "level": 6,
    "parent_id": "8.3.3.26.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SRC_Evaluate_EPR_Mode_Entry state from the PE_SRC_Ready state when:\n An EPR_Mode (Enter) Message is received from the Sink .\nOn Entry to the PE_SRC_Evaluate_EPR_Mode_Entry state the Policy Engine Shall request the Device Policy Manager\nto evaluate the EPR_Mode (Enter) Message .\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Ack state when:\n The Device Policy Manager indicates that EPR Mode can be entered.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n The Device Policy Manager indicates that the EPR Mode is not to be entered.EPR_Mode (Enter) received\nPE_SRC_EPR_Mode_Entry_ACK\nActions on entry:\nSend EPR Enter Mode AcknowledgeIf Source is not the V\nCONN Source initiate V CONN Swap\nprocessPE_SRC_Evaluate_EPR Mode_Entry\nActions on entry:Request DPM to evaluate request to enter EPR Mode\nPower = Explicit Contract\nPD = ConnectedPE_SRC_EPR_Mode_Entry_Failed\nActions on entry:Send Enter Mode (Enter Failed) with appropriate failure code.\nDPM says enter EPR ModeEPR Enter Mode (Enter Failed) sent\nPE_SRC_Ready\nPE_VCS_Send_Swap\nPE_VCS_Force_VCONN or\nPE_VCS_Send_PS_RDYVCONN Swap ProcessDPM says don’t\nenter EPR Mode\nPE_SRC_EPR_Mode_Discover_Cable\nActions on entry:\nCheck Vconn Swap Result if Vconn Swap Process carried out.Power = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = ConnectedPower = Explicit Contract\nPD = Connected\nEPR Enter Mode (Enter Acknowledged) Sent &\nSource is VCONN Source &\nUnknown Cable\nPE_INIT_PORT_VDM_Identity_Request\nPE_INIT_PORT_VDM_Identity_ACKed or\nPE_INIT_PORT_VDM_Identity_NAKedSource is the V CONN Source\nCable Discovery Process\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR\nActions on entry:\nAsk DPM to evaluate Cable Discovery results\nPower = Explicit Contract\nPD = Connected\nPE_SRC_EPR_Mode_Entry_Succeeded\nActions on entry:Send EPR Mode (Enter Succeeded)Enter EPR Mode.\nPower = Explicit Contract\nPD = ConnectedVCONN Swap Process Complete\nCable Discovery Process Complete\nCable Plug is EPR capable\nPE_SRC_Send_CapabilitiesEPR Mode EnteredCable Plug is not EPR capableEPR Enter Mode (Enter Acknowledged) Sent &\n(captive cable | known EPR Capable Cable)EPR Enter Mode (Enter Acknowledged) Sent &\nSource is not VCONN Source &\nUnknown Cable\nPage 954 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.26.1.2 PE_SRC_EPR_Mode_Entry_Ack State\nOn entry to the PE_SRC_EPR_Mode_Entry_Ack state the Policy Engine Shall send a EPR_Mode (Enter\nAcknowledged) Message .\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n The EPR_Mode (Enter Acknowledged) Message has been sent and\n The Source is not the VCONN Source and\n The cable is a captive cable or a known EPR Cable .\nThe Policy Engine Shall transition to the PE_VCS_Send_Swap state when:\n The EPR_Mode (Enter Acknowledged) Message has been sent and\n The Source is not the VCONN Source and\n The cable is unknown.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Discover_Cable state when:\n The EPR_Mode (Enter Acknowledged) Message has been sent and\n The Source is the VCONN Source and\n The cable is unknown."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.1.3",
    "title": "PE_SRC_EPR_Mode_Discover_Cable State",
    "full_path": "8.3.3.26.1.3 PE_SRC_EPR_Mode_Discover_Cable State",
    "page": 954,
    "level": 6,
    "parent_id": "8.3.3.26.1",
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SRC_EPR_Mode_Discover_Cable state from the PE_VCS_Force_V CONN state\nor PE_VCS_Send_Ps_Rdy state when:\n A Source initiated VCONN Swap process has completed.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_Request state in order to perform Cable\nPlug discovery when:\n The Source is the VCONN Source .\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n The V CONN Swap process failed (the Source is not the VCONN Source )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.1.4",
    "title": "PE_SRC_EPR_Mode_Evaluate_Cable_EPR State",
    "full_path": "8.3.3.26.1.4 PE_SRC_EPR_Mode_Evaluate_Cable_EPR State",
    "page": 954,
    "level": 6,
    "parent_id": "8.3.3.26.1",
    "tags": [],
    "content": "In the PE_SRC_EPR_Mode_Evaluate_Cable_EPR state the Policy Engine requests the DPM to evaluate the Cable\nDiscovery results.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Succeeded state when:\n The Cable Plug is capable of EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n The Cable Plug is not capable of EPR Mode ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.1.5",
    "title": "PE_SRC_EPR_Mode_Entry_Succeeded State",
    "full_path": "8.3.3.26.1.5 PE_SRC_EPR_Mode_Entry_Succeeded State",
    "page": 954,
    "level": 6,
    "parent_id": "8.3.3.26.1",
    "tags": [],
    "content": "On entry to the PE_SRC_EPR_Mode_Entry_Succeeded state the Policy Engine Shall send a EPR_Mode (Enter\nSucceeded) Message and enter EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n EPR Mode has been entered.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9558.3.3.26.1.6 PE_SRC_EPR_Mode_Entry_Failed State\nOn entry to the PE_SRC_EPR_Mode_Entry_Failed state the Policy Engine Shall send a EPR_Mode (Enter Failed)\nMessage .\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n The EPR_Mode (Enter Failed) Message has been sent.\nPage 956 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.26.2 Sink EPR Mode Entry State Diagram\nFigure 8.212, \"Sink EPR Mode Entry State Diagram\" shows the state diagram for an EPR Sink initiating the EPR Mode\nEntry process.\nFigure 8.212 Sink EPR Mode Entry State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.2.1",
    "title": "PE_SNK_Send_EPR_Mode_Entry State",
    "full_path": "8.3.3.26.2.1 PE_SNK_Send_EPR_Mode_Entry State",
    "page": 956,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SNK_Send_EPR_Mode_Entry state from the PE_SNK_Ready state when:\n The DPM requests entry into EPR Mode .\nOn Entry to the PE_SNK_Send_EPR_Mode_Entry state the Policy Engine Shall send an EPR_Mode (Enter) Message\nand starts the SenderResponseTimer and the SinkEPREnterTimer .\nNote: The SinkEPREnterTimer Shall continue to run in every state until it is stopped or times out.\nThe Policy Engine Shall transition to the PE_SNK_EPR_Mode_Wait_For_Response state when:\n An EPR_Mode (Enter Acknowledge) Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Send_Soft_Reset state when:\n An EPR_Mode Message is received which is not Enter Succeeded orDPM Request EPR Mode Entry\nPE_SNK_EPR_Mode_Entry_Wait_For_Response\nActions on entry:\nWait for EPR Enter Mode responsePE_SNK_Send_EPR Mode_Entry\nActions on entry:Send EPR Mode Entry MessageStart SenderResponse TimerStart SinkEPREnterTimer\nPower = Explicit Contract\nPD = Connected\nEPR Enter Mode Acknowledge received\nPE_SNK_Ready\nEPR Enter Mode Succeeded receivedPower = Explicit Contract\nPD = Connected\nPE_SNK_Send_Soft_ResetEPR Enter Mode received (!Succceded) |\nSenderResponseTimer timeout |\nSinkEPREnterTimer timeout\nEPR Enter Mode received (!Succceded) |\nSinkEPREnterTimer timeout\nActions on exit:\nStop the SinkEPRTimerEnter EPR Mode\nPE_SNK_Wait_For_Capabilities\nPE_VCS_Evaluate_Swap\nVCONN Swap Process\nVCONN_Swap Message Received\nVCONN Swap Process completed\nPE_VCS_Turn_Off_VCONN\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 957 The SenderResponseTimer times out or\n The SinkEPREnterTimer times out."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.2.2",
    "title": "PE_SNK_EPR_Mode_Wait_For_Response State",
    "full_path": "8.3.3.26.2.2 PE_SNK_EPR_Mode_Wait_For_Response State",
    "page": 957,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "In the State the Policy Engine waits for a confirmation that the EPR Mode entry request has succeeded.\nOn exit from the PE_SNK_EPR_Mode_Wait_For_Response state the Policy Engine Shall stop the\nSinkEPREnterTimer and enter EPR Mode .\nThe Policy Engine Shall transition to the PE_SNK_Send_Soft_Reset state when:\n An EPR_Mode Message is received which is not Enter Succeeded or\n The SinkEPREnterTimer times out.\nThe Policy Engine Shall transition to the PE_VCS_Evaluate_Swap State when:\n A VCONN _Swap Message is received.\nThe Policy Engine Shall transition back from the PE_VCS_Turn_Off_V CONN State to the\nPE_SNK_EPR_Mode_Wait_For_Response State when:\n The V CONN Swap process has completed.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n An EPR_Mode (Enter Succeeded) Message has been received.\nPage 958 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.26.3 Source EPR Mode Exit State Diagram\nFigure 8.213, \"Source EPR Mode Exit State Diagram\" shows the state diagram for an EPR Source initiating the EPR\nMode exit process.\nFigure 8.213 Source EPR Mode Exit State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.3.1",
    "title": "PE_SRC_Send_EPR_Mode_Exit State",
    "full_path": "8.3.3.26.3.1 PE_SRC_Send_EPR_Mode_Exit State",
    "page": 958,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SRC_Send_EPR_Mode_Exit state from the PE_SRC_Ready state when:\n The DPM requests exit from EPR Mode .\nOn Entry to the PE_SRC_Send_EPR_Mode_Exit state the Policy Engine Shall send an EPR_Mode (Exit) Message .\nOn Exit from the PE_SRC_Send_EPR_Mode_Exit state the Policy Engine Shall exit EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n The EPR_Mode (Exit) Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.3.2",
    "title": "PE_SRC_EPR_Mode_Exit_Received State",
    "full_path": "8.3.3.26.3.2 PE_SRC_EPR_Mode_Exit_Received State",
    "page": 958,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SRC_EPR_Mode_Exit_Received state from the PE_SRC_Ready state when:\n An EPR_Mode (Exit) Message is received.\nOn Entry to the PE_SRC_EPR_Mode_Exit_Received state the Policy Engine Shall exit EPR Mode .\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n In an Explicit Contract with an SPR (A)PDO and\n EPR Mode has been exited.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n Not in an Explicit Contract with an SPR (A)PDO .DPM Requests EPR Mode Exit\nPE_SRC_Send_EPR Mode_Exit\nActions on entry:\nSend EPR Mode Exit Message\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message sent\nPE_SRC_Ready\nActions on exit:\nExit EPR Mode\nPE_SRC_Send_CapabilitiesPE_SRC_EPR Mode_Exit_Received\nActions on entry:\nExit EPR Mode\nPower = Explicit Contract\nPD = ConnectedEPR Mode Exit Message Received\nIn Explict Contract with SPR PDO &\nEPR Mode Exited\nPE_SRC_Hard_ResetNot in an Explicit Contract with an SPR PDO\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9598.3.3.26.4 Sink EPR Mode Exit State Diagram\nFigure 8.214, \"Sink EPR Mode Exit State Diagram\" shows the state diagram for an EPR Sink initiating the EPR Mode\nexit process.\nFigure 8.214 Sink EPR Mode Exit State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.4.1",
    "title": "PE_SNK_Send_EPR_Mode_Exit State",
    "full_path": "8.3.3.26.4.1 PE_SNK_Send_EPR_Mode_Exit State",
    "page": 959,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SNK_Send_EPR_Mode_Exit state from the PE_SNK_Ready state when:\n The DPM requests exit from EPR Mode .\nOn Entry to the PE_SNK_Send_EPR_Mode_Exit state the Policy Engine Shall send an EPR_Mode (Exit) Message .\nOn Exit from the PE_SNK_Send_EPR_Mode_Exit state the Policy Engine Shall exit EPR Mode .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n The EPR_Mode (Exit) Message has been sent."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.26.4.2",
    "title": "PE_SNK_EPR_Mode_Exit_Received State",
    "full_path": "8.3.3.26.4.2 PE_SNK_EPR_Mode_Exit_Received State",
    "page": 959,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Policy Engine transitions to the PE_SNK_EPR_Mode_Exit_Received state from the PE_SNK_Ready state when:\n An EPR_Mode (Exit) Message is received.\nOn Entry to the PE_SNK_EPR_Mode_Exit_Received state the Policy Engine Shall exit EPR Mode .\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n In an Explicit Contract with an SPR (A)PDO and\n EPR Mode has been exited.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n Not in an Explicit Contract with an SPR (A)PDO .DPM Requests EPR Mode Exit\nPE_SNK_Send_EPR Mode_Exit\nActions on entry:\nSend EPR Mode Exit Message\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message sent\nPE_SNK_Ready\nActions on exit:\nExit EPR Mode\nPE_SNK_Wait_for_CapabilitiesPE_SNK_EPR Mode_Exit_Received\nActions on entry:\nExit EPR Mode\nPower = Explicit Contract\nPD = ConnectedEPR Mode Exit Message Received\nIn Explicit Contract with SPR PDO &\nEPR Mode Exited\nPE_SNK_Hard_ResetNot in an Explicit Contract with an SPR PDO\nPage 960 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.27 BIST State diagrams"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.27.1",
    "title": "BIST Carrier Mode State Diagram",
    "full_path": "8.3.3.27.1 BIST Carrier Mode State Diagram",
    "page": 960,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Figure 8.215, \"BIST Carrier Mode State Diagram\" shows the state diagram required by a UUT , which can be either a\nSource , Sink or Cable Plug , when operating in BIST Carrier Mode . Transitions Shall be from either the\nPE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.215 BIST Carrier Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.27.1.1",
    "title": "PE_BIST_Carrier_Mode State",
    "full_path": "8.3.3.27.1.1 PE_BIST_Carrier_Mode State",
    "page": 960,
    "level": 6,
    "parent_id": "8.3.3.27.1",
    "tags": [],
    "content": "The Source , Sink or Cable Plug Shall enter the PE_BIST_Carrier_Mode state from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state when:\n A BIST Message is received with a BIST Carrier Mode BIST Data Object and\n VBUS is at vSafe5V .\nOn entry to the PE_BIST_Carrier_Mode state the Policy Engine Shall tell the Protocol Layer to go to BIST Carrier\nMode (see Section 6.4.3.1, \"BIST Carrier Mode\" ) and Shall initialize and run the BISTContModeTimer .BIST message received\nwith Data Object BIST Carrier Mode &\nVBUS= vSafe5V\nBISTContModeTimer\ntimeoutPE_BIST_Carrier_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Carrier ModeInitialize and run BISTContModeTimer\nPE_SRC_Transition_to_default or\nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or\nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS= vSafe5V\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 961The Policy Engine Shall transition to either the PE_SRC_Transition_to_default state,\nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n The BISTContModeTimer times out.\nPage 962 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.27.2 BIST Test Data Mode State Diagram\nFigure 8.216, \"BIST Test Data Mode State Diagram\" shows the state diagram required by a UUT , which can be either\na Source , Sink or Cable Plug , when operating in BIST Test Data Mode . Transitions Shall be from either the\nPE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.216 BIST Test Data Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.27.2.1",
    "title": "PE_BIST_Test_Mode State",
    "full_path": "8.3.3.27.2.1 PE_BIST_Test_Mode State",
    "page": 962,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Source , Sink or Cable Plug Shall enter the PE_BIST_Test_Mode state from either the PE_SRC_Ready ,\nPE_SNK_Ready or PE_CBL_Ready state when:\n A BIST Message is received with a BIST Test Data BIST Data Object and\n VBUS is at vSafe5V .BIST message received\nwith Data Object BIST Test Mode &\nVBUS= vSafe5V\nHard ResetPE_BIST_Test_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Test Mode\nPE_SRC_Transition_to_default or\nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or\nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS= vSafe5V\nPD = Connected\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 963On entry to the PE_BIST_Test_Mode state the Policy Engine Shall tell the Protocol Layer to go into BIST Test Data\nMode where it sends no further Message s except for GoodCRC Message s in response to received Message s (see\nSection 6.4.3.2, \"BIST Test Data Mode\" ).\nThe Policy Engine Shall transition to either the PE_SRC_Transition_to_default state,\nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n A Hard Reset occurs.\nPage 964 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.27.3 BIST Shared Capacity Test Mode State Diagram\nFigure 8.217, \"BIST Shared Capacity Test Mode State Diagram\" shows the state diagram required by a UUT , which\ncan be either a Source , Sink or Cable Plug , when operating in BIST Shared Capacity Test Mode . Transitions Shall be\nfrom either the PE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.217 BIST Shared Capacity Test Mode State Diagram"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.27.3.1",
    "title": "PE_BIST_Shared_Capacity_Test_Mode State",
    "full_path": "8.3.3.27.3.1 PE_BIST_Shared_Capacity_Test_Mode State",
    "page": 964,
    "level": 6,
    "parent_id": null,
    "tags": [],
    "content": "The Source , Sink or Cable Plug Shall enter the PE_BIST_Shared_Capacity_Test_Mode state from either the\nPE_SRC_Ready , PE_SNK_Ready or PE_CBL_Ready state when:\n A BIST Message is received with a BIST Shared Test Mode Entry BIST Data Object and\n VBUS is at vSafe5V .\nOn entry to the PE_BIST_Shared_Capacity_Test_Mode state the Policy Engine Shall tell the Protocol Layer to go to\nBIST Shared Capacity Test Mode (see Section 6.4.3.3, \"BIST Shared Capacity Test Mode\" ).\nThe Policy Engine Shall transition to either the PE_SRC_Transition_to_default state,\nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n A BIST Message is received with a BIST Shared Test Mode Exit BIST Data Object .BIST message received\nwith Data Object BIST Shared Test Mode Entry\nBIST message received\nwith Data Object BIST Shared Test Mode ExitPE_BIST_Shared Capacity_Test_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Shared Capacity Test Mode\n1.\nPE_SRC_Transition_to_default or\nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or\nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS= vSafe5V\nPD = Connected\n1)The UUT Shall exit BIST Shared Capacity Test Mode when It is powered off. The UUT Shall remain in BIST Shared Capacity\nTest Mode for any PD event (except when a BIST Shared Test Mode Exit BIST Data Object, is received); specifically the\nUUT Shall remain in BIST Shared Capacity Test Mode when any of the following PD events occurs: Hard Reset, Cable Reset,\nSoft Reset, Data Role Swap, Power Role Swap, Fast Role Swap, V CONN Swap. The UUT May leave test mode if the tester\nmakes a request that exceeds the capabilities of the UUT .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9658.3.3.28 USB Type-C Referenced States\nThis section contains states cross-referenced from the [USB Type-C 2.4] specification."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8.3.3.28.1",
    "title": "ErrorRecovery state",
    "full_path": "8.3.3.28.1 ErrorRecovery state",
    "page": 965,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "The ErrorRecovery state is used to electronically disconnect Port Partner s using the USB Type-C connector. The\nErrorRecovery state Shall be entered when there are errors on USB Type-C Ports which cannot be recovered by\nHard Reset . The ErrorRecovery state Shall map to USB Type-C ErrorRecovery state operation as defined in the\n[USB Type-C 2.4] specification. Bus powered Sinks Shall Not be required to meet this requirement as removal of\ntheir power will serve the same purpose.\nOn entry to the ErrorRecovery state the Explicit Contract and PD Connection Shall be ended.\nOn exit from the ErrorRecovery state a new Explicit Contract Should be established once the Port Partner s have\nre-connected over the CC wire.\nPage 966 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-108.3.3.29 Policy Engine States\nTable 8.154, \"Policy Engine States\" lists the states used by the various state machines.\nTable 8.154 Policy Engine States\nState name Reference\nSenderResponseTimer\nSRT_Stopped Section 8.3.3.1.1.1\nSRT_Running Section 8.3.3.1.1.2\nSRT_Expired Section 8.3.3.1.1.3\nSource Port\nPE_SRC_Startup Section 8.3.3.2.1\nPE_SRC_Discovery Section 8.3.3.2.2\nPE_SRC_Send_Capabilities Section 8.3.3.2.3\nPE_SRC_Negotiate_Capability Section 8.3.3.2.4\nPE_SRC_Transition_Supply Section 8.3.3.2.5\nPE_SRC_Ready Section 8.3.3.2.6\nPE_SRC_Disabled Section 8.3.3.2.7\nPE_SRC_Capability_Response Section 8.3.3.2.8\nPE_SRC_Hard_Reset Section 8.3.3.2.9\nPE_SRC_Hard_Reset_Received Section 8.3.3.2.10\nPE_SRC_Transition_to_default Section 8.3.3.2.11\nPE_SRC_Give_Source_Cap Section 8.3.3.2.15\nPE_SRC_Get_Sink_Cap Section 8.3.3.2.12\nPE_SRC_Wait_New_Capabilities Section 8.3.3.2.13\nPE_SRC_EPR_Keep_Alive Section 8.3.3.2.14\nSink Port\nPE_SNK_Startup Section 8.3.3.3.1\nPE_SNK_Discovery Section 8.3.3.3.2\nPE_SNK_Wait_for_Capabilities Section 8.3.3.3.3\nPE_SNK_Evaluate_Capability Section 8.3.3.3.4\nPE_SNK_Select_Capability Section 8.3.3.3.5\nPE_SNK_Transition_Sink Section 8.3.3.3.6\nPE_SNK_Ready Section 8.3.3.3.7\nPE_SNK_Hard_Reset Section 8.3.3.3.8\nPE_SNK_Transition_to_default Section 8.3.3.3.9\nPE_SNK_Give_Sink_Cap Section 8.3.3.3.10\nPE_SNK_Get_Source_Cap Section 8.3.3.3.12\nPE_SNK_EPR_Keep_Alive Section 8.3.3.3.11\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 967Soft Reset and Protocol Error\nSource Port Soft Reset\nPE_SRC_Send_Soft_Reset Section 8.3.3.4.1.1\nPE_SRC_Soft_Reset Section 8.3.3.4.1.2\nSink Port Soft Reset\nPE_SNK_Send_Soft_Reset Section 8.3.3.4.2.1\nPE_SNK_Soft_Reset Section 8.3.3.4.2.2\nData Reset\nDFP Data Reset\nPE_DDR_Send_Data_Reset Section 8.3.3.5.1.1\nPE_DDR_Data_Reset_Received Section 8.3.3.5.1.2\nPE_DDR_Wait_For_V CONN_Off Section 8.3.3.5.1.3\nPE_DDR_Perform_Data_Reset Section 8.3.3.5.1.4\nUFP Data Reset\nPE_UDR_Send_Data_Reset Section 8.3.3.5.2.1\nPE_UDR_Data_Reset_Received Section 8.3.3.5.2.2\nPE_UDR_Turn_Off_V CONN Section 8.3.3.5.2.3\nPE_UDR_Send_Ps_Rdy Section 8.3.3.5.2.4\nPE_UDR_Wait_For_Data_Reset_Complete Section 8.3.3.5.2.5\nNot Supported Message\nSource Port Not Supported\nPE_SRC_Send_Not_Supported Section 8.3.3.6.1.1\nPE_SRC_Not_Supported_Received Section 8.3.3.6.1.2\nPE_SRC_Chunk_Received Section 8.3.3.6.1.3\nSink Port Not Supported\nPE_SNK_Send_Not_Supported Section 8.3.3.6.2.1\nPE_SNK_Not_Supported_Received Section 8.3.3.6.2.2\nPE_SNK_Chunk_Received Section 8.3.3.6.2.3\nSource Alert\nSource Port Source Alert\nPE_SRC_Send_Source_Alert Section 8.3.3.7.1.1\nPE_SRC_Wait_for_Get_Status Section 8.3.3.7.1.2\nSink Port Source Alert\nPE_SNK_Source_Alert_Received Section 8.3.3.7.2.1\nSink Port Sink Alert\nPE_SNK_Send_Sink_Alert Section 8.3.3.7.3.1\nPE_SNK_Wait_for_Get_Status Section 8.3.3.7.3.2\nSource Port Sink Alert\nPE_SRC_Sink_Alert_Received Section 8.3.3.7.4.1Table 8.154 Policy Engine States\nState name Reference\nPage 968 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Source/Sink Extended Capabilities\nSink Port Get Source Capabilities Extended\nPE_SNK_Get_Source_Cap_Ext Section 8.3.3.8.1.1\nSource Port Give Source Capabilities Extended\nPE_SRC_Give_Source_Cap_Ext Section 8.3.3.8.2.1\nSource Port Get Sink Capabilities Extended\nPE_SRC_Get_Sink_Cap_Ext Section 8.3.3.8.3.1\nSource Port Give Source Capabilities Extended\nPE_SNK_Give_Sink_Cap_Ext Section 8.3.3.8.4.1\nSource Information\nSink Port Get Source Information\nPE_SNK_Get_Source_Info Section 8.3.3.9.1.1\nSource Port Give Source Information\nPE_SRC_Give_Source_Info Section 8.3.3.9.2.1\nStatus\nGet Status\nPE_Get_Status Section 8.3.3.10.1.1\nGive Status\nPE_Give_Status Section 8.3.3.10.1.1\nSink Port Get PPS Status\nPE_SNK_Get_PPS_Status Section 8.3.3.10.3.1\nSource Port Give PPS Status\nPE_SRC_Give_PPS_Status Section 8.3.3.10.4.1\nBattery Capabilities\nGet Battery Capabilities\nPE_Get_Battery_Cap Section 8.3.3.11.1.1\nGive Battery Capabilities\nPE_Give_Battery_Cap Section 8.3.3.11.2.1\nBattery Status\nGet Battery Status\nPE_Get_Battery_Status Section 8.3.3.12.1.1\nGive Battery Status\nPE_Give_Battery_Status Section 8.3.3.12.2.1\nManufacturer Information\nGet Manufacturer Information\nPE_Get_Manufacturer_Info Section 8.3.3.13.1.1\nGive Manufacturer Information\nPE_Give_Manufacturer_Info Section 8.3.3.13.2.1\nCountry Codes and Information\nGet Country Codes\nPE_Get_Country_Codes Section 8.3.3.14.1.1Table 8.154 Policy Engine States\nState name Reference\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 969Give Country Codes\nPE_Give_Country_Codes Section 8.3.3.14.2.1\nGet Country Information\nPE_Get_Country_Info Section 8.3.3.14.3.1\nGive Country Information\nPE_Give_Country_Info Section 8.3.3.14.4.1\nRevision\nGet Revision\nPE_Get_Revision Section 8.3.3.15.1.1\nGive Revision\nPE_Give_Revision Section 8.3.3.15.2.1\nEnter USB\nDFP Enter USB\nPE_DEU_Send_Enter_USB Section 8.3.3.16.1.1\nUFP Enter USB\nPE_UEU_Enter_USB_Received Section 8.3.3.16.2.1\nSecurity Request/Response\nSend Security Request\nPE_Send_Security_Request Section 8.3.3.17.1.1\nSend Security Response\nPE_Send_Security_Response Section 8.3.3.17.2.1\nSecurity Response Received\nPE_Security_Response_Received Section 8.3.3.17.3.1\nFirmware Update Request/Response\nSend Firmware Update Request\nPE_Send_Firmware_Update_Request Section 8.3.3.18.1.1\nSend Firmware Update Response\nPE_Send_Firmware_Update_Response Section 8.3.3.18.2.1\nFirmware Update Response Received\nPE_Firmware_Update_Response_Received Section 8.3.3.18.3.1\nDual-Role Port\nDFP to UFP Data Role Swap\nPE_DRS_DFP_UFP_Evaluate_Swap Section 8.3.3.19.1.2\nPE_DRS_DFP_UFP_Accept_Swap Section 8.3.3.19.1.3\nPE_DRS_DFP_UFP_Change_to_UFP Section 8.3.3.19.1.4\nPE_DRS_DFP_UFP_Send_Swap Section 8.3.3.19.1.5\nPE_DRS_DFP_UFP_Reject_Swap Section 8.3.3.19.1.6Table 8.154 Policy Engine States\nState name Reference\nPage 970 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10UFP to DFP Data Role Swap\nPE_DRS_UFP_DFP_Evaluate_Swap Section 8.3.3.19.2.2\nPE_DRS_UFP_DFP_Accept_Swap Section 8.3.3.19.2.3\nPE_DRS_UFP_DFP_Change_to_DFP Section 8.3.3.19.2.4\nPE_DRS_UFP_DFP_Send_Swap Section 8.3.3.19.2.5\nPE_DRS_UFP_DFP_Reject_Swap Section 8.3.3.19.2.6\nSource to Sink Power Role Swap\nPE_PRS_SRC_SNK_Evaluate_Swap Section 8.3.3.19.3.2\nPE_PRS_SRC_SNK_Accept_Swap Section 8.3.3.19.3.3\nPE_PRS_SRC_SNK_Transition_to_off Section 8.3.3.19.3.4\nPE_PRS_SRC_SNK_Assert_Rd Section 8.3.3.19.3.5\nPE_PRS_SRC_SNK_Wait_Source_on Section 8.3.3.19.3.6\nPE_PRS_SRC_SNK_Send_Swap Section 8.3.3.19.3.7\nPE_PRS_SRC_SNK_Reject_Swap Section 8.3.3.19.3.8\nSink to Source Power Role Swap\nPE_PRS_SNK_SRC_Evaluate_Swap Section 8.3.3.19.4.2\nPE_PRS_SNK_SRC_Accept_Swap Section 8.3.3.19.4.3\nPE_PRS_SNK_SRC_Transition_to_off Section 8.3.3.19.4.4\nPE_PRS_SNK_SRC_Assert_Rp Section 8.3.3.19.4.5\nPE_PRS_SNK_SRC_Source_on Section 8.3.3.19.4.6\nPE_PRS_SNK_SRC_Send_Swap Section 8.3.3.19.4.7\nPE_PRS_SNK_SRC_Reject_Swap Section 8.3.3.19.4.8\nSource to Sink Fast Role Swap\nPE_FRS_SRC_SNK_Evaluate_Swap Section 8.3.3.19.5.2\nPE_FRS_SRC_SNK_Accept_Swap Section 8.3.3.19.5.3\nPE_FRS_SRC_SNK_Transition_to_off Section 8.3.3.19.5.4\nPE_FRS_SRC_SNK_Assert_Rd Section 8.3.3.19.5.5\nPE_FRS_SRC_SNK_Wait_Source_on Section 8.3.3.19.5.6\nSink to Source Fast Role Swap\nPE_FRS_SNK_SRC_Start_AMS Section 8.3.3.19.6.1\nPE_FRS_SNK_SRC_Send_Swap Section 8.3.3.19.6.2\nPE_FRS_SNK_SRC_Transition_to_off Section 8.3.3.19.6.3\nPE_FRS_SNK_SRC_V BUS_Applied Section 8.3.3.19.6.4\nPE_FRS_SNK_SRC_Assert_Rp Section 8.3.3.19.6.5\nPE_FRS_SNK_SRC_Source_on Section 8.3.3.19.6.6\nDual-Role Source Port Get Source Capabilities\nPE_DR_SRC_Get_Source_Cap Section 8.3.3.19.7.1\nDual-Role Source Port Give Sink Capabilities\nPE_DR_SRC_Give_Sink_Cap Section 8.3.3.19.8.1Table 8.154 Policy Engine States\nState name Reference\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 971Dual-Role Sink Port Get Sink Capabilities\nPE_DR_SNK_Get_Sink_Cap Section 8.3.3.19.9.1\nDual-Role Sink Port Give Source Capabilities\nPE_DR_SNK_Give_Source_Cap Section 8.3.3.19.10.1\nDual-Role Source Port Get Source Capabilities Extended\nPE_DR_SRC_Get_Source_Cap_Ext Section 8.3.3.19.11.1\nDual-Role Sink Port Give Source Capabilities Extended\nPE_DR_SNK_Give_Source_Cap_Ext Section 8.3.3.19.12.1\nDual-Role Sink Port Get Sink Capabilities Extended\nPE_DR_SNK_Get_Sink_Cap_Ext Section 8.3.3.19.13.1\nDual-Role Source Port Give Sink Capabilities Extended\nPE_DR_SRC_Give_Sink_Cap_Ext Section 8.3.3.19.14.1\nDual-Role Source Port Get Source Information\nPE_DR_SRC_Get_Source_Info Section 8.3.3.19.15.1\nDual-Role Sink Port Give Source Information\nPE_DR_SNK_Give_Source_Info Section 8.3.3.19.16.1\nUSB Type-C V CONN Swap\nPE_VCS_Send_Swap Section 8.3.3.20.1\nPE_VCS_Evaluate_Swap Section 8.3.3.20.2\nPE_VCS_Accept_Swap Section 8.3.3.20.3\nPE_VCS_Reject_Swap Section 8.3.3.20.4\nPE_VCS_Wait_For_V CONN Section 8.3.3.20.5\nPE_VCS_Turn_Off_V CONN Section 8.3.3.20.6\nPE_VCS_Turn_On_V CONN Section 8.3.3.20.7\nPE_VCS_Send_Ps_Rdy Section 8.3.3.20.8\nPE_VCS_Force_V CONN Section 8.3.3.20.9\nInitiator Structured VDM\nInitiator to Port Structured VDM Discover Identity\nPE_INIT_PORT_VDM_Identity_Request Section 8.3.3.21.1.1\nPE_INIT_PORT_VDM_Identity_ACKed Section 8.3.3.21.1.2\nPE_INIT_PORT_VDM_Identity_NAKed Section 8.3.3.21.1.3\nInitiator Structured VDM Discover SVIDs\nPE_INIT_VDM_SVIDs_Request Section 8.3.3.21.2.1\nPE_INIT_VDM_SVIDs_ACKed Section 8.3.3.21.2.2\nPE_INIT_VDM_SVIDs_NAKed Section 8.3.3.21.2.3\nInitiator Structured VDM Discover Modes\nPE_INIT_VDM_Modes_Request Section 8.3.3.21.3.1\nPE_INIT_VDM_Modes_ACKed Section 8.3.3.21.3.2\nPE_INIT_VDM_Modes_NAKed Section 8.3.3.21.3.3Table 8.154 Policy Engine States\nState name Reference\nPage 972 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Initiator Structured VDM Attention\nPE_INIT_VDM_Attention_Request Section 8.3.3.21.4.1\nResponder Structured VDM\nResponder Structured VDM Discovery Identity\nPE_RESP_VDM_Get_Identity Section 8.3.3.22.1.1\nPE_RESP_VDM_Send_Identity Section 8.3.3.22.1.2\nPE_RESP_VDM_Get_Identity_NAK Section 8.3.3.22.1.3\nResponder Structured VDM Discovery SVIDs\nPE_RESP_VDM_Get_SVIDs Section 8.3.3.22.2.1\nPE_RESP_VDM_Send_SVIDs Section 8.3.3.22.2.2\nPE_RESP_VDM_Get_SVIDs_NAK Section 8.3.3.22.2.3\nResponder Structured VDM Discovery Modes\nPE_RESP_VDM_Get_Modes Section 8.3.3.22.3.1\nPE_RESP_VDM_Send_Modes Section 8.3.3.22.3.2\nPE_RESP_VDM_Get_Modes_NAK Section 8.3.3.22.3.3\nReceiving a Structured VDM Attention\nPE_RCV_VDM_Attention_Request Section 8.3.3.22.4.1\nDFP Structured VDM\nDFP Structured VDM Mode Entry\nPE_DFP_VDM_Mode_Entry_Request Section 8.3.3.23.1.1\nPE_DFP_VDM_Mode_Entry_ACKed Section 8.3.3.23.1.2\nPE_DFP_VDM_Mode_Entry_NAKed Section 8.3.3.23.1.3\nDFP Structured VDM Mode Exit\nPE_DFP_VDM_Mode_Exit_Request Section 8.3.3.23.2.1\nPE_DFP_VDM_Mode_Exit_ACKed Section 8.3.3.23.2.2\nUFP Structure VDM\nUFP Structured VDM Enter Mode\nPE_UFP_VDM_Evaluate_Mode_Entry Section 8.3.3.24.1.1\nPE_UFP_VDM_Mode_Entry_ACK Section 8.3.3.24.1.2\nPE_UFP_VDM_Mode_Entry_NAK Section 8.3.3.24.1.3\nUFP Structured VDM Exit Mode\nPE_UFP_VDM_Mode_Exit Section 8.3.3.24.2.1\nPE_UFP_VDM_Mode_Exit_ACK Section 8.3.3.24.2.2\nPE_UFP_VDM_Mode_Exit_NAK Section 8.3.3.24.2.3Table 8.154 Policy Engine States\nState name Reference\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 973Cable Plug Specific\nCable Ready\nPE_CBL_Ready Section 8.3.3.25.1.1\nMode Entry\nPE_CBL_Evaluate_Mode_Entry Section 8.3.3.25.4.1.1\nPE_CBL_Mode_Entry_ACK Section 8.3.3.25.4.1.2\nPE_CBL_Mode_Entry_NAK Section 8.3.3.25.4.1.3\nMode Exit\nPE_CBL_Mode_Exit Section 8.3.3.25.4.2.1\nPE_CBL_Mode_Exit_ACK Section 8.3.3.25.4.2.2\nPE_CBL_Mode_Exit_NAK Section 8.3.3.25.4.1.3\nCable Soft Reset\nPE_CBL_Soft_Reset Section 8.3.3.25.2.1.1\nCable Hard Reset\nPE_CBL_Hard_Reset Section 8.3.3.25.2.2.1\nDFP/V CONN Source Soft Reset or Cable Reset\nPE_DFP_VCS_CBL_Send_Soft_Reset Section 8.3.3.25.2.3.1\nPE_DFP_VCS_CBL_Send_Cable_Reset Section 8.3.3.25.2.3.2\nUFP/V CONN Source Soft Reset or Cable Reset\nPE_UFP_VCS_CBL_Send_Soft_Reset Section 8.3.3.25.2.4.1\nSource Startup Structured VDM Discover Identity\nPE_SRC_VDM_Identity_Request Section 8.3.3.25.3.1\nPE_SRC_VDM_Identity_ACKed Section 8.3.3.25.3.2\nPE_SRC_VDM_Identity_NAKed Section 8.3.3.25.3.3\nEPR Mode\nSource EPR Mode Entry\nPE_SRC_Evaluate_EPR_Mode_Entry Section 8.3.3.26.1.1\nPE_SRC_EPR_Mode_Entry_Ack Section 8.3.3.26.1.2\nPE_SRC_EPR_Mode_Discover_Cable Section 8.3.3.26.1.3\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR Section 8.3.3.26.1.4\nPE_SRC_EPR_Mode_Entry_Succeeded Section 8.3.3.26.1.5\nPE_SRC_EPR_Mode_Entry_Failed Section 8.3.3.26.1.6\nSink EPR Mode Entry\nPE_SNK_Send_EPR_Mode_Entry Section 8.3.3.26.2.1\nPE_SNK_EPR_Mode_Wait_For_Response Section 8.3.3.26.2.2\nSource EPR Mode Exit\nPE_SRC_Send_EPR_Mode_Exit Section 8.3.3.26.3.1\nPE_SRC_EPR_Mode_Exit_Received Section 8.3.3.26.3.2Table 8.154 Policy Engine States\nState name Reference\nPage 974 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Sink EPR Mode Exit\nPE_SNK_Send_EPR_Mode_Exit Section 8.3.3.26.4.1\nPE_SNK_EPR_Mode_Exit_Received Section 8.3.3.26.4.2\nBIST\nBIST Carrier Mode\nPE_BIST_Carrier_Mode Section 8.3.3.27.1.1\nBIST Carrier Mode\nPE_BIST_Test_Mode Section 8.3.3.27.2.1\nBIST Shared Capacity Test Mode\nPE_BIST_Shared_Capacity_Test_Mode Section 8.3.3.27.3.1\nUSB Type-C referenced states\nErrorRecovery Section 8.3.3.28.1Table 8.154 Policy Engine States\nState name Reference\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9759 States and Status Reporting"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1",
    "title": "Overview",
    "full_path": "9.1 Overview",
    "page": 975,
    "level": 2,
    "parent_id": "9",
    "tags": [],
    "content": "This chapter describes the Status reporting mechanisms for devices with data connections (e.g., D+/D- and or\nSSTx+/- and SSRx+/-). It also describes the corresponding USB state a device that supports USB PD Shall transition\nto as a result of changes to the USB PD state that the device is in.\nThis chapter does not define the System Policy or the System Policy Manager . That is defined in [UCSI] . In addition,\nthe Policies themselves are not described here; these are left to the implementers of the relevant products and\nsystems to define.\nAll PD Capable USB (PDUSB) Device s Shall report themselves as self-powered devices (over USB) when plugged\ninto a PD capable Port even if they are entirely powered from VBUS. However, there are some differences between\nPD and [USB 2.0] / [USB 3.2] ; for example, the presence of VBUS alone does not mean that the device ( Consumer )\nmoves from the USB Attached State to the USB Powered State . Similarly, the removal of VBUS alone does not move\nthe device ( Consumer ) from any of the USB states to the USB Attached State . See Section 9.1.2, \"Mapping to USB\nDevice States\" for details.\nPDUSB Device s Shall follow the PD requirements when it comes to suspend (see Section 6.4.1.2.1.2, \"USB Suspend\nSupported\" ), configured, and operational power. The PD requirements when the device is configured or\noperational are defined in this section (see Table 9.4, \"PD Consumer Port Descriptor\" ).\nNote: The power requirements reported in the PD Consumer Port descriptor of the device Shall override the\npower draw reported in the bMaxPower field in the configuration descriptor. A PDUSB Device Shall\nreport zero in the bMaxPower field after successfully negotiating a mutually agreeable Explicit Contract\nand Shall disconnect and re-enumerate when it switches operation back to operating in standard [USB\n2.0] , [USB 3.2] , [USB4] , [USB Type-C 2.4] or [USBBC 1.2] . When operating in [USB 2.0] , [USB 3.2] , [USB\nType-C 2.4] or [USBBC 1.2] mode it Shall report its power draw via the bMaxPower field.\nEach Provider and Consumer will have their own Local Policies which operate between Port Partner s. An example\nof a typical PD system is shown in Figure 9.1, \"Example PD Topology\" . This example consists of a Provider ,\nConsumer/Provider s and Consumer s connected together in a tree topology. Between directly connected devices\nthere is both a flow of Power and also Communication consisting of both Status and Control information.\nPage 976 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 9.1 Example PD Topology\nConsumer ConsumerConsumer/\nProviderConsumer/\nProviderProviderAC/Battery\nAC/BatteryPower\nPD Communication\nP/C P/C P/CP/C Provider/Consumer\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 977Figure 9.2, \"Mapping of PD Topology to USB\" shows how this same topology can be mapped to USB.\nFigure 9.2 Mapping of PD Topology to USB\nDevice Device DeviceRoot HubAC/Battery\nAC/BatteryPower\nPD Communication\nHub\nPage 978 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10In a USB based system, policy is managed by the host and communication of system level policy information is via\nstandard USB data line communication. This is a separate mechanism to the USB Power Delivery VBUS protocol\nwhich is used to manage Local Policy . When USB Communication is used, status information and control requests\nare passed directly between the System Policy Manager (SPM ) on the host and the Provider or Consumer . See Figure\n9.3, \"Use of SPM in the PD System\" .\nFigure 9.3 Use of SPM in the PD System\nStatus information comes from a Provider or Consumer to the SPM so it can better manage the resources on the host\nand provide feedback to the end user.\nReal systems will be a mixture of devices which in terms of power management support might have implemented\nPD, [USB 2.0] , [USB 3.2] , [USB4] , [USB Type-C 2.4] or [USBBC 1.2] or they might even just be non-compliant\n“power sucking devices”. The level of communication of system status to the SPM will therefore not necessarily be\ncomprehensive. The aim of the status mechanisms described here is to provide a mechanism whereby each\nconnected entity in the system provides as much information as possible on the status of itself.\nInformation described in this section that is communicated to the SPM is as follows:\n Versions of USB Type-C®, PD and BC supported.\n Capabilities as a Provider/Consumer .\n Current operational state of each Port e.g. Standard, USB Type-C Current, BC, PD and Negotiated power\nlevel.\n Status of AC or Battery Power for each PDUSB Device in the system.\nThe SPM can Negotiate with Provider s or Consumer s in the system in order to request a different Local Policy , or to\nrequest the amount of power to be delivered by the Provider to the Consumer . Any change in Local Policy could Device Device DeviceHost\n(SPM)AC/Battery\nAC/BatteryPower\nPD Communication\nUSB Communication\nHub\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 979trigger a Re-negotiation of the Explicit Contract, using USB Power Delivery protocols, between a directly connected\nProvider and Consumer . A change in how much power is available can, for example, cause a Re-negotiation ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.1.1",
    "title": "PDUSB Device and Hub Requirements",
    "full_path": "9.1.1 PDUSB Device and Hub Requirements",
    "page": 979,
    "level": 3,
    "parent_id": "9.1",
    "tags": [],
    "content": "All PDUSB Device s Shall return all relevant descriptors mentioned in this chapter. PDUSB Hub s Shall also support\na PD bridge as defined in [UCSI] .\nPage 980 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.1.2 Mapping to USB Device States\nAs mentioned in Section 9.1, \"Overview\" a PDUSB Device reports itself as a self-powered device. However, the device\nShall determine whether or not it is in the USB Attached State or USB Powered State s as described in Figure 9.4,\n\"USB Attached to USB Powered State Transition\" , Figure 9.5, \"Any USB State to USB Attached State Transition (When\noperating as a Consumer)\" and Figure 9.6, \"Any USB State to USB Attached State Transition (When operating as a\nProvider)\" All other USB states of the PDUSB Device Shall be as described in Chapter 9 of [USB 2.0] and [USB 3.2] .\nFigure 9.4, \"USB Attached to USB Powered State Transition\" shows how a PDUSB Device determines when to\ntransition from the USB Attached State to the USB Powered State . USB Type-C Dead Battery operation does not\nrequire special handling since the default state at Attach or after a Hard Reset is that the USB Device is a Sink .\nFigure 9.4 USB Attached to USB Powered State Transition\nFigure 9.5, \"Any USB State to USB Attached State Transition (When operating as a Consumer)\" shows how a PDUSB\nDevice determines when to transition from the USB Powered State to the USB Attached State when the device is a\nConsumer . A PDUSB Device determines that it is performing a Power Role Swap as described in Section 8.3.3.19.3,\n\"Policy Engine in Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to\nSource Power Role Swap State Diagram\" . See Section 7.1.5, \"Response to Hard Resets\" for additional information on\ndevice behavior during Hard Reset s.VBUS\nPresent\nNoYes Can\nenumerate?Yes\nDevice is a\nSource?Attached\nSink?\nUSB\nAttached\nYesDevice\nin Sink\nModeNoNegotiate\nenough\nPower?No\nUSB\nPowered\nNo NoYesDevice in\nSource Mode (5V)Yes\nHard\nReset\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 981Figure 9.5 Any USB State to USB Attached State Transition (When operating as a Consumer)\nFigure 9.6, \"Any USB State to USB Attached State Transition (When operating as a Provider)\" shows how a PDUSB\nDevice determines when to transition from the USB Powered State to the USB Attached State when the device is a\nProvider .\nFigure 9.6 Any USB State to USB Attached State Transition (When operating as a Provider)\nFigure 9.7, \"Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)\" shows how a\nPDUSB Device using the USB Type-C connector determines when to transition from the USB Powered State to the\nUSB Attached State after a Data Role Swap has been performed i.e., it has just changed from operation as a PDUSB\nHost to operation as a PDUSB Device . The Data Role Swap is described in Section 6.3.9, \"DR_Swap Message\" . A Hard\nReset will also return a Sink acting as a PDUSB Host to PDUSB Device operation as described in Section 6.8.3, \"Hard\nReset\" . See Section 7.1.5, \"Response to Hard Resets\" for additional information on device behavior during Hard\nReset s.VBUS\nPresent\nYesNoSwapping\nPower\nRoles?\nAny USB\nState\nUSB\nAttached\nYesNoHard Reset\nand\nCan OperateHard Reset\nand\nCan’t Operate\nHard Reset\nand\nBus Powered\nLack of PD\ncomms?\nNoYes\nAny USB\nState\nUSB\nAttachedLocal Power Source Lost\nHard\nReset\nPage 982 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 9.7 Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)\nVBUS\nPresentYesSwapping\nData\nRoles?\nAny USB\nState\nUSB\nAttachedNo\nYesHard Reset\nChanges Data\nRole\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9839.1.3 PD Software Stack\nFigure 9.8, \"Software stack on a PD aware OS\" gives an example of the software stack on a PD aware OS. In this stack\nwe are using the example of a system with an xHCI based controller. The USB Power Delivery hardware May or\nMay Not be a part of the xHC.\nFigure 9.8 Software stack on a PD aware OS\nClient DriversClient Drivers Client Drivers\nUSB Driver Interface\nComposite Class Driver Client Drivers\nUSB Driver Interface\nHub Driver\nInternal Hub/Host Interface\nHost Controller Driver\nxHC Interface\nHost ControllerPD xface\nPower DeliverySystem\nPolicy\nManager\nPage 984 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.1.4 PDUSB Device Enumeration\nAs described earlier, a PDUSB Device acts as a self-powered device with some caveats with respect to how it\ntransitions from the USB Attached State to USB Powered State . Figure 9.9, \"Enumeration of a PDUSB Device\" gives a\nhigh-level overview of the enumeration steps involved due to this change. A PDUSB Device will first (Step1) interact\nwith the Power Delivery hardware and the Local Policy manager to determine whether or not it can get sufficient\npower to enumerate/operate.\nPD is likely to have established a Explicit Contract prior to enumeration. The SPM will be notified (Step 2) of the\nresult of this Negotiation between the Power Delivery hardware and the PDUSB Device . After successfully\nnegotiating a mutually agreeable Explicit Contract the device will signal a connect to the xHC. The standard USB\nenumeration process (Steps 3, 4 and 5) is then followed to load the appropriate driver for the function(s) that the\nPDUSB Device exposes.\nFigure 9.9 Enumeration of a PDUSB Device\nIf a PDUSB Device cannot perform its intended function with the amount of power that it can get from the Port it is\nconnected to, then the host system Should display a notification (on a PD aware OS) about the failure to provide\nsufficient power to the device. In addition, the device Shall follow the requirements listed in Section 8.2.5.2.1, \"Local\ndevice handling of mismatch\" .Client DriversClient Drivers Client Drivers\nUSB Driver Interface\nComposite Class Driver Client Drivers\nUSB Driver Interface\nHub Driver\nInternal Hub/Host Interface\nHost Controller Driver\nxHC Interface\nHost ControllerPD xface\nPower DeliverySystem\nPolicy\nManager5\n4\n32\n1\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9859.2 PD Specific Descriptors\nA PDUSB Device Shall return all relevant descriptors mentioned in this section.\nThe device Shall return its capability descriptors as part of the device's Binary Object Store (BOS) descriptor set.\nTable 9.1, \"USB Power Delivery Type Codes\" lists the type of PD device capabilities.\nTable 9.1 USB Power Delivery Type Codes\nCapability Code Value Description\nPOWER_DELIVERY_CAPABILITY 06H Defines the various PD Capabilities of this device\nBATTERY_INFO_CAPABILITY 07H Provides information on each Battery supported by the device\nPD_CONSUMER_PORT_CAPABILITY 08H The Consumer characteristics of a Port on the device\nPD_PROVIDER_PORT_CAPABILITY 09H The Provider characteristics of a Port on the device\nPage 986 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.2.1 USB Power Delivery Capability Descriptor\nTable 9.2, \"USB Power Delivery Capability Descriptor\" details the fields in the USB POWER_DELIVERY_CAPABILITY\nDescriptor.\nTable 9.2 USB Power Delivery Capability Descriptor\nOffset Field Size Value Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "bLength 1 Number Size of descriptor",
    "full_path": "0 bLength 1 Number Size of descriptor",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "full_path": "1 bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bDevCapabilityType 1 Constant Capability type: POWER_DELIVERY_CAPABILITY",
    "full_path": "2 bDevCapabilityType 1 Constant Capability type: POWER_DELIVERY_CAPABILITY",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "bReserved 1 Reserved Shall be set to zero.",
    "full_path": "3 bReserved 1 Reserved Shall be set to zero.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "4\nbmAttributes4 Bitmap Bitmap encoding of supported device level features. A value of one in\na bit location indicates a feature is supported; a value of zero\nindicates it is not supported. Encodings are:\nBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Reserved . Shall be set to zero.",
    "full_path": "0 Reserved . Shall be set to zero.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Battery Charging. This bit Shall be set to one to indicate this",
    "full_path": "1 Battery Charging. This bit Shall be set to one to indicate this",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "device supports [USBBC 1.2] as per the value reported in\nthe bcdBCVersion field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "USB Power Delivery. This bit Shall be set to one to indicate",
    "full_path": "2 USB Power Delivery. This bit Shall be set to one to indicate",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "this device supports the USB Power Delivery Specification\nas per the value reported in the bcdPDVersion field."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Provider . This bit Shall be set to one to indicate this device",
    "full_path": "3 Provider . This bit Shall be set to one to indicate this device",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "is capable of providing power. This field is only Valid if Bit"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "is set to one.",
    "full_path": "2 is set to one.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Consumer . This bit Shall be set to one to indicate that this",
    "full_path": "4 Consumer . This bit Shall be set to one to indicate that this",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "device is a consumer of power. This field is only Valid if Bit"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "is set to one.",
    "full_path": "2 is set to one.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "This bit Shall be set to 1 to indicate that this device supports",
    "full_path": "5 This bit Shall be set to 1 to indicate that this device supports",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the feature CHARGING_POLICY.\nNote: Supporting the CHARGING_POLICY feature does not\nrequire a BC or PD mechanism to be implemented."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "USB Type-C Current. This bit Shall be set to one to indicate",
    "full_path": "6 USB Type-C Current. This bit Shall be set to one to indicate",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "this device supports power capabilities defined in [USB\nType-C 2.4] as per the value reported in the\nbcdUSBTypeCVersion field"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Reserved . Shall be set to zero.",
    "full_path": "7 Reserved . Shall be set to zero.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15:8 bmPowerSource. At least one of the following bits 8, 9 and"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "Shall be set to indicate which power sources are",
    "full_path": "14 Shall be set to indicate which power sources are",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "supported.\nBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "AC Supply",
    "full_path": "8 AC Supply",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "Battery",
    "full_path": "9 Battery",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Other",
    "full_path": "10 Other",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "13:11 NumBatteries. This field Shall only be Valid when\nthe Battery field is set to one and Shall be used to\nreport the number of batteries in the device."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "Uses VBUS",
    "full_path": "14 Uses VBUS",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved and Shall be set to zero.",
    "full_path": "15 Reserved and Shall be set to zero.",
    "page": 986,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "13:16 Reserved . Shall be set to zero.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9879.2.2 Battery Info Capability Descriptor\nA PDUSB Device Shall support the capability descriptor shown in Table 9.3, \"Battery Info Capability Descriptor\" if it\nreported that one of its power sources was a Battery in the bmPowerSource field in its Power Deliver Capability\nDescriptor. It Shall return one BATTERY_INFO_CAPABILITY Descriptor per Battery it supports.8\nbcdBCVersion2 BCD Battery Charging Specification Release Number in Binary-Coded\nDecimal (e.g., V1.20 is 120H). This field Shall only be Valid if the\ndevice indicates that it supports [USBBC 1.2] in the bmAttributes\nfield.\n10\nbcdPDVersion2 BCD USB Power Delivery Specification Release Number in Binary-Coded\nDecimal. This field Shall only be Valid if the device indicates that it\nsupports PD in the bmAttributes field.\n12\nbcdUSBTypeCVersion2 BCD USB Type-C Specification Release Number in Binary-Coded Decimal.\nThis field Shall only be Valid if the device indicates that it supports\nUSB Type-C in the bmAttributes field.\nTable 9.3 Battery Info Capability Descriptor\nOffset Field Size Value Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "bLength 1 Number Size of descriptor",
    "full_path": "0 bLength 1 Number Size of descriptor",
    "page": 987,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "full_path": "1 bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "page": 987,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bDevCapabilityType 1 Constant Capability type: BATTERY_INFO_CAPABILITY",
    "full_path": "2 bDevCapabilityType 1 Constant Capability type: BATTERY_INFO_CAPABILITY",
    "page": 987,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "3iBattery1 Index Index of string descriptor Shall contain the user-friendly\nname for this Battery .\n4iSerial 1 Index Index of string descriptor Shall contain the Serial\nNumber String for this Battery .\n5iManufacturer1 Index Index of string descriptor Shall contain the name of the\nManufacturer for this Battery .\n6bBatteryId1 Number Value Shall be used to uniquely identify this Battery in\nstatus Messages."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "bReserved 1 Number Reserved and Shall be set to zero.",
    "full_path": "7 bReserved 1 Number Reserved and Shall be set to zero.",
    "page": 987,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "8\ndwChargedThreshold4 mWh Shall contain the Battery charge value above which this\nBattery is considered to be fully charged but not\nnecessarily “topped off.”\n12\ndwWeakThreshold4 mWh Shall contain the minimum charge level of this Battery\nsuch that above this threshold, a device can be assured\nof being able to power up successfully (see [USBBC\n1.2] )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "dwBatteryDesignCapacity 4 mWh Shall contain the design capacity of the Battery .",
    "full_path": "16 dwBatteryDesignCapacity 4 mWh Shall contain the design capacity of the Battery .",
    "page": 987,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "20dwBatteryLastFullchargeCapacity4 mWh Shall contain the maximum capacity of the Battery\nwhen fully charged.Table 9.2 USB Power Delivery Capability Descriptor\nOffset Field Size Value Description\nPage 988 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.2.3 PD Consumer Port Capability Descriptor\nA PDUSB Device Shall support the PD_CONSUMER_PORT_CAPABILITY descriptor shown in Table 9.4, \"PD\nConsumer Port Descriptor\" if it is a Consumer .\nTable 9.4 PD Consumer Port Descriptor\nOffset Field Size Value Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "bLength 1 Number Size of descriptor",
    "full_path": "0 bLength 1 Number Size of descriptor",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "full_path": "1 bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bDevCapabilityType 1 Constant Capability type: PD_CONSUMER_PORT_CAPABILITY",
    "full_path": "2 bDevCapabilityType 1 Constant Capability type: PD_CONSUMER_PORT_CAPABILITY",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "bReserved 1 Number Reserved and Shall be set to zero.",
    "full_path": "3 bReserved 1 Number Reserved and Shall be set to zero.",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "4\nbmCapabilities2 Bitmap Capability: This field Shall indicate the specification the\nConsumer Port will operate under.\nBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery Charging (BC)",
    "full_path": "0 Battery Charging (BC)",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "USB Power Delivery (PD)",
    "full_path": "1 USB Power Delivery (PD)",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "USB Type-C Current",
    "full_path": "2 USB Type-C Current",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15:3 Reserved and Shall be set to zero.\n6wMinVoltage2 Number Shall contain the minimum voltage in 50mV units that this\nConsumer is capable of operating at.\n8wMaxVoltage2 Number Shall contain the maximum voltage in 50mV units that this\nConsumer is capable of operating at."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "wReserved 2 Number Reserved and Shall be set to zero.",
    "full_path": "10 wReserved 2 Number Reserved and Shall be set to zero.",
    "page": 988,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "12dwMaxOperatingPower4 Number Shall contain the maximum power in 10mW units this\nConsumer can draw when it is in a steady state operating mode.\n16\ndwMaxPeakPower4 Number Shall contain the maximum power in 10mW units this\nConsumer can draw for a short duration of time\n(dwMaxPeakPowerTime ) before it falls back into a steady state.\n20\ndwMaxPeakPowerTime4 Number Shall contain the time in 100ms units that this Consumer can\ndraw peak current.\nA device Shall set this field to 0xFFFF if this value is unknown.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9899.2.4 PD Provider Port Capability Descriptor\nA PDUSB Device Shall support the PD_PROVIDER_PORT_CAPABILITY descriptor shown in Table 9.5, \"PD Provider\nPort Descriptor\" if it is a Provider .\nTable 9.5 PD Provider Port Descriptor\nOffset Field Size Value Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "bLength 1 Number Size of descriptor",
    "full_path": "0 bLength 1 Number Size of descriptor",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "full_path": "1 bDescriptorType 1 Constant DEVICE CAPABILITY Descriptor type",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "bDevCapabilityType 1 Constant Capability type: PD_PROVIDER_PORT_CAPABILITY",
    "full_path": "2 bDevCapabilityType 1 Constant Capability type: PD_PROVIDER_PORT_CAPABILITY",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "bReserved 1 Number Reserved and Shall be set to zero.",
    "full_path": "3 bReserved 1 Number Reserved and Shall be set to zero.",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "4\nbmCapabilities2 Bitmap Capability: This field Shall indicate the specification the\nProvider Port will operate under.\nBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery Charging (BC)",
    "full_path": "0 Battery Charging (BC)",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "USB Power Delivery (PD)",
    "full_path": "1 USB Power Delivery (PD)",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "USB Type-C Current",
    "full_path": "2 USB Type-C Current",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15:3 Reserved and Shall be set to zero."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "bNumOfPDObjects 1 Number Shall indicate the number of Power Data Object s.",
    "full_path": "6 bNumOfPDObjects 1 Number Shall indicate the number of Power Data Object s.",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "bReserved 1 Number Reserved and Shall be set to zero.",
    "full_path": "7 bReserved 1 Number Reserved and Shall be set to zero.",
    "page": 989,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "8\nwPowerDataObject14 Bitmap Shall contain the first Power Data Object supported by this\nProvider Port. See Section 6.4.1, \"Capabilities Message\" for\ndetails of the Power Data Object s.\n... ... ... ... ...\n4*(N+1)\nwPowerDataObjectN4 Bitmap Shall contain the 2nd and subsequent Power Data Object s\nsupported by this Provider Port. See Section 6.4.1, \"Capabilities\nMessage\" for details of the Power Data Object s.\nPage 990 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.3 PD Specific Requests and Events\nA PDUSB Device that is compliant to this specification Shall support the Battery related requests if it has a Battery .\nA PDUSB Hub that is compliant to this specification Shall support a USB PD Bridge as described in [UCSI]\nirrespective of whether the PDUSB Hub is a Provider , a Consumer , or both."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.3.1",
    "title": "PD Specific Requests",
    "full_path": "9.3.1 PD Specific Requests",
    "page": 990,
    "level": 3,
    "parent_id": "9.3",
    "tags": [],
    "content": "PD defines requests to which PDUSB Device s Shall respond as outlined in Table 9.6, \"PD Requests\" . All Valid\nrequests in Table 9.6, \"PD Requests\" Shall be implemented by PDUSB Device s.\nTable 9.7, \"PD Request Codes\" gives the bRequest values for Command s that are not listed in the hub/device\nframework chapters of [USB 2.0] , [USB 3.2] .\nTable 9.8, \"PD Feature Selectors\" gives the Valid feature selectors for the PD class. Refer to Section 9.4.2.1,\n\"BATTERY_WAKE_MASK Feature Selector\" , and Section 9.4.2.2, \"CHARGING_POLICY Feature Selector\" for a description of the\nfeatures.Table 9.6 PD Requests\nRequest bmRequestType bRequest wValue wIndex wLength Data\nGetBatteryStatus 10000000B GET_BATTERY_STATUS Zero Battery ID Eight Battery Status\nSetPDFeature 00000000B set_feature Feature Selector Feature Specific Zero None\nTable 9.7 PD Request Codes\nbRequest Value\nGET_BATTERY_STATUS 21\nTable 9.8 PD Feature Selectors\nFeature Selector Recipient Value\nBATTERY_WAKE_MASK Device 40\nCHARGING_POLICY Device 54\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9919.4 PDUSB Hub and PDUSB Peripheral Device Requests"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.4.1",
    "title": "GetBatteryStatus",
    "full_path": "9.4.1 GetBatteryStatus",
    "page": 991,
    "level": 3,
    "parent_id": "9.4",
    "tags": [],
    "content": "The request shown in Table 9.9, \"Get Battery Status Request\" returns the current status of the Battery in a PDUSB\nHub /Peripheral, with Battery Status information as shown in Table 9.10, \"Battery Status Structure\" .\nTable 9.9 Get Battery Status Request\nbmRequestType bRequest wValue wIndex wLength Data\n10000000B GET_BATTERY_STATUS Zero Battery ID Eight Battery Status\nTable 9.10 Battery Status Structure\nOffset Field Size Value Description\n0\nbBatteryAttributes1 Number Shall indicate whether a Battery is installed and\nwhether this is charging or discharging.\nValue Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "There is no Battery",
    "full_path": "0 There is no Battery",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "The Battery is charging",
    "full_path": "1 The Battery is charging",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "The Battery is discharging",
    "full_path": "2 The Battery is discharging",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "The Battery is neither discharging nor charging",
    "full_path": "3 The Battery is neither discharging nor charging",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "255...4 Reserved and Shall Not be used\n1bBatterySOC1 Number Shall indicate the Battery State of Charge given as\npercentage value from Battery Remaining Capacity.\n2\nbBatteryStatus1 Number If a Battery is present Shall indicate the present status\nof the Battery .\nValue Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "No error",
    "full_path": "0 No error",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Battery required and not present",
    "full_path": "1 Battery required and not present",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Battery non-chargeable/wrong chemistry",
    "full_path": "2 Battery non-chargeable/wrong chemistry",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Over-temp shutdown",
    "full_path": "3 Over-temp shutdown",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Over-voltage shutdown",
    "full_path": "4 Over-voltage shutdown",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Over-current shutdown",
    "full_path": "5 Over-current shutdown",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Fatigued Battery",
    "full_path": "6 Fatigued Battery",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Unspecified error",
    "full_path": "7 Unspecified error",
    "page": 991,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "255...8 Reserved and Shall Not be used\nPage 992 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10If wValue or wLength are not as specified above, then the behavior of the PDUSB Device is not specified.\nIf wIndex refers to a Battery that does not exist, then the PDUSB Device Shall respond with a Request Error.\nIf the PDUSB Device is not configured, the PDUSB Hub 's response to this request is undefined.\nIf the PDUSB Hub is not configured, the PDUSB Hub 's response to this request is undefined."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9.4.2",
    "title": "SetPDFeature",
    "full_path": "9.4.2 SetPDFeature",
    "page": 992,
    "level": 3,
    "parent_id": "9.4",
    "tags": [],
    "content": "The request shown in Table 9.11, \"Set PD Feature\" sets the value requested in the PDUSB Hub /Peripheral.\nSetting a feature enables that feature or starts a process associated with that feature; see Table 9.8, \"PD Feature\nSelectors\" for the feature selector definitions. Features that May be set with this request are:\n BATTERY_WAKE_MASK.\n CHARGING_POLICY.3\nbRemoteWakeCapStatus1 Bitmap If the device supports remote wake, then the device\nShall support Battery Remote wake events. The\ndefault value for the Remote wake events Shall be\nturned off (set to zero) and can be enable/disabled by\nthe host as required. If set to one the device Shall\ngenerate a wake event when a change of status\noccurs. See Section 9.4.2, \"SetPDFeature\" for more\ndetails.\nValue Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery present event",
    "full_path": "0 Battery present event",
    "page": 992,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Charging flow",
    "full_path": "1 Charging flow",
    "page": 992,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Battery error",
    "full_path": "2 Battery error",
    "page": 992,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7:3 Reserved and Shall be set to zero\n4\nwRemainingOperatingTime2 Number Shall contain the operating time (in minutes) until the\nWeak Battery threshold is reached, based on Present\nBattery Strength and the device's present operational\npower needs.\nNote: This value Shall exclude any additional power re -\nceived from charging.\nA Battery that is not capable of returning this information\nShall return a value of 0xFFFF .\n6\nwRemainingChargeTime2 Number Shall contain the remaining time (in minutes) until the\nCharged Battery threshold is reached based on Present\nBattery Strength, charging power and the device's present\noperational power needs. Value Shall only be Valid if the\nCharging Flow is \"Charging\".\nA Battery that is not capable of returning this information\nShall return a value of 0xFFFF .\nTable 9.11 Set PD Feature\nbmRequestType bRequest wValue wIndex wLength Data\n00000000B set_ feature Feature Selector Feature Specific Zero NoneTable 9.10 Battery Status Structure\nOffset Field Size Value Description\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 9939.4.2.1 BATTERY_WAKE_MASK Feature Selector\nWhen the feature selector is set to BATTERY_WAKE_MASK, then the wIndex field is structured as shown in\nTable 9.12, \"Battery Wake Mask\" .\nThe SPM May Enable or Disable the wake events associated with one or more of the above events by using this\nfeature.\nIf the PDUSB Hub is not configured, the PDUSB Hub 's response to this request is undefined.Table 9.12 Battery Wake Mask\nBit Description"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Battery Present : When this bit is set then",
    "full_path": "0 Battery Present : When this bit is set then",
    "page": 993,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the PDUSB Device Shall generate a wake\nevent if it detects that a Battery has been\ninserted."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Charging Flow : When this bit is set then the",
    "full_path": "1 Charging Flow : When this bit is set then the",
    "page": 993,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "PDUSB Device Shall generate a wake event if\nit detects that a Battery switched from\ncharging to discharging or vice versa."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Battery Error : When this bit is set then the",
    "full_path": "2 Battery Error : When this bit is set then the",
    "page": 993,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "PDUSB Device Shall generate a wake event if\nthe Battery has detected an error condition.\n15:3 Reserved and Shall Not be used\nPage 994 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-109.4.2.2 CHARGING_POLICY Feature Selector\nWhen the feature selector is set to CHARGING_POLICY, the wIndex field Shall be set to one of the values defined in\nTable 9.13, \"Charging Policy Encoding\" . If the device is using USB Type-C Current above the default value or is using\nPD then this feature setting has no effect and the rules for power levels specified in the [USB Type-C 2.4] or USB\nPD specifications Shall apply.\nThis is a Valid Command for the PDUSB Hub /Peripheral in the Address or Configured USB states. Further, it is only\nValid if the device reports a USB PD capability descriptor in its BOS descriptor and Bit 5 of the bmAttributes in that\ndescriptor is set to 1. The device will go back to the wIndex default value of 0 whenever it is reset.Table 9.13 Charging Policy Encoding\nValue Description\n00H The device Shall follow the default current limits as defined in the USB 2.0 or USB 3.1 specification, or\nas negotiated through other USB mechanisms such as BC.\nThis is the default value.\n01H The Device May draw additional power during the unconfigured and suspend states for the purposes\nof charging.\nFor charging the device itself, the device Shall limit its current draw to the higher of these two values:\nICCHPF as defined in the USB 2.0 or USB 3.1 specification, regardless of its USB state.\nCurrent limit as negotiated through other USB mechanisms such as BC.\n02H The Device May draw additional power during the unconfigured and suspend states for the purposes\nof charging.\nFor charging the device itself, the device Shall limit its current draw to the higher of these two values:\nICCLPF as defined in the USB 2.0 or USB 3.1 specification, regardless of its USB state.\nCurrent limit as negotiated through other USB mechanisms such as BC.\n03H The device Shall Not consume any current for charging the device itself regardless of its USB state.\n04H-FFFFH Reserved and Shall Not be used\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 99510 Power Rules"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.1",
    "title": "Introduction",
    "full_path": "10.1 Introduction",
    "page": 995,
    "level": 2,
    "parent_id": "10",
    "tags": [],
    "content": "The flexibility of power provision on USB Type-C® is expected to lead to power adapter re-use and the increasingly\nwidespread provision of USB power outlets in domestic and public places and in transport of all kinds.\nEnvironmental considerations could result in unbundled power adapters. Rules are needed to avoid\nincompatibility between the Source s and the Sinks they are used to power, in order to avoid user confusion and to\nmeet user expectations. This section specifies a set of rules that Source s and Sink s Shall follow. These rules provide\na simple and consistent user experience.\nThe PDP Rating is a manufacturer declared value placed on packaging to help the user understand the capabilities\nof a Charger or the size of Charger required to power their device. For PDP values of 10W and above the PDP Shall\nbe declared as an integer number of Watts. For PDP values less than 10W, the PDP Shall be declared in increments\nof 0.5W.\nThe Source Power Rules define a PDP to provide a simple way to tell the user about the capabilities of their power\nadapter or device. PDP Rating is akin to the wattage rating of a light bulb - bigger numbers mean more capability.\nThe Sink Power Rules define a PDP to provide a simple way to tell the user which Source s will provide adequate\npower for their Sink ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2",
    "title": "Source Power Rules",
    "full_path": "10.2 Source Power Rules",
    "page": 995,
    "level": 2,
    "parent_id": "10",
    "tags": [],
    "content": "The Source Power Rules defined in this section include both Normative and Optional rules. For all of the defined\nrules, the capabilities a Source exposes are based on the Port Maximum PDP , or if power constrained, the Port\nPresent PDP of the Port .\nFor a Guaranteed Capability Port , the Source Shall always include in every Source_Capabilities or\nEPR_Source_Capabilities Message sent to a Sink all the (A)PDO s that are defined by the Normative (and Optional\nwhen implemented) rules based on the Port ’s Port Maximum PDP and Mode of operation (i.e., SPR Mode or EPR\nMode ).\nFor a Managed Capability Port , except before the First Explicit Contract or before the Explicit Contract after the Port\nPresent PDP changes on a Shared Capacity Charger Port , the Source Shall always include in every\nSource_Capabilities or EPR_Source_Capabilities Message sent to a Sink all the (A)PDO s that are defined by the\nNormative (and Optional when implemented) rules based on the Port ’s Port Present PDP and Mode of operation\n(i.e., SPR Mode or EPR Mode ). After the First Explicit Contract , this requirement assures that the attached Sink will\nalways know what voltages (or voltage modes) are presently available from the Source .\nIn order to meet the expectations of the user, the Maximum Current/Power in the Source Capabilities PDO or APDO\nfor Source s with a PDP Rating of x Watts Shall be as follows:\n Maximum current for Normative and Optional Fixed Supply /Variable Supply PDOs Shall be either\nRoundUp(x/voltage) or RoundDown(x/voltage) to the nearest 10mA.\n Maximum current for SPR Programmable Power Supply APDO s Shall be as defined in Table 10.10, \"SPR\nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\" .\nNote: When the Constant Power bit is set in the APDO , the programmable power supply's output current is as\ndefined in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum\nPDP\" however the programmable power supply will limit its output current so that the product of its\nactual output voltage times the output current does not exceed the PDP.\n If a 9V Prog, 15V Prog or 20V Prog Programmable Power Supply APDO is Advertised when not required\nby Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\" ,\nthen the maximum current Shall be RoundDown (x/Prog Voltage) to the nearest 50mA. When the PPS\nPower Limited bit is clear the Source Shall provide this current at Maximum Voltage .\n Maximum power for Optional Battery Supply PDOs Shall be ≤ x.\nPage 996 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010.2.1 Source Power Rule Considerations\nThe Source Power Rules are designed to:\n Ensure the PDP Rating (PDP) of an adapter specified in watts explicitly defines the voltages and\ncurrents at each voltage the adapter supports.\n Ensure that adapters with a large PDP Rating s are always capable of providing the power to devices\ndesigned for use with adapters with a smaller PDP Rating .\n Enable an ecosystem of adapters that are inter-operable with the devices in the ecosystem.\nThe considerations that lead to the Source Power Rules are based are summarized in Table 10.1, \"Considerations for\nSources\" .\nTable 10.1 Considerations for Sources\nConsiderations Rationale Consequence\nSimple to identify capabilityA user going into an electronics retailer\nknows what they needCannot have a complex identification\nscheme\nHigher power Source s are a superset of\nsmaller onesBigger is always better in user’s eyes – don’t\nwant a degradation in performanceHigher power Source s do everything smaller\nones do\nUnambiguous Source definitionsSource s with the same power rating but\ndifferent VI combinations might not inter-\noperateTo avoid user confusion, any given power\nrating has a single definition\nA range of power ratingsUsers and companies will want freedom to\npick appropriate Source ratingsFixed profiles at specific power levels don’t\nprovide adequate flexibility, e.g., profiles as\ndefined in previous versions of PD.\n5V@3A USB Type-C Source is defined by\n[USB Type-C 2.4]5V@3A USB Type-C Source is consideredAll > 15W adapters must support 5V@3A or\nsuperset consideration is violated\nMaximize 3A cable utilization 3A cables will be ubiquitousIncrease to maximum voltage (20V) before\nincreasing current beyond 3A\nOptimize voltage rail countMore rails are a higher burden for Source s,\nparticularly in terms of testing5V is a basic USB requirement. 48V provides\nthe maximum capability.\nSome Source s are not able to provide\nsignificant powerSome small Battery -operated Source s e.g.,\nmobile devices, are able to provide more\npower directly from their Battery than from\na regulated 5V supplyIn addition to the minimal 5V\nAdvertise ments are able to Advertise more\npower from their Battery\nSome Source s share power between\nmultiple Ports ( Hub s and multi- Port\nCharger s)Hub s and multi-port Charger s have to be\nsupportedSee Section 10.3, \"Sink Power Rules\"\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 99710.2.2 Normative Voltages and Currents\nThe voltages and currents an SPR Source with a PDP Rating of x Watts Shall support are as defined in Table 10.2,\n\"SPR Normative Voltages and Minimum Currents\" .\nTable 10.2 SPR Normative Voltages and Minimum Currents\nPort Maximum\nPDP Rating (W)5V Fixed 9V Fixed 15V Fixed 20V Fixed SPR AVS"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5",
    "title": "≤ x ≤ 15 (PDP/5)A3 - - - -",
    "full_path": "0.5 ≤ x ≤ 15 (PDP/5)A3 - - - -",
    "page": 997,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "< x ≤ 27 3A2(PDP/9)A3 - - -",
    "full_path": "15 < x ≤ 27 3A2(PDP/9)A3 - - -",
    "page": 997,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "< x ≤ 45 3A23A2(PDP/15)A3-(9V – 15V):",
    "full_path": "27 < x ≤ 45 3A23A2(PDP/15)A3-(9V – 15V):",
    "page": 997,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x ≤ 60 3A23A23A2(PDP/20)A3(9V – 15V):",
    "full_path": "45 < x ≤ 60 3A23A23A2(PDP/20)A3(9V – 15V):",
    "page": 997,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A4\n(15V – 20V):\n (20V Fixed Supply Max Current) A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "60",
    "title": "< x ≤ 100 3A23A23A2(PDP/20)A1, 3(9V – 15V):",
    "full_path": "60 < x ≤ 100 3A23A23A2(PDP/20)A1, 3(9V – 15V):",
    "page": 997,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A4, 5\n(15V – 20V):\n (20V Fixed Supply Max Current) A1, 5\n1) Requires a 5A cable.\n2) The Fixed Supply PDOs Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundUp ( PDP/voltage) to the\nnearest 10mA. Requires a 5A cable if over 3A is Advertise d.\n3) The Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown ( PDP/voltage) or RoundUp ( PDP/voltage) to the\nnearest 10mA.\n4) SPR AVS current for this voltage range is the maximum current as Advertise d by the 15V Fixed Supply PDO. This current can be higher\nthan 3A (refer to Note 2 ). Requires a 5A cable if over 3A is Advertise d.\n5) The Sink is allowed to request up to the 20V Fixed Supply Max Current when the requested voltage is 15.0V.\nPage 998 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10SPR Managed Capability Port s when power constrained are defined to offer Valid (A)PDO s based on the port's Port\nMaximum PDP (as per Table 10.2, \"SPR Normative Voltages and Minimum Currents\" ) at lower Port Present PDP\n(as per Table 10.3, \"SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\" ) because these\nvoltages would otherwise be available if the Managed Capability Port power hadn't been constrained.\nTable 10.3 SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\nPort Present\nPDP (W)5V Fixed 9V Fixed 15V Fixed 20V Fixed SPR AVS with Max Voltage of 15V or\n20V per Table 10.26"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "< x ≤ 15 (PDP/5)A3(PDP/9)A3,7, 8(PDP/15)A3,7,8(PDP/20)A3,7,8(9V – 15V):",
    "full_path": "5 < x ≤ 15 (PDP/5)A3(PDP/9)A3,7, 8(PDP/15)A3,7,8(PDP/20)A3,7,8(9V – 15V):",
    "page": 998,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A4, 6, 8\n(15V – 20V):\n (20V Fixed Supply Max Current) A6,8"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "< x ≤ 27 3A2(PDP/9)A3(PDP/15)A3,7",
    "full_path": "15 < x ≤ 27 3A2(PDP/9)A3(PDP/15)A3,7",
    "page": 998,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "(PDP/20)A3,7(9V – 15V):\n (15V Fixed Supply Max Current) A4\n(15V – 20V):\n (20V Fixed Supply Max Current) A627 < x ≤ 45 3A23A2(PDP/15)A3"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x ≤ 60 3A23A23A2(PDP/20)A3(9V – 15V):",
    "full_path": "45 < x ≤ 60 3A23A23A2(PDP/20)A3(9V – 15V):",
    "page": 998,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A4\n(15V – 20V):\n (20V Fixed Supply Max Current) A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "60",
    "title": "< x ≤ 100 3A23A23A2(PDP/20)A1, 3(9V – 15V):",
    "full_path": "60 < x ≤ 100 3A23A23A2(PDP/20)A1, 3(9V – 15V):",
    "page": 998,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " (15V Fixed Supply Max Current) A4, 5\n(15V – 20V):\n (20V Fixed Supply Max Current) A1, 5\n1) Requires a 5A cable.\n2) The Fixed Supply PDOs Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundUp ( PDP/voltage) to the\nnearest 10mA. Requires a 5A cable if over 3A is Advertise d.\n3) The Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown ( PDP/voltage) or RoundUp ( PDP/voltage) to the\nnearest 10mA.\n4) SPR AVS current for this voltage range is the maximum current as Advertise d by the 15V Fixed Supply PDO. This current can be higher\nthan 3A (refer to Note 2 ). Requires a 5A cable if over 3A is Advertise d.\n5) The Sink is allowed to request up to the 20V Fixed Supply Max Current when the requested voltage is 15.0V.\n6) The Max Voltage for SPR AVS is what is allowed by Table 10.2, \"SPR Normative Voltages and Minimum Currents\" based on the port's\nPort Maximum PDP .\n7) This SPR Fixed Supply voltage is only available if allowed by Table 10.2, \"SPR Normative Voltages and Minimum Currents\" based on the\nport's Port Maximum PDP .\n8) SPR Source s May offer (A)PDO s at this Port Present PDP\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 999In reference to Table 10.3, \"SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\" ,\nTable 10.4, \"SPR Source Port Present PDP less than Port Maximum PDP Examples\" gives examples of which SPR\ncapabilities are Advertised based on Port Present PDP on a Managed Capability Port and the port's Port Maximum\nPDP and cable's current rating.\nTable 10.4 SPR Source Port Present PDP less than Port Maximum PDP Examples\nPort Maximum PDP\nand Cable RatingPort Present\nPDPOffers\n5V Fixed 9V Fixed 15V Fixed 20V Fixed SPR AVS\n80W / 5A 65W 3A13A13A1 3.25A9V – 15V: 3A\n15V – 20V: 3.25A\n80W / 5A 40W 3A13A1 2.67A 2A9V – 15V: 2.67A\n15V – 20V: 2A\n80W / 3A 40W 3A1 3A 2.67A 2A9V – 15V: 2.67A\n15V – 20V: 2A\n40W / 5A 40W 3A13A1 2.67A Not Offered 9V – 15V: 2.67A\n40W / 3A 40W 3A1 3A 2.67A Not Offered 9V – 15V: 2.67A\n80W / 5A 20W 3A1 2.22A 1.33A 1A9V – 15V: 1.33A\n15V – 20V: 1A\n80W / 3A 20W 3A1 2.22A 1.33A 1A9V – 15V: 1.33A\n15V – 20V: 1A\n40W / 5A 20W 3A1 2.22A 1.33A Not Offered 9V – 15V: 1.33A\n40W / 3A 20W 3A1 2.22A 1.33A Not Offered 9V – 15V: 1.33A\n80W/3A 15W 3A 1.67A21A20.75A29V - 15V: 1A2\n15V - 20V: 0.75A2\n40W/3A 15W 3A 1.67A21A2 Not offered 9V - 15V: 1A2\n1) The Fixed Supply PDO Maximum Current field will Advertise at least 3A but May Advertise up to RoundUp ( PDP /voltage) to the\nnearest 10mA.\n2) These Capabilities are not required but may be offered at this Port Present PDP .\nPage 1000 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010.2.2.1 Fixed Supply PDOs\nFigure 10.1, \"SPR Source Power Rule Illustration for Fixed Supply PDOs\" illustrates the minimum current that an SPR\nSource Shall support at each voltage for a given PDP Rating for Fixed Supply PDOs.\nNote: Not illustrated are that currents higher than 3A are allowed to be offered up to a limit of 5A given that a\n5A cable is detected by the Source and the voltage times current remains within the Source PDP Rating .\nFigure 10.1 SPR Source Power Rule Illustration for Fixed Supply PDOs\nFigure 10.2, \"SPR Source Power Rule Example For Fixed Supply PDOs\" shows an example of an adapter with a rating\nat 50W. The adapter is required to support 20V at 2.5A, 15V at 3A, 9V at 3A and 5V at 3A.0123456"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "01",
    "title": "02 0 30 40 50 60 70 80 90 1005V9V",
    "full_path": "01 02 0 30 40 50 60 70 80 90 1005V9V",
    "page": 1000,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15V5 + 9V 5 + 9 + 15V\n20V7.5W\n15W\n27W\n45W\nSource PDP Rating (W)Current (A)\nRP1 RP220V"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "+ 9 + 15V",
    "full_path": "5 + 9 + 15V",
    "page": 1000,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1001Figure 10.2 SPR Source Power Rule Example For Fixed Supply PDOs\nTable 10.5, \"Fixed Supply PDO - Source 5V\" , Table 10.6, \"Fixed Supply PDO - Source 9V\" , Table 10.7, \"Fixed Supply PDO\n- Source 15V\" and Table 10.8, \"Fixed Supply PDO - Source 20V\" show the Fixed Supply PDOs that Shall be supported\nfor each of the Normative voltages defined in Table 10.2, \"SPR Normative Voltages and Minimum Currents\" .\nTable 10.5 Fixed Supply PDO - Source 5V\nBit(s) Description\nB31…30 Fixed Supply\nB29 Dual-Role Power\nB28 USB Suspend Supported\nB27 Unconstrained Power\nB26 USB Communications Capable\nB25 Dual-Role Data\nB24 Unchunked Extended Messages Supported\nB23 EPR Capable\nB22 Reserved – Shall be set to zero.\nB21…20 Peak Current\nB19…10 5V\nB9...0Current based on PDP\nPDP Rating (x) Current (A)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5",
    "title": "≤ x ≤ 15 x ÷ 5",
    "full_path": "0.5 ≤ x ≤ 15 x ÷ 5",
    "page": 1001,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "< x ≤ 25 3 ≤ A ≤ x ÷ 5",
    "full_path": "15 < x ≤ 25 3 ≤ A ≤ x ÷ 5",
    "page": 1001,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "25",
    "title": "< x ≤ 100 3 ≤ A ≤ 5 0123456",
    "full_path": "25 < x ≤ 100 3 ≤ A ≤ 5 0123456",
    "page": 1001,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "01",
    "title": "02 0 30 40 50 60 70 80 90 1005V9V",
    "full_path": "01 02 0 30 40 50 60 70 80 90 1005V9V",
    "page": 1001,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "15V5 + 9V 5 + 9 + 15V\n20V7.5W\n15W\n27W\n45W\nSource PDP Rating (W)Current (A)\nRP1 RP2\n50W20V"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "+ 9 + 15V",
    "full_path": "5 + 9 + 15V",
    "page": 1001,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 1002 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10More current May be offered in the PDOs when Optional voltages/currents are supported and a 5A cable is being\nused (see Section 10.2.3, \"Optional Voltages/Currents\" ).Table 10.6 Fixed Supply PDO - Source 9V\nBit(s) Description\nB31…30 Fixed Supply\nB29...22 Reserved – Shall be set to zero.\nB21…20 Peak Current\nB19…10 9V\nB9...0Current based on PDP\nPDP Rating (x) Current (A)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5",
    "title": "≤ x ≤ 15 PDO not required",
    "full_path": "0.5 ≤ x ≤ 15 PDO not required",
    "page": 1002,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "< x ≤ 27 x ÷ 9",
    "full_path": "15 < x ≤ 27 x ÷ 9",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "< x ≤ 45 3 ≤ A ≤ x ÷ 9",
    "full_path": "27 < x ≤ 45 3 ≤ A ≤ x ÷ 9",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x ≤ 100 3 ≤ A ≤ 5",
    "full_path": "45 < x ≤ 100 3 ≤ A ≤ 5",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 10.7 Fixed Supply PDO - Source 15V\nBit(s) Description\nB31…30 Fixed Supply\nB29...22 Reserved – Shall be set to zero.\nB21…20 Peak Current\nB19…10 15V\nB9...0Current based on PDP\nPDP Rating (x) Current (A)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5",
    "title": "≤ x ≤ 27 PDO not required",
    "full_path": "0.5 ≤ x ≤ 27 PDO not required",
    "page": 1002,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "< x ≤ 45 x ÷ 15",
    "full_path": "27 < x ≤ 45 x ÷ 15",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x ≤ 75 3 ≤ A ≤ x ÷ 15",
    "full_path": "45 < x ≤ 75 3 ≤ A ≤ x ÷ 15",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "75",
    "title": "< x ≤ 100 3 ≤ A ≤ 5",
    "full_path": "75 < x ≤ 100 3 ≤ A ≤ 5",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table 10.8 Fixed Supply PDO - Source 20V\nBit(s) Description\nB31…30 Fixed Supply\nB29...22 Reserved – Shall be set to zero.\nB21…20 Peak Current\nB19…10 20V\nB9...0Current based on PDP\nPDP Rating (x) Current (A)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0.5",
    "title": "≤ x ≤ 45 PDO not required",
    "full_path": "0.5 ≤ x ≤ 45 PDO not required",
    "page": 1002,
    "level": 2,
    "parent_id": "0",
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x ≤ 100 x ÷ 20",
    "full_path": "45 < x ≤ 100 x ÷ 20",
    "page": 1002,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 100310.2.2.2 SPR Adjustable Voltage Supply (AVS)\nFor SPR AVS , Figure 10.3, \"Valid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\" ,\nFigure 10.4, \"Valid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\" and Figure\n10.5, \"Valid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤ 100W\" illustrate the valid\noperating region for SPR AVS RDO requests in the ranges of 27W < PDP ≤ 45W, 45W < PDP ≤ 60W and 60W < PDP ≤\n100W, respectively.\nFigure 10.3 Valid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\nFigure 10.4 Valid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\n0123456"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1 53 04 56 0RDO Current (A)",
    "full_path": "0 1 53 04 56 0RDO Current (A)",
    "page": 1003,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "RDO Voltage (V)Invalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP ч\u0003ϰϱtValid RDO Requests\n20V 9V\n15V Fixed PDO Max Current15V\n0123456\n30RDO Current (A)\nRDO Voltage (V)Invalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP ч\u0003ϰϱtValid RDO Requests\n20V 9V\n15V Fixed PDO Max Current 15V\n20V Fixed PDO Max Current(Minimum of 3A)\nPage 1004 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 10.5 Valid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤ 100W"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.2.2.1",
    "title": "SPR Adjustable Voltage Supply (AVS) Voltage Ranges",
    "full_path": "10.2.2.2.1 SPR Adjustable Voltage Supply (AVS) Voltage Ranges",
    "page": 1004,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\" shows the\nMinimum and Maximum Voltage for the SPR AVS ranges.\nThe voltage output at the Source 's connector Shall be +/-5% for both the Maximum Voltage and the Minimum\nVoltage.Table 10.9 SPR Adjustable Voltage Supply (AVS) Voltage Ranges\nAVS Voltage Range\n15V AVS 20V AVS\nMaximum Voltage 15V 20V\nMinimum Voltage 9V 9V\n0123456\n30RDO Current (A)\nRDO Voltage (V)Invalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP ч\u0003ϰϱtValid RDO Requests\n20V 9V\n* At 15.0V, up to the (20V Fixed PDO\nCurrent)A is allowed15V*\n20V Fixed PDO Max Current\n15V Fixed PDO Max Current\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 100510.2.3 Optional Voltages/Currents"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.3.1",
    "title": "Optional Normative Fixed, Variable and Battery Supply",
    "full_path": "10.2.3.1 Optional Normative Fixed, Variable and Battery Supply",
    "page": 1005,
    "level": 4,
    "parent_id": "10.2.3",
    "tags": [],
    "content": "In addition to the voltages and currents specified in Section 10.2.2, \"Normative Voltages and Currents\" , an SPR\nSource that is optimized for use with a specific Sink or a specific class of Sinks May Optionally supply additional\nvoltages and increased currents. However, the Optional voltages Shall Not exceed 9V.\nOptional voltages Shall Not be implemented on EPR Source including for both SPR Mode and EPR Mode s of\noperation. EPR versions of Variable Supply and Battery Supply PDOs are not defined and Shall Not be implemented,\nhowever SPR Variable Supply and Battery Supply PDOs are allowed in EPR Mode .\nWhile allowed, the use of Optional voltages and currents is not recommended as two Source s with the same PDP\nRating but not supporting the same Optional voltages and currents can behave differently thus confusing the user.\nSee Section 10.2, \"Source Power Rules\" for the rules that Shall apply to Optional PDOs in order to be consistent with\nthe declared PDP Rating and the Normative voltages and currents."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.3.2",
    "title": "Optional Normative SPR Programmable Power Supply",
    "full_path": "10.2.3.2 Optional Normative SPR Programmable Power Supply",
    "page": 1005,
    "level": 4,
    "parent_id": "10.2.3",
    "tags": [],
    "content": "The voltages and currents a Programmable Power Supply with a PDP Rating of x Watts Shall support are as defined\nTable 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\" .\nWhen Optional Programmable Power Supply APDO s are offered, the following requirements Shall apply:\n A Source that Advertises Optional Programmable Power Supply APDO s Shall Advertise the PDOs and\nAPDO s shown in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port\nMaximum PDP\" .\n A Source Shall Advertise Optional Programmable Power Supply APDO s with Maximum Voltage and\nMinimum Voltages for nominal voltage as defined in Table 10.11, \"SPR Programmable Power Supply\nVoltage Ranges\" .\n A Source Shall Not Advertise a Programmable Power Supply APDO that does not follow the Minimum\nVoltage and Maximum Voltage defined in Table 10.11, \"SPR Programmable Power Supply Voltage\nRanges\" .\n In no case Shall a Source Advertise a current that exceeds the Attached cable's current rating.\n The Max Voltage Shall Not exceed 21V while in SPR Mode .\nTable 10.10 SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\nPDP Maximum PDP\n(W)SPR Fixed and AVS 9V Prog315V Prog320V Prog3\nx < 15W\nRequired per Table 10.2, \"SPR Normative Voltages\nand Minimum Currents\" (or Table 10.3, \"SPR\nSource Capabilities When Port Present PDP is less\nthan Port Maximum PDP\" when applicable)- - -\n15W - - -"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "< x < 27W (PDP/9)A1 - -",
    "full_path": "15 < x < 27W (PDP/9)A1 - -",
    "page": 1005,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "27W 3A - -"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "< x < 45W 3A2(PDP/15)A1-",
    "full_path": "27 < x < 45W 3A2(PDP/15)A1-",
    "page": 1005,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "45W - 3A -"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "45",
    "title": "< x < 60W - 3A2 (PDP/20)A1",
    "full_path": "45 < x < 60W - 3A2 (PDP/20)A1",
    "page": 1005,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "60W - - 3A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "60",
    "title": "< x < 100W - - (PDP/20)A1",
    "full_path": "60 < x < 100W - - (PDP/20)A1",
    "page": 1005,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "100W - - 5A\n1) The SPR PPS APDO s Maximum Current field Shall Advertise RoundDown ( PDP/Prog Voltage) to the nearest 50mA.\n2) The SPR PPS APDO s Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundDown( PDP/Prog Voltage)\nto the nearest 50mA.\n3) Applies to APDO s regardless of value of the PPS Power Limited bit.\nPage 1006 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010.2.3.2.1 SPR Programmable Power Supply Voltage Ranges\nThe SPR PPS Voltage ranges map to the Fixed Supply Voltages. For each fixed voltage there is a defined voltage range\nfor the matching SPR PPS APDO . Table 10.11, \"SPR Programmable Power Supply Voltage Ranges\" shows the\nMinimum and Maximum Voltage for the Programmable Power Supply that corresponds to the Fixed nominal\nvoltage.\nThe voltage output at the Source 's connector Shall be +/-5% for both the Maximum Voltage and the Minimum\nVoltage."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.3.2.2",
    "title": "Examples of the use of SPR Programmable Power Supplies",
    "full_path": "10.2.3.2.2 Examples of the use of SPR Programmable Power Supplies",
    "page": 1006,
    "level": 5,
    "parent_id": "10.2.3.2",
    "tags": [],
    "content": "The following examples illustrate what a power adapter that Advertises a particular PDP Rating May offer:\n1) PDP 27W implementation includes:\n 5V @ 3A,\n 9V @ 3A, and\n 9V Prog @ 3A.\n2) PDP 36W implementation includes:\n 5V @ 3A,\n 9V @ 3A,\n 15 @ 2.4A,\n SPR AVS with 9V - 15V @ 2.4A,\n 9V Prog @ 3 A, and\n 15V Prog @ 2.4A.\n3) PDP 36W implementation that Optionally includes higher current in the 9V Prog PPS:\n 5V @ 3A,\n 9V @ 3A,\n 15 @ 2.4A,\n SPR AVS with 9V - 15V @ 2.4A,\n 9V Prog @ >3A up to 4A (with a 5A cable) and 15V\n Prog @ 2.4A.\n4) PDP 50W implementation includes:\n 5V @ 3A,\n 9V @ 3A,\n 15 @ 3A,\n 20V @ 2.5A,Table 10.11 SPR Programmable Power Supply Voltage Ranges\nFixed Nominal Voltage\n9V Prog 15V Prog 20V Prog\nMaximum Voltage 11V 16V 21V\nMinimum Voltage 5V 5V 5V\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1007 SPR AVS with 9V - 15V @ 3A & 15V - 20V @ 2.5A,\n 15V Prog @ 3A, and\n 20V Prog @ 2.5A.\n5) PDP 80W implementation includes:\n 5V @ 3A,\n 9V @ 3A,\n 15 @ 3A,\n 20V @ 4A,\n SPR AVS with 9V - 15V @ 3A & 15V - 20V @ 4A,\n 15V Prog @ 3A, and\n 20V Prog @ 4A.\nThe first example illustrates a basic example of a supply that can only support 5V and 9V.\nThe second and third examples illustrates as the PDP Rating goes higher there are more possible combinations that\nmeet the Power Rules . These examples also add SPR AVS . Although there are multiple ways to meet the Power Rules ,\nwhile operating in SPR Mode no more than a combination of seven SPR (A)PDO s and APDO s can be offered.\nThe fourth and fifth example show that the 15V Prog @ 3A fully covers the 9V Prog @3A range so it is not necessary\nto Advertise both. These examples also illustrate SPR AVS being extended up to 20V with separate current limits for\nthe 9V - 15V and 15V - 20V ranges - a single SPR AVS APDO covers advertising both ranges.\nPage 1008 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1010.2.3.3 Optional Normative Extended Power Range (EPR)\nSupport of EPR Mode is Optional . An EPR Capable port has a PDP Rating that is >100W and ≤ 240W. An EPR Capable\nSource Port (EPR Source Port ) May operate in either SPR Mode or EPR Mode when operating at 100W or less.\nAn EPR Source Port operating in SPR Mode May offer less than 100W to avoid violating safety regulations. When\noperating in EPR Mode , an EPR Source Port Shall offer 100W in Fixed 20V when not constrained by multi- port\nsharing limits.\nAn EPR Source May include multiple ports and these ports can be functionally implemented as Shared Capacity\nCharger or Assured Capacity Charger ports as defined in [USB Type-C 2.4] .\nAny port on an EPR Source that has a Port Present PDP of 100W or less Shall follow the Normative requirements\nfor SPR Source Port s and Shall operate only in SPR Mode . Any port on an EPR Source that is operating with a cable\nthat is not EPR Capable Shall operate only in SPR Mode . An EPR Source , when operating in SPR Mode with a 5A cable,\nMay offer less than 5A due to design tolerances in order to meet applicable safety standards. For best user\nexperience it Should be as close to 100W as possible.\nTable 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\" and\nTable 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using an EPR-\ncapable cable\" define the Normative requirements EPR Source Port s. While not included in these tables, any EPR\nSource Port that also supports SPR PPS Shall offer the SPR Fixed 20V PDO and PPS 20V Prog APDO at 100W (or the\nmaximum available PDP when the port is operating at an Equivalent PDP <100W) when in EPR Mode :\n When an EPR Source Port is capable of supplying its PDP Rating , it Shall adhere to the requirements\ndefined in Table 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR\nCapable Cable\" based on its PDP Rating of x Watts.\n When a Source Port on an EPR Charger is unable to provide its Port Maximum PDP , it Shall adhere to\nthe requirements defined in Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than\nPort Maximum PDP and using an EPR-capable cable\" based on a Port Present PDP of x Watts. Some\nexamples:\n An EPR Source Port May be unable to provide its PDP Rating because it is thermally constrained at\nthe time of power Negotiation .\n A Shared port on a multi-port EPR Charger that is limited by the remaining available power.\n When an EPR Charger is in an Adjustable Voltage Supply (AVS) Explicit Contract :\n It Shall Reject all Requests outside of the defined voltage range (see Table 10.15, \"EPR Adjustable\nVoltage Supply (AVS) Voltage Ranges\" ) or for a requested voltage and Current that results in a power\nlevel that is more than the Port's Advertised PDP.\n In no case Shall a Source Advertise a Current or accept a Current requested by a Sink that exceeds the\nAttached cable's current rating.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1009 The Max Voltage offered by an EPR Source Shall Not exceed 48V.\nTable 10.12 EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\nPort\nMaximum\nPDP (W)SPR Fixed and AVS 28V Fixed 36V\nFixed348V Fixed EPR AVS3, 4"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "100",
    "title": "< x ≤ 140",
    "full_path": "100 < x ≤ 140",
    "page": 1009,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Required per Table 10.2, \"SPR\nNormative Voltages and Minimum\nCurrents\" (or Table 10.3, \"SPR Source\nCapabilities When Port Present PDP is\nless than Port Maximum PDP\" when\napplicable)(PDP/28)A2N/A1N/A1(15V – PDP/5A):\n 5A\n(>PDP/5A – 28V):\n (PDP/AVS voltage) A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "140",
    "title": "< x ≤ 180 5A(PDP/",
    "full_path": "140 < x ≤ 180 5A(PDP/",
    "page": 1009,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "36)A2 N/A1(15V – PDP/5A):\n 5A\n(>PDP/5A – 36V):\n (PDP/AVS voltage) A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "180",
    "title": "< x ≤ 240 5A 5A (PDP/48)A2(15V – PDP/5A):",
    "full_path": "180 < x ≤ 240 5A 5A (PDP/48)A2(15V – PDP/5A):",
    "page": 1009,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": " 5A\n(>PDP/5A – 48V):\n (PDP/AVS voltage) A\n1) EPR Source s are disallowed from offering Fixed Supply voltages that are above the defined voltages for a given PDP, e.g., 36V is\ndisallowed for any PDP of 140W or lower.\n2) The Fixed PDOs Maximum Current field Shall Advertise either RoundDown ( PDP/voltage) or RoundUp ( PDP/voltage) to the\nnearest 10mA.\n3) EPR Source s Shall reject any request for more than the Advertise d PDP, i.e., when output voltage and operating current requested\nin the Sink RDO is outside of the defined AVS voltage and current range represented by the Advertise d PDP, the RDO will be rejected.\n4) The current available for a given AVS voltage is as indicated in this column. The current defined here is describing the top edge of\nthe Valid Operating Region as illustrated in Figure 10.6, \"Valid EPR AVS Operating Region\" . The AVS APDO does not have a\nMaximum Current field, so the maximum current has to be calculated from the PDP.\nPage 1010 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Note: EPR Managed Capability Port s when power constrained are defined to offer higher voltages at lower Port\nPresent PDP (as per Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port\nMaximum PDP and using an EPR-capable cable\" ) than the port's Port Maximum PDP (as per Table 10.12,\n\"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\" ) because these\nvoltages would otherwise be available if the Managed Capability Port power hadn't been constrained.\nManaged Capability Port s are required to be properly identified to the user based on the port's Port\nMaximum PDP .\nIn reference to Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and\nusing an EPR-capable cable\" , Table 10.14, \"EPR Source Examples when Port Present PDP is less than Port Maximum\nPDP\" gives examples of which EPR Capabilities , in addition to the required SPR Fixed Supply PDOs and SPR AVS\nAPDO , are Advertised based on Port Present PDP and the port's Port Maximum PDP .Table 10.13 EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using an\nEPR-capable cable\nPort Present\nPDP (W)SPR Fixed and AVS 28V Fixed 36V Fixed448V Fixed4EPR AVS with Max Voltage of 28V, 36V or 48V\nper Table 10.122, 5, 6\n28V 36V 48V"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7.5",
    "title": "≤ x ≤ 15 Required per Table 10.2, \"SPR",
    "full_path": "7.5 ≤ x ≤ 15 Required per Table 10.2, \"SPR",
    "page": 1010,
    "level": 2,
    "parent_id": "7",
    "tags": [],
    "content": "Normative Voltages and\nMinimum Currents\" (or\nTable 10.3, \"SPR Source\nCapabilities When Port\nPresent PDP is less than Port\nMaximum PDP\" when\napplicable)(PDP/28) A3\n(PDP/36) A3\n(PDP/48) A3 (15V – max voltage):\n (PDP/AVS Voltage) A315 < x ≤ 27"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "27",
    "title": "< x ≤ 45",
    "full_path": "27 < x ≤ 45",
    "page": 1010,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "(PDP/28) A1 45 < x ≤ 60\n(PDP/36)\nA160 < x ≤ 100\n(PDP/48)\nA1Up to 75W:\n (15V – max voltage):\n (PDP/AVS voltage) A\nAbove 75W:\n (15V – PDP/5A):\n 5A\n (>PDP/5A – max voltage):\n (PDP/AVS voltage) A100 < x ≤ 140\nTable 10.3, \"SPR Source\nCapabilities When Port\nPresent PDP is less than Port\nMaximum PDP\" with a Port\nPresent PDP of 100W.140 < x ≤ 180 5A"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "180",
    "title": "< x ≤ 240 5A 5A",
    "full_path": "180 < x ≤ 240 5A 5A",
    "page": 1010,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "1) The Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown ( PDP/voltage) or RoundUp ( PDP/voltage) to the\nnearest 10mA.\n2) EPR Source s Shall reject any Request for more than the Advertise d PDP, i.e., when output voltage and operating current requested in\nthe Sink RDO is outside of the defined AVS voltage and current range represented by the Advertise d PDP, the RDO will be rejected.\n3) EPR Source s May offer an (A)PDO s at this Port Present PDP . When offered, the Fixed Supply PDOs Maximum Current field Shall\nAdvertise either RoundDown ( PDP/Voltage) or RoundUp ( PDP/Voltage) to the nearest 10mA.\n4) This EPR Fixed Supply voltage is only available if allowed by Table 10.12, \"EPR Source Capabilities based on the Port Maximum\nPDP and using an EPR Capable Cable\" based on the port’s PDP Rating .\n5) The Max Voltage for AVS is what is allowed by T Table 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and\nusing an EPR Capable Cable\" based on the port’s Port Maximum PDP .\n6) The current available based on AVS voltage is as indicated in this column. The current defined here is describing the top edge of the\nValid Operating Region as illustrated in Figure 10.6, \"Valid EPR AVS Operating Region\" . AVS APDO does not have a Maximum\nCurrent field so the maximum current has to be calculated from the PDP .\nTable 10.14 EPR Source Examples when Port Present PDP is less than Port Maximum PDP\nPort Maximum\nPDPPort Present\nPDPOffers\n28V Fixed 36V Fixed 48V Fixed AVS\n200W 108W 3.86A 3A 2.25A 48V@108W\n160W 108W 3.86A 3A Not offered 36V@108W\n120W 108W 3.86A Not offered Not offered 28V@108W\n200W 72W 2.57A 2A 1.5A 48V@72W\n160W 72W 2.57A 2A Not offered 36V@72W\n120W 72W 2.57A Not offered Not offered 28V@72W\n200W 36W 1.29A 1A10.75A148V@36W1\n1) These Capabilities are not required but may be offered at this Port Present PDP .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1011EPR Source s when operating in an AVS Explicit Contract are required to stay within their PDP as such they Shall\nrespond to any request (VA) for more than the PDP with a Reject Message . Figure 10.6, \"Valid EPR AVS Operating\nRegion\" illustrates the definition of the Valid operating range for an EPR Source operating in an AVS Explicit\nContract based on its Advertised PDP.\nFigure 10.6 Valid EPR AVS Operating Region\nFigure 10.7, \"EPR Source Power Rule Illustration for Fixed PDOs\" illustrates the minimum current that an EPR Source\nShall support at each voltage for a given PDP Rating .\nNote: Not illustrated are that currents higher than 3A are allowed to be offered up to a limit of 5A given that a\n5A cable is detected by the Source and the voltage times current remains within the Source PDP Rating .160W 36W 1.29A 1A1 Not offered 36V@36W1\n120W 36W 1.29A Not offered Not offered 28V@36WTable 10.14 EPR Source Examples when Port Present PDP is less than Port Maximum PDP\nPort Maximum\nPDPPort Present\nPDPOffers\n28V Fixed 36V Fixed 48V Fixed AVS\n1) These Capabilities are not required but may be offered at this Port Present PDP .\n0123456"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "1 53 04 56 0RDO Current (A)",
    "full_path": "0 1 53 04 56 0RDO Current (A)",
    "page": 1011,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "RDO Voltage (V)5A\nInvalid Requests\n(Crosshatched Area)Valid Operating Region\nfor EPR AVS Sink RequestsValid RDO Requests\nAdvertised\nVoltage =\n28, 36 or 48V 15VVoltage =\nPDP/5A\nCurrent =\nAdvertised PDP/Advertised Voltage\nPage 1012 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure 10.7 EPR Source Power Rule Illustration for Fixed PDOs"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.2.3.3.1",
    "title": "EPR Adjustable Voltage Supply (AVS) Voltage Ranges",
    "full_path": "10.2.3.3.1 EPR Adjustable Voltage Supply (AVS) Voltage Ranges",
    "page": 1012,
    "level": 5,
    "parent_id": null,
    "tags": [],
    "content": "Table 10.15, \"EPR Adjustable Voltage Supply (AVS) Voltage Ranges\" shows the Minimum and Maximum Voltage for\nthe EPR AVS ranges.\nThe voltage output at the Source 's connector Shall be +/-5% for both the Maximum Voltage and the Minimum\nVoltage.Table 10.15 EPR Adjustable Voltage Supply (AVS) Voltage Ranges\nAVS Voltage Ranges\n28V AVS 36V AVS 48V AVS\nMaximum Voltage 28V 36V 48V\nMinimum Voltage 15V 15V 15V0123456"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "02",
    "title": "04 06 08 0 1 0 0",
    "full_path": "02 04 06 08 0 1 0 0",
    "page": 1012,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Source PDP Rating (W)Current (A)"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "120",
    "title": "140 160 180 200 220 240",
    "full_path": "120 140 160 180 200 220 240",
    "page": 1012,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "RP1 RP25V15V5 + 9V 5 + 9 + 15V\n20V7.5W\n27W\n45W15W\n100W\n140W\n180W20V\n9V5 + 9 + 15V 5 + 9 + 15V28V36V48V"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "+ 9 + 15V 5 + 9 + 15V20V 20+28V 20+28+36V",
    "full_path": "5 + 9 + 15V 5 + 9 + 15V20V 20+28V 20+28+36V",
    "page": 1012,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 101310.3 Sink Power Rules"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.3.1",
    "title": "Sink Power Rule Considerations",
    "full_path": "10.3.1 Sink Power Rule Considerations",
    "page": 1013,
    "level": 3,
    "parent_id": "10.3",
    "tags": [],
    "content": "The Sink Power Rules are designed to ensure the best possible user experience when a given Sink used with a\ncompliant Source of arbitrary Output Power Rating that only supplies the Normative voltages and currents.\nThe Sink Power Rules are based on the following considerations:\n Low power Source s (e.g., 5V) are expected to be very common and will be used with Sinks designed for\na higher PDP.\n Optimizing the user experience when Source s with a higher PDP Rating are used with low power Sinks.\n Preventing Sinks that only function well (or at all) when using Optional voltages and currents."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10.3.2",
    "title": "Normative Sink Rules",
    "full_path": "10.3.2 Normative Sink Rules",
    "page": 1013,
    "level": 3,
    "parent_id": "10.3",
    "tags": [],
    "content": "Sinks designed to use Source s with a PDP Rating of x W Shall :\n Either operate or charge from Source s that have a PDP Rating ≥ x W.\n Either operate, charge or indicate a Capabilities Mismatch (see Section 6.4.2.3, \"Capability Mismatch\" )\nfrom Source s that have a PDP Rating < x W and ≥ 0.5W.\nA Sink optimized for a Source with Optional voltages and currents or power as described in Section 10.2.3, \"Optional\nVoltages/Currents\" with a PDP Rating of x W Shall provide a similar user experience when powered from a Source\nwith a PDP Rating of ≥ x W that supplies only the Normative voltages and currents as specified in Section 10.2.2,\n\"Normative Voltages and Currents\" . For example, a 60W Source might not offer 9V Prog or 15V Prog since 20V Prog\nis a suitable substitute for both (as shown in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based\non the Port Maximum PDP\" ).\nThe Operational Current/Power in the Sink Capabilities PDO for Sinks with an Operational PDP of x Watts Shall be\nas follows:\n Operational current for Fixed Supply /Variable Supply PDOs: RoundDown(x/voltage) to the nearest\n10mA.\n Operational power for Battery Supply PDOs: ≤ x.\n Operational current for Programmable Power Supply APDO s as defined in Table 10.10, \"SPR\nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\" : RoundDown (x/Prog\nVoltage) to the nearest 50mA.\nThe Maximum Current/Power in the Sink RDO for Sinks with an Operational PDP of x Watts and Maximum PDP of y\nWatts Shall be as follows:\n Maximum current for Fixed Supply /Variable Supply RDO s from Sinks without a Battery : RoundDown(x/\nvoltage) to the nearest 10mA.\n Maximum current for Fixed Supply /Variable Supply RDO s from Sinks with a Battery : RoundDown(y/\nVoltage) to the nearest 10mA.\n Maximum power for Battery Supply RDO s from Sinks without a Battery : ≤ x.\n Maximum power for Battery Supply RDO s from Sinks with a Battery : ≤ y.\n Maximum current for PPS Supply RDO s from Source PDOs as defined in Table 10.10, \"SPR\nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\" or Table 10.14, \"EPR\nSource Examples when Port Present PDP is less than Port Maximum PDP\" : RoundDown (y/Prog Voltage)\nto the nearest 50mA.\nThe following requirements Shall apply to the Advertised Sink Capabilities :\nPage 1014 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 A Sink Shall Not Advertise Fixed Supply PDO maximum voltages and currents that exceed the PDP Rating\nthey were designed to use.\n A Sink Shall Not Advertise Variable Supply PDO maximum voltages and currents that exceed the PDP\nRating they were designed to use.\n A Sink Shall Not Advertise a Battery Supply PDO maximum allowable power that exceeds the PDP Rating\nthey were designed to use.\n A Sink Shall Not Advertise a PPS APDO maximum allowable power that exceeds the PDP Rating they\nwere designed to use.\n A Sink Shall Not Advertise an AVS APDO maximum allowable power that exceeds the PDP Rating they\nwere designed to use.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1015A CRC calculation\nA.1 C code example\n//\n// USB PD CRC Demo Code.\n//\n#include <stdio.h>\nint crc;\n//-----------------------------------------------------------------------------\nvoid crcBits(int x, int len) {\nconst int poly = 0x04C11DB6; //spec 04C1 1DB7h\nint newbit, newword, rl_crc;\nfor(int i=0; i<len; i++) {\nnewbit = ((crc>>31) ^ ((x>>i)&1)) & 1;\nif(newbit) newword=poly; else newword=0;\nrl_crc = (crc<<1) | newbit;\ncrc = rl_crc ^ newword;\nprintf(\"%2d newbit=%d, x>>i=0x%x, crc=0x%x\\n\", i, newbit,(x>>i),crc);\n}\n}\nint crcWrap(int c){\nint ret = 0;\nint j, bit;\nc = ~c;\nprintf(\"~crc=0x%x\\n\", c);\nfor(int i=0;i<32;i++) {\nj = 31-i;\nbit = (c>>i) & 1;\nret |= bit<<j;\n}\nreturn ret;\n}\n//-----------------------------------------------------------------------------\nint main(){\nint txCrc=0,rxCrc=0,residue=0,data;\nprintf(\"using packet data 0x%x\\n\", data=0x0101);\ncrc = 0xffffffff;\ncrcBits(data,16);\ntxCrc = crcWrap(crc);\nprintf(\"crc=0x%x, txCrc=0x%x\\n\", crc, txCrc);\nprintf(\"received packet after decode= 0x%x, 0x%x\\n\", data, txCrc);\ncrc = 0xffffffff;\ncrcBits(data,16);\nrxCrc = crcWrap(crc);\nprintf(\"Crc of the received packet data is (of course) =0x%x\\n\", rxCrc);\nprintf(\"continue by running the transmit crc through the crc\\n\");\ncrcBits(rxCrc,32);\nprintf(\"Now the crc residue is 0x%x\\n\", crc);\nprintf(\"should be 0xc704dd7b\\n\");\n}\nPage 1016 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10B Message Sequence Examples (Deprecated)\nThis appendix has been Deprecated .\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1017C VDM Command Examples\nC.1 Discover Identity Example\nC.1.1 Discover Identity Command request\nTable C.1, \"Discover Identity Command request from Initiator Example\" below shows the contents of the key fields\nin the Message Header and VDM Header for an Initiator sending a Discover Identity Command request.\nTable C.1 Discover Identity Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1017,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1017,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) 0xFF00 ( PD SID )\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 1 (Discover Identity )\nPage 1018 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.1.2 Discover Identity Command response - Active Cable.\nTable C.2, \"Discover Identity Command response from Active Cable Responder Example\" shows the contents of the\nkey fields in the Message Header and VDM Header for a Responder returning VDO s in response to a Discover\nIdentity Command request. In this illustration, the Responder is an active Gen2 cable which supports Modal\nOperation .\nTable C.2 Discover Identity Command response from Active Cable Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1018,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12Number of Data Objects5 (VDM Header + ID Header VDO + Cert Stat VDO +\nProduct VDO + Cable VDO )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Cable Plug 1",
    "full_path": "8 Cable Plug 1",
    "page": 1018,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) 0xFF00 ( PD SID )\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 2 (Discover Identity )\nID Header VDO\nB31USB Communications Capable as USB Host0 (not USB Communication s capable as a USB\nHost )\nB30 USB Communications Capable as a USB Device 0 (not data capable as a Device)\nB29…27 SOP’ Product Type (Cable Plug/VPD) 100b ( Active Cable )\nB26 Modal Operation Supported 1 (supports Modes)\nB25…16 Reserved . Shall be set to zero. 0\nB15…0 16-bit unsigned integer. USB Vendor ID USB-IF assigned VID for this cable vendor\nCert Stat VDO\nB31…0 32-bit unsigned integer USB-IF assigned XID for this cable\nProduct VDO\nB31…16 16-bit unsigned integer. USB Product ID Product ID assigned by the cable vendor\nB15…0 16-bit unsigned integer. bcdDevice Device version assigned by the cable vendor\nCable VDO1 (returned for Product Type “Active Cable”)\nB31…28 HW Version Cable HW version number (vendor defined)\nB27…24 Firmware Version Cable FW version number (vendor defined)\nB23…21 VDO Version 010b (Version 1.2)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1019B20 Reserved 0\nB19…18 USB Type-C plug to USB Type-C/Captive 10b ( USB Type-C®)\nB17 EPR Capable (Active Cable) 0 (not EPR Capable )\nB16…13 Cable Latency 0001b (<10ns (~1m))\nB12…11 Cable Termination Type (Active Cable) 11b (Both ends Active, VCONN required)\nB10…9 Maximum V BUS Voltage (Active Cable) 00b (20V)\nB8 SBU Supported 0 (SBUs connections supported)\nB7 SBU Type 0 (SBU is passive)\nB6…5 VBUS Current Handling Capability (Active Cable) 01b (3A)\nB4 VBUS Through Cable 1 (Yes)\nB3 SOP’’ Controller Present 1 (SOP’’ controller present)\nB2…0 Reserved 0\nCable VDO2 (returned for Product Type “Active Cable”)\nB31…24 Maximum Operating Temperature 70\nB23…16 Shutdown Temperature 80\nB15 Reserved 0\nB14…12 U3/CLd Power 010b (1-5mW)\nB11 U3 to U0 transition mode 00b (U3 to U0 direct)\nB10 Physical connection 0 (Copper)\nB9 Active element 0 (Active Re-driver)\nB8 USB4 Supported 0 (USB4 Supported)\nB7…6 USB 2.0 Hub Hops Consumed 2\nB5 USB 2.0 Supported 0 ([USB 2.0] supported)\nB4 USB 3.2 Supported 0 ([USB 3.2] SuperSpeed supported)\nB3 USB Lanes Supported 1b (Two lanes)\nB2 Optically Isolated Active Cable 0 (Not supported)\nB1 USB4 Asymmetric Mode Supported 0 (Not Supported)\nB0 USB Gen 1b (Gen 2 or higher)Table C.2 Discover Identity Command response from Active Cable Responder Example\nBit(s) Field Value\nPage 1020 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.1.3 Discover Identity Command response - Hub.\nTable C.3, \"Discover Identity Command response from Hub Responder Example\" shows the contents of the key fields\nin the Message Header and VDM Header for a Responder returning VDOs in response to a Discover SVIDs Command\nrequest. In this illustration, the Responder is a Hub .\nTable C.3 Discover Identity Command response from Hub Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1020,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12Number of Data Objects4 (VDM Header + ID Header VDO + Cert Stat VDO +\nProduct VDO )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1020,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) 0xFF00 ( PD SID )\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 2 (Discover Identity )\nID Header VDO\nB31 USB Communications Capable as USB Host 0 (not USB Communication s capable as a USB Host )\nB30 USB Communications Capable as a USB Device 1 (data capable as a Device)\nB29…27 SOP’ Product Type (Cable Plug/VPD) 001b ( Hub )\nB26 Modal Operation Supported 0 (doesn’t support Modes)\nB25…16 Reserved . Shall be set to zero. 0\nB15…0 16-bit unsigned integer. USB Vendor ID USB-IF assigned VID for this Hub vendor\nCert Stat VDO\nB31…0 32-bit unsigned integer USB-IF assigned XID for this Hub\nProduct VDO\nB31…16 16-bit unsigned integer. USB Product ID Product ID assigned by the Hub vendor\nB15…0 16-bit unsigned integer. bcdDevice Device version assigned by the Hub vendor\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1021C.2 Discover SVIDs Example\nC.2.1 Discover SVIDs Command request\nTable C.4, \"Discover SVIDs Command request from Initiator Example\" below shows the contents of the key fields in\nthe Message Header and VDM Header for an Initiator sending a Discover SVIDs Command request.\nTable C.4 Discover SVIDs Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1021,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1021,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) 0xFF00 ( PD SID )\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 2 (Discover SVIDs )\nPage 1022 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.2.2 Discover SVIDs Command response\nTable C.5, \"Discover SVIDs Command response from Responder Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for a Responder returning VDOs in response to a Discover SVIDs Command\nrequest. In this illustration, the value 3 in the Message Header Number of Data Objects field indicates that one VDO\ncontaining the supported SVIDs would be returned followed by a terminating VDO.\nNote: The last VDO returned (the terminator of the transmission) contains zero value SVIDs. If a SVID value is\nzero, it is not used.\nTable C.5 Discover SVIDs Command response from Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1022,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 3 (VDM Header + 2*VDO)\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1022,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) 0xFF00 ( PD SID )\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 2 (Discover SVIDs )\nVDO 1\nB31…16 SVID 0 SVID value\nB15…0 SVID 1 SVID value\nVDO 2\nB31…16 SVID 2 0x0000\nB15…0 SVID 3 0x0000\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1023C.3 Discover Modes Example\nC.3.1 Discover Modes Command request\nTable C.6, \"Discover Modes Command request from Initiator Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for an Initiator sending a Discover Modes Command request. The Initiator of the\nDiscover Modes Command AMS sends a Message Header with the Number of Data Objects field set to 1 followed\nby a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an Initiator and the\nCommand (B4…0) is set to 3 indicating Mode discovery.\nTable C.6 Discover Modes Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1023,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1023,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for which Modes are being requested\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 3 (Discover Modes )\nPage 1024 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.3.2 Discover Modes Command response\nThe Responder to the Discover Modes Command request returns a Message Header with the Number of Data\nObjects field set to a value of 1 to 7 (the actual value is the number of Mode objects plus one) followed by a VDM\nHeader with the Command Type (B7…6) set to 1 indicating the Command is from a Responder and the Command\n(B4…0) set to 3 indicating the following objects describe the Modes the device supports. If the ID is a VID, the\nstructure and content of the VDO is left to the vendor. If the ID is a SID, the structure and content of the VDO is\ndefined by the Standard.\nTable C.7, \"Discover Modes Command response from Responder Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for a Responder returning VDOs in response to a Discover Modes Command\nrequest. In this illustration, the value 2 in the Message Header Number of Data Objects field indicates that the\ndevice is returning one VDO describing the Mode it supports. It is possible for a Responder to report up to six\ndifferent Modes.\nTable C.7 Discover Modes Command response from Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1024,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 2 (VDM Header + 1 Mode VDO)\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1024,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for which Modes were requested\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 000b\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 3 (Discover Modes )\nMode VDO\nB31…0 Mode 1 Standard or Vendor defined Mode value\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1025C.4 Enter Mode Example\nC.4.1 Enter Mode Command request\nThe Initiator of the Enter Mode Command request sends a Message Header with the Number of Data Objects field\nset to 1 followed by a VDM Header with the Command Type (B7…6) set to 0 indicating the Command is from an\nInitiator and the Command (B4…0) set to 4 to request the Responder to enter its mode of operation and sets the\nObject Position field to the desired functional VDO based on its offset as received during Discovery.\nTable C.8, \"Enter Mode Command request from Initiator Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for an Initiator sending an Enter Mode Command request.\nTable C.8 Enter Mode Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1025,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1025,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for the Mode being entered\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8Object Position001b (a one in this field indicates a request to enter\nthe first Mode in list returned by Discover Modes )\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 4 (Enter Mode )\nPage 1026 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.4.2 Enter Mode Command response\nThe Responder that is the target of the Enter Mode Command request sends a Message Header with the Number of\nData Objects field set to a value of 1 followed by a VDM Header with the Command Type (B7…6) set to 1 indicating\nthe Command is from a Responder and the Command (B4…0) set to 4 indicating the Responder has entered the\nMode and is ready to operate.\nTable C.9, \"Enter Mode Command response from Responder Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for a Responder sending an Enter Mode Command response with an ACK .\nTable C.9 Enter Mode Command response from Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1026,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1026,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for the Mode entered\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 001b (offset of the Mode entered)\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 4 (Enter Mode )\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1027C.4.3 Enter Mode Command request with additional VDO.\nThe Initiator of the Enter Mode Command request sends a Message Header with the Number of Data Objects field\nset to 2 indicating an additional VDO followed by a VDM Header with the Command Type (B7…6) set to zero\nindicating the Command is from an Initiator and the Command (B4…0) set to 4 to request the Responder to enter\nits mode of operation and sets the Object Position field to the desired functional VDO based on its offset as received\nduring Discovery.\nTable C.10, \"Enter Mode Command request with additional VDO Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for an Initiator sending an Enter Mode Command request with an additional VDO.\nTable C.10 Enter Mode Command request with additional VDO Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1027,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1027,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for the Mode being entered\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8Object Position001b (a one in this field indicates a request to enter\nthe first Mode in list returned by Discover Modes )\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 4 (Enter Mode )\nIncluding Optional Mode specific VDO\nB31…0 Mode specific\nPage 1028 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.5 Exit Mode Example\nC.5.1 Exit Mode Command request\nThe Initiator of the Exit Mode Command request sends a Message Header with the Number of Data Objects field\nset to 1 followed by a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an\nInitiator and the Command (B4…0) set to 5 to request the Responder to exit its Mode of operation.\nTable C.11, \"Exit Mode Command request from Initiator Example\" shows the contents of the key fields in the Message\nHeader and VDM Header for an Initiator sending an Exit Mode Command request.\nTable C.11 Exit Mode Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1028,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1028,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for the Mode being exited\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8Object Position001b (identifies the previously entered Mode by its\nObject Position that is to be exited)\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 5 (Exit Mode )\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1029C.5.2 Exit Mode Command response\nThe Responder that receives the Exit Mode Command request sends a Message Header with the Number of Data\nObjects field set to a value of 1 followed by a VDM Header with the Command Type (B7…6) set to 1 indicating the\nCommand is from a Responder and the Command (B4…0) set to 5 indicating the Responder has exited the Mode and\nhas returned to normal USB operation.\nTable C.12, \"Exit Mode Command response from Responder Example\" shows the contents of the key fields in the\nMessage Header and VDM Header for a Responder sending an Exit Mode Command ACK response.\nTable C.12 Exit Mode Command response from Responder Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1029,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1029,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for the Mode exited\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 001b (offset of the Mode to be exited)\nB7…6 Command Type 01b ( Responder ACK )\nB5 Reserved 0\nB4…0 Command 5 (Exit Mode )\nPage 1030 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10C.6 Attention Example\nC.6.1 Attention Command request\nThe Initiator of the Attention Command request sends a Message Header with the Number of Data Objects field\nset to 1 followed by a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an\nInitiator and the Command (B4…0) set to 6 to request attention from the Responder .\nTable C.13, \"Attention Command request from Initiator Example\" shows the contents of the key fields in the Message\nHeader and VDM Header for an Initiator sending an Attention Command request.\nTable C.13 Attention Command request from Initiator Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1030,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 1 (VDM Header )\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1030,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for which attention is being requested\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 001b (offset of the Mode requesting attention)\nB7…6 Command Type 00b ( Initiator )\nB5 Reserved 0\nB4…0 Command 6 (Attention)\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1031C.6.2 Attention Command request with additional VDO.\nThe Initiator of the Attention Command request sends a Message Header with the Number of Data Objects field\nset to 2 indicating an additional VDO followed by a VDM Header with the Command Type (B7…6) set to zero\nindicating the Command is from a Responder and the Command (B4…0) set to 6 to request attention from the\nResponder .\nTable C.14, \"Attention Command request from Initiator with additional VDO Example\" shows the contents of the key\nfields in the Message Header and VDM Header for an Initiator sending an Attention Command request with an\nadditional VDO.\nTable C.14 Attention Command request from Initiator with additional VDO Example\nBit(s) Field Value\nMessage Header"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Reserved 0",
    "full_path": "15 Reserved 0",
    "page": 1031,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "14…12 Number of Data Objects 2 (VDM Header + VDO)\n11…9 MessageID 0…7"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Port Power Role 0 or 1",
    "full_path": "8 Port Power Role 0 or 1",
    "page": 1031,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "7…6 Specification Revision 10b ( Revision 3.x )\n5…4 Reserved 0\n3…0 Message Type 1111b ( Vendor Defined Message )\nVDM Header\nB31…16 Standard or Vendor ID (SVID) SVID for which attention is being requested\nB15 VDM Type 1 (Structured VDM )\nB14…13 Structured VDM Version (Major) 01b (Version 2.0)\nB12…11 Structured VDM Version (Minor) 01b (Version 2.1)\nB10…8 Object Position 001b (offset of the Mode requesting attention)\nB7…6 Command Type 000b ( Initiator )\nB5 Reserved 0\nB4…0 Command 6 (Attention)\nIncluding Optional Mode specific VDO\nB31…0 Mode specific\nPage 1032 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10D BMC Receiver Design Examples\nThe BMC signal is DC-coupled so that the voltage level is affected by the ground IR Drop . The DC offset of the BMC\nsignal at Power Source and Power Sink are in the opposite directions. When the VBUS current is increased from 0A,\nthe BMC signal waveform shifts downward at Power Sink and shifts upward at Power Source. This section\nintroduces two sample BMC receiver circuit implementations, which are immune from DC offset and high current\nload step. They can be used in Power Source, Power Sink and inside cables.\nD.1 Finite Difference Scheme\nD.1.1 Sample Circuitry\nThe sample Finite Difference BMC receiver shown in Figure D.1, \"Circuit Block of BMC Finite Difference\nReceiver\" consists of the Rx bandwidth limiting filter with the time constant tRxFilter , a sampler with the sampling\nstep ΔtS, 50ns, a Finite Difference Calculator which calculates the voltage difference between the time interval of\nΔtFD, 300ns, an edge detector controlled by two voltage thresholds, Vth, H and Vth, L and a logic block for bit\nrecognition.\nFigure D.1 Circuit Block of BMC Finite Difference Receiver\nD.1.2 Theory\nThis section describes the fundamental theory of Finite Difference Scheme to recover the received BMC signal with\nthe input and output signal waveforms of the circuit blocks shown in Figure D.1, \"Circuit Block of BMC Finite\nDifference Receiver\" . To illustrate the robustness of the implementation, the VBUS current load step rate is\nintentionally increased to 2A/µs at the Sink load. In Figure D.2, \"BMC AC and DC noise from V BUS at Power Sink\" (a),\nthe red curve represents the VBUS current measured at the Power Sink when the current is increased at 9 µs from\n0A to 5A and the blue dash curve represents the VBUS current measured at the USB Type-C ®connector of the power\nSink. In this example, the peak current overshoot with larger load step rate is increased to 518 mA which exceeds\niOvershoot . Figure D.2, \"BMC AC and DC noise from V BUS at Power Sink\" (b) shows the total BMC noise at Power Sink,\ncoupled from VBUS and D+/D- through the worst [USB Type-C 2.4] compliant cable, after the Rx bandwidth limiting\nfilter with the time constant tRxFilter is applied. The noise can be decomposed into 3 components. The first is the\nDC offset, IVBUS (t)*RGND, while IVBUS is the VBUS current and RGND is the ground DC resistance of the cable. The\noffset is negative in Power Sink and positive at Power Source. The second noise component is the inductive VBUS\nnoise, M*d IVBUS (t)/dt, while M is the mutual inductance between the VBUS and CC wires in the cable and d IVBUS (t)/\ndt is the load step rate. The third component is [USB 2.0] Full Speed SE0 coupling noise which would normally\noccur randomly but was assumed to occur periodically in the simulation to account for the crosstalk in any phase\nbetween the BMC and [USB 2.0] signals. In Figure D.3, \"Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with\nUSB 2.0 SE0 Noise\" , the blue dash curve represents the BMC signal when there is no VBUS current, and the red solid\ncurve represents the BMC signal affected by the VBUS coupling noise shown in Figure D.2, \"BMC AC and DC noise from\nVBUS at Power Sink\" (b). The green solid curve is the sample [USB 2.0] noise, after the Rx bandwidth limiting filter\nwith the time constant tRxFilter is applied.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1033Figure D.2 BMC AC and DC noise from V BUS at Power Sink\nFigure D.3 Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\nThe BMC signals shown in Figure D.3, \"Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\"\nare sampled every 50ns and the scaled derivative waveforms, Vcc(t) - Vcc (t - 50ns), without and with [USB 2.0]\nnoise are shown in Figure D.4, \"Scaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b)\nwith USB 2.0 Noise\" (a) and (b), respectively. In Figure D.4, \"Scaled BMC Signal Derivative with 50ns Sampling Rate\n(a) without USB 2.0 Noise (b) with USB 2.0 Noise\" (a), if there is no [USB 2.0] noise, the derivative waveform just\nchanges slightly before and after the VBUS current transition. That means, the slope of the BMC waveform is not\nsensitive to the DC offset and is very useful to be used to design a robust receiver against a large DC offset. However,\nthe derivative waveforms with [USB 2.0] noise have large perturbation as shown in Figure D.4, \"Scaled BMC Signal\nDerivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with USB 2.0 Noise\" (b).\nPage 1034 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure D.4 Scaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with USB"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "Noise",
    "full_path": "2.0 Noise",
    "page": 1034,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": "To remove the high frequency content of the [USB 2.0] noise, Finite Difference technique with the proper time\ninterval is applied to the BMC waveform with [USB 2.0] noise in Figure D.3, \"Sample BMC Signals (a) without USB"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2.0",
    "title": "SE0 Noise (b) with USB 2.0 SE0 Noise\" . Using Backward Finite Difference Calculator, ΔVcc = Vcc (t) - Vcc(t- Δt),",
    "full_path": "2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\" . Using Backward Finite Difference Calculator, ΔVcc = Vcc (t) - Vcc(t- Δt),",
    "page": 1034,
    "level": 2,
    "parent_id": "2",
    "tags": [],
    "content": "Figure D.5, \"BMC Signal and Finite Difference Output with Various Time Steps\" shows the Finite Difference Output\nwhile Δt = 500ns. The larger the time interval Δt is, the larger the peak-to-peak magnitude of the Finite Difference\nOutput will be. However, the time interval is bounded by the rise time of the BMC signal so that 300ns to 500ns is\na good range of the time interval.\nFigure D.5 BMC Signal and Finite Difference Output with Various Time Steps\nD.1.3 Data Recovery\nThe edge detection is followed by the Finite Difference Calculation. At the input of the edge detector, if the voltage\nis larger than Vth, H at the rising edge, the output will become high voltage level, VH, if the voltage is smaller than\nVth, L at the falling edge, the output will become low voltage level, VL. In this example, Vth, H and Vth, L are 0.2V and\n-0.2V, respectively. The solid curve in Figure D.6, \"Output of Finite Difference in dash line and Edge Detector in solid\nline\" represents the output of the edge detector, where VH is 0.5V and VL is -0.5V.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1035Figure D.6 Output of Finite Difference in dash line and Edge Detector in solid line\nThe duty cycle of the output signal from the edge detector varies depending on the thresholds, Vth, H and Vth, L, as\nwell as jitter and noise from silicon and channel. The techniques such as integrating receiver can be used to recover\nthe BMC signal.\nD.1.4 Noise Zone and Detection Zone\nFigure D.7, \"Noise Zone and Detect Zone of BMC Receiver\" shows the output of Finite Difference when the time\ninterval of Finite Difference is set to 300ns. The noise Zone is defined in between +Vnoise and -Vnoise, in which the\nnoise glitches occur. The detect zone is defined in between +Vdetect and -Vdetect, excluding the noise zone. The\nthresholds of the edge detectors, Vth, H and Vth, L, must be properly set within the detect zone so that the data can\nbe recovered successfully.\nIn this example, Vdetect is 250mV and Vnoise is 50mV. It is highly recommended that the product implemented\nwith the similar techniques indicates the performance with the range of Vnoise and Vdetect in the electrical\nspecification.\nFigure D.7 Noise Zone and Detect Zone of BMC Receiver\nPage 1036 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10D.2 Subtraction Scheme\nD.2.1 Sample Circuitry\nThe sample Subtraction BMC receiver shown in Figure D.8, \"Circuit Block of BMC Subtraction Receiver\" consists of\nthe two Low Pass Filters (LPF1 and LPF2), a Subtractor, an Edge Detector and a logic block for bit recognition. The\ntime constant of the first and second LPF are 200ns and 300ns, respectively. The Subtractor subtracts the LPF1\noutput from the LPF2 output. The Edge Detector controlled by two voltage thresholds, Vth, H and Vth, L to recover\nthe data.\nFigure D.8 Circuit Block of BMC Subtraction Receiver\nD.2.2 Output of Each Circuit Block\nFigure D.9, \"(a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\" (a) shows the output of LPF1 as\nthe red solid line and LPF2 as the blue dash line as well as the [USB 2.0] noise in green solid line. Figure D.9, \"(a)\nOutput of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\" (b) shows the voltage difference between the\ntwo output filters, Vdiff = Vcc_afterLPF1 - Vcc_afterLPF2. The Vdiff waveform looks very similar to the Finite\nDifference output waveform shown in Figure D.6, \"Output of Finite Difference in dash line and Edge Detector in solid\nline\" so that the data recovery method through the edge detector is the same as described in Section D.1.3, \"Data\nRecovery\" .\nFigure D.9 (a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\nD.2.3 Subtractor Output at Power Source and Power Sink\nThe following figures shows the example when the VBUS current increases from 0A to 5A and then decreases to 0A\nwith high load step rate. The output of the LPF1 and the Subtractor at Power Source and Power Sink are shown in\nFigure D.10, \"Output of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at Power Source (b)\nat Power Sink\" (a) and (b), respectively. Although the BMC signals at Power Source and Power Sink shift toward the\nopposite direction, the Subtractor outputs at Power Source and Power Sink are almost identical disregard of the\nopposite direction of the DC offset.\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1037Figure D.10 Output of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at Power\nSource (b) at Power Sink\nD.2.4 Noise Zone and Detection Zone\nThe zone definition is the same as defined in Section D.1.4, \"Noise Zone and Detection Zone\" . The sizes of the noise\nzone and detection zone of the Subtraction Scheme are dependent on the filter time constant. When the time\nconstant of the first and second LPF are 200ns and 300ns, respectively, Vdetect is 250mV and Vnoise is 50mV. It is\nhighly recommended that the product implemented with the similar techniques indicates the performance with\nthe range of Vnoise and Vdetect in the electrical specification.\nPage 1038 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10E FRS System Level Example\nE.1 Overview"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "Appendix E",
    "title": ", \"FRS System Level Example\" is intended to clarify Fast Role Swap (FRS) functionality at the system level",
    "full_path": "Appendix E , \"FRS System Level Example\" is intended to clarify Fast Role Swap (FRS) functionality at the system level",
    "page": 1038,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "through the use of an example implementation.\nFigure E.1, \"Example FRS Capable System\" is an example of a Hub and laptop implementation that supports Fast Role\nSwap (see Figure 7.16, \"V BUS Power during Fast Role Swap\" ). It is not the only possible Hub or laptop architecture.\nHowever, it is intended to provide an example system whose functionality is used here to illustrate how Fast Role\nSwap works.\nFigure E.1 Example FRS Capable System\nThis appendix describes two cases that cover a variety of behaviors that might be seen in practice.\n Slow VBUS Discharge where VBUS between the Hub and the laptop takes more than 15ms ( tFRSwapInit )\nto discharge below 5.5 V ( vSafe5V (max)). In this case the FR_Swap Message is sent by the laptop while\nVBUS is still greater than vSafe5V (max). See Figure E.2, \"Slow V BUS Discharge\" .\n Fast VBUS Discharge where VBUS between the Hub and the laptop discharges very quickly, perhaps be -\nfore the Fast Role Swap Request is even complete. See Figure E.3, \"Fast V BUS Discharge\" .\nHowever, neither the Hub nor the laptop can anticipate how quickly VBUS will discharge until the power adapter is\ndisconnected from an AC Supply or it is unplugged from the Hub .\nThe Fast Role Swap Request is the momentary low driven by the Hub on the CC wire which is detected by the laptop.\nFigure E.2, \"Slow V BUS Discharge\" and Figure E.3, \"Fast V BUS Discharge\" show the voltage seen on VBUS in\nrelationship to the Fast Role Swap Request They also show the transition between when the Hub stops supplying\nVBUS and when the laptop starts supplying VBUS.Notebook\nч\u0003\u0003ϵϬ\u0003 F\nFϱs\u0003\u0018\u0012\u0012\u0012\n2\nVBHub\nч\u0003\u0003ϭϬ\u0003 F Fϱs\u0003\u0018\u0012\u0018\u0012\u0018\u0012\nFWŽƌƚ\u0003ϭ\u0003\n\u0012ŽŶƚƌŽůůĞƌ\nFRS\n\u0012\u0012\n4\nVB\u0012\u0012\n1\nVB\nĚĞƚĞĐƚ ƐŝŐŶĂůPower\nAdapter\nF\u0004\u0012\nPeripheral\n\u0012\u0012\n3\nVBч\u0003\u0003ϭϬ\u0003 F\nFRSWŽƌƚ\u0003Ϯ\u0003\n\u0012ŽŶƚƌŽůůĞƌ\nĚĞƚĞĐƚ ^ŽƵƌĐĞ\u0003ŽŶ^ŽƵƌĐĞ\u0003ŽĨĨ\nŵŽŶŝƚŽƌŵŽŶŝƚŽƌ\n,ŽůĚͲhƉ\u0003\u0012ĂƉ\u0003\u0003\u0003\u0003,ϭ H3 ,ϮH4\nEϭ N3N4EϮVHubVB\nVNbVBч\u0003\u0003ϭϬ\u0003 F\n^ŝŶŬ\u0003ŽĨĨ\u0012ŚĂƌŐĞƌ\nŚŽůĚ\n\u0011ĂƚƚĞƌǇƚŝŵĞƌ\nH5H6\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1039Figure E.2 Slow V BUS Discharge\nOld Voltage\n0VvSafe5V(min)\ntSrcFRSwapуNew Source may\nturn on at any time after V\nBUSfalls below\nvSafe5V(max)VBUSat Hub &\nNotebookOld Source detects power loss and\nsignals Fast Role Swap\ntFRSwapTx\nCC\nN3 H2N1vSafe5V(max)VBUS voltage when it discharges slowly\n(assume very small cable IR drop prior to FR swap)\nVBUSat\nNotebook\nVBUSat\nHub\n0A+3ACurrent from Notebook to Hub\nIn this example the Notebook is drawing little current prior to the FRS signaling. In other cases it may be drawing more current.Cable IR\ndropOH1\nN2N4\n<iSnkStdbytSnkFRSwap\nPage 1040 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure E.3 Fast V BUS Discharge\nCable IR\ndrop Cable IR drop\nH2Old Voltage\n0VvSafe5V(min)\ntSrcFRSwap Old Source sends Fast\nRole Swap signaltFRSwapRxVBUSat\nNotebook\nCCVBUS voltage when it discharges quickly\nN4vSafe5V(max)\nVBUSat Hub\nN2\n0A\n-5A+3A\nIn this example the Notebook is drawing 5A prior to the FRS\nsignaling. In other cases it may be drawing less current.Current from Notebook to HubN1\ntSnkFRSwap\n<iSnkStdby\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1041E.2 FRS Initial Setup\nBefore a Fast Role Swap can occur, some initial setup steps are required. They require the laptop to discover\nwhether Fast Role Swap is supported by the Hub , the amount of current the Hub requires after a Fast Role Swap ,\nand whether the laptop is able and willing to provide that amount. They also ensure that the laptop supplies VCONN\nbefore, during and after an FRS. Table E.1, \"Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter\nfirst)\" and Table E.2, \"Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\" below\nshow two typical sequences that might be used to prepare a laptop to support Fast Role Swap .\nTable E.1 Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)\nStep # Hub Laptop"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Hub connected to power adapter",
    "full_path": "1 Hub connected to power adapter",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Hub is connected to laptop.",
    "full_path": "2 Hub is connected to laptop.",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Laptop sources 5 V to VBUS (vSafe5V ).",
    "full_path": "3 Laptop sources 5 V to VBUS (vSafe5V ).",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Laptop sources 5 V to VCONN"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Laptop reads the cable to check its current",
    "full_path": "4 Laptop reads the cable to check its current",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "carrying capability and/or if it is an Active Cable\nrequiring VCONN ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Laptop sends a Capabilities Message",
    "full_path": "5 Laptop sends a Capabilities Message",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Hub sends a Request Message",
    "full_path": "6 Hub sends a Request Message",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Hub and laptop establish an Explicit Contract with Hub as Sink .",
    "full_path": "7 Hub and laptop establish an Explicit Contract with Hub as Sink .",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Laptop sends a Get_Source_Cap Message to",
    "full_path": "8 Laptop sends a Get_Source_Cap Message to",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "determine how much power the Hub can provide."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "Hub sends a Source_Capabilities Message with the",
    "full_path": "9 Hub sends a Source_Capabilities Message with the",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Dual-Role Power bit set, and Unconstrained Power\nbit set, and Maximum Current > 0."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Since the Hub can supply power the laptop sends a",
    "full_path": "10 Since the Hub can supply power the laptop sends a",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "PR_Swap Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Hub sends an Accept Message and starts supplying",
    "full_path": "11 Hub sends an Accept Message and starts supplying",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "VBUS"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "Laptop sends a Get_Sink_Cap Message to",
    "full_path": "12 Laptop sends a Get_Sink_Cap Message to",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "determine the current required by the Hub to\nsupport an FRS. If the Hub does not support FRS or\nthe laptop cannot supply the required current, the\nlaptop Ignores any Fast Role Swap Request s it\nmight see."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "13",
    "title": "If the Hub can supply more than 3A, it initiates a",
    "full_path": "13 If the Hub can supply more than 3A, it initiates a",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "VCONN Swap to make to make itself the VCONN Source\nand reads the cable to check its current carrying\ncapability."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "Hub sends a Sink_Capabilities Message",
    "full_path": "14 Hub sends a Sink_Capabilities Message",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Laptop sends a Request Message",
    "full_path": "15 Laptop sends a Request Message",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "16",
    "title": "Hub and laptop establish an Explicit Contract with Hub as source.",
    "full_path": "16 Hub and laptop establish an Explicit Contract with Hub as source.",
    "page": 1041,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Page 1042 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-1017 If the laptop has detected that it is connected via\nan Active Cable (or one that supports Alternate\nMode s) and/or that it can support an FRS, it\ninitiates a VCONN Swap to make itself the VCONN\nSource . This removes a requirement that the Hub\nto hold up V CONN during the FRS."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "18",
    "title": "Normal PD Power traffic flow",
    "full_path": "18 Normal PD Power traffic flow",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "19",
    "title": "The Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.",
    "full_path": "19 The Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Table E.2 Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\nStep # Hub Laptop"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "0",
    "title": "Hub is connected to laptop.",
    "full_path": "0 Hub is connected to laptop.",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "Laptop sources 5 V to VBUS (vSafe5V ).",
    "full_path": "1 Laptop sources 5 V to VBUS (vSafe5V ).",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Laptop sources 5 V to VCONN"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Laptop reads the cable to check its current carrying",
    "full_path": "2 Laptop reads the cable to check its current carrying",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "capability and/or if it is an Active Cable requiring\nVCONN ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Laptop sends Source_Capabilities Message",
    "full_path": "3 Laptop sends Source_Capabilities Message",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Hub sends Request Message",
    "full_path": "4 Hub sends Request Message",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Hub and laptop establish an Explicit Contract with Hub as Sink .",
    "full_path": "5 Hub and laptop establish an Explicit Contract with Hub as Sink .",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Laptop sends a Get_Source_Cap Message to",
    "full_path": "6 Laptop sends a Get_Source_Cap Message to",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "determine how much power the Hub can provide"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Hub sends a Source_Capabilities Message with the",
    "full_path": "7 Hub sends a Source_Capabilities Message with the",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Dual-Role Power bit set, and Unconstrained Power\nbit cleared, and Maximum Current = 0."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Since the Hub cannot supply power, the laptop does",
    "full_path": "8 Since the Hub cannot supply power, the laptop does",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "not send a PR_Swap Message"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "The power adapter is connected to the Hub",
    "full_path": "9 The power adapter is connected to the Hub",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "If the Hub can source more than 3A, it initiates a VCONN",
    "full_path": "10 If the Hub can source more than 3A, it initiates a VCONN",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Swap to become the VCONN Source ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Hub reads the e-marker to determine the cable’s",
    "full_path": "11 Hub reads the e-marker to determine the cable’s",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "current carrying capability."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "Hub initiates a Power Role Swap to become the Source",
    "full_path": "12 Hub initiates a Power Role Swap to become the Source",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "13",
    "title": "Hub sends a Source_Capabilities Message with the",
    "full_path": "13 Hub sends a Source_Capabilities Message with the",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Unconstrained Power bit set and Maximum Current >\n0."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "14",
    "title": "Hub and laptop establish an Explicit Contract with Hub as source.",
    "full_path": "14 Hub and laptop establish an Explicit Contract with Hub as source.",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "15",
    "title": "Laptop sends a Get_Sink_Cap Message to determine",
    "full_path": "15 Laptop sends a Get_Sink_Cap Message to determine",
    "page": 1042,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "the current required by the Hub to support an FRS. If\nthe Hub does not support FRS or the laptop cannot\nsupply the required current, the laptop Ignores any\nFast Role Swap Request s it might see.Table E.1 Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)\nStep # Hub Laptop\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 104316 If the laptop has detected that it is connected via an\nActive Cable (or one that supports Alternate Mode s)\nand/or that it can support an FRS, it initiates a VCONN\nSwap to make itself the VCONN Source . This removes\na requirement that the Hub also hold up VCONN\nduring the FRS."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "17",
    "title": "The Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.Table E.2 Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)",
    "full_path": "17 The Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.Table E.2 Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)",
    "page": 1043,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Step # Hub Laptop\nPage 1044 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10E.3 FRS Process\nAfter the initial setup is completed and the laptop has determined both that the Hub can request FRS and that the\nlaptop is able and willing to supply the requested current, the system is ready to support FRS. This section\ndescribes the sequence of events that take place during a Fast Role Swap . The following figures and tables do not\ncover the actions of the Device Policy Manager or the Policy Engine. Those actions occur orthogonally to the\nelectrical events shown in this appendix. However, the diagrams do indicate the inputs/outputs where the DPM\nand Policy Engine interact with the electrical events:\n The laptop sends the FR_Swap Message to initiate the FRS AMS (see Figure 7.43, \"Transition Diagram for\nFast Role Swap\" ) within 15ms after the laptop detects the Fast Role Swap Request on CC.\n The laptop sends the final PS_RDY Message in the FRS AMS only after it is sourcing VBUS.\nFigure E.4 Slow V BUS discharge after FR_Swap message is sent\ndischarging to vSafe5V(max)Notebook:\nFRS signal detected\nOld Sink (old current)New Sink (0.5A, 0.9A, 1.5A, or 3.0A)AdapterHubPower Path\nNotebook\nPower Path\nV\nBUSVoltage\nVBUSCurrentPower Path\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentHub:\nAdapter\nMains Loss\nDetected\nNew Source = vSafe5V SinkSourceHub:\nVBUS>vSafe5V (min)\nand sinking\nNotebook:\nSourcing 5V\nSource vSafe5V Wait to SourceSink Waiting to Sink\nTurning on SourceSignals to/\nfrom DPM &\nPolicy\nEngineHub:\nSend FRS\nsignal\nH1H2\nN1\nN4 N3Notebook:\nInitiates FRS message sequence\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 1045Table E.3 Sequence for slow V BUS discharge (it discharges after FR_Swap message is sent)\nStep # Hub Laptop"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "The power adapter’s AC Supply power is lost.",
    "full_path": "1 The power adapter’s AC Supply power is lost.",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Hub detects the power adapter disconnect (H1) as",
    "full_path": "2 Hub detects the power adapter disconnect (H1) as",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "quickly as possible."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Hub sends Fast Role Swap Request on CC (H2) and",
    "full_path": "3 Hub sends Fast Role Swap Request on CC (H2) and",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "starts monitoring VHubVB (H3). Hub also starts a\ntSnkFRSwap timer after the FRS signal begins and\nVBUS has fallen below vSafe5V (min)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Laptop detects Fast Role Swap Request on CC (N1)",
    "full_path": "4 Laptop detects Fast Role Swap Request on CC (N1)",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "that triggers sending of the FR_Swap Message . This\ncan happen at any point in the following steps so\nlong as it is within 15 ms ( tFRSwapInit )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Laptop opens the sinking switch (N2), as quickly as",
    "full_path": "5 Laptop opens the sinking switch (N2), as quickly as",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "possible to minimize power drained from Hub after\nthe Fast Role Swap Request ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Laptop begins monitoring VBUS (N3) to know when",
    "full_path": "6 Laptop begins monitoring VBUS (N3) to know when",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "to turn the laptop into a Source\n."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Hub opens the sourcing switch (H4) while VHubVB >",
    "full_path": "7 Hub opens the sourcing switch (H4) while VHubVB >",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "5.5V (after the Fast Role Swap Request is sent).\nHowever, the sourcing switch (H4) must be kept\nclosed until VHubVB is as close to 5.5V as possible. It is\nimportant for the Hub to open its sourcing switch (H4)\nbefore the laptop’s sourcing switch (N4) gets closed to\nminimize inrush current."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "8",
    "title": "Hub closes the switch (H5) to use the hold-up",
    "full_path": "8 Hub closes the switch (H5) to use the hold-up",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "capacitor to supply VBUS to the peripheral(s).\nSystems with a holding cap permanently in place do\nnot need the switch (H5). Hub does not draw more\nthan iSnkStdby from VBUS, until the tSnkFRSwap timer\nexpires."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "Laptop detects VBUS < VNbVB (N1) before closing the",
    "full_path": "9 Laptop detects VBUS < VNbVB (N1) before closing the",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "sourcing switch (N4) when VNbVB is as close as\npossible to 5.5V. This minimizes the time when VBUS\nis not sourced."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Laptop closes sourcing switch (N4). When this",
    "full_path": "10 Laptop closes sourcing switch (N4). When this",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "occurs the Hub ’s input capacitance on VBUS will be\nless than 10 F (cSnkBulk )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Hub ’s tSnkFRSwap timer expires (H6).",
    "full_path": "11 Hub ’s tSnkFRSwap timer expires (H6).",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "Hub draws up to the current it Advertise d in the Fast",
    "full_path": "12 Hub draws up to the current it Advertise d in the Fast",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Role Swap required USB Type-C Current field of its\nSink_Capabilities Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "13",
    "title": "Hub s with (H5) will open (H5) and remove the Hold-",
    "full_path": "13 Hub s with (H5) will open (H5) and remove the Hold-",
    "page": 1045,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Up capacitor.\nPage 1046 Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10Figure E.5 V BUS discharges quickly before FR_Swap message is sent after adapter disconnected\nTable E.4 V BUS discharges quickly after adapter disconnected\nStep # Hub Laptop"
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "1",
    "title": "The power adapter is Detached from the Hub .",
    "full_path": "1 The power adapter is Detached from the Hub .",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "2",
    "title": "Hub detects power adapter disconnect (H1) causing",
    "full_path": "2 Hub detects power adapter disconnect (H1) causing",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "VHubVB to drop below 5.5V very rapidly."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "3",
    "title": "Hub sends Fast Role Swap Request on CC (H2) and starts",
    "full_path": "3 Hub sends Fast Role Swap Request on CC (H2) and starts",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "monitoring VHubVB (H3). Hub opens sourcing switch\n(H4). Hub also starts a tSnkFRSwap timer."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "4",
    "title": "Hub closes the switch (H5) to use the hold-up",
    "full_path": "4 Hub closes the switch (H5) to use the hold-up",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "capacitor to supply VBUS to the peripheral(s).\nSystems with a holding cap permanently in place do\nnot need the switch (H5). Hub does not draw more\nthan iSnkStdby from VBUS, until the tSnkFRSwap\ntimer expires."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "5",
    "title": "Laptop detects Fast Role Swap Request on CC (N1)",
    "full_path": "5 Laptop detects Fast Role Swap Request on CC (N1)",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "that triggers sending of the FR_Swap Message . This\ncan happen at any point in the following steps so\nlong as it is within 15 ms ( tFRSwapInit )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "6",
    "title": "Laptop opens the sinking switch (N2), as quickly as",
    "full_path": "6 Laptop opens the sinking switch (N2), as quickly as",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "possible to minimize power drained from Hub after\nthe Fast Role Swap Request ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "7",
    "title": "Laptop begin monitoring VBUS (N3) to know when",
    "full_path": "7 Laptop begin monitoring VBUS (N3) to know when",
    "page": 1046,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "to turn the laptop into a Source\n. Hub:\nStart Fast\nSwap Signal\nNotebook:\nFRS signal\ndetected\nOld SinkNew Sink (0.5A, 0.9A, 1.5A, or 3.0A)AdapterSink Port\nDevice Policy Mgr\nSink Port\nPower Path\nSource Port\nVoltage\nSink Port\nCurrentSignals to/\nfrom DPM &\npolicy\nengine\nSource Port\nInteraction\nSink Port\nInteraction\nSource\nVBUSVoltage\nSink\nVBUSCurrentHub:\nAdapter\nDetached\nDetected\nNew Source = vSafe5V SinkSourceHub:\nVBUS<\nvSafe5V\n(max)\nSource vSafe5VTurning On\nSourceSinkH1H2\nN1H4\nWaiting to Sink\nvSafe5V (max)Hub:\nVBUS>vSafe5V\nand sinking\nNotebook:\nSourcing 5V\nN4N3\nN2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10 Page 10478 Laptop detects VBUS < VNbVB (N3)."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "9",
    "title": "Laptop closes sourcing switch (N4). When this",
    "full_path": "9 Laptop closes sourcing switch (N4). When this",
    "page": 1047,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "occurs the Hub ’s input capacitance on VBUS will be\nless than 10 F (cSnkBulk )."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "10",
    "title": "Hub ’s tSnkFRSwap timer expires (H6).",
    "full_path": "10 Hub ’s tSnkFRSwap timer expires (H6).",
    "page": 1047,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": ""
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "11",
    "title": "Hub draws up to the current it Advertise d in the Fast",
    "full_path": "11 Hub draws up to the current it Advertise d in the Fast",
    "page": 1047,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Role Swap required USB Type-C Current field of its\nSink_Capabilities Message ."
  },
  {
    "doc_title": "USB Power Delivery Specification",
    "section_id": "12",
    "title": "Hub s with (H5) will open (H5) and remove the Hold-",
    "full_path": "12 Hub s with (H5) will open (H5) and remove the Hold-",
    "page": 1047,
    "level": 1,
    "parent_id": null,
    "tags": [],
    "content": "Up capacitor.Table E.4 V BUS discharges quickly after adapter disconnected\nStep # Hub Laptop"
  }
]